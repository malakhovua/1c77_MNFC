// ===============================
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
// ===============================

Перем ТекСтрокаВТаблицеМФ; // текущая строка в таблице значений  МФ 

// используются для стандартного механизма кнопок "Обновить" и "Настройка"
Перем Таб;
Перем Обновить;
Перем Расшифровка;
                        
// переменные предназначены для механизма универсальных группировок отчета
Перем СписокГруппировок;
Перем КоличествоГруппировок;
Перем НомерГруппировкиПоТМЦ;

// переменные предназначены для запроса по периодам
Перем Запрос,ЗапросСПериодами,ТаблицаПериодов,Периодичность;
Перем Язык, УкрГруппировки;

Перем Дата1, Дата2;
Перем ПечФирма, ПечВидДеятельности, ПечПодразделение, ПечЗаказ, ПечПродукция;
Перем ПечЕГРПОУ, ПечГлавныйБухгалтер, ПечЕдиницаПродукции, НомПП, Выпуск;
Перем фДавальческая;

Перем ГруппировкиПоДвижениям;

// ===============================
// "СЛУЖЕБНЫЕ" ПРОЦЕДУРЫ И ФУНКЦИИ
// ===============================

// ===============================
// ВыбратьПоФильтру()
//
// Параметры:
//  Нет
//
// Описание:
//  Открывает обработку отбора элементов по произвольному фильтру
//
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру


// ===============================
// ПерерисовкаНазванийЗакладок
//
// Параметры:
// 	Нет
//
// Описание:
//  Добавляет "(!)" в заголовок закладки с множественным фильтром, когда этот фильтр задан
//
Функция ПерерисовкаНазванийЗакладок()      

	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
	
КонецФункции // ПерерисовкаНазванийЗакладок	

// ===============================
// УправлениеДиалогом()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Управление доступностью элементов диалога.
//
Процедура УправлениеДиалогом()
	
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда           
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе     
		Форма.ИспользоватьСлой("Шапка,МФ,Подвал");
	КонецЕсли;
	
КонецПроцедуры //УправлениеДиалогом()   

// ===============================
// УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
//
// Параметры:  ТекстЗапроса - переданный по ссылке текст запроса
// 			   ТекстЗагол   - переданный по ссылке текст заголовка
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Дополняет строку запроса и заголовка в соответствии с выбранными группировками.
//       
Процедура УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
	                       
	СписокГруппировок = СоздатьОбъект("СписокЗначений");
	НомерГруппировкиПоТМЦ = 9999;
	
	Для Сч=1 По Группировки.РазмерСписка() Цикл
		
		Если Группировки.Пометка(Сч)=1 Тогда
			ПредставлениеГрупп=""; УкрПредставлениеГрупп="";
			ТекстГрупп		= Группировки.ПолучитьЗначение(Сч,ПредставлениеГрупп);
			УкрГруппировки.ПолучитьЗначение(УкрГруппировки.НайтиЗначение(ТекстГрупп),УкрПредставлениеГрупп);
			
			ТекстБезУпорядочивания = ?((ТекстГрупп = "Заказ") И (глОптимизацияОтчетов = 1) , " без упорядочивания", "");
			ТекстБезГрупп = ?((ТекстГрупп = "Подразделение") Или (ТекстГрупп = "Продукция"), " без групп", "");
			
			ТекстЗапроса 	= ТекстЗапроса 	+ "Группировка "+ТекстГрупп+ТекстБезУпорядочивания+ТекстБезГрупп+";";
			ТекстЗагол	= ТекстЗагол + " / "+?(Язык="у",УкрПредставлениеГрупп,ПредставлениеГрупп);
			СписокГруппировок.ДобавитьЗначение(ТекстГрупп,ПредставлениеГрупп);
			Если  (ТекстГрупп = "Продукция") Тогда
			    НомерГруппировкиПоТМЦ = СписокГруппировок.РазмерСписка();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	Если ПустаяСтрока(ТекстЗагол)=0 Тогда // удаляем ведущий разделитель " / "
		ТекстЗагол = Сред(ТекстЗагол,4)
	КонецЕсли;
КонецПроцедуры // УстановитьГруппировкиЗапроса()

// ===============================
Процедура ПредопределенныеНастройки()
	Меню = СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("ПоВсем", 				"По всем измерениям");
	Меню.ДобавитьЗначение("БезЗаказов", 			"По всем, кроме заказов");
	Значение = "";
	Если Меню.ВыбратьЗначение(Значение, , , , 1) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Группировки.УдалитьВсе();
	Если Значение = "ПоВсем" Тогда
		Группировки.ДобавитьЗначение("Фирма", 			"Фирма (обязательная)");
		Группировки.ДобавитьЗначение("ВидДеятельности", "Вид деятельности");           
		Группировки.ДобавитьЗначение("Подразделение",	"Подразделение");
		Группировки.ДобавитьЗначение("Продукция", 		"Продукция (обязательная)");
		Группировки.ДобавитьЗначение("Заказ", 			"Заказ");
		Группировки.ДобавитьЗначение("СтатьяКалькуляции","Статья калькуляции (обязательно последняя)");
		
		Группировки.Пометка(1,1);
		Группировки.Пометка(2,1);
		Группировки.Пометка(3,1);
		Группировки.Пометка(4,1);
		Группировки.Пометка(5,1);
		Группировки.Пометка(6,1);
	ИначеЕсли Значение = "БезЗаказов" Тогда
		Группировки.ДобавитьЗначение("Фирма", 			"Фирма (обязательная)");
		Группировки.ДобавитьЗначение("ВидДеятельности", "Вид деятельности");           
		Группировки.ДобавитьЗначение("Подразделение",	"Подразделение");
		Группировки.ДобавитьЗначение("Продукция", 		"Продукция (обязательная)");
		Группировки.ДобавитьЗначение("Заказ", 			"Заказ");
		Группировки.ДобавитьЗначение("СтатьяКалькуляции","Статья калькуляции (обязательно последняя)");
		
		Группировки.Пометка(1,1);
		Группировки.Пометка(2,1);
		Группировки.Пометка(3,1);
		Группировки.Пометка(4,1);
		Группировки.Пометка(5,0);
		Группировки.Пометка(6,1);
	КонецЕсли;
КонецПроцедуры // КнопкаНастройкиГруппировок

// ===============================
// ВывестиГруппировки(Ном)
//
// Параметры:
//	Ном - номер выводимой группировки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Выводит в печатную форму одну группировку запроса. Если
//	Есть нижележащие группировки, они выводятся также с использованием рекурсивного
//	вызова этой же процедуры.
//
Процедура ВывестиГруппировки(Ном=1)
	Если Ном <= КоличествоГруппировок Тогда                           
		НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(Ном);
		Пока Запрос.Группировка(Ном) = 1 Цикл
			// запоминаем значения вышестоящих группировок
			Если НазваниеГруппировки = "Фирма" Тогда
				ТекФирма = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
				Если ПустоеЗначение(ТекФирма) = 1 Тогда
				    Продолжить;
				КонецЕсли;
				ПечФирма = ТекФирма.ПолнНаименование;
				ПечГлавныйБухгалтер = глФИО(ТекФирма.ГлавныйБухгалтер.Получить(Дата2),1);
				ПечЕГРПОУ = ТекФирма.ЕДРПОУ;
			ИначеЕсли НазваниеГруппировки = "ВидДеятельности" Тогда
				ТекВидДеятельности = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
				Если ПустоеЗначение(ТекВидДеятельности) = 1 Тогда
				    Продолжить;
				КонецЕсли;
				ПечВидДеятельности = Строка(ТекВидДеятельности);
			ИначеЕсли НазваниеГруппировки = "Подразделение" Тогда
				ТекПодразделение = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
				Если ПустоеЗначение(ТекПодразделение) = 1 Тогда
				    Продолжить;
				КонецЕсли;
				ПечПодразделение = Строка(ТекПодразделение);
			ИначеЕсли НазваниеГруппировки = "Заказ" Тогда
				ТекЗаказ = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
				фДавальческая = 0;
				Если ПустоеЗначение(ТекЗаказ) = 1 Тогда
				    ПечЗаказ = ?(Язык = "у", "Без замовлення", "Без заказа");
				Иначе
					фДавальческая = глЭтоДавальческийЗаказ(ТекЗаказ);
					ПечЗаказ = ""+глДокументВОтчете(ТекЗаказ,"с номером","с датой",Язык);
				КонецЕсли;
			ИначеЕсли НазваниеГруппировки = "Продукция" Тогда
				ТекПродукция = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
				Если ПустоеЗначение(ТекПродукция) = 1 Тогда
				    Продолжить;
				КонецЕсли;
				ПечПродукция = СокрЛП(ТекПродукция.ПолнНаименование);
				ПечЕдиницаПродукции = ТекПродукция.БазоваяЕдиница;
			ИначеЕсли НазваниеГруппировки = "СтатьяКалькуляции" Тогда
				ТекСтатьяКалькуляции = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
				Если ПустоеЗначение(ТекСтатьяКалькуляции) = 1 Тогда
				    Продолжить;
				КонецЕсли;
				ПечСтатьяКалькуляции = ТекСтатьяКалькуляции.ПолнНаименование;
			КонецЕсли;
			
			Расшифровка.Установить("Выб"+НазваниеГруппировки, Запрос.ПолучитьАтрибут(НазваниеГруппировки));
			Расшифровка.Установить("фВыделятьДавСоставляющую", фДавальческая);
			
			Если Ном = КоличествоГруппировок - 1 Тогда
			    // предпоследняя группировка, осталось вывести статьи калькуляции
				Выпуск = Запрос.Выпуск;
				ПечВыпуск = Формат(Выпуск,"Ч10.3") + " " + ПечЕдиницаПродукции;
				ПечНаименованиеПродукции = ПечПродукция;
				Если фДавальческая = 1 Тогда
				    ПечНаименованиеПродукции = ?(Язык = "у", "Послуги з виробництва """, "Услуги по производству """) + ПечПродукция + """";
				КонецЕсли;
				
				Таб.ВывестиСекцию("Шапка");
				НомПП = 1;
			ИначеЕсли Ном = КоличествоГруппировок Тогда
				// статьи калькуляции
				Кво = Запрос.Кво;
				Сумма = Запрос.ФактСумма;
				СуммаДав = Запрос.СуммаДав;
				СуммаСобств = Сумма - СуммаДав;
				
				ПечКво = Формат(Кво,"Ч10.3");
				ПечСумма = глФРМ(Сумма,Гривня,0);
				ПечСуммаДав = глФРМ(СуммаДав,Гривня,0);
				ПечСуммаСобств = глФРМ(СуммаСобств,Гривня,0);
				ПечКвоЗаЕдиницу = "-";
				ПечСуммаЗаЕдиницу = "-";
				Если Выпуск <> 0 Тогда
					ПечКвоЗаЕдиницу = Формат(Кво/Выпуск,"Ч10.3");
					ПечСуммаЗаЕдиницу = глФРМ(Сумма/Выпуск,Гривня,0);
					ПечСуммаДавЗаЕдиницу = глФРМ(СуммаДав/Выпуск,Гривня,0);
					ПечСуммаСобствЗаЕдиницу = глФРМ(СуммаСобств/Выпуск,Гривня,0);
				КонецЕсли;
				
				Таб.ВывестиСекцию("СтатьяКалькуляции");
				
				Если (фДавальческая = 1) и (СуммаДав <> 0) Тогда
				    // есть давальческая составляющая
					Таб.ВывестиСекцию("СтатьяКалькуляцииДавСобств");
				КонецЕсли;
				
				НомПП = НомПП + 1;
			КонецЕсли;

			// если есть более детальная группировка - выведем ее
			Если КоличествоГруппировок > Ном Тогда
				ВывестиГруппировки(Ном+1);
			КонецЕсли;
			
			Если Ном = КоличествоГруппировок - 1 Тогда
			    // предпоследняя группировка, статьи калькуляции выведены
				Кво = Запрос.Кво;
				Сумма = Запрос.ФактСумма;
				СуммаДав = Запрос.СуммаДав;
				СуммаСобств = Сумма - СуммаДав;
				
				ПечКво = Формат(Кво,"Ч10.3");
				ПечСумма = глФРМ(Сумма,Гривня,0);
				ПечСуммаДав = глФРМ(СуммаДав,Гривня,0);
				ПечСуммаСобств = глФРМ(СуммаСобств,Гривня,0);
				ПечКвоЗаЕдиницу = "-";
				ПечСуммаЗаЕдиницу = "-";
				Если Выпуск <> 0 Тогда
					ПечКвоЗаЕдиницу = Формат(Кво/Выпуск,"Ч10.3");
					ПечСуммаЗаЕдиницу = глФРМ(Сумма/Выпуск,Гривня,0);
					ПечСуммаДавЗаЕдиницу = глФРМ(СуммаДав/Выпуск,Гривня,0);
					ПечСуммаСобствЗаЕдиницу = глФРМ(СуммаСобств/Выпуск,Гривня,0);
				КонецЕсли;
				
				Таб.ВывестиСекцию("Итого");
				
				Если (фДавальческая = 1) и (СуммаДав <> 0) Тогда
				    // есть давальческая составляющая
					Таб.ВывестиСекцию("ИтогоДавСобств");
				КонецЕсли;
				Таб.ВывестиСекцию("Дно");
				Таб.НоваяСтраница();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ВывестиГруппировки()


// ===============================
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА
// ===============================

// СПЕЦИФИЧЕСКОЕ ДЛЯ ЭТОГО ОТЧЕТА УПРАВЛЕНИЕ ГРУППИРОВКАМИ
// (группировки по фирме, продукции и статье калькуляции - обязательные,
// группировка по статье калькуляций всегда последняя)
// ===============================
Процедура ИзменениеПорядкаГрупп(Групп, Направл)
	// последней всегда должна быть группировка по статье калькуляции
	Если (Групп.ТекущаяСтрока() = Групп.РазмерСписка()) и (Направл = -1) Тогда
	    // нельзя
	ИначеЕсли (Групп.ТекущаяСтрока() = Групп.РазмерСписка() - 1) и (Направл = 1) Тогда
	    // нельзя
	Иначе
		глИзменениеПорядкаГрупп(Групп,Направл);
	КонецЕсли;
КонецПроцедуры //ИзменениеПорядкаГрупп

// ===============================
Процедура ПометкаТаблицыГруппировок(Групп,Пометка)
	глПометкаТаблицыГруппировок(Групп,Пометка);
	Для Инд = 1 По Групп.РазмерСписка() Цикл
		ИмяГруппировки = Групп.ПолучитьЗначение(Инд);
		Если (ИмяГруппировки = "Фирма") или  (ИмяГруппировки = "Продукция") или (ИмяГруппировки = "СтатьяКалькуляции") Тогда
		    // должна быть всегда установлена
			Группировки.Пометка(Инд, 1)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ПометкаТаблицыГруппировок


//============================
Процедура ИзмПериод(Знач Мес)
	Дата2 = КонМесяца(ДобавитьМесяц(Дата2,Мес));
КонецПроцедуры

// ===============================
Функция УстДоступность()
	стрПериод = ПериодСтр(НачМесяца(Дата2),КонМесяца(Дата2));
	
	Форма.кХФирма.Доступность(1-ПустоеЗначение(ВыбФирма));
	Форма.кХВидДеятельности.Доступность(1-ПустоеЗначение(ВыбВидДеятельности));
	Форма.кХПодразделение.Доступность(1-ПустоеЗначение(ВыбПодразделение));
	Форма.кХПродукция.Доступность(1-ПустоеЗначение(ВыбПродукция));
	Форма.кХЗаказ.Доступность(1-ПустоеЗначение(ВыбЗаказ));

	ТекНомерГруппировки = Группировки.ТекущаяСтрока();
	Если ТекНомерГруппировки <> 0 Тогда
		ИмяГруппировки = Группировки.ПолучитьЗначение(ТекНомерГруппировки);
		Если (ИмяГруппировки = "Фирма") или  (ИмяГруппировки = "Продукция") или (ИмяГруппировки = "СтатьяКалькуляции") Тогда
		    Группировки.Пометка(ТекНомерГруппировки, 1)
		КонецЕсли;
	КонецЕсли;
КонецФункции //УстДоступность

// ===============================
// Сформировать(ЗакрытьДиалог=0)
//
// Параметры:
//   ЗакрытьДиалог - флаг того, что после формирования отчета надо закрыть диалог	
//
// Возвращаемое значение: 
//	Нет
// 
// Вызывается из формул элементов диалога:
//   кнопки "Сформировать" и "ОК"
//
// Описание:   
//	Запускает отчет.
//
Процедура Сформировать(ЗакрытьДиалог=0)
	Перем ТекстЗапроса;
	
	Дата1 = НачМесяца(Дата2);
	глПроверкаДаты(Дата1,Дата2);
	
	ПечФорма = "Таблица";
	Язык = глЯзык(ПечФорма); 
	глУстПропись(Гривня,Язык);
	
	ПечВидДеятельности = ?(Язык="у","По всім","По всем");
	ПечПодразделение = ПечВидДеятельности;
	фДавальческая = 0;
	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;
	Таб.ИсходнаяТаблица(ПечФорма);
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "Калькуляции");
	
	// все настройки помещаем в список
	Расшифровка.Установить("Дата1", 		Дата1);
    Расшифровка.Установить("Дата2", 		Дата2);
	Расшифровка.Установить("ВыбФирма",		ВыбФирма);
	
	Расшифровка.Установить("ВыбВидДеятельности",	ВыбВидДеятельности);
	Расшифровка.Установить("ВыбПодразделение",		ВыбПодразделение);
	Расшифровка.Установить("ВыбПродукция",			ВыбПродукция);
	Расшифровка.Установить("ВыбЗаказ",				ВыбЗаказ);
	Расшифровка.Установить("Группировки",			Группировки);
	
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблицеМФ,Контекст); // записываем изменения если они были

	// запомним МФ только если он задан
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ);
	КонецЕсли;
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ЗапросСПериодами = СоздатьОбъект("Запрос");
	               
	Если Дата2 >= ПолучитьДатуТА() Тогда
		ТекстЗапроса = "
			|Период с Дата1;";
	Иначе 
		ТекстЗапроса = "
			|Период с Дата1 по Дата2;";
	КонецЕсли;
	
    // запрос с учетом количества выпущенной продукции
	ТекстЗапроса = ТекстЗапроса + "
	|Фирма 			= Регистр.ПроизводственныеЗатраты.Фирма,Регистр.ВыпускПродукции.Фирма;
	|ВидДеятельности= Регистр.ПроизводственныеЗатраты.ВидДеятельности,Регистр.ВыпускПродукции.ВидДеятельности;
	|Подразделение	= Регистр.ПроизводственныеЗатраты.Подразделение,Регистр.ВыпускПродукции.Подразделение;
	|Продукция		= Регистр.ПроизводственныеЗатраты.Продукция,Регистр.ВыпускПродукции.Продукция;
	|Заказ			= Регистр.ПроизводственныеЗатраты.Заказ,Регистр.ВыпускПродукции.Заказ;
	|СтатьяКалькуляции = Регистр.ПроизводственныеЗатраты.ВидЗатрат.СтатьяКалькуляции;
	|_Сумма			= Регистр.ПроизводственныеЗатраты.Сумма;
	|_СуммаДав		= Регистр.ПроизводственныеЗатраты.СуммаДав;
	|_Кво			= Регистр.ПроизводственныеЗатраты.Количество;
	|_Выпуск		= Регистр.ВыпускПродукции.Количество;
	|Функция ФактСумма	= Расход(_Сумма);
	|Функция СуммаДав	= Расход(_СуммаДав);
	|Функция Кво		= Расход(_Кво);
	|Функция Выпуск		= Сумма(_Выпуск);
	|";
	
	Загол="";
	
	НетОш = 1; // нет ошибок при наложении фильтров
	
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Фирма",				ВыбФирма,				"ВыбФирма",				ТекстЗапроса,Загол,Язык);
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ,"ВидДеятельности",	ВыбВидДеятельности,		"ВыбВидДеятельности",	ТекстЗапроса,Загол,Язык);
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Подразделение",		ВыбПодразделение,		"ВыбПодразделение",		ТекстЗапроса,Загол,Язык);
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Продукция",			ВыбПродукция,			"ВыбПродукция",			ТекстЗапроса,Загол,Язык,"КатегорииТоваров");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Заказ",				ВыбЗаказ,				"ВыбЗаказ",				ТекстЗапроса,Загол,Язык);
	
	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПечЗаголовокСтолбца = "";
	ТекстГруппировок = "";
	
	УстановитьГруппировкиЗапроса(ТекстГруппировок, ПечЗаголовокСтолбца);
	КоличествоГруппировок = СписокГруппировок.РазмерСписка();
	
	Если КоличествоГруппировок > 7 Тогда
		Предупреждение("Нельзя сделать больше 7 группировок!",60);
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстГруппировок;
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;  
	
	глЧислоСтрок = 0;

	Таб.ВывестиСекцию("Кнопки");
	
	// в  дальнейшем строки расшифровываем через отчет ФактическаяСебестоимостьПродукции
	Расшифровка.Установить("Отчет", "ФактическаяСебестоимостьПродукции");
	Расшифровка.Установить("Обновить",0);
	Расшифровка.Установить("ТаблицаМФ", 0);
	Расшифровка.Установить("СписокПериодов",1);
	Расшифровка.Установить("фСебестоимостьЗаЕдиницу",1);
	Расшифровка.Установить("фТипСуммНачОст",0); 
	Расшифровка.Установить("фТипСуммПриход",0); 
	Расшифровка.Установить("фТипСуммРасход",1); // движения по расходу
	Расшифровка.Установить("фТипСуммКонОст",0); 

	Расшифровка.Установить("Группировки",ГруппировкиПоДвижениям);
	
	глОживить(1);
	
	Таб.Опции(0, 0, 0, 0, "Калькуляции", "Калькуляции");
	                         
	// ВЫВОД ГРУППИРОВОК ЗАПРОСА
	ВывестиГруппировки();
	
	Таб.ОбластьПечати(2);
	
	// Вывод заполненной формы
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);

	Таб.Показать("Калькуляции", ""); 
	
	Если (Обновить = 2)ИЛИ(ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;   
	глУстПропись(Гривня,"Р");
КонецПроцедуры // Сформировать()


// ===============================
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// ===============================

// ===============================
Процедура ПриОткрытии(ФлагВосстановленияНастройки)	
	Если ФлагВосстановленияНастройки = 0 Тогда     
		фБезГрупп 	   = 0;
		Дата1      = глВосстановитьЗначение(,"ОсновнаяДатаНачалаОтчета");
		Если ПустоеЗначение(Дата1) = 1 Тогда
			Дата1      = НачМесяца(Дата2);
		КонецЕсли;
	КонецЕсли;
	
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки из списка
		Дата1 		= глРасшифровка.Получить("Дата1");
		Дата2		= глРасшифровка.Получить("Дата2");
		ВыбФирма	= глРасшифровка.Получить("ВыбФирма");
		
		ВыбВидДеятельности = глРасшифровка.Получить("ВыбВидДеятельности");
		ВыбПодразделение = глРасшифровка.Получить("ВыбПодразделение");
		ВыбПродукция = глРасшифровка.Получить("ВыбПродукция");
		ВыбЗаказ = глРасшифровка.Получить("ВыбЗаказ");
		
		глРасшифровка.Получить("Группировки").Выгрузить(Группировки);
		
		Если ТипЗначенияСтр(глРасшифровка.Получить("ТаблицаМФ"))="ТаблицаЗначений" Тогда
			ТаблицаМФ.Загрузить(глРасшифровка.Получить("ТаблицаМФ"));
		КонецЕсли;
		
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;            
	
	ПерерисовкаНазванийЗакладок();

	ТаблицаМФ.ВидимостьКолонки("Тип",0);
	ТаблицаМФ.ВидимостьКолонки("Вид",0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");

	УправлениеДиалогом();
	
КонецПроцедуры		// ПриОткрытии()       

// ===============================
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	ТекСтрокаВТаблицеМФ="";
	ПерерисовкаНазванийЗакладок();
	УправлениеДиалогом();       
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	
КонецПроцедуры // ВводНового()   

// ===============================
Процедура ПриВыбореЗакладки(Номер,Значение)	
	// закладки
    Если Номер=1 Тогда
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблицеМФ,Контекст); // записываем изменения если они были
	КонецЕсли;      
	УправлениеДиалогом();
	ПерерисовкаНазванийЗакладок();
	
КонецПроцедуры	// ПриВыбореЗакладки
                                       
// ===============================
Процедура ОбработкаПодбора(Значение)  
	
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
	
КонецПроцедуры  // ОбработкаПодбора


// ===============================
// ТЕЛО МОДУЛЯ
// ===============================

Дата2 = КонМесяца(ПолучитьДатуТА());

// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
                                                                                
// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);

//                  			тип			вид				переменная  	название
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Фирмы",			"Фирма",			"По фирмам");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Подразделения",	"Подразделение",	"По подразделениям");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ВидыДеятельности",	"ВидДеятельности",  "По видам деятельности");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Документ",	"Заказ",			"Заказ",			"По заказам");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ТМЦ",				"Продукция",		"По продукции");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ВидыКатегорий",	"Продукция",		"По категориям продукции");


ТекСтрокаВТаблицеМФ="";

Группировки.ДобавитьЗначение("Фирма", 			"Фирма (обязательная)");
Группировки.ДобавитьЗначение("Подразделение",	"Подразделение");
Группировки.ДобавитьЗначение("ВидДеятельности", "Вид деятельности");           
Группировки.ДобавитьЗначение("Заказ", 			"Заказ");
Группировки.ДобавитьЗначение("Продукция", 		"Продукция (обязательная)");
Группировки.ДобавитьЗначение("СтатьяКалькуляции","Статья калькуляции (обязательно последняя)");

Группировки.Пометка(1,1);
Группировки.Пометка(2,1);
Группировки.Пометка(3,1);
Группировки.Пометка(4,1);
Группировки.Пометка(5,1);
Группировки.Пометка(6,1);

ГруппировкиПоДвижениям = СоздатьОбъект("СписокЗначений"); // для расшифровки отчета по движениям
ГруппировкиПоДвижениям.ДобавитьЗначение("Документ",		"Документ движения");
ГруппировкиПоДвижениям.Пометка(1,1);

// список украинских названий группировок для построения шапки отчета
УкрГруппировки = СоздатьОбъект("СписокЗначений");
УкрГруппировки.ДобавитьЗначение("Фирма", 			"Фірма");
УкрГруппировки.ДобавитьЗначение("Подразделение",	"Підрозділ");
УкрГруппировки.ДобавитьЗначение("ВидДеятельности", "Вид діяльності");           
УкрГруппировки.ДобавитьЗначение("Заказ", 			"Замовлення");
УкрГруппировки.ДобавитьЗначение("Продукция", 		"Продукція");
УкрГруппировки.ДобавитьЗначение("СтатьяКалькуляции","Стаття калькуляції");