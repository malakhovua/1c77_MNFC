// ===============================
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
// ===============================

Перем ТекСтрокаВТаблицеМФ; // текущая строка в таблице значений  МФ 

// используются для стандартного механизма кнопок "Обновить" и "Настройка"
Перем Таб;
Перем Обновить;
Перем Расшифровка;
                        
Перем ПредставлениеРУ;
Перем Ит;
// переменные предназначены для механизма универсальных группировок отчета
Перем СписокГруппировок8, СписокГруппировок9;
Перем КоличествоГруппировок8, КоличествоГруппировок9;

// переменные предназначены для запроса по периодам

Перем Язык, УкрГруппировки8,УкрГруппировки9;
Перем СпВыбСчета8, СпВыбВидыДеятельности8, СпВыбПодразделения8, СпВыбВидыЗатрат8;
Перем СпВыбСчета9, СпВыбВидыДеятельности9, СпВыбПодразделения9, СпВыбВидыЗатрат9;
Перем СпВсеСчета8, СпВсеСчета9;
Перем Загол, ЗаголовокСтолбца;
Перем ШапкаГруппВер;

Процедура ОбработкаПодбора(Значение) Далее


// ===============================
// "СЛУЖЕБНЫЕ" ПРОЦЕДУРЫ И ФУНКЦИИ
// ===============================

// ===============================
Процедура ЗаполнитьСубсчетами(СпСчетов, СчетРодитель, Класс=9) 
	ТекСчет=СчетПоКоду(СчетРодитель,ВыбранныйПланСчетов());
	Если ТекСчет.Выбран()=0 Тогда // нет такого счета
		Возврат;
	КонецЕсли;

	глДобавитьЗначениеБезПовторения(СпСчетов, ТекСчет, ТекСчет.Код+" "+ТекСчет.Наименование);
	Если ( (Класс=8) И (ВключатьСубсчета=0) ) Или ( (Класс=9) И (ВключатьКоррСубсчета=0) ) Тогда
		// не учитывать субсчета
		Возврат; 
	КонецЕсли;

	ВремСчет = СоздатьОбъект("Счет");
	ВремСчет.ИспользоватьПланСчетов(ВыбранныйПланСчетов());
	ВремСчет.ИспользоватьРодителя(СчетПоКоду(СчетРодитель,ВыбранныйПланСчетов()));
	ВремСчет.ВыбратьСчета();
	Пока ВремСчет.ПолучитьСчет()=1 Цикл
		ТекСчет=ВремСчет.ТекущийСчет();
		глДобавитьЗначениеБезПовторения(СпСчетов, ТекСчет, ТекСчет.Код+" "+ТекСчет.Наименование);
	КонецЦикла;
КонецПроцедуры //ЗаполнитьСубсчетами

// ===============================
Процедура ЗаполнитьСчетами(СпСчетов,Класс)
	Для Инд=0 По 9 Цикл
		ЗаполнитьСубсчетами(СпСчетов,""+Класс+Инд,Класс)
	КонецЦикла;
КонецПроцедуры //ЗаполнитьСчетами

// ===============================
Функция ФильтрПоСправочнику(ПолеЕФ,
							  ПолеМФ,ТипМФ,
							  ТекстЗаголовка,
							  ИмяПеремЗапроса, Язык, ВидТипаДанных) Экспорт 
				                                                                             
	Перем НзвРВ_ЕдЧ_ПредлПадеже,НзвРВ_МнЧ_ПредлПадеже,НзвРВ_МнЧ_РодитПадеже;	
	Перем НзвУВ_ЕдЧ_ПредлПадеже,НзвУВ_МнЧ_ПредлПадеже,НзвУВ_МнЧ_РодитПадеже;	
	Перем ЕстьЕФ,ЕстьМФ;
	 
	глИменаВПадежах(ИмяПеремЗапроса,НзвРВ_ЕдЧ_ПредлПадеже,НзвРВ_МнЧ_ПредлПадеже,НзвРВ_МнЧ_РодитПадеже,
								  НзвУВ_ЕдЧ_ПредлПадеже,НзвУВ_МнЧ_ПредлПадеже,НзвУВ_МнЧ_РодитПадеже);

	ЕстьЕФ = 0;
	ЕстьМФ = 0;
	
	Если ТипЗначенияСтр(ПолеМФ)="СписокЗначений" Тогда
		Если (ПолеМФ.РазмерСписка()>0) Тогда
			ЕстьМФ = 1;
		КонецЕсли;
	КонецЕсли;	
	
	Если ПустоеЗначение(ПолеЕФ)=0 Тогда
		ЕстьЕФ = 1;
	КонецЕсли;	
	
	// формируем строку заголовка                       
	Если ЕстьМФ=0 Тогда
		Если Язык="у" Тогда
			Если ЕстьЕФ=0 Тогда			
				ТекстЗаголовка=ТекстЗаголовка+"По всіх "+НзвУВ_МнЧ_ПредлПадеже;			
				
			ИначеЕсли ПолеЕФ.ЭтоГруппа()=1 Тогда
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_МнЧ_ПредлПадеже+" з групи """+Строка(ПолеЕФ)+"""";
				
			Иначе
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+"""";
				
			КонецЕсли;		
		Иначе
			Если ЕстьЕФ=0 Тогда			
				ТекстЗаголовка=ТекстЗаголовка+"По всем "+НзвРВ_МнЧ_ПредлПадеже;			
				
			ИначеЕсли ПолеЕФ.ЭтоГруппа()=1 Тогда
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_МнЧ_ПредлПадеже+" из группы """+Строка(ПолеЕФ)+"""";
				
			Иначе
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+"""";
				
			КонецЕсли;		
		КонецЕсли;

	Иначе // множественный фильтр
		Если Язык="у" Тогда
			Если ЕстьЕФ=0 Тогда			
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_МнЧ_ПредлПадеже+" зі списку";
				Иначе // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_МнЧ_ПредлПадеже+", окрім вказаних у списку";
				КонецЕсли;

			ИначеЕсли ПолеЕФ.ЭтоГруппа()=1 Тогда    
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_МнЧ_ПредлПадеже+" зі списку, які належать групі """+Строка(ПолеЕФ)+""""+",";
				Иначе     // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_МнЧ_ПредлПадеже+" окрім вказаних у списку, які належать групі """+Строка(ПолеЕФ)+""""+",";
				КонецЕсли;

			Иначе                                       
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+""" зі списку";
				Иначе     // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+""", окрім вказаних у списку";
				КонецЕсли;
			КонецЕсли;		
		Иначе
			Если ЕстьЕФ=0 Тогда			
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_МнЧ_ПредлПадеже+" из списка";
				Иначе // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_МнЧ_ПредлПадеже+", кроме указанных в списке";
				КонецЕсли;

			ИначеЕсли ПолеЕФ.ЭтоГруппа()=1 Тогда    
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_МнЧ_ПредлПадеже+" из списка, принадлежащим группе """+Строка(ПолеЕФ)+""""+",";
				Иначе     // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_МнЧ_ПредлПадеже+" кроме указанных в списке, принадлежащим группе """+Строка(ПолеЕФ)+""""+",";
				КонецЕсли;

			Иначе                                       
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+""" из списка";
				Иначе     // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+""", кроме указанных в списке";
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;      
	КонецЕсли;      
	                          
	// убираем лишнюю запятую из конца заголовка
	Если Прав(ТекстЗаголовка,1)="," Тогда
		ТекстЗаголовка = Лев(ТекстЗаголовка,СтрДлина(ТекстЗаголовка)-1);
	КонецЕсли;	
	
    Если ПустаяСтрока(ТекстЗаголовка)=0 Тогда	// заголовок непуст
		// добавим точку в конец заголовка
		ТекстЗаголовка = ТекстЗаголовка + ". ";
	КонецЕсли;	
	
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	Если (ЕстьЕФ=1) Или (ЕстьМФ=1) Тогда // надо отбирать при помощи запроса

		ТекстЗапроса = "      
			|Обрабатывать НеПомеченныеНаУдаление;
			|Без Итогов;";
		Если Лев(ИмяПеремЗапроса,4)="Счет" Тогда // это счет
			ТекстЗапроса = ТекстЗапроса + "Элемент = Счет."+ВидТипаДанных+".ТекущийСчет;"
	    Иначе // это справочник
			ТекстЗапроса = ТекстЗапроса + "Элемент = Справочник."+ВидТипаДанных+".ТекущийЭлемент;"
		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса + "Группировка Элемент без групп;";
	
		Если ЕстьЕФ=1 Тогда
			ТекстЗапроса = ТекстЗапроса + "Условие(Элемент в ПолеЕФ);"
		КонецЕсли;
	
		Если ЕстьМФ=1 Тогда
			ТекстЗапроса = ТекстЗапроса + "Условие"+?(ТипМФ=1,"(Элемент в ПолеМФ);", "(НЕ(Элемент в ПолеМФ));");
		КонецЕсли;
	
		// выполняем запрос
		Запрос = СоздатьОбъект("Запрос");
		Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
			Возврат 0;
		КонецЕсли;	               
    
		// Выгружаем полученный список в таблицу значений
		Запрос.Выгрузить(ТЗ); 
		Если ТЗ.КоличествоСтрок()=0 Тогда
			// если запрос ничего не принес
			Предупреждение("Не найдено "+НзвРВ_МнЧ_РодитПадеже+" с заданными свойствами.");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПеремЗапроса="Счет8" Тогда
		СпВыбСчета8.УдалитьВсе();
		Если (ЕстьЕФ=1) Или (ЕстьМФ=1) Тогда // строили запрос
			ТЗ.Выгрузить(СпВыбСчета8);
		Иначе
			СпВсеСчета8.Выгрузить(СпВыбСчета8);
		КонецЕсли;
	ИначеЕсли ИмяПеремЗапроса="ВидДеятельности8" Тогда
		СпВыбВидыДеятельности8.УдалитьВсе();
		ТЗ.Выгрузить(СпВыбВидыДеятельности8);
	ИначеЕсли ИмяПеремЗапроса="Подразделение8" Тогда
		СпВыбПодразделения8.УдалитьВсе();
		ТЗ.Выгрузить(СпВыбПодразделения8);
	ИначеЕсли ИмяПеремЗапроса="ВидЗатрат8" Тогда
		СпВыбВидыЗатрат8.УдалитьВсе();
		ТЗ.Выгрузить(СпВыбВидыЗатрат8);
	ИначеЕсли ИмяПеремЗапроса="Счет9" Тогда
		СпВыбСчета9.УдалитьВсе();
		Если (ЕстьЕФ=1) Или (ЕстьМФ=1) Тогда // строили запрос
			ТЗ.Выгрузить(СпВыбСчета9);
		Иначе
			СпВсеСчета9.Выгрузить(СпВыбСчета9);
		КонецЕсли;
	ИначеЕсли ИмяПеремЗапроса="ВидДеятельности9" Тогда
		СпВыбВидыДеятельности9.УдалитьВсе();
		ТЗ.Выгрузить(СпВыбВидыДеятельности9);
	ИначеЕсли ИмяПеремЗапроса="Подразделение9" Тогда
		СпВыбПодразделения9.УдалитьВсе();
		ТЗ.Выгрузить(СпВыбПодразделения9);
	ИначеЕсли ИмяПеремЗапроса="ВидЗатрат9" Тогда
		СпВыбВидыЗатрат9.УдалитьВсе();
		ТЗ.Выгрузить(СпВыбВидыЗатрат9);
	КонецЕсли;	               

	Возврат 1;												
							
КонецФункции // ФильтрПоСправочнику()      

// ===============================
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру


// ===============================
Функция ПерерисовкаНазванийЗакладок()      

	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
	
КонецФункции // ПерерисовкаНазванийЗакладок	

// ===============================
Процедура УстановитьГруппировкиЗапроса(Ит, ТекстЗагол)
Перем ВидСубконто, СпСубконто;
	                       
	СписокГруппировок8 = СоздатьОбъект("СписокЗначений");
	СписокГруппировок9 = СоздатьОбъект("СписокЗначений");
	
	Для Сч=1 По Группировки8.РазмерСписка() Цикл
		
		Если Группировки8.Пометка(Сч)=1 Тогда
			ПредставлениеГрупп=""; 
			УкрПредставлениеГрупп="";
			ТекстГрупп = Группировки8.ПолучитьЗначение(Сч,ПредставлениеГрупп);
			УкрГруппировки8.ПолучитьЗначение(УкрГруппировки8.НайтиЗначение(ТекстГрупп),УкрПредставлениеГрупп);
			ТекстЗагол	= ТекстЗагол + " / "+?(Язык="у",УкрПредставлениеГрупп,ПредставлениеГрупп);

			СписокГруппировок8.ДобавитьЗначение(ТекстГрупп,ПредставлениеГрупп);
			Если ТекстГрупп = "ВидДеятельности8" Тогда
				Ит.ИспользоватьСубконто(ВидыСубконто.ВидыДеятельности,	СпВыбВидыДеятельности8,	1,	1-фБезГрупп8);
			ИначеЕсли ТекстГрупп = "Подразделение8" Тогда
				Ит.ИспользоватьСубконто(ВидыСубконто.Подразделения,		СпВыбПодразделения8,	1,	1-фБезГрупп8);
			ИначеЕсли ТекстГрупп = "ВидЗатрат8" Тогда
				Ит.ИспользоватьСубконто(ВидыСубконто.ВидыЗатрат,		СпВыбВидыЗатрат8,		1,	1-фБезГрупп8);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

	Для Сч=1 По Группировки8.РазмерСписка() Цикл // второй проход по непомеченным группировкам, по которым есть фильтр
		Если Группировки8.Пометка(Сч)=0 Тогда
			ТекстГрупп = Группировки8.ПолучитьЗначение(Сч);
			Если ТекстГрупп = "ВидДеятельности8" Тогда
				Если СпВыбВидыДеятельности8.РазмерСписка() <> 0 Тогда
					Ит.ИспользоватьСубконто(ВидыСубконто.ВидыДеятельности, СпВыбВидыДеятельности8, 1, 0);
				КонецЕсли;
			ИначеЕсли ТекстГрупп = "Подразделение8" Тогда
				Если СпВыбПодразделения8.РазмерСписка() <> 0 Тогда
					Ит.ИспользоватьСубконто(ВидыСубконто.Подразделения, СпВыбПодразделения8, 1, 0);
				КонецЕсли;
			ИначеЕсли ТекстГрупп = "ВидЗатрат8" Тогда
				Если СпВыбВидыЗатрат8.РазмерСписка() <> 0 Тогда
					Ит.ИспользоватьСубконто(ВидыСубконто.ВидыЗатрат, СпВыбВидыЗатрат8, 1, 0);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

	Если ПустаяСтрока(ТекстЗагол)=0 Тогда // удаляем ведущий разделитель " / "
		ТекстЗагол = Сред(ТекстЗагол,4)
	КонецЕсли;

	Для Сч=1 По Группировки9.РазмерСписка() Цикл

		Если Группировки9.Пометка(Сч)=1 Тогда
			ПредставлениеГрупп="";
			ТекстГрупп		= Группировки9.ПолучитьЗначение(Сч, ПредставлениеГрупп);

			СписокГруппировок9.ДобавитьЗначение(ТекстГрупп,ПредставлениеГрупп);
			Если ТекстГрупп = "ВидДеятельности9" Тогда
				Ит.ИспользоватьКорСубконто(ВидыСубконто.ВидыДеятельности,	СпВыбВидыДеятельности9,	1,	1-фБезГрупп9);
			ИначеЕсли ТекстГрупп = "Подразделение9" Тогда
				Ит.ИспользоватьКорСубконто(ВидыСубконто.Подразделения,		СпВыбПодразделения9,	1,	1-фБезГрупп9);
			ИначеЕсли ТекстГрупп = "ВидЗатрат9" Тогда
				Ит.ИспользоватьКорСубконто(ВидыСубконто.ВидыЗатрат,			СпВыбВидыЗатрат9,		1,	1-фБезГрупп9);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

	Для Сч=1 По Группировки9.РазмерСписка() Цикл // второй проход по непомеченным группировкам, по которым есть фильтр
		Если Группировки9.Пометка(Сч)=0 Тогда
			ТекстГрупп = Группировки9.ПолучитьЗначение(Сч);

			Если ТекстГрупп = "ВидДеятельности9" Тогда
				Если СпВыбВидыДеятельности9.РазмерСписка() <> 0 Тогда
					Ит.ИспользоватьКорСубконто(ВидыСубконто.ВидыДеятельности, СпВыбВидыДеятельности9, 1, 0);
				КонецЕсли;
			ИначеЕсли ТекстГрупп = "Подразделение9" Тогда
				Если СпВыбПодразделения9.РазмерСписка() <> 0 Тогда
					Ит.ИспользоватьКорСубконто(ВидыСубконто.Подразделения, СпВыбПодразделения9, 1, 0);
				КонецЕсли;
			ИначеЕсли ТекстГрупп = "ВидЗатрат9" Тогда
				Если СпВыбВидыЗатрат9.РазмерСписка() <> 0 Тогда
					Ит.ИспользоватьКорСубконто(ВидыСубконто.ВидыЗатрат, СпВыбВидыЗатрат9, 1, 0);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры // УстановитьГруппировкиЗапроса()

// ===============================
Функция ФильтрПоПеременнойЗапроса(ИмяПеремЗапроса,ПолеЕФ,ТекстЗаголовка,ВидСправочника="")
    Перем ПолеМФ, ВремТипМФ;
	
	ТаблицаМФ.ВыбратьСтроки();
	Пока ТаблицаМФ.ПолучитьСтроку()=1 Цикл
		Если (ТаблицаМФ.СписокЭлементов.РазмерСписка()>0) И
			 (ТаблицаМФ.ИмяПеременной=ИмяПеремЗапроса) И
		     (ТаблицаМФ.ФлВкл=2) Тогда
			 	
			Номер 		= ТаблицаМФ.НомерСтроки;
			ПолеМФ	    = ТаблицаМФ.СписокЭлементов;
			ВремТипМФ	= ТаблицаМФ.ТипМФ;
			Прервать;
		КонецЕсли;                         
	КонецЦикла;
	
	Рез = ФильтрПоСправочнику(ПолеЕФ,
						ПолеМФ,ВремТипМФ,
						ТекстЗаголовка,
						ИмяПеремЗапроса,Язык,ВидСправочника);
	
	Возврат Рез;

КонецФункции // ФильтрПоПеременнойЗапроса()

// ===============================
Процедура ВывестиГруппировкиГор(НомерВер, Знач Ном=1, Знач НомерСубконтоГор=0, ТекСтрока=1)

	Если Ном > КоличествоГруппировок9 Тогда 
		Возврат;
	КонецЕсли;

	НазваниеГруппировки = СписокГруппировок9.ПолучитьЗначение(Ном);

	Если НазваниеГруппировки = "Счет9" Тогда
		Ит.ВыбратьКорСчета(0,2);
		Пока Ит.ПолучитьКорСчет()=1 Цикл
			
			КорСчет = Ит.КорСчет;
			
			// перебираем строки шапки, пока не найдем нужную
			Пока КорСчет <> ШапкаГруппВер.ПолучитьЗначение(ТекСтрока, "ЗначГруп"+Ном) Цикл
				ПечОборСумма = "";
				Таб.ПрисоединитьСекцию("Группировка"+НомерВер+"|Группировка");
				ТекСтрока = ТекСтрока+1;
			КонецЦикла;

			// нашли
			Если (Ном = КоличествоГруппировок9) Или (фБезГрупп9=0) Тогда 
				ПечОборСумма = глФРМ(Ит.КорКО(),Гривня,1);
				Таб.ПрисоединитьСекцию("Группировка"+НомерВер+"|Группировка");
				ТекСтрока = ТекСтрока+1;
			КонецЕсли;

			ВывестиГруппировкиГор(НомерВер, Ном+1, НомерСубконтоГор, ТекСтрока);
		КонецЦикла;
	Иначе
		НомерСубконтоГор = НомерСубконтоГор + 1;
		Ит.ВыбратьКорСубконто(НомерСубконтоГор,0,2);
		Пока Ит.ПолучитьКорСубконто(НомерСубконтоГор)=1 Цикл

			КорСубконто = Ит.КорСубконто(НомерСубконтоГор); 

			// перебираем строки шапки, пока не найдем нужную
			Пока КорСубконто <> ШапкаГруппВер.ПолучитьЗначение(ТекСтрока, "ЗначГруп"+Ном) Цикл
				ПечОборСумма = "";
				Таб.ПрисоединитьСекцию("Группировка"+НомерВер+"|Группировка");
				ТекСтрока = ТекСтрока+1;
			КонецЦикла;

			// нашли
			Если (Ном = КоличествоГруппировок9) Или (фБезГрупп9=0) Тогда 
				ПечОборСумма = глФРМ(Ит.КорКО(),Гривня,1);
				Таб.ПрисоединитьСекцию("Группировка"+НомерВер+"|Группировка");
				ТекСтрока = ТекСтрока+1;
			КонецЕсли;

			ВывестиГруппировкиГор(НомерВер, Ном+1, НомерСубконтоГор, ТекСтрока);
		КонецЦикла;
	КонецЕсли;

	// перебираем оставщиеся строки шапки
	Если Ном=1 Тогда
		Пока ТекСтрока <= ШапкаГруппВер.КоличествоСтрок() Цикл
			ПечОборСумма = "";
			Таб.ПрисоединитьСекцию("Группировка"+НомерВер+"|Группировка");
			ТекСтрока = ТекСтрока+1;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры // ВывестиГруппировкиГор()

// ===============================
Процедура ВывестиГруппировкиВер(Знач Ном=1, Знач НомерСубконтоВер=0)
Перем ЛокСчет, ЛокСубконто;
	  
	Если Ном > КоличествоГруппировок8 Тогда                           
		Возврат;
	КонецЕсли;
		
	НазваниеГруппировки = СписокГруппировок8.ПолучитьЗначение(Ном);
	НазваниеСекции="Группировка"+Ном;

	Если НазваниеГруппировки = "Счет8" Тогда
		Ит.ВыбратьСчета(0,2);
		Пока Ит.ПолучитьСчет()=1 Цикл
			
			Счет = Ит.Счет;
			Наим = глСмещениеГруппы(Счет,фБезГрупп8) + Счет;
			Наим = ?(ПустоеЗначение(Наим)=0,Наим,глПредставлениеПустогоЗначения(НазваниеГруппировки, Язык));

			Таб.ВывестиСекцию(НазваниеСекции+"|Наименование");
			ВывестиГруппировкиГор(Ном);
			глОживить(1);

			ВывестиГруппировкиВер(Ном+1, НомерСубконтоВер);
		КонецЦикла;
	Иначе
		НомерСубконтоВер = НомерСубконтоВер + 1;
		Ит.ВыбратьСубконто(НомерСубконтоВер,0,2);

		Пока Ит.ПолучитьСубконто(НомерСубконтоВер)=1 Цикл
			
			Субконто = Ит.Субконто(НомерСубконтоВер);
			Наим = глСмещениеГруппы(Субконто,фБезГрупп8) + Субконто;
			Наим = ?(ПустоеЗначение(Наим)=0,Наим,глПредставлениеПустогоЗначения(НазваниеГруппировки, Язык));

			Секция = Таб.ПолучитьСекцию(НазваниеСекции+"|Наименование");
			ОблПеч = Секция.Область("R1C1:R1C8");
			Если ПустоеЗначение(Субконто)=0 Тогда
				Если ТипЗначенияСтр(Субконто)="Справочник" Тогда
					ОблПеч.Подчеркнутый(Субконто.ЭтоГруппа())
				КонецЕсли;
			КонецЕсли;
			Таб.ВывестиСекцию(Секция);

			ВывестиГруппировкиГор(Ном);
			глОживить(1);

			ВывестиГруппировкиВер(Ном+1, НомерСубконтоВер);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ВывестиГруппировкиВер()

// ===============================
Процедура ВывестиЯчейкиШапки(НомерГруппировки)

	ШапкаГруппВер.ВыбратьСтроки();
	Пока ШапкаГруппВер.ПолучитьСтроку()=1 Цикл
		ЗначГруп = ШапкаГруппВер.ПолучитьЗначение(ШапкаГруппВер.НомерСтроки,"ЗначГруп"+НомерГруппировки);
		ИзмУр = ШапкаГруппВер.ПолучитьЗначение(ШапкаГруппВер.НомерСтроки,"ИзмениласьГруппаНомер");
		Если ИзмУр > НомерГруппировки Тогда // выводим пустую клетку
			Секция = Таб.ПолучитьСекцию("Шапка|Пустая");
			ОблПеч = Секция.Область();
			ОблПеч.Рамка(,3,,3);
			Таб.ПрисоединитьСекцию(Секция);
		ИначеЕсли ИзмУр <= НомерГруппировки Тогда
			Если ТипЗначенияСтр(ЗначГруп)="Строка" Тогда // здесь "И"
				Наим = ?(Язык="у", "Разом", "Итого");
				Секция = Таб.ПолучитьСекцию("Шапка|Группировка");
				ОблПеч = Секция.Область();
				ОблПеч.Рамка(3,3,3,);
				Таб.ПрисоединитьСекцию(Секция);
			ИначеЕсли ТипЗначенияСтр(ЗначГруп)="Число" Тогда // здесь 0
				Наим = "";
				Секция = Таб.ПолучитьСекцию("Шапка|Группировка");
				ОблПеч = Секция.Область();
				ОблПеч.Рамка(3,,3,);
				Таб.ПрисоединитьСекцию(Секция);
			Иначе
				Наим = ?(ПустоеЗначение(ЗначГруп)=0,ЗначГруп,глПредставлениеПустогоЗначения(СписокГруппировок9.ПолучитьЗначение(НомерГруппировки), Язык));
				Секция = Таб.ПолучитьСекцию("Шапка|Группировка");
				ОблПеч = Секция.Область();
				ОблПеч.Рамка(3,3,,3);

				Если ПустоеЗначение(ЗначГруп)=0 Тогда
					Если ТипЗначенияСтр(ЗначГруп)="Справочник" Тогда
						ОблПеч.Подчеркнутый(ЗначГруп.ЭтоГруппа())
					КонецЕсли;
				КонецЕсли;

				Таб.ПрисоединитьСекцию(Секция);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры // ВывестиГруппировкиГор()

// ===============================
Процедура ЗаполнитьЗначенияШапки(Знач  Ном=1, Знач НомерСубконтоГор=0, Знач ИзмУр=1, Знач ЗначГруп1=0, Знач  ЗначГруп2=0, Знач ЗначГруп3=0, Знач ЗначГруп4=0)
Перем ЗначГруп[4];
	ЗначГруп[1] = ЗначГруп1;
	ЗначГруп[2] = ЗначГруп2;
	ЗначГруп[3] = ЗначГруп3;
	ЗначГруп[4] = ЗначГруп4;
	Если ((Ном > КоличествоГруппировок9) Или (фБезГрупп9=0)) И (ЗначГруп1 <> 0) Тогда 
		ШапкаГруппВер.НоваяСтрока();
		КвоСтрок = ШапкаГруппВер.КоличествоСтрок();
		Для Инд=1 По КоличествоГруппировок9 Цикл
			ШапкаГруппВер.УстановитьЗначение(КвоСтрок,"ЗначГруп"+Инд,ЗначГруп[Инд]);
		КонецЦикла;
		ШапкаГруппВер.УстановитьЗначение(КвоСтрок,"ИзмениласьГруппаНомер",?(фБезГрупп9=0,Ном-1,ИзмУр));
		Если Ном > КоличествоГруппировок9 Тогда 
			Возврат;
		Иначе
			ШапкаГруппВер.УстановитьЗначение(КвоСтрок,"ЗначГруп"+Ном,"И");
		КонецЕсли;
	КонецЕсли;

	НазваниеГруппировки = СписокГруппировок9.ПолучитьЗначение(Ном);

	Если НазваниеГруппировки = "Счет9" Тогда
		Ит.ВыбратьКорСчета(0,2); // все счета, которые вошли в запрос
		Пока Ит.ПолучитьКорСчет()=1 Цикл
			ЗначГруп[Ном] = Ит.КорСчет;
			ЗаполнитьЗначенияШапки(Ном+1, НомерСубконтоГор, ИзмУр, ЗначГруп[1], ЗначГруп[2], ЗначГруп[3], ЗначГруп[4]);
			ИзмУр=Ном;
		КонецЦикла;
	Иначе
		НомерСубконтоГор = НомерСубконтоГор + 1;
		Ит.ВыбратьКорСубконто(НомерСубконтоГор,0,2); // все субконто, которые вошли в запрос
		Пока Ит.ПолучитьКорСубконто(НомерСубконтоГор)=1 Цикл
			ЗначГруп[Ном] = Ит.КорСубконто(НомерСубконтоГор);
			ЗаполнитьЗначенияШапки(Ном+1, НомерСубконтоГор, ИзмУр, ЗначГруп[1], ЗначГруп[2], ЗначГруп[3], ЗначГруп[4]);
			ИзмУр=Ном;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьЗначенияШапки()

// ===============================
Процедура ВывестиШапку()
	ШапкаГруппВер=СоздатьОбъект("ТаблицаЗначений");
	ШапкаГруппВер.НоваяКолонка("ИзмениласьГруппаНомер");
	Для Инд=1 По КоличествоГруппировок9 Цикл
		ШапкаГруппВер.НоваяКолонка("ЗначГруп"+Инд);
	КонецЦикла;
	ЗаполнитьЗначенияШапки();
	
	Для Инд=1  По КоличествоГруппировок9 Цикл
		ПечЗаголовокСтолбца=?(Инд=1,ЗаголовокСтолбца,"");
		Таб.ВывестиСекцию("Шапка|Наименование");
		ВывестиЯчейкиШапки(Инд);
		Таб.ПрисоединитьСекцию("Шапка|Рамка");
	КонецЦикла;
КонецПроцедуры //ВывестиШапку

// ===============================
Процедура ВывестиИтоги()          
	Если фБезГрупп8 = 0 Тогда
		Таб.ВывестиСекцию("Группировка0|Наименование");
		ВывестиГруппировкиГор(0);
	КонецЕсли;
КонецПроцедуры //ВывестиШапку


// ===============================
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА
// ===============================

// ===============================
Процедура ДоступностьЭлементов(ВсеЭлементы=0)           
	
	ЭлементДиалога = Форма.АктивныйЭлемент();

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбСчет8") Или (ЭлементДиалога="кХСчет8") Тогда
		Форма.кХСчет8.Доступность(ВыбСчет8.Выбран()); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбВидДеятельности8") Или (ЭлементДиалога="кХВидДеятельности8") Тогда
		Форма.кХВидДеятельности8.Доступность(ВыбВидДеятельности8.Выбран()); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбПодразделение8") Или (ЭлементДиалога="кХПодразделение8") Тогда
		Форма.кХПодразделение8.Доступность(ВыбПодразделение8.Выбран()); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбВидЗатрат8") Или (ЭлементДиалога="кХВидЗатрат8") Тогда
		Форма.кХВидЗатрат8.Доступность(ВыбВидЗатрат8.Выбран()); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбСчет9") Или (ЭлементДиалога="кХСчет9") Тогда
		Форма.кХСчет9.Доступность(ВыбСчет9.Выбран()); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбВидДеятельности9") Или (ЭлементДиалога="кХВидДеятельности9") Тогда
		Форма.кХВидДеятельности9.Доступность(ВыбВидДеятельности9.Выбран()); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбПодразделение9") Или (ЭлементДиалога="кХПодразделение9") Тогда
		Форма.кХПодразделение9.Доступность(ВыбПодразделение9.Выбран()); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбВидЗатрат9") Или (ЭлементДиалога="кХВидЗатрат9") Тогда
		Форма.кХВидЗатрат9.Доступность(ВыбВидЗатрат9.Выбран()); 
	КонецЕсли;

КонецПроцедуры  	// ДоступностьЭлементов

// ===============================
Функция УстановитьДоступность()
	Если (ТаблицаМФ.Тип = "Справочник") Тогда
		Форма.кДобавитьНесколько.Доступность(1);
		Форма.кФильтр.Доступность(1);
	Иначе
		Форма.кДобавитьНесколько.Доступность(0);
		Форма.кФильтр.Доступность(0);
	КонецЕсли;
	Если Метаданные.РазделительУчета.Выбран() = 0 Тогда
		Форма.РазделительУчета.Видимость(0);
		Форма.ТекстРУ.Видимость(0);
		Форма.ПоВсемРУ.Видимость(0);
	КонецЕсли;
КонецФункции //УстановитьДоступность

// ===============================
Процедура ИзмРазделительУчета()
	Если ПоВсемРУ=0 Тогда
		ВыбПодразделение8="";
		ВыбПодразделение9="";
		Если (ТекСтрокаВТаблицеМФ=3) Или (ТекСтрокаВТаблицеМФ=7) Тогда
			СписокЭлементовМФ.УдалитьВсе();
		КонецЕсли;
		ТаблицаМФ.ПолучитьСтрокуПоНомеру(3); // Подразделение8
		ТаблицаМФ.ФлВкл = 1;
	    ТаблицаМФ.СписокЭлементов.УдалитьВсе();
		ТаблицаМФ.ПолучитьСтрокуПоНомеру(7); // Подразделение9
		ТаблицаМФ.ФлВкл = 1;
	    ТаблицаМФ.СписокЭлементов.УдалитьВсе();
	КонецЕсли;
КонецПроцедуры //ИзмРазделительУчета

// ===============================
Процедура ПриВыбореПоВсемРУ()
	Если ПоВсемРУ = 1 Тогда
		Форма.РазделительУчета.НазначитьТип("");
	Иначе
		Форма.РазделительУчета.НазначитьТип(Метаданные.РазделительУчета);
	КонецЕсли;
	ИзмРазделительУчета();
КонецПроцедуры

// ===============================
Процедура ИзмВключатьСубсчета()
	СпВсеСчета8.УдалитьВсе();
	ЗаполнитьСчетами(СпВсеСчета8,8);
КонецПроцедуры //ИзмВключатьСубсчета

// ===============================
Процедура ИзмВключатьКорСубсчета()
	СпВсеСчета9.УдалитьВсе();
	ЗаполнитьСубсчетами(СпВсеСчета9,"23");
	ЗаполнитьСубсчетами(СпВсеСчета9,"24");
	ЗаполнитьСчетами(СпВсеСчета9,9);
КонецПроцедуры //ИзмВключатьСубсчета

// ===============================
Процедура Сформировать(ЗакрытьДиалог=0)
	
	глПроверкаДаты(Дата1,Дата2);
	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") Или (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;

	ПечФорма = "Таблица";
	Язык = глЯзык(ПечФорма); 
	глУстПропись(Гривня,Язык);
	Таб.ИсходнаяТаблица(ПечФорма);
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "АнализПоЗатратамДеятельности");
	
	// все настройки помещаем в список
	Расшифровка.Установить("Дата1", 		Дата1);
    Расшифровка.Установить("Дата2", 		Дата2);
	Расшифровка.Установить("РазделительУчета",		РазделительУчета);
	
	Расшифровка.Установить("ВключатьСубсчета",		ВключатьСубсчета);
	Расшифровка.Установить("ВыбСчет8",				ВыбСчет8);
	Расшифровка.Установить("ВыбВидДеятельности8",	ВыбВидДеятельности8);
	Расшифровка.Установить("ВыбПодразделение8",		ВыбПодразделение8);
	Расшифровка.Установить("ВыбВидЗатрат8",			ВыбВидЗатрат8);

	Расшифровка.Установить("ВключатьКоррСубсчета",	ВключатьКоррСубсчета);
	Расшифровка.Установить("ВыбСчет9",				ВыбСчет9);
	Расшифровка.Установить("ВыбВидДеятельности9",	ВыбВидДеятельности9);
	Расшифровка.Установить("ВыбПодразделение9",		ВыбПодразделение9);
	Расшифровка.Установить("ВыбВидЗатрат9",			ВыбВидЗатрат9);

	Расшифровка.Установить("фБезГрупп8",			фБезГрупп8);
	Расшифровка.Установить("Группировки8",			Группировки8);	

	Расшифровка.Установить("фБезГрупп9",			фБезГрупп9);
	Расшифровка.Установить("Группировки9",			Группировки9);	
	
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблицеМФ,Контекст); // записываем изменения если они были

	// запомним МФ только если он задан
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ);
	КонецЕсли;
	
	//Создание объекта типа БухЗапрос
	Ит = СоздатьОбъект("БухгалтерскиеИтоги");
	Ит.ВключатьСубсчета((1-2*фБезГрупп8)*ВключатьСубСчета, (1-2*фБезГрупп9)*ВключатьКоррСубСчета);
	Ит.ИспользоватьПланСчетов(ВыбранныйПланСчетов());
	Ит.ИспользоватьРазделительУчета(РазделительУчета);

	Загол="";
    Если 	  ФильтрПоПеременнойЗапроса("Счет8", ВыбСчет8, Загол, ВыбранныйПланСчетов().Идентификатор())=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по счетам 8 класса. Отчет не сформирован.");
		Возврат;
	ИначеЕсли ФильтрПоПеременнойЗапроса("ВидДеятельности8",	ВыбВидДеятельности8, Загол, "ВидыДеятельности")=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по видам деятельности 8 класса. Отчет не сформирован.");
		Возврат;
	ИначеЕсли ФильтрПоПеременнойЗапроса("Подразделение8", ВыбПодразделение8, Загол, "Подразделения")=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по подразделениям 8 класса. Отчет не сформирован.");
		Возврат;
	ИначеЕсли ФильтрПоПеременнойЗапроса("ВидЗатрат8", ВыбВидЗатрат8, Загол, "ВидыЗатрат")=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по видам затрат 8 класса. Отчет не сформирован.");
		Возврат;

	ИначеЕсли ФильтрПоПеременнойЗапроса("Счет9", ВыбСчет9, Загол, ВыбранныйПланСчетов().Идентификатор())=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по счетам 9 класса. Отчет не сформирован.");
		Возврат;
	ИначеЕсли ФильтрПоПеременнойЗапроса("ВидДеятельности9", ВыбВидДеятельности9, Загол, "ВидыДеятельности")=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по видам деятельности 9 класса. Отчет не сформирован.");
		Возврат;
	ИначеЕсли ФильтрПоПеременнойЗапроса("Подразделение9", ВыбПодразделение9, Загол, "Подразделения")=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по подразделениям 9 класса. Отчет не сформирован.");
		Возврат;
	ИначеЕсли ФильтрПоПеременнойЗапроса("ВидЗатрат9", ВыбВидЗатрат9, Загол, "ВидыЗатрат")=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по видам затрат 9 класса. Отчет не сформирован.");
		Возврат;
	КонецЕсли;

	ЗаголовокСтолбца = "";
	УстановитьГруппировкиЗапроса(Ит, ЗаголовокСтолбца);

	КоличествоГруппировок8 = СписокГруппировок8.РазмерСписка();
	КоличествоГруппировок9 = СписокГруппировок9.РазмерСписка();
	
	Если КоличествоГруппировок8=0 Тогда
		Предупреждение("Не выбраны группировки по 8 классу счетов. Отчет не сформирован.");
		Возврат;
	КонецЕсли;

	Если КоличествоГруппировок9=0 Тогда
		Предупреждение("Не выбраны группировки по 9 классу счетов. Отчет не сформирован.");
		Возврат;
	КонецЕсли;

	Если Ит.ВыполнитьЗапрос(Дата1,Дата2,СпВыбСчета8,СпВыбСчета9,,2) = 0 Тогда // по оборотам
		Возврат;
	КонецЕсли;  
	
	глЧислоСтрок = 0;

	Таб.ВывестиСекцию("Кнопки");
	Таб.ВывестиСекцию("Заголовок");

	ВывестиШапку();
	ОживКвоСтрок = Таб.ВысотаСекции("Заголовок")+КоличествоГруппировок9*Таб.ВысотаСекции("Шапка");
	глОживить(ОживКвоСтрок);
	
	// ВЫВОД ГРУППИРОВОК ЗАПРОСА
	ВывестиГруппировкиВер();
	
	ВывестиИтоги();

	ФиксКвоСтрок = Таб.ВысотаСекции("Кнопки")+Таб.ВысотаСекции("Заголовок")+КоличествоГруппировок9*Таб.ВысотаСекции("Шапка");
	ФиксКвоКолон = Таб.ШиринаСекции("Наименование");
	Таб.Опции(0, 0, ФиксКвоСтрок, ФиксКвоКолон, "ПарамПечатиУпрАнализПоЗатратам", "РазмОкнаУпрАнализПоЗатратам");
	Таб.ОбластьПечати(Таб.ВысотаСекции("Кнопки")+1);
	
	// Вывод заполненной формы
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("ПЕЧАТЬ: Анализ по затратам деятельности", ""); 
	
	Если (Обновить = 2) Или (ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры // Сформировать()


// ===============================
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// ===============================

// ===============================
Процедура ПриВыбореЗакладки(Номер,Значение="")	
	// закладки
    Если Номер=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблицеМФ,Контекст); // записываем изменения если они были
    ИначеЕсли Номер=2 Тогда
		Форма.ИспользоватьСлой("Шапка,МФ,Подвал");
	КонецЕсли;      
	ПерерисовкаНазванийЗакладок();
	ДоступностьЭлементов(1);
	
КонецПроцедуры	// ПриВыбореЗакладки
                                       
// ===============================
Процедура ПриОткрытии(ФлагВосстановленияНастройки)	
	
	Если Метаданные.РазделительУчета.Выбран() = 1 Тогда
		ПредставлениеРУ = Метаданные.РазделительУчета.Представление();
		Форма.РазделительУчета.НазначитьТип(Метаданные.РазделительУчета);
	КонецЕсли;

	Если ФлагВосстановленияНастройки = 0 Тогда     
		
		фБезГрупп8 	   			= 0;
		фБезГрупп9 	   			= 1;
		ВключатьСубсчета 		= 1;
		ВключатьКоррСубсчета 	= 0;
		Дата1 = глВосстановитьЗначение(,"ОсновнаяДатаНачалаОтчета");
		Если ПустоеЗначение(Дата1) = 1 Тогда
			Дата1      = НачМесяца(Дата2);
		КонецЕсли;
	КонецЕсли;
	
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки из списка
		РУ = глРасшифровка.Получить("РазделительУчета");
		Если ТипЗначенияСтр(РУ) <> "" Тогда
			РазделительУчета = РУ;
			ПоВсемРУ = 0;
		Иначе
			Форма.РазделительУчета.НазначитьТип("");
			ПоВсемРУ = 1;
		КонецЕсли;

		Дата1 		= глРасшифровка.Получить("Дата1");
		Дата2		= глРасшифровка.Получить("Дата2");
		
		ВключатьСубсчета	= глРасшифровка.Получить("ВключатьСубсчета");
		ВыбСчет8 			= глРасшифровка.Получить("ВыбСчет8");
		ВыбВидДеятельности8	= глРасшифровка.Получить("ВыбВидДеятельности8");
		ВыбПодразделение8 	= глРасшифровка.Получить("ВыбПодразделение8");
		ВыбВидЗатрат8	 	= глРасшифровка.Получить("ВыбВидЗатрат8");
		
		ВключатьКоррСубсчета= глРасшифровка.Получить("ВключатьКоррСубсчета");
		ВыбСчет9 			= глРасшифровка.Получить("ВыбСчет9");
		ВыбВидДеятельности9	= глРасшифровка.Получить("ВыбВидДеятельности9");
		ВыбПодразделение9 	= глРасшифровка.Получить("ВыбПодразделение9");
		ВыбВидЗатрат9	 	= глРасшифровка.Получить("ВыбВидЗатрат9");

		фБезГрупп8			= глРасшифровка.Получить("фБезГрупп8");
		фБезГрупп9			= глРасшифровка.Получить("фБезГрупп9");
		
		глРасшифровка.Получить("Группировки8").Выгрузить(Группировки8);
		глРасшифровка.Получить("Группировки9").Выгрузить(Группировки9);
		
		Если ТипЗначенияСтр(глРасшифровка.Получить("ТаблицаМФ"))="ТаблицаЗначений" Тогда
			ТаблицаМФ.Загрузить(глРасшифровка.Получить("ТаблицаМФ"));
		КонецЕсли;
		
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
		РазделительУчета = глВосстановитьЗначение(,"БазФирма");
		ПоВсемРУ = 0;
	КонецЕсли;            
	
	ТаблицаМФ.ВидимостьКолонки("Тип",				0);
	ТаблицаМФ.ВидимостьКолонки("Вид",				0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",	0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",				0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",		0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	                                                                                
	ПриВыбореЗакладки(1);
	
КонецПроцедуры		// ПриОткрытии()       

// ===============================
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	ТекСтрокаВТаблицеМФ="";
	ПриВыбореЗакладки(1);
	
	ИзмВключатьСубсчета();
	ТаблицаМФ.ПолучитьСтрокуПоНомеру(1); // Счет8
	ТаблицаМФ.ФлВкл = 2;
	СпВсеСчета8.Выгрузить(ТаблицаМФ.СписокЭлементов);

	ИзмВключатьКорСубсчета();
	ЗаполнитьСчетами(СпВсеСчета9,9);
	ТаблицаМФ.ПолучитьСтрокуПоНомеру(5); // Счет9
	ТаблицаМФ.ФлВкл = 2;
	СпВсеСчета9.Выгрузить(ТаблицаМФ.СписокЭлементов);

КонецПроцедуры // ВводНового()   

// ===============================
Процедура ОбработкаПодбора(Значение)  
	
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
	
КонецПроцедуры  // ОбработкаПодбора  


// ===============================
// ТЕЛО МОДУЛЯ
// ===============================

Дата2 = ПолучитьДатуТА();

// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");

// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);

// создаем списки счетов по каждому классу
СпВсеСчета8 = СоздатьОбъект("СписокЗначений");
СпВсеСчета9 = СоздатьОбъект("СписокЗначений");

//                  			тип				вид					переменная  		название
глДобавитьВТаблицуМФ(ТаблицаМФ,"СписокЗначений",СпВсеСчета8,		"Счет8",			"8 кл.: По счетам");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник",	"ВидыДеятельности",	"ВидДеятельности8",	"8 кл.: По видам деятельности");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник",	"Подразделения",	"Подразделение8",	"8 кл.: По подразделениям");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник",	"ВидыЗатрат",		"ВидЗатрат8",		"8 кл.: По затратам");
                                                                                                             
глДобавитьВТаблицуМФ(ТаблицаМФ,"СписокЗначений",СпВсеСчета9,		"Счет9",			"9 кл.: По счетам");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник",	"ВидыДеятельности",	"ВидДеятельности9",	"9 кл.: По видам деятельности");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник",	"Подразделения",	"Подразделение9",	"9 кл.: По подразделениям");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник",	"ВидыЗатрат",		"ВидЗатрат9",		"9 кл.: По затратам");
                                                                                                             
ТекСтрокаВТаблицеМФ="";

Группировки8.ДобавитьЗначение("Счет8", 				"Счета");
Группировки8.ДобавитьЗначение("ВидДеятельности8",	"Виды деятельности");           
Группировки8.ДобавитьЗначение("Подразделение8",		"Подразделения");
Группировки8.ДобавитьЗначение("ВидЗатрат8",	 		"Виды затрат");
Группировки8.ТекущаяСтрока(1);  

Группировки9.ДобавитьЗначение("Счет9", 				"Счета");
Группировки9.ДобавитьЗначение("ВидДеятельности9",	"Виды деятельности");           
Группировки9.ДобавитьЗначение("Подразделение9",		"Подразделение");
Группировки9.ДобавитьЗначение("ВидЗатрат9",	 		"Вид затрат");
Группировки9.ТекущаяСтрока(1);  

// список украинских названий группировок для построения шапки отчета
УкрГруппировки8 = СоздатьОбъект("СписокЗначений");
УкрГруппировки9 = СоздатьОбъект("СписокЗначений");

УкрГруппировки8.ДобавитьЗначение("Счет8", 				"Рахунок");
УкрГруппировки8.ДобавитьЗначение("ВидДеятельности8", 	"Вид діяльності");           
УкрГруппировки8.ДобавитьЗначение("Подразделение8",		"Підрозділ");
УкрГруппировки8.ДобавитьЗначение("ВидЗатрат8",	 		"Вид затрат");

УкрГруппировки9.ДобавитьЗначение("Счет9", 				"Рахунок");
УкрГруппировки9.ДобавитьЗначение("ВидДеятельности9", 	"Вид діяльності");           
УкрГруппировки9.ДобавитьЗначение("Подразделение9",		"Підрозділ");
УкрГруппировки9.ДобавитьЗначение("ВидЗатрат9",	 		"Вид затрат");

// создаем списки значений по каждой из группировок
СпВыбСчета8 			= СоздатьОбъект("СписокЗначений");
СпВыбВидыДеятельности8	= СоздатьОбъект("СписокЗначений");
СпВыбПодразделения8		= СоздатьОбъект("СписокЗначений");
СпВыбВидыЗатрат8		= СоздатьОбъект("СписокЗначений");

СпВыбСчета9 			= СоздатьОбъект("СписокЗначений");
СпВыбВидыДеятельности9	= СоздатьОбъект("СписокЗначений");
СпВыбПодразделения9		= СоздатьОбъект("СписокЗначений");
СпВыбВидыЗатрат9		= СоздатьОбъект("СписокЗначений");

Форма.РазделительУчета.ВыполнятьФормулуТолькоПриИзменении(1);