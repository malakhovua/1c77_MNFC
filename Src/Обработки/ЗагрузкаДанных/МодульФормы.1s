Перем ТекстЗагружаемыеДанные;		// Текст - файл загрузки
Перем КоличЗагруженныхСтрок;		// Количество загруженных строк из файла загрузки

Перем ИмяФайлаОшибок;				// Имя файла записи ошибок
Перем ТекстОшибки;					// Текст - файл записи ошибок

Перем ТаблицаЗагруженныеОбъекты;	// Таблица, содержащая загружаемые объекты
Перем СписокПроводимыхОбъектов;		// Список документов, требующих проведения

Перем СтрРазделительСтрок;			// Последовательность символов, используемая в файле
									// загрузки в качестве разделителя строк

Перем КоличСтрокНаТранзакцию;		// Количество строк файла загрузки, 
									// приходящихся на одну транзакцию
									
Функция УстановитьРеквизит(Значение, Тип, Вид="", Длина=0, Стр=0, Имя="") Далее

//******************************************************************************
//	Сообщение(Сообщение, Маркер)
//
//	Параметры:
//	Сообщение - строка сообщения
//	Маркер - маркер сообщения
//
//	Описание:
//	Выводит сообщение в окно сообщений, если указано в диалоге

Процедура Сообщение(Сообщение, Маркер)
	
	Если ВыводитьСообщения=1 Тогда глКомментарий(Сообщение,2,, Маркер); КонецЕсли;
	
КонецПроцедуры // Сообщение()

//**************************************************************************************************
//	ЗаписатьОшибку(Стр, Поле, Содержание)
//
//	Параметры:
//	Стр - номер строки файла загрузки
//	Поле - поле строки файла загрузки
//	Содержание - содержание ошибки
//
//	Описание:
//	Процедура записывает в файл ИмяФайлаОшибок информацию об ошибке

Процедура ЗаписатьОшибку(Стр=0, Поле="", Содержание="")

	Ошибка="// Ошибка"+?(Стр=0, "", ", строка "+Стр);
	Ошибка=Ошибка+?(Поле="", "", ", поле """+Поле+"""")+": "+Содержание;
	ТекстОшибки.ДобавитьСтроку(Ошибка);
	
	Если (0<Стр) и (Стр<ТекстЗагружаемыеДанные.КоличествоСтрок()) Тогда
		ТекстОшибки.ДобавитьСтроку(ТекстЗагружаемыеДанные.ПолучитьСтроку(Стр));
	КонецЕсли;

	ТекстОшибки.Записать(ИмяФайлаОшибок);
	
КонецПроцедуры // ЗаписатьОшибку()

//**************************************************************************************************
//	ОтделитьРазделителем(Слово1, Знач Разделитель)
//
//	Параметры:
//	Слово1 - строка, от которой отделяется подстрока
//	Разделитель - символ - разделитель
//
//	Возвращаемое значение:
//	Последовательность символов из строки Слово1 после символа Разделитель
//
//	Описание:
//	Если находит символ Разделитель в строке Слово1, обрезает ее до этого символа


Функция ОтделитьРазделителем(Слово1, Знач Разделитель)

	Разделитель=Найти(Слово1, Разделитель); Слово2=""; 
	Если 0<Разделитель Тогда
		Слово2=Сред(Слово1, Разделитель+1); 
		Слово1=СокрЛП(Лев(Слово1, Разделитель-1));
	КонецЕсли;
	Возврат(Слово2);
	
КонецФункции // ОтделитьРазделителем()

//**************************************************************************************************
//	ЗаписатьОбъект(Объект, Стр)
//
//	Параметры:
//	Объект - справочник, документ, операция
//	Стр - номер строки файла загрузки, описывающей объект
//
//	Возвращаемое значение:
//	1 - в случае успешной попытки записи, 0 - иначе
//
//	Описание:
//	Делает попытку записать объект; в случае успеха - выводит сообщение
//	в случае неудачи - производит запись в файле записи ошибок

Функция ЗаписатьОбъект(Объект, Стр)
	
	Попытка
		Объект.Записать();
		Тип=ТипЗначенияСтр(Объект); 
		Если Тип<>"Операция" Тогда Тип=Тип+"."+Объект.Вид(); КонецЕсли;
		Сообщение("Записан объект: "+Тип+" "+Объект, " ");
		Возврат(1);
	Исключение
		ЗаписатьОшибку(Стр, , "неудачная попытка записи объекта: "+ОписаниеОшибки());
		Возврат(0);
	КонецПопытки;
		
КонецФункции // ЗаписатьОбъект() 

//**************************************************************************************************
//	ПометкаУдаления(Пометка, Объект, Стр)
//
//	Параметры:
//	Пометка - пометка удаления объекта - 0 или 1
//	Объект - справочник, документ
//	Стр - номер строки файла загрузки, описывающей объект
//
//	Возвращаемое значение:
//	1 - в случае, если пометка установлена, 0 - иначе
//
//	Описание:
//	Делает попытку установить пометку удаления; в случае успеха - выводит сообщение
//	в случае неудачи - производит запись в файле записи ошибок

Функция ПометкаУдаления(Пометка, Объект, Стр)
	
	Тип=ТипЗначенияСтр(Объект)+"."+Объект.Вид(); 
	
	Попытка
		Если      (Пометка=1) и (Объект.ПометкаУдаления()=0) Тогда
			Объект.Удалить(0);
			Сообщение("Помечен на удаление объект: "+Тип+" "+Объект, " ");
		ИначеЕсли (Пометка=0) и (Объект.ПометкаУдаления()=1) Тогда
			Объект.СнятьПометкуУдаления();
			Сообщение("Отменено удаление объекта: "+Тип+" "+Объект, " ");
		КонецЕсли;
		Возврат(1);
	Исключение
		ЗаписатьОшибку(Стр, , "неудачная попытка изменения пометки удаления: "+ОписаниеОшибки());
		Возврат(0);
	КонецПопытки;
		
КонецФункции // ПометкаУдаления() 

//**************************************************************************************************
//	НайтиЗагрузитьСтроку(ИскСсылка="")
//
//	Параметры:
//	ИскСсылка - ссылка на искомый объект - значение первого поля искомой строки
//	
//	Возвращаемое значение:
//	Номер строки в ТаблицаЗагруженныеОбъекты, куда помещена найденная строка
//	0 - если достигнут конец файла и строка не найдена
//
//	Описание:
//	Последовательно загружает строки из ТекстЗагружаемыеДанные в ТаблицаЗагруженныеОбъекты
//	Если передана ИскСсылка - загружает строки, пока не найдет строку с ИскСсылка
//	Если ссылка не передана - загружает одну строку

Функция НайтиЗагрузитьСтроку(ИскСсылка="")
	
	Для Стр=КоличЗагруженныхСтрок+1 по ТекстЗагружаемыеДанные.КоличествоСтрок() Цикл
		
		СтрокаЗагрузки=СокрЛ(ТекстЗагружаемыеДанные.ПолучитьСтроку(Стр));
		Если (СтрДлина(СтрокаЗагрузки)=0) или ("//"=Лев(СтрокаЗагрузки, 2)) Тогда 
			Продолжить; 
		КонецЕсли;
		СтрокаЗагрузки=СтрЗаменить(СтрокаЗагрузки, СтрРазделительСтрок, РазделительСтрок);

		Реквизиты=СоздатьОбъект("СписокЗначений");
		Реквизиты.ИзСтрокиСРазделителями(СтрокаЗагрузки);
		Если Реквизиты.РазмерСписка()<3 Тогда
			ЗаписатьОшибку(Стр, , "полей меньше трех");
			Продолжить; 
		КонецЕсли;

		Ссылка=СокрЛП(Реквизиты.ПолучитьЗначение(1));

		ТаблицаЗагруженныеОбъекты.НоваяСтрока();
		ТаблицаЗагруженныеОбъекты.Строка=Стр; 
		ТаблицаЗагруженныеОбъекты.Ссылка=Ссылка; 
		ТаблицаЗагруженныеОбъекты.Реквизиты=Реквизиты;
		КоличЗагруженныхСтрок=Стр;

		Если (ИскСсылка="") или (ИскСсылка=Ссылка) Тогда 
			Возврат(ТаблицаЗагруженныеОбъекты.НомерСтроки); 
		КонецЕсли;

	КонецЦикла;
	Возврат(0);
	
КонецФункции // НайтиЗагрузитьСтроку()
	
//**************************************************************************************************
//	СравнитьРеквизитыСправочника(Объект, ПоискРеквизиты)
//
//	Параметры:
//	Объект - справочник
//	ПоискРеквизиты - список значений реквизитов: в представлении имя реквизита
//
//	Возвращаемое значение:
//	1 - значения реквизитов Объекта соответствуют списку ПоискРеквизиты
//	0 - значение какого-либо из реквизитов отличается
//
//	Описание:
//	Сравнивает реквизиты Объекта со списком ПоискРеквизиты

Функция СравнитьРеквизитыСправочника(Объект, ПоискРеквизиты)
	Перем Имя;
	
	Для Номер=1 по ПоискРеквизиты.РазмерСписка() Цикл		
		Значение=ПоискРеквизиты.ПолучитьЗначение(Номер, Имя);
		Если ТипЗначенияСтр(Значение)="Строка" Тогда
			Если СокрЛП(Объект.ПолучитьАтрибут(Имя))<>СокрЛП(Значение) Тогда
				Возврат(0);
			КонецЕсли;
		Иначе
			Если Объект.ПолучитьАтрибут(Имя)<>Значение Тогда
				Возврат(0);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат(1);
	
КонецФункции // СравнитьРеквизитыСправочника()
	
//**************************************************************************************************
//	УстановитьСправочник(Элемент, ТипОбъекта, ВидОбъекта, Реквизиты, Стр)
//
//	Параметры:
//	Элемент - переменная, в которую функция помещает найденный/созданный элемент справочника
//	ТипОбъекта - строка - "Группа" или "Элемент"
//	ВидОбъекта - вид справочника
//	Реквизиты - список полей строки файла загрузки, описывающей Элемент
//	Стр - номер строки файла загрузки, описывающей элемент
//
//	Возвращаемое значение:
//	0 - объект найти/создать не удалось из-за ошибки в файле загрузки
//	"" (пустая строка) - объект найти не удалость, а создавать не надо
//	"Найден" - найден существующий объект
//	"Создан" - создан новый объект
//
//	Описание:
//	В зависимости от значения третьего поля в списке Реквизиты:
//	"ЗамещеныВсе" - ищет все элементы справочника и помечает на удаление
//	"" - ищет первый соответствующий элемент
//	"Записан", "Помечен" - ищет или создает, если не находит, соответствующий элемент
//	Поиск производится по значениям реквизитов, помеченных в списке символом "?"
//	У найденнного/созданного объекта устанавливает указанные в списке Реквизиты 
//	значения атрибутов Код, Наименование, Родитель, Владелец, значения реквизитов, 
//	по которым происходит поиск, устанавливает/снимает пометку на удаление.
//	Удаляет установленные ею атрибуты/реквизиты из списка Реквизиты

Функция УстановитьСправочник(Элемент, ТипОбъекта, ВидОбъекта, Реквизиты, Стр)

	Если Метаданные.Справочник(ВидОбъекта).Выбран()=0 Тогда
		ЗаписатьОшибку(Стр, 2, "неверный вид справочника");
		Возврат(0);
	КонецЕсли;
	
	Объект=СоздатьОбъект("Справочник."+ВидОбъекта);
	МетаОбъект=Метаданные.Справочник(ВидОбъекта);

	СостояниеОбъекта=Реквизиты.ПолучитьЗначение(3);
	ПоискРеквизиты=СоздатьОбъект("СписокЗначений");

	Если ТипОбъекта="Группа" 
	Тогда ЭтоГруппа=1; НеИспользуется="ДляЭлемента";
	Иначе ЭтоГруппа=0; НеИспользуется="ДляГруппы";
	КонецЕсли;
	
	УчитыватьИерархию=?(МетаОбъект.Владелец.Выбран()=1, 0, 1);
	ВключатьПодчиненные=?(МетаОбъект.КоличествоУровней=1, 0, 1);
	Код=0; НовыйКод=0; НовоеНаименование=0; НовыйРодитель=0; НовыйВладелец=0;
	
	// формирование списка реквизитов для поиска, установка родителя и владельца
	Номер=4; Пока Номер<=Реквизиты.РазмерСписка() Цикл
		// формат поля: "?Имя(Тип)Значение;"
		Имя=Реквизиты.ПолучитьЗначение(Номер); Значение=ОтделитьРазделителем(Имя, "(");
		
		// поля без скобок игнорируются при загрузке
		Если Значение="" Тогда
			Реквизиты.УдалитьЗначение(Номер);
			
		// поля. начинающиеся с "?", используются для поиска
		ИначеЕсли Лев(Имя, 1)="?" Тогда             
			Имя=Сред(Имя, 2); МетаРеквизит=МетаОбъект.Реквизит(Имя);

			Если МетаРеквизит.Выбран()=1 Тогда // отбор по реквизиту
				Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина;
				
				Если МетаРеквизит.Периодический=1 Тогда
					ЗаписатьОшибку(Стр, Имя, "реквизит периодический");
					Возврат(0);
				ИначеЕсли МетаРеквизит.Использование=НеИспользуется Тогда
					ЗаписатьОшибку(Стр, Имя, "реквизит используется "+НеИспользуется);
					Возврат(0);
				ИначеЕсли 0=УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
					Возврат(0);
				КонецЕсли;
				ПоискРеквизиты.ДобавитьЗначение(Значение, Имя);
				Реквизиты.УдалитьЗначение(Номер);
	
			ИначеЕсли Имя="Код" Тогда // отбор по коду
				УстановитьРеквизит(Значение, "Строка"); 
				Значение=СокрЛП(Значение); Код=Значение;
				ПоискРеквизиты.ДобавитьЗначение(Значение, Имя);
				Реквизиты.УдалитьЗначение(Номер);
				
			ИначеЕсли Имя="Наименование" Тогда // отбор по наименованию
				УстановитьРеквизит(Значение, "Строка");
				ПоискРеквизиты.ДобавитьЗначение(Значение, Имя);
				Реквизиты.УдалитьЗначение(Номер);

			ИначеЕсли (Имя="Родитель") и (1<МетаОбъект.КоличествоУровней) Тогда
				Если 0=УстановитьРеквизит(Значение, "Справочник", ВидОбъекта, 0, Стр, Имя) Тогда
					Возврат(0);
				ИначеЕсли Значение.Выбран()=0 Тогда
				ИначеЕсли Значение.ЭтоГруппа()=0 Тогда
					ЗаписатьОшибку(Стр, Имя, "родитель является элементом, а не группой");
					Возврат(0);
				ИначеЕсли МетаОбъект.Владелец.Выбран()=1 Тогда
					Объект.ИспользоватьВладельца(Значение.Владелец);
				КонецЕсли;
				Объект.ИспользоватьРодителя(Значение);
				УчитыватьИерархию=1; ВключатьПодчиненные=0;
				Реквизиты.УдалитьЗначение(Номер);
				
			ИначеЕсли (Имя="Владелец") и (МетаОбъект.Владелец.Выбран()=1) Тогда
				Тип="Справочник"; Вид=МетаОбъект.Владелец.Идентификатор;
				Если 0=УстановитьРеквизит(Значение, Тип, Вид, 0, Стр, Имя) Тогда
					Возврат(0);
				ИначеЕсли Значение.Выбран()=0 Тогда
					ЗаписатьОшибку(Стр, Имя, "владелец не выбран");
					Возврат(0);
				ИначеЕсли Значение.ЭтоГруппа()=1 Тогда
					ЗаписатьОшибку(Стр, Имя, "владелец является группой, а не элементом");
					Возврат(0);
				КонецЕсли;
				Объект.ИспользоватьВладельца(Значение);
				УчитыватьИерархию=1;
				Реквизиты.УдалитьЗначение(Номер);

			Иначе
				ЗаписатьОшибку(Стр, Имя, "неверное имя реквизита");
				Возврат(0);
			КонецЕсли;
	
		ИначеЕсли Имя="Код" Тогда // новый код
			УстановитьРеквизит(Значение, "Строка"); НовыйКод=Значение;
			Реквизиты.УдалитьЗначение(Номер);

		ИначеЕсли Имя="Наименование" Тогда // новое наименование
			УстановитьРеквизит(Значение, "Строка"); НовоеНаименование=Значение;
			Реквизиты.УдалитьЗначение(Номер);

		ИначеЕсли (Имя="Родитель") и (1<МетаОбъект.КоличествоУровней) Тогда
			Если 0=УстановитьРеквизит(Значение, "Справочник", ВидОбъекта, 0, Стр, Имя) Тогда
			ИначеЕсли Значение.Выбран()=0 Тогда
				НовыйРодитель=Значение;
			ИначеЕсли Значение.ЭтоГруппа()=0 Тогда
				ЗаписатьОшибку(Стр, Имя, "родитель является элементом, а не группой");
			Иначе
				НовыйРодитель=Значение;
				Если МетаОбъект.Владелец.Выбран()=1 Тогда
					НовыйВладелец=Значение.Владелец;
				КонецЕсли;
			КонецЕсли;
			Реквизиты.УдалитьЗначение(Номер);

   		ИначеЕсли (Имя="Владелец") и (МетаОбъект.Владелец.Выбран()=1) Тогда
			Тип="Справочник"; Вид=МетаОбъект.Владелец.Идентификатор;
   			Если 0=УстановитьРеквизит(Значение, Тип, Вид, 0, Стр, Имя) Тогда
				Возврат(0);
			ИначеЕсли Значение.Выбран()=0 Тогда
				Возврат(0);
			ИначеЕсли Значение.ЭтоГруппа()=1 Тогда
				ЗаписатьОшибку(Стр, Имя, "владелец является группой, а не элементом");
				Возврат(0);
			КонецЕсли;
			НовыйВладелец=Значение;
			Реквизиты.УдалитьЗначение(Номер);
		
		Иначе // реквизит остается в списке реквизитов
			Номер=Номер+1;
		КонецЕсли;
	КонецЦикла; // Номер=1; Пока Номер<=Реквизиты.РазмерСписка() Цикл
	
	Если СостояниеОбъекта="ЗамещеныВсе" Тогда
		// групповое удаление объектов
		//Если 0<ПоискРеквизиты.РазмерСписка() Тогда
			Объект.ВыбратьЭлементы(УчитыватьИерархию);
			Пока 1=Объект.ПолучитьЭлемент(ВключатьПодчиненные) Цикл
				Если Объект.ЭтоГруппа()<>ЭтоГруппа Тогда
				ИначеЕсли 1=СравнитьРеквизитыСправочника(Объект, ПоискРеквизиты) Тогда
					ПометкаУдаления(1, Объект, Стр);
				КонецЕсли;
			КонецЦикла;
		//КонецЕсли;
		Возврат("ЗамещеныВсе");
	КонецЕсли;

	Результат="";
	// поиск существующего объекта
	ИскатьПодчиненные=?((УчитыватьИерархию=1) и (ВключатьПодчиненные=0), 1, 0);
	Если ((МетаОбъект.КонтрольУникальности=1) и (Код<>0)) и
	     ((МетаОбъект.СерииКодов="ВесьСправочник") или (ИскатьПодчиненные=1)) Тогда
		// возможен быстрый поиск по коду
		Если Объект.НайтиПоКоду(Код, ИскатьПодчиненные)=0 Тогда
		ИначеЕсли Объект.ЭтоГруппа()<>ЭтоГруппа Тогда
		ИначеЕсли 1=СравнитьРеквизитыСправочника(Объект, ПоискРеквизиты) Тогда
			Результат="Найден";
		КонецЕсли;
	ИначеЕсли 0<ПоискРеквизиты.РазмерСписка() Тогда
		// поиск перебором элементов
		Объект.ВыбратьЭлементы(УчитыватьИерархию);
		Пока 1=Объект.ПолучитьЭлемент(ВключатьПодчиненные) Цикл
			Если Объект.ЭтоГруппа()<>ЭтоГруппа Тогда
			ИначеЕсли 1=СравнитьРеквизитыСправочника(Объект, ПоискРеквизиты) Тогда
				Результат="Найден"; Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// возврат, если объект не надо создавать
	Если СостояниеОбъекта="" Тогда
		Элемент=Объект.ТекущийЭлемент();
		Если Результат="" Тогда
			Сообщение("Не найден объект: Справочник."+ВидОбъекта+" (строка "+Стр+") "+
			          ТекстЗагружаемыеДанные.ПолучитьСтроку(Стр), " ");
		КонецЕсли;
		Возврат(Результат);
	КонецЕсли;
	
	Если Результат="" Тогда 
		// создание нового объекта, установка известных реквизитов
		Если НовыйРодитель<>0 Тогда Объект.ИспользоватьРодителя(НовыйРодитель); КонецЕсли;
		Если НовыйВладелец<>0 Тогда Объект.ИспользоватьВладельца(НовыйВладелец); КонецЕсли;
		Если ТипОбъекта="Группа" Тогда Объект.НоваяГруппа(); Иначе Объект.Новый(); КонецЕсли;
		Для Номер=1 по ПоискРеквизиты.РазмерСписка() Цикл
			Значение=ПоискРеквизиты.ПолучитьЗначение(Номер, Имя);
			Объект.УстановитьАтрибут(Имя, Значение);
		КонецЦикла;
		Результат="Создан";

	Иначе
		Объект.НайтиЭлемент(Объект.ТекущийЭлемент());
		// установка новых атрибутов 
		Если НовыйРодитель<>0 Тогда Объект.Родитель=НовыйРодитель; КонецЕсли;
		Если НовыйВладелец<>0 Тогда Объект.Владелец=НовыйВладелец; КонецЕсли;
	КонецЕсли;
	Если НовыйКод<>0 Тогда Объект.Код=НовыйКод; КонецЕсли;
	Если НовоеНаименование<>0 Тогда Объект.Наименование=НовоеНаименование; КонецЕсли;
	
	// проверка на существование других элементов с уникальным кодом
	Если МетаОбъект.КонтрольУникальности=1 Тогда
		Конфликт=СоздатьОбъект("Справочник."+ВидОбъекта);
		Если МетаОбъект.СерииКодов="ВПределахПодчинения" Тогда
			Если Объект.Родитель.Выбран()=1 Тогда 
				Конфликт.ИспользоватьРодителя(Объект.Родитель);
			КонецЕсли;
			Если МетаОбъект.Владелец.Выбран()=1 Тогда 
				Конфликт.ИспользоватьВладельца(Объект.Владелец);
			КонецЕсли;
			УчитыватьИерархию=1;
		Иначе
			УчитыватьИерархию=0;
		КонецЕсли;

		Если Конфликт.НайтиПоКоду(Объект.Код, УчитыватьИерархию)=0 Тогда
		ИначеЕсли Конфликт.ТекущийЭлемент()<>Объект.ТекущийЭлемент() Тогда
			Ошибка="код не уникальный - назначен новый код существующему элементу: ";
			// последовательное присвоение нового кода
			Добавка=Число(Прав(Объект.Код, 1))+1; ДлинаДобавки=1; 
			Пока ДлинаДобавки<=МетаОбъект.ДлинаКода Цикл
				Конфликт.Код=Лев(Объект.Код, МетаОбъект.ДлинаКода-ДлинаДобавки)+Строка(Добавка);
				Попытка
					// попытка записать конфликтующий элемент с другим кодом
					Конфликт.Записать();
					ЗаписатьОшибку(Стр, "Код",  Ошибка+Конфликт.Код); 
					Прервать;
				Исключение
					Добавка=Добавка+1; ДлинаДобавки=СтрДлина(Строка(Добавка));
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
			
	// попытка записать объект
	Если 0=ЗаписатьОбъект(Объект, Стр) Тогда
		Возврат(0);
	КонецЕсли;

	// пометка удаления
	Если СостояниеОбъекта="Помечен" Тогда
		ПометкаУдаления(1, Объект, Стр);
	ИначеЕсли СостояниеОбъекта="Записан" Тогда
		ПометкаУдаления(0, Объект, Стр);
    Иначе
		ЗаписатьОшибку(Стр, 3, "неверное состояние объекта");
	КонецЕсли;

	Элемент=Объект.ТекущийЭлемент();
	Возврат(Результат);
	
КонецФункции // УстановитьСправочник()

//**************************************************************************************************
//	СравнитьРеквизитыДокумента(Объект, ПоискРеквизитыД, ПоискРеквизитыО)
//
//	Параметры:
//	Объект - документ
//	ПоискРеквизитыД - список значений реквизитов документа: в представлении имя реквизита
//	ПоискРеквизитыО - список значений реквизитов операции: в представлении имя реквизита
//
//	Возвращаемое значение:
//	1 - значения реквизитов Объекта соответствуют спискам ПоискРеквизитыД и ПоискРеквизитыО
//	0 - значение какого-либо из реквизитов отличается
//
//	Описание:
//	Сравнивает реквизиты документа и его операции со списками ПоискРеквизитыД и ПоискРеквизитыО

Функция СравнитьРеквизитыДокумента(Объект, ПоискРеквизитыД, ПоискРеквизитыО)
	Перем Имя;
	
	Если (Объект.СуществуетОперация()=0) и (0<ПоискРеквизитыО.РазмерСписка()) Тогда
		Возврат(0);
	КонецЕсли;
	
	Для Номер=1 по ПоискРеквизитыД.РазмерСписка() Цикл		
		Значение=ПоискРеквизитыД.ПолучитьЗначение(Номер, Имя);
		Если Объект.ПолучитьАтрибут(Имя)<>Значение Тогда
			Возврат(0);
		КонецЕсли;
	КонецЦикла;
	
	Для Номер=1 по ПоискРеквизитыО.РазмерСписка() Цикл		
		Значение=ПоискРеквизитыО.ПолучитьЗначение(Номер, Имя);
		Если Объект.Операция.ПолучитьАтрибут(Имя)<>Значение Тогда
			Возврат(0);
		КонецЕсли;
	КонецЦикла;

	Возврат(1);
	
КонецФункции // СравнитьРеквизитыДокумента()
	
//**************************************************************************************************
//	УстановитьДокумент(Документ, ВидОбъекта, Реквизиты, Стр)
//
//	Параметры:
//	Документ - переменная, в которую функция помещает найденный/созданный документ
//	ВидОбъекта - вид документа
//	Реквизиты - список полей строки файла загрузки, описывающей документ
//	Стр - номер строки файла загрузки, описывающей элемент
//
//	Возвращаемое значение:
//	0 - объект найти/создать не удалось из-за ошибки в файле загрузки
//	"" (пустая строка) - объект найти не удалость, а создавать не надо
//	"Найден" - найден существующий объект
//	"Создан" - создан новый объект
//
//	Описание:
//	В зависимости от значения третьего поля в списке Реквизиты:
//	"ЗамещеныВсе" - ищет все документы и помечает на удаление
//	"" - ищет первый соответствующий документ
//	"Записан", "Помечен" - ищет или создает, если не находит, соответствующий документ
//	Поиск производится по значениям реквизитов, помеченных в списке символом "?"
//	У найденнного/созданного объекта устанавливает указанные в списке Реквизиты 
//	значения атрибутов НомерДок, ДатаДок, время, значения реквизитов, 
//	по которым происходит поиск, устанавливает/снимает пометку на удаление.
//	Если документ требует проведения - помещает его в СписокПроводимыхОбъектов
//	Удаляет установленные ею атрибуты/реквизиты из списка Реквизиты

Функция УстановитьДокумент(Документ, ВидОбъекта, Реквизиты, Стр)

	Если Метаданные.Документ(ВидОбъекта).Выбран()=0 Тогда
		ЗаписатьОшибку(Стр, 2, "неверный вид документа");
		Возврат(0);
	КонецЕсли;
	
	Объект=СоздатьОбъект("Документ."+ВидОбъекта);
	МетаОбъект=Метаданные.Документ(ВидОбъекта);

	СостояниеОбъекта=Реквизиты.ПолучитьЗначение(3);
	СостояниеПроводок=СокрЛП(ОтделитьРазделителем(СостояниеОбъекта, " "));

	ПоискРеквизитыД=СоздатьОбъект("СписокЗначений");
	ПоискРеквизитыО=СоздатьОбъект("СписокЗначений");

	ДлинаСодержанияОперации=Метаданные.ДлинаСодержанияОперации;
	НомерДок=0; ДатаДок=0; ДатаНач=0; ДатаКон=0; НовыйНомер=0; НоваяДата=0; Время=0;
	
	// формирование списков реквизитов для поиска
	Номер=4; Пока Номер<=Реквизиты.РазмерСписка() Цикл
		Имя=Реквизиты.ПолучитьЗначение(Номер); Значение=ОтделитьРазделителем(Имя, "(");

		Если Значение="" Тогда
			Реквизиты.УдалитьЗначение(Номер);
			
		ИначеЕсли Лев(Имя, 10)="?Операция." Тогда
			Имя=Сред(Имя, 11); МетаРеквизит=Метаданные.РеквизитОперации(Имя);
			
			Если МетаРеквизит.Выбран()=1 Тогда // отбор по реквизиту
				Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина;
				Если 0=УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, "Операция."+Имя) Тогда
					Возврат(0);
				КонецЕсли;
				ПоискРеквизитыО.ДобавитьЗначение(Значение, Имя);
				Реквизиты.УдалитьЗначение(Номер);
	
			ИначеЕсли Имя="СуммаОперации" Тогда // отбор по сумме операции
				УстановитьРеквизит(Значение, "Число");
				ПоискРеквизитыО.ДобавитьЗначение(Значение, Имя);
				Реквизиты.УдалитьЗначение(Номер);

			ИначеЕсли Имя="Содержание" Тогда // отбор по содержанию операции
				УстановитьРеквизит(Значение, "Строка", "", ДлинаСодержанияОперации);
				ПоискРеквизитыО.ДобавитьЗначение(Значение, Имя);
				Реквизиты.УдалитьЗначение(Номер);

			Иначе
				ЗаписатьОшибку(Стр, "Операция."+Имя, "неверное имя реквизита");
				Возврат(0);
			КонецЕсли;
	

		ИначеЕсли Лев(Имя, 1)="?" Тогда
			Имя=Сред(Имя, 2); МетаРеквизит=МетаОбъект.РеквизитШапки(Имя);
			
			Если МетаРеквизит.Выбран()=1 Тогда // отбор по реквизиту
				Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина;
				Если 0=УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
					Возврат(0);
				КонецЕсли;
				ПоискРеквизитыД.ДобавитьЗначение(Значение, Имя);
				Реквизиты.УдалитьЗначение(Номер);
	
			ИначеЕсли Метаданные.ОбщийРеквизитДокумента(Имя).Выбран()=1 Тогда
				МетаРеквизит=Метаданные.ОбщийРеквизитДокумента(Имя);
				Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина;
				Если 0=УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
					Возврат(0);
				КонецЕсли;
				ПоискРеквизитыД.ДобавитьЗначение(Значение, Имя);
				Реквизиты.УдалитьЗначение(Номер);

			ИначеЕсли Имя="НомерДок" Тогда // отбор по номеру
				УстановитьРеквизит(Значение, "Строка"); НомерДок=Значение;
				ПоискРеквизитыД.ДобавитьЗначение(Значение, Имя);
				Реквизиты.УдалитьЗначение(Номер);

			ИначеЕсли Имя="ДатаДок" Тогда // отбор по дате
				УстановитьРеквизит(Значение, "Дата"); ДатаДок=Значение; 
				ДатаНач=Значение; ДатаКон=Значение;
				Реквизиты.УдалитьЗначение(Номер);

			ИначеЕсли Имя="ДатаНач" Тогда // отбор в интервале дат
				УстановитьРеквизит(Значение, "Дата"); ДатаНач=Значение;
				Реквизиты.УдалитьЗначение(Номер);

			ИначеЕсли Имя="ДатаКон" Тогда // отбор в интервале дат
				УстановитьРеквизит(Значение, "Дата"); ДатаКон=Значение;
				Реквизиты.УдалитьЗначение(Номер);

			Иначе
				ЗаписатьОшибку(Стр, Имя, "неверное имя реквизита");
				Возврат(0);
			КонецЕсли;
	
		ИначеЕсли Имя="НомерДок" Тогда
			УстановитьРеквизит(Значение, "Строка"); НовыйНомер=Значение;
			Реквизиты.УдалитьЗначение(Номер);

		ИначеЕсли Имя="ДатаДок" Тогда
			УстановитьРеквизит(Значение, "Дата"); НоваяДата=Значение;
			Реквизиты.УдалитьЗначение(Номер);

		ИначеЕсли Имя="ВремяДок" Тогда
			УстановитьРеквизит(Значение, "Строка"); Время=Значение;
			Реквизиты.УдалитьЗначение(Номер);

		Иначе // реквизит остается в списке реквизитов
			Номер=Номер+1;
		КонецЕсли;
	КонецЦикла; // Номер=1; Пока Номер<=Реквизиты.РазмерСписка() Цикл

	Если СостояниеОбъекта="ЗамещеныВсе" Тогда
		// групповое удаление объектов
		Объект.ВыбратьДокументы(ДатаНач, ДатаКон);
		Пока 1=Объект.ПолучитьДокумент() Цикл
			Если 1=СравнитьРеквизитыДокумента(Объект, ПоискРеквизитыД, ПоискРеквизитыО) Тогда
				ПометкаУдаления(1, Объект, Стр);
			КонецЕсли;
		КонецЦикла;
		Возврат("ЗамещеныВсе");
	КонецЕсли;

	Результат="";
	// поиск существующего документа
	Если ((МетаОбъект.КонтрольУникальности=1) и (НомерДок<>0)) и 
	     ((МетаОбъект.ПериодичностьНомера="Все") или (ДатаДок<>0)) Тогда
		// возможен быстрый поиск по номеру
		Если Объект.НайтиПоНомеру(НомерДок, ДатаДок)=0 Тогда
		ИначеЕсли 1=СравнитьРеквизитыДокумента(Объект, ПоискРеквизитыД, ПоискРеквизитыО) Тогда
			Результат="Найден";
		КонецЕсли;
	ИначеЕсли 0<ПоискРеквизитыД.РазмерСписка()+ПоискРеквизитыО.РазмерСписка() Тогда
		// поиск перебором элементов
		Объект.ОбратныйПорядок(1); Объект.ВыбратьДокументы(ДатаНач, ДатаКон);
		Пока 1=Объект.ПолучитьДокумент() Цикл
			Если 1=СравнитьРеквизитыДокумента(Объект, ПоискРеквизитыД, ПоискРеквизитыО) Тогда
				Результат="Найден"; Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// возврат, если объект не надо создавать
	Если СостояниеОбъекта="" Тогда
		Документ=Объект.ТекущийДокумент();
		Если Результат="" Тогда
			Сообщение("Не найден объект: Документ."+ВидОбъекта+" (строка "+Стр+") "+
			          ТекстЗагружаемыеДанные.ПолучитьСтроку(Стр), " ");
		КонецЕсли;
		Возврат(Результат);
	КонецЕсли;
	
	// создание нового документа или обработка найденного
	Если Результат="" Тогда
		Объект.Новый(); Объект.АвтоВремяОтключить();
		Если ДатаДок<>0 Тогда Объект.ДатаДок=ДатаДок; КонецЕсли;
		Для Номер=1 по ПоискРеквизитыД.РазмерСписка() Цикл
			Значение=ПоискРеквизитыД.ПолучитьЗначение(Номер, Имя);
			Объект.УстановитьАтрибут(Имя, Значение);
		КонецЦикла;
		Результат="Создан";
	Иначе 
		Если СостояниеОбъекта="" Тогда 
			СостояниеОбъекта=?(Объект.Проведен()=0, "", "Проведен"); 
		КонецЕсли;
		Попытка
			Объект.СделатьНеПроведенным();
		Исключение
			ЗаписатьОшибку(Стр, , "неудачная попытка отмены проведения документа: "+ОписаниеОшибки());
		КонецПопытки;
		Если 0<МетаОбъект.РеквизитТабличнойЧасти() Тогда 
			Объект.УдалитьСтроки(); 
		КонецЕсли;
	КонецЕсли;
	// новый номер, дата, время
	Если НовыйНомер<>0 Тогда Объект.НомерДок=НовыйНомер; КонецЕсли;
	Если НоваяДата<>0 Тогда Объект.ДатаДок=НоваяДата; КонецЕсли;
	Если Время<>0 Тогда
		Попытка
			Объект.УстановитьВремя(Число(Сред(Время, 1, 2)), Число(Сред(Время, 4, 2)), Число(Сред(Время, 7, 2)));
		Исключение
			ЗаписатьОшибку(Стр, , "неудачная попытка изменения времени документа: "+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	// операция документа
	Если МетаОбъект.БухгалтерскийУчет=1 Тогда
		Если СостояниеПроводок="" Тогда
			Если (ВидОбъекта=Метаданные.ДокументОперации.Идентификатор) или 
			     (МетаОбъект.СоздаватьОперацию="Всегда") Тогда
				ЗаписатьОшибку(Стр, 3, "неверное состояние операции");
			Иначе
				Объект.СуществуетОперация(0);
			КонецЕсли;
		Иначе		
			Объект.СуществуетОперация(1);
			Если Результат="Создан" Тогда 
				Для Номер=1 по ПоискРеквизитыО.РазмерСписка() Цикл
					Значение=ПоискРеквизитыО.ПолучитьЗначение(Номер, Имя);
					Объект.Операция.УстановитьАтрибут(Имя, Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СостояниеПроводок<>"" Тогда
		ЗаписатьОшибку(Стр, 3, "неверное состояние операции");
	КонецЕсли;

	// проверка на существование других документов с уникальным номером
	Если (МетаОбъект.КонтрольУникальности=1) Тогда
		Конфликт=СоздатьОбъект("Документ."+ВидОбъекта);
		Если Конфликт.НайтиПоНомеру(Объект.НомерДок, Объект.ДатаДок)=0 Тогда
		ИначеЕсли Конфликт.ТекущийДокумент()<>Объект.ТекущийДокумент() Тогда
			Ошибка="номер не уникальный - назначен новый номер существующему документу: ";
			// последовательное присвоение нового кода
			Добавка=Число(Прав(Объект.НомерДок, 1))+1; ДлинаДобавки=1; 
			Пока ДлинаДобавки<=МетаОбъект.ДлинаНомера Цикл
				Конфликт.НомерДок=Лев(Объект.НомерДок, МетаОбъект.ДлинаНомера-ДлинаДобавки)+Строка(Добавка);
				Попытка
					// попытка записать конфликтующий элемент с другим кодом
					Конфликт.Записать();
					ЗаписатьОшибку(Стр, "НомерДок",  Ошибка+Конфликт.НомерДок); 
					Прервать;
				Исключение
					Добавка=Добавка+1; ДлинаДобавки=СтрДлина(Строка(Добавка));
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// попытка записать документ
	Если 0=ЗаписатьОбъект(Объект, Стр) Тогда
		Возврат(0);
	КонецЕсли;

	// пометка удаления и проведение документа
	Если СостояниеОбъекта="Помечен" Тогда
		ПометкаУдаления(1, Объект, Стр);
	ИначеЕсли СостояниеОбъекта="Записан" Тогда
		ПометкаУдаления(0, Объект, Стр);
	ИначеЕсли СостояниеОбъекта="Проведен" Тогда
		ПометкаУдаления(0, Объект, Стр);
		Если МетаОбъект.РазрешитьПроведение=1 Тогда
			СписокПроводимыхОбъектов.ДобавитьЗначение(Объект.ТекущийДокумент());
		КонецЕсли;
	Иначе
		ЗаписатьОшибку(Стр, 3, "неверное состояние объекта");
	КонецЕсли;

	// проводки документа
	Операция=СоздатьОбъект("Операция");
	Операция.НайтиОперацию(Объект.ТекущийДокумент());
	Если (1=Операция.Выбрана()) и(СостояниеОбъекта<>"Помечен") Тогда
		Если СостояниеПроводок="Включен" Тогда
			Операция.ВключитьПроводки(1);
		ИначеЕсли СостояниеПроводок="Выключен" Тогда
			Операция.ВключитьПроводки(0);
		Иначе
			ЗаписатьОшибку(Стр, 3, "неверное состояние операции");
		КонецЕсли;
		Пока 1=Операция.ВыбратьПроводки() Цикл
			Операция.ПолучитьПроводку();
			Операция.УдалитьПроводку();
		КонецЦикла;
		ЗаписатьОбъект(Операция, Стр);
	КонецЕсли;

	Документ=Объект.ТекущийДокумент();
	Возврат(Результат);
	
КонецФункции

//**************************************************************************************************
//	УстановитьОбъект(ТекущаяСтрока)
//
//	Параметры:
//	ТекущаяСтрока - строка таблицы ТаблицаЗагруженныеОбъекты, которую нужно установить
//
//	Возвращаемое значение:
//	1 - объект установлен, 0 - иначе
//
//	Описание:
//	Если объект уже установлен, возвращает 1
//	Если строка содержит описание справочника или документа, устанавливает их - находит/создает
//	объекты по их описанию. Проверяет на циклические ссылки объектов друг на друга.

Функция УстановитьОбъект(ТекущаяСтрока)
	
	// глКомментарий("ТекущаяСтрока="+ТекущаяСтрока+" КоличествоСтрок="+ТаблицаЗагруженныеОбъекты.КоличествоСтрок(),2);
	
	Стр=ТаблицаЗагруженныеОбъекты.ПолучитьЗначение(ТекущаяСтрока, "Строка");
	Объект=ТаблицаЗагруженныеОбъекты.ПолучитьЗначение(ТекущаяСтрока, "Объект");
	Реквизиты=ТаблицаЗагруженныеОбъекты.ПолучитьЗначение(ТекущаяСтрока, "Реквизиты");

	Если Объект="Устанавливается" Тогда // циклическая ссылка
		ЗаписатьОшибку(Стр, , "обнаружена циклическая ссылка");
		Возврат(0);
	ИначеЕсли ТипЗначенияСтр(Объект)<>"" Тогда // объект уже установлен
		Возврат(1); 
	КонецЕсли;
    
	Тип=Реквизиты.ПолучитьЗначение(2); Вид=СокрЛП(ОтделитьРазделителем(Тип, "."));
	
	Если ПустоеЗначение(Тип)=1 Тогда
		ЗаписатьОшибку(Стр, 2, "строка не идентифицирована");
	
	ИначеЕсли (Тип="Группа") или (Тип="Элемент") Тогда
    	ТаблицаЗагруженныеОбъекты.УстановитьЗначение(ТекущаяСтрока, "Объект", "Устанавливается");
		Результат=УстановитьСправочник(Объект, Тип, Вид, Реквизиты, Стр);
		Если Результат=0 Тогда
			ЗаписатьОшибку(Стр, , "справочник не идентифицирован");
		КонецЕсли;

	ИначеЕсли (Тип="Документ") Тогда
    	ТаблицаЗагруженныеОбъекты.УстановитьЗначение(ТекущаяСтрока, "Объект", "Устанавливается");
		Результат=УстановитьДокумент(Объект, Вид, Реквизиты, Стр);
		Если Результат=0 Тогда
			ЗаписатьОшибку(Стр, , "документ не идентифицирован");
		КонецЕсли;
    
	Иначе
		Объект=Тип; Результат="";
	КонецЕсли;

	ТаблицаЗагруженныеОбъекты.УстановитьЗначение(ТекущаяСтрока, "Объект", Объект);
	ТаблицаЗагруженныеОбъекты.УстановитьЗначение(ТекущаяСтрока, "Результат", Результат);

	Возврат(?(ПустоеЗначение(Объект)=1, 0, 1));
	
КонецФункции // УстановитьОбъект()

//**************************************************************************************************
//	УстановитьРеквизитПоСсылке(Значение, Тип, Вид, Стр, Имя)
//
//	Параметры:
//	Значение - ссылка на агрегатный объект в файле загрузки; 
//		после выполнения функции в параметре будет записано значение реквизита
//	Тип - тип реквизита, как он задан в метаданных
//		после выполнения функции в параметре будет записан тип реквизита
//	Вид - вид реквизита, как он задан в метаданных
//		после выполнения функции в параметре будет записан вид реквизита
//	Стр - номер строки файла загрузки (для записи ошибок)
//	Имя - имя поля строки файла загрузки (для записи ошибок)
//
//	Возвращаемое значение:
//	1 - реквизит установлен, 0 - иначе
//
//	Описание:
//	Устанавливает значения реквизитов типа справочник или документ.
//	Определяет тип и вид для реквизитов неопределенного типа

Функция УстановитьРеквизитПоСсылке(Значение, Тип, Вид, Стр, Имя)
	
	ТекущаяСтрока=0;
	ТаблицаЗагруженныеОбъекты.НайтиЗначение(Значение, ТекущаяСтрока, "Ссылка");

	Если ТекущаяСтрока=0 Тогда
		ТекущаяСтрока=НайтиЗагрузитьСтроку(Значение);
		Если ТекущаяСтрока=0 Тогда
			ЗаписатьОшибку(Стр, Имя, "ссылка не найдена");
			Возврат(0);
		КонецЕсли;
	КонецЕсли;

	Если 0=УстановитьОбъект(ТекущаяСтрока) Тогда
		Возврат(0);
	КонецЕсли;

	Объект=ТаблицаЗагруженныеОбъекты.ПолучитьЗначение(ТекущаяСтрока, "Объект");
    
	Если      Тип="#" Тогда
		Тип=ТипЗначенияСтр(Объект);
	ИначеЕсли Тип<>ТипЗначенияСтр(Объект) Тогда
		ЗаписатьОшибку(Стр, Имя, "неверный тип реквизита");
		Возврат(0);
	КонецЕсли;	

	Если Вид="" Тогда
		Вид=Объект.Вид();
	ИначеЕсли Вид<>Объект.Вид() Тогда
		ЗаписатьОшибку(Стр, Имя, "неверный вид реквизита");
		Возврат(0);
	КонецЕсли;	

	Значение=Объект;
	Возврат(1);
	
КонецФункции // УстановитьРеквизитПоСсылке()

//**************************************************************************************************
//	УстановитьРеквизит(Значение, Тип, Вид, Стр, Имя)
//
//	Параметры:
//	Значение - строковое описание типа и значения реквизита; 
//		после выполнения функции в параметре будет записано значение реквизита
//	Тип - тип реквизита, как он задан в метаданных
//		после выполнения функции в параметре будет записан тип реквизита
//	Вид - вид реквизита, как он задан в метаданных
//		после выполнения функции в параметре будет записан вид реквизита
//	Стр - номер строки файла загрузки (для записи ошибок)
//	Имя - имя поля строки файла загрузки (для записи ошибок)
//
//	Возвращаемое значение:
//	1 - реквизит установлен, 0 - иначе
//
//	Описание:
//	Устанавливает значения реквизитов по их строковому описанию.
//	Определяет тип и вид для реквизитов неопределенного типа


Функция УстановитьРеквизит(Значение, Тип, Вид="", Длина=0, Стр=0, Имя="")
	
	// Формат значения: "Тип.Вид)Значение" или "#)Ссылка"
	ТипЗнач=Значение;
	Значение=ОтделитьРазделителем(ТипЗнач, ")");
	ВидЗнач=СокрЛП(ОтделитьРазделителем(ТипЗнач, "."));

	Если Тип="Неопределенный" Тогда Тип=ТипЗнач; КонецЕсли;
	Если Вид=""               Тогда Вид=ВидЗнач; КонецЕсли;
		
	Если Тип="Строка" Тогда
		Для Номер=1 по Длина-СтрДлина(Значение) Цикл Значение=Значение+" "; КонецЦикла;
		Возврат(1);
	КонецЕсли;
	
	Значение=СокрЛП(Значение);	
	
	Если Тип="Число" Тогда 
		Значение=Число(Значение);
		Возврат(1);
    
	ИначеЕсли Тип="Дата" Тогда 
		Значение=Дата(Значение);
		Возврат(1);
	
	ИначеЕсли 1=ПустоеЗначение(Значение) Тогда
		Значение=ПолучитьПустоеЗначение(Тип+?(Вид="", "", "."+Вид));
		Возврат(1);
	
	ИначеЕсли (Тип="#") или (Тип="Справочник") или (Тип="Документ") Тогда
		Возврат(УстановитьРеквизитПоСсылке(Значение, Тип, Вид, Стр, Имя));
	
	ИначеЕсли Тип="Перечисление" Тогда
		Если Метаданные.Перечисление(Вид).Выбран()=0 Тогда
			ЗаписатьОшибку(Стр, Имя, "неверный вид перечисления");
			Возврат(0);
		КонецЕсли;
		Значение=Перечисление.ПолучитьАтрибут(Вид).ЗначениеПоИдентификатору(Значение);
	
	ИначеЕсли Тип="Счет" Тогда
		ПланСчетов=?(Вид="", ОсновнойПланСчетов(), ПланыСчетов.ЗначениеПоИдентификатору(Вид));
		Если ПустоеЗначение(ПланСчетов)=1 Тогда
			ЗаписатьОшибку(Стр, Имя, "неверный вид счета");
			Возврат(0);
		КонецЕсли;
		Счет=СоздатьОбъект("Счет"); 
		Счет.ИспользоватьПланСчетов(ПланСчетов);
		Счет.НайтиПоКоду(Значение);
		Значение=Счет.ТекущийСчет();
	
	ИначеЕсли Тип="ПланСчетов" Тогда
		Значение=ПланыСчетов.ЗначениеПоИдентификатору(Значение);
	
	ИначеЕсли Тип="ВидСубконто" Тогда
		Значение=ВидыСубконто.ЗначениеПоИдентификатору(Значение);
	
	ИначеЕсли Тип="Календарь" Тогда
		Если Метаданные.Календарь(Значение).Выбран()=0 Тогда
			ЗаписатьОшибку(Стр, Имя, "неверный календарь");
			Возврат(0);
		КонецЕсли;
		Значение=Календари.ПолучитьАтрибут(Значение);
	
	ИначеЕсли Тип="ВидРасчета" Тогда
		Если Метаданные.ВидРасчета(Значение).Выбран()=0 Тогда
			ЗаписатьОшибку(Стр, Имя, "неверный вид расчета");
			Возврат(0);
		КонецЕсли;
		Значение=ВидРасчета.ПолучитьАтрибут(Значение);
	
	Иначе
		ЗаписатьОшибку(Стр, Имя, "неверный тип реквизита");
		Возврат(0);
	КонецЕсли;
	
	Если ПустоеЗначение(Значение)=1 Тогда
		ЗаписатьОшибку(Стр, Имя, "неверное значение реквизита");
		Возврат(0);
	КонецЕсли;

	Возврат(1);
	
КонецФункции // УстановитьРеквизит()

//**************************************************************************************************
//	ЗагрузитьТекст()
//
//	Описание:
//	Загружает строки из файла загрузки в таблицу ТаблицаЗагруженныеОбъекты
//	Распознает строки
//	Доустанавливает реквизиты справочников и документов

Процедура ЗагрузитьТекст()
	
	История=СоздатьОбъект("Периодический");
	ТекущийСправочник=СоздатьОбъект("Справочник");
	ТекущийДокумент=СоздатьОбъект("Документ");

	Попытка
		ТекущаяОперация=СоздатьОбъект("Операция");
	Исключение
		ТекущаяОперация=0;
	КонецПопытки;

	СправочникВыбран=0; ДокументВыбран=0; ОперацияВыбрана=0;

	ТекущаяСтрока=0; СтрТекДокумента=0; 
	
	//СтрТранзакции=КоличСтрокНаТранзакцию;
	//глКомментарий("Начало транзакции",2); 
	//НачатьТранзакцию();
	
	Пока 0=0 Цикл
		Если ТекущаяСтрока=ТаблицаЗагруженныеОбъекты.КоличествоСтрок() Тогда
			Если 0=НайтиЗагрузитьСтроку() Тогда 
				Если ДокументВыбран=1 Тогда
					ЗаписатьОбъект(ТекущийДокумент, СтрТекДокумента);
	            КонецЕсли;
				Если ОперацияВыбрана=1 Тогда
					ЗаписатьОбъект(ТекущаяОперация, СтрТекДокумента);
	            КонецЕсли;
				//глКомментарий("Фиксация транзакции",2); 
				//ЗафиксироватьТранзакцию();
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьОбъект(ТекущаяСтрока+1);
		Стр=ТаблицаЗагруженныеОбъекты.ПолучитьЗначение(ТекущаяСтрока+1, "Строка");
		Объект=ТаблицаЗагруженныеОбъекты.ПолучитьЗначение(ТекущаяСтрока+1, "Объект");
		Реквизиты=ТаблицаЗагруженныеОбъекты.ПолучитьЗначение(ТекущаяСтрока+1, "Реквизиты");
		
		//Если СтрТранзакции<Стр Тогда
		//	СтрТранзакции=СтрТранзакции+КоличСтрокНаТранзакцию;
		//	глКомментарий("Фиксация транзакции. Начало транзакции",2); 
		//	ЗафиксироватьТранзакцию(); НачатьТранзакцию();
		//КонецЕсли;

		Всего=ТаблицаЗагруженныеОбъекты.КоличествоСтрок()-ТекущаяСтрока;
		Сост="Записано объектов "+ТекущаяСтрока+" загружено объектов "+Всего;
		Всего=ТекстЗагружаемыеДанные.КоличествоСтрок();
		Состояние(Сост+" прочитано строк "+КоличЗагруженныхСтрок+" из "+Всего);

		Если (Объект="Константы") Тогда
			Для Номер=4 по Реквизиты.РазмерСписка() Цикл
				Имя=Реквизиты.ПолучитьЗначение(Номер); Значение=ОтделитьРазделителем(Имя, "(");
				Если Значение="" Тогда Продолжить; КонецЕсли;
				МетаРеквизит=Метаданные.Константа(Имя);
				Если МетаРеквизит.Выбран()=1 Тогда
					Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина; 
					Если МетаРеквизит.Периодический<>0 Тогда
						ЗаписатьОшибку(Стр, Имя, "константа периодическая");
					ИначеЕсли 0<>УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
						Если МетаРеквизит.Тип="Неопределенный" Тогда
							Константа.НазначитьТип(Имя, Тип+?(Вид="", "", "."+Вид));
						КонецЕсли;
						Константа.УстановитьАтрибут(Имя, Значение);
					КонецЕсли;
				Иначе
					ЗаписатьОшибку(Стр, Имя, "неверное имя реквизита");
				КонецЕсли;
			КонецЦикла;
			ТаблицаЗагруженныеОбъекты.УдалитьСтроку(ТекущаяСтрока+1);

		ИначеЕсли (Объект="ПериодКонстанты") Тогда
			ДатаЗнач=Реквизиты.ПолучитьЗначение(3);
			
			Для Номер=4 по Реквизиты.РазмерСписка() Цикл
				Имя=Реквизиты.ПолучитьЗначение(Номер); Значение=ОтделитьРазделителем(Имя, "(");
				Если Значение="" Тогда Продолжить; КонецЕсли;
				МетаРеквизит=Метаданные.Константа(Имя);
				Если МетаРеквизит.Выбран()=1 Тогда
					Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина; 
					Если МетаРеквизит.Периодический=0 Тогда
						ЗаписатьОшибку(Стр, Имя, "константа непериодическая");
					ИначеЕсли 0<>УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
						История.ИспользоватьОбъект(Имя);
						История.Значение=Значение; История.ДатаЗнач=ДатаЗнач;
						История.Записать();
					КонецЕсли;
				Иначе
					ЗаписатьОшибку(Стр, Имя, "неверное имя реквизита");
				КонецЕсли;
			КонецЦикла;
			ТаблицаЗагруженныеОбъекты.УдалитьСтроку(ТекущаяСтрока+1);
			
		ИначеЕсли (ТипЗначенияСтр(Объект)="Справочник") и (ПустоеЗначение(Объект)=0) Тогда
			ТекущийСправочник.Вид(Объект.Вид());
			СправочникВыбран=ТекущийСправочник.НайтиЭлемент(Объект);
			НеИспользуется=?(ТекущийСправочник.ЭтоГруппа()=1, "ДляЭлемента", "ДляГруппы");

			Для Номер=4 по Реквизиты.РазмерСписка() Цикл
				Имя=Реквизиты.ПолучитьЗначение(Номер); Значение=ОтделитьРазделителем(Имя, "(");
				МетаРеквизит=Метаданные.Справочник(ТекущийСправочник.Вид()).Реквизит(Имя);
				Если МетаРеквизит.Выбран()=1 Тогда
					Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина; 
					Если МетаРеквизит.Периодический<>0 Тогда
						ЗаписатьОшибку(Стр, Имя, "реквизит периодический");
					ИначеЕсли МетаРеквизит.Использование=НеИспользуется Тогда
						ЗаписатьОшибку(Стр, Имя, "реквизит используется "+НеИспользуется);
					ИначеЕсли 0<>УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
						Если МетаРеквизит.Тип="Неопределенный" Тогда
							ТекущийСправочник.НазначитьТип(Имя, Тип+?(Вид="", "", "."+Вид));
						КонецЕсли;
						ТекущийСправочник.УстановитьАтрибут(Имя, Значение);
					КонецЕсли;
				Иначе
					ЗаписатьОшибку(Стр, Имя, "неверное имя реквизита");
				КонецЕсли;
			КонецЦикла;
			Реквизиты.УдалитьВсе(); ТекущаяСтрока=ТекущаяСтрока+1;
			ЗаписатьОбъект(ТекущийСправочник, Стр);
			
		ИначеЕсли (Объект="ПериодРеквизиты") и (СправочникВыбран=1) Тогда
			НеИспользуется=?(ТекущийСправочник.ЭтоГруппа()=1, "ДляЭлемента", "ДляГруппы");
			ДатаЗнач=Реквизиты.ПолучитьЗначение(3);

			Для Номер=4 по Реквизиты.РазмерСписка() Цикл
				Имя=Реквизиты.ПолучитьЗначение(Номер); Значение=ОтделитьРазделителем(Имя, "(");
				Если Значение="" Тогда Продолжить; КонецЕсли;
				МетаРеквизит=Метаданные.Справочник(ТекущийСправочник.Вид()).Реквизит(Имя);
				Если МетаРеквизит.Выбран()=1 Тогда
					Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина; 
					Если МетаРеквизит.Периодический=0 Тогда
						ЗаписатьОшибку(Стр, Имя, "реквизит непериодический");
					ИначеЕсли МетаРеквизит.Использование=НеИспользуется Тогда
						ЗаписатьОшибку(Стр, Имя, "реквизит используется "+НеИспользуется);
					ИначеЕсли 0<>УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
						История.ИспользоватьОбъект(Имя, ТекущийСправочник);
						История.Значение=Значение; История.ДатаЗнач=ДатаЗнач;
						История.Записать();
					КонецЕсли;
				Иначе
					ЗаписатьОшибку(Стр, Имя, "неверное имя реквизита");
				КонецЕсли;
			КонецЦикла;
			ТаблицаЗагруженныеОбъекты.УдалитьСтроку(ТекущаяСтрока+1);
			
		ИначеЕсли (ТипЗначенияСтр(Объект)="Документ") и (ПустоеЗначение(Объект)=0) Тогда
			Если ДокументВыбран=1 Тогда
				ЗаписатьОбъект(ТекущийДокумент, СтрТекДокумента);
            КонецЕсли;
			ДокументВыбран=ТекущийДокумент.НайтиДокумент(Объект); 

			Для Номер=4 по Реквизиты.РазмерСписка() Цикл
				Имя=Реквизиты.ПолучитьЗначение(Номер); Значение=ОтделитьРазделителем(Имя, "(");
				МетаРеквизит=Метаданные.Документ(ТекущийДокумент.Вид()).РеквизитШапки(Имя);

				Если МетаРеквизит.Выбран()=1 Тогда
					Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина; 
					Если 0<>УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
						Если МетаРеквизит.Тип="Неопределенный" Тогда
							ТекущийДокумент.НазначитьТип(Имя, Тип+?(Вид="", "", "."+Вид));
						КонецЕсли;
						ТекущийДокумент.УстановитьАтрибут(Имя, Значение);
					КонецЕсли;

				ИначеЕсли Метаданные.ОбщийРеквизитДокумента(Имя).Выбран()=1 Тогда
					МетаРеквизит=Метаданные.ОбщийРеквизитДокумента(Имя);
					Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина; 
					Если 0<>УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
						Если МетаРеквизит.Тип="Неопределенный" Тогда
							ТекущийДокумент.НазначитьТип(Имя, Тип+?(Вид="", "", "."+Вид));
						КонецЕсли;
						ТекущийДокумент.УстановитьАтрибут(Имя, Значение);
					КонецЕсли;

				ИначеЕсли (Лев(Имя, 9)="Операция.") и (ТекущийДокумент.СуществуетОперация()=1) Тогда
					Имя=Сред(Имя, 10); МетаРеквизит=Метаданные.РеквизитОперации(Имя);
					Если МетаРеквизит.Выбран()=1 Тогда
						Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина; 
						Если 0<>УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
							Если МетаРеквизит.Тип="Неопределенный" Тогда
								ТекущийДокумент.Операция.НазначитьТип(Имя, Тип+?(Вид="", "", "."+Вид));
							КонецЕсли;
							ТекущийДокумент.Операция.УстановитьАтрибут(Имя, Значение);
						КонецЕсли;
					ИначеЕсли Имя="СуммаОперации" Тогда
					УстановитьРеквизит(Значение, "Число");
					ТекущийДокумент.Операция.СуммаОперации=Значение;
					ИначеЕсли Имя="Содержание" Тогда
					УстановитьРеквизит(Значение, "Строка");
					ТекущийДокумент.Операция.Содержание=Значение;
					Иначе
						ЗаписатьОшибку(Стр, "Операция."+Имя, "неверное имя реквизита");
					КонецЕсли;
				
				Иначе
					ЗаписатьОшибку(Стр, Имя, "неверное имя реквизита");
				КонецЕсли;
			КонецЦикла;
			Реквизиты.УдалитьВсе(); ТекущаяСтрока=ТекущаяСтрока+1;

			Если Метаданные.Документ(ТекущийДокумент.Вид()).РеквизитТабличнойЧасти()=0 Тогда
				ЗаписатьОбъект(ТекущийДокумент, СтрТекДокумента);
				ДокументВыбран=0;
			КонецЕсли;
			Если ТипЗначенияСтр(ТекущаяОперация)="Операция" Тогда
				Если ОперацияВыбрана=1 Тогда
					ЗаписатьОбъект(ТекущаяОперация, СтрТекДокумента);
	            КонецЕсли;
				ОперацияВыбрана=ТекущаяОперация.НайтиОперацию(Объект);
			КонецЕсли;
			СтрТекДокумента=Стр;
		
		ИначеЕсли (Объект="Строка") и (ДокументВыбран=1) Тогда 
			ТекущийДокумент.НоваяСтрока();

			Для Номер=4 по Реквизиты.РазмерСписка() Цикл
				Имя=Реквизиты.ПолучитьЗначение(Номер); Значение=ОтделитьРазделителем(Имя, "(");
				Если Значение="" Тогда Продолжить; КонецЕсли;
				МетаРеквизит=Метаданные.Документ(ТекущийДокумент.Вид()).РеквизитТабличнойЧасти(Имя);
				Если МетаРеквизит.Выбран()=1 Тогда
					Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина; 
					Если 0<>УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
						Если МетаРеквизит.Тип="Неопределенный" Тогда
							ТекущийДокумент.НазначитьТип(Имя, Тип+?(Вид="", "", "."+Вид));
						КонецЕсли;
						ТекущийДокумент.УстановитьАтрибут(Имя, Значение); 
					КонецЕсли;
				ИначеЕсли Имя="НомерСтроки" Тогда
					УстановитьРеквизит(Значение, "Число");
					ТекущийДокумент.НомерСтроки=Значение;
				Иначе
					ЗаписатьОшибку(Стр, Имя, "неверное имя реквизита");
				КонецЕсли;
			КонецЦикла;
			ТаблицаЗагруженныеОбъекты.УдалитьСтроку(ТекущаяСтрока+1);
		
		ИначеЕсли ((Объект="Проводка") или (Объект="Корреспонденция")) и (ОперацияВыбрана=1) Тогда
			Если Объект="Проводка" Тогда ТекущаяОперация.НоваяПроводка();
			Иначе ТекущаяОперация.НоваяКорреспонденция();
			КонецЕсли;
			
			Для Номер=4 по Реквизиты.РазмерСписка() Цикл
				Имя=Реквизиты.ПолучитьЗначение(Номер); Значение=ОтделитьРазделителем(Имя, "(");
				Если Значение="" Тогда Продолжить; КонецЕсли;
				МетаРеквизит=Метаданные.РеквизитПроводки(Имя);
				
				Если МетаРеквизит.Выбран()=1 Тогда
					Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина; 
					Если 0<>УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
						Если МетаРеквизит.Тип="Неопределенный" Тогда
							ТекущаяОперация.НазначитьТип(Имя, Тип+?(Вид="", "", "."+Вид));
						КонецЕсли;
						ТекущаяОперация.УстановитьАтрибут(Имя, Значение); 
					КонецЕсли;
				ИначеЕсли Имя="Сумма" Тогда
					УстановитьРеквизит(Значение, "Число");
					ТекущаяОперация.Сумма=Значение;
				ИначеЕсли Имя="Количество" Тогда
					УстановитьРеквизит(Значение, "Число");
					ТекущаяОперация.Количество=Значение;
				ИначеЕсли (Имя="Валюта") и (Метаданные.Валюта.Выбран()=1) Тогда
					Тип="Справочник"; Вид=Метаданные.Валюта.Идентификатор;
					Если 0<>УстановитьРеквизит(Значение, Тип, Вид, , Стр, Имя) Тогда
						ТекущаяОперация.Валюта=Значение; 
					КонецЕсли;
				ИначеЕсли Имя="ВалСумма" Тогда
					УстановитьРеквизит(Значение, "Число");
					ТекущаяОперация.ВалСумма=Значение;
					
				ИначеЕсли Имя="Дебет" Тогда
					Если 0<>УстановитьРеквизит(Значение, "Счет", "", , Стр, Имя) Тогда
						ТекущаяОперация.Дебет.Счет=Значение;
					КонецЕсли;
					
				ИначеЕсли Имя="Кредит" Тогда
					Если 0<>УстановитьРеквизит(Значение, "Счет", "", , Стр, Имя) Тогда
						ТекущаяОперация.Кредит.Счет=Значение;
					КонецЕсли;
					
				ИначеЕсли Лев(Имя, 6)="Дебет." Тогда
					Имя=Сред(Имя, 7); МетаРеквизит=Метаданные.ВидСубконто(Имя);
					Если МетаРеквизит.Выбран()=1 Тогда
						Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина; 
						Если 0<>УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
							ВидСубконто=ВидыСубконто.ЗначениеПоИдентификатору(Имя);
							ТекущаяОперация.Дебет.Субконто(ВидСубконто, Значение); 
						КонецЕсли;
					Иначе
						ЗаписатьОшибку(Стр, "Дебет."+Имя, "неверное имя реквизита");
					КонецЕсли;

				ИначеЕсли Лев(Имя, 7)="Кредит." Тогда
					Имя=Сред(Имя, 8); МетаРеквизит=Метаданные.ВидСубконто(Имя);
					Если МетаРеквизит.Выбран()=1 Тогда
						Тип=МетаРеквизит.Тип; Вид=МетаРеквизит.Вид; Длина=МетаРеквизит.Длина; 
						Если 0<>УстановитьРеквизит(Значение, Тип, Вид, Длина, Стр, Имя) Тогда
							ВидСубконто=ВидыСубконто.ЗначениеПоИдентификатору(Имя);
							ТекущаяОперация.Кредит.Субконто(ВидСубконто, Значение); 
						КонецЕсли;
					Иначе
						ЗаписатьОшибку(Стр, "Кредит."+Имя, "неверное имя реквизита");
					КонецЕсли;

				Иначе
					ЗаписатьОшибку(Стр, Имя, "неверное имя реквизита");
				КонецЕсли;
			КонецЦикла;
			ТаблицаЗагруженныеОбъекты.УдалитьСтроку(ТекущаяСтрока+1);
			
		Иначе
			Если ПустоеЗначение(Объект)=0 Тогда
				ЗаписатьОшибку(Стр, , "строка не идентифицирована");
            КонецЕсли;
			СправочникВыбран=0;
			Если ДокументВыбран=1 Тогда
				ЗаписатьОбъект(ТекущийДокумент, СтрТекДокумента);
				ДокументВыбран=0;
            КонецЕсли;
			Если ОперацияВыбрана=1 Тогда
				ЗаписатьОбъект(ТекущаяОперация, СтрТекДокумента);
				ОперацияВыбрана=0;
            КонецЕсли;
			ТекущаяСтрока=ТекущаяСтрока+1;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьТекст()                                             
	

//**************************************************************************************************
//	Печать()
//
//	Описание:
//	Выводит в таблицу загруженные справочники и документы

Процедура Печать()
	
	Таблица=СоздатьОбъект("Таблица");
	Таблица.ИсходнаяТаблица("Печать");
	Таблица.ВывестиСекцию("Шапка");
	Таблица.Опции(0,0,Таблица.ВысотаТаблицы(),0);
	
	ТаблицаЗагруженныеОбъекты.Сортировать("Объект*, Строка+", 1);
	ТаблицаЗагруженныеОбъекты.ВыбратьСтроки();
	Всего=ТаблицаЗагруженныеОбъекты.КоличествоСтрок();
	Пока ТаблицаЗагруженныеОбъекты.ПолучитьСтроку()=1 Цикл
		Состояние("Печать загруженных объектов "+ТаблицаЗагруженныеОбъекты.НомерСтроки+" из "+Всего);
		
		Объект=ТаблицаЗагруженныеОбъекты.Объект; Тип=ТипЗначенияСтр(Объект);
		Если (Тип<>"Справочник") и (Тип<>"Документ") Тогда Продолжить; КонецЕсли;
		
		Стр=ТаблицаЗагруженныеОбъекты.Строка;
		Результат=ТаблицаЗагруженныеОбъекты.Результат;
		СтрокаЗагрузки=ТекстЗагружаемыеДанные.ПолучитьСтроку(Стр);
		
		Таблица.ВывестиСекцию("Строка");
	КонецЦикла;
	
	Таблица.ВывестиСекцию("Подвал");
	Таблица.ТолькоПросмотр(1);
	Таблица.Показать("Печать","");

КонецПроцедуры // Печать()

//**************************************************************************************************
//	ТаблицаПоследовательностей(ТаблПослед, БухИтоги, СписСчетов)
//
//	Параметры:
//	ТаблПослед - будет содержать таблицу последовательностей, колонки см. ниже.
//	БухИтоги - будет содержать (нерассчитанные) бухгалтерские итоги в актуальном состоянии.
//	СписСчетов - будет содержать список счетов для расчета актуальных бух. итогов.
//
//	Описание:
//	Процедура инициализирует объекты для использования в процедуре ВосстановитьПоследовательности().
//	БухИтоги и СписСчетов инициализируются только в монопольном режиме работы.

Процедура ТаблицаПоследовательностей(ТаблПослед, БухИтоги, СписСчетов)
	
	// колонки таблицы восстанавливаемых последовательностей
	ТаблПослед=СоздатьОбъект("ТаблицаЗначений");
	ТаблПослед.НоваяКолонка("Имя", "Строка");				// идентификатор последовательности
	ТаблПослед.НоваяКолонка("Значение");                    // ссылка на последовательность
	ТаблПослед.НоваяКолонка("УстановитьТА", "Число", 1, 0);	// используются оперативные итоги
	ТаблПослед.НоваяКолонка("РассчитатьБИ", "Число", 1, 0); // используются бухгалтерские итоги
	
	// строки таблицы восстанавливаемых последовательностей
	Для Номер=1 по Метаданные.Последовательность() Цикл
		МетаПослед=Метаданные.Последовательность(Номер);
		
		ТаблПослед.НоваяСтрока();
		ТаблПослед.Имя=МетаПослед.Идентификатор;
		ТаблПослед.Значение=Последовательность.ПолучитьАтрибут(МетаПослед.Идентификатор);
		
		Если МонопольныйРежим()=1 Тогда
			Для Ном=1 По МетаПослед.ВлияющиеДвижения.Количество() Цикл
				Движение=МетаПослед.ВлияющиеДвижения.Получить(Ном).ПолныйИдентификатор();
				
				// регистры влияют на проведение документов последовательности
				// при их перепроведении имеет смысл устанавливать ТА на документ
				// для оптимизации получения документами данных из регистров
				Если Лев(Движение, 7)="Регистр" Тогда
					ТаблПослед.УстановитьТА=1;
				
				// счета влияют на проведение документов последовательности
				// при их перепроведении имеет смысл делать расчет актуальных бух. итогов
				// для оптимизации получения документами бухгалтерских остатков
				ИначеЕсли Лев(Движение, 10)="ПланСчетов" Тогда
					ТаблПослед.РассчитатьБИ=1;
					
				    // проводимые документы могут использовать актуальные бухгалтерские итоги
					Если ТипЗначенияСтр(СписСчетов)<>"СписокЗначений" Тогда
						СписСчетов=СоздатьОбъект("СписокЗначений");
						БухИтоги=СоздатьОбъект("БухгалтерскиеИтоги");
						БухИтоги.Актуальность(1);
					КонецЕсли;
						
					// актуальные итоги расчитываются для счетов, влияющих на последовательность
					План=Сред(Движение, 12);
					План=ПланыСчетов.ЗначениеПоИдентификатору(Лев(План, Найти(План, ".")-1));
					Счет=СчетПоКоду(МетаПослед.ВлияющиеДвижения.Получить(Ном).КодСчета, План);
					СписСчетов.Установить(Движение, Счет);
				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ТаблицаПоследовательностей()

//**************************************************************************************************
//	ПервыйДокументПослеТАилиГП(НачПозиция, КонПозиция)
//
//	Параметры:
//	НачПозиция - позиция, начиная с которой подбирается документ.
//	КонПозиция - позиция, по которую подбирается документ.
//
//	Возвращаемое значение:
//	Найденный документ. Если не найден - пустой документ.
//
//	Описание:
//	В указанном диапазоне отыскивает первый документ, который необходимо перепровести, чтобы: 
//	а) (в немонопольном режиме) продвинуть ТА; б) восстановить указанные последовательности.

Функция ПервыйДокументПослеТАилиГП(НачПозиция, Знач КонПозиция)
	
	Объект=СоздатьОбъект("Документ");
	Документ=ПолучитьПустоеЗначение("Документ");
	
	// в немонопольном режиме работы, чтобы продвинуть ТА,
	// необходимо перепроводить оперативные документы после ТА
	Объект.УстановитьФильтр(1, 0, 0, 2, 1, 1);
	Если (МонопольныйРежим()=0) и (Метаданные.Регистр()<>0) Тогда
		Граница=СформироватьПозициюДокумента(ПолучитьПозициюТА(), 1);
		Если 1=Объект.ВыбратьДокументы(Граница, КонПозиция) Тогда
			Объект.ПолучитьДокумент();

			Если НачПозиция<=Объект.ПолучитьПозицию() Тогда
				Документ=Объект.ТекущийДокумент();
				КонПозиция=СформироватьПозициюДокумента(Документ, -1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

//	Если (МонопольныйРежим()=0) и (Метаданные.Регистр()<>0) Тогда
//		Граница=СформироватьПозициюДокумента(ПолучитьПозициюТА(), 1);
//		Объект.ВыбратьДокументы(Граница, КонПозиция);
//
//		Пока 1=Объект.ПолучитьДокумент() Цикл
//			Если Метаданные.Документ(Объект.Вид()).ОперативныйУчет=0 Тогда
//			ИначеЕсли Объект.Проведен()=1 Тогда Прервать;
//			КонецЕсли;
//		КонецЦикла;
//
//		Если Объект.Выбран()=1 Тогда
//			Если НачПозиция<=Объект.ПолучитьПозицию() Тогда
//				// запоминаем найденный документ и сужаем интервал поиска
//				Документ=Объект.ТекущийДокумент();
//				КонПозиция=СформироватьПозициюДокумента(Документ, -1);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
	
	Объект.УстановитьФильтр(1, 0, 0, 1, 1, 1);
	Для Номер=1 по Метаданные.Последовательность() Цикл
		Имя=Метаданные.Последовательность(Номер).Идентификатор;
		Послед=Последовательность.ПолучитьАтрибут(Имя);

		Граница=СформироватьПозициюДокумента(Послед.ПолучитьДокумент(), 1);
		Если 1=Объект.ВыбратьПоПоследовательности(Граница, КонПозиция, Имя) Тогда 
			Объект.ПолучитьДокумент(); 

			Если НачПозиция<=Объект.ПолучитьПозицию() Тогда
				// запоминаем найденный документ и сужаем интервал поиска
				Документ=Объект.ТекущийДокумент();
				КонПозиция=СформироватьПозициюДокумента(Документ, -1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат(Документ);
	
КонецФункции // ПервыйДокументПослеТАилиГП()

//**************************************************************************************************
//	ПровестиДокументУчестьТАиБИ(Документ, ТаблПослед, БухИтоги, СписСчетов)
//
//	Параметры:
//	Документ - проводимый документ
//	ТаблПослед - таблица последовательностей, см. процедуру ТаблицаПоследовательностей();
//	БухИтоги - объект типа "БухгалтерскиеИтоги", поддерживаемый в актуальном состоянии.
//	СписСчетов - объект типа "СписокЗначений" - список счетов для расчета актуальных бух. итогов.
//
//	Описание:
//	Проводит документ. В монопольном режиме устанавливает на него точку актуальности и 
//	рассчитывает бухгалтерские итоги, если это необходимо.

Процедура ПровестиДокументУчестьТАиБИ(Документ, ТаблПослед, БухИтоги, СписСчетов)
	
	Если МонопольныйРежим()=1 Тогда
        // если оперативный документ находится за ТА, то ТА надо передвинуть в любом случае
		Если Метаданные.Документ(Документ.Вид()).ОперативныйУчет=0 Тогда
		ИначеЕсли 0<Документ.СравнитьТА() Тогда УстановитьТА=1;
		Иначе УстановитьТА=0;
		КонецЕсли;
		РассчитатьБИ=0;

		ТаблПослед.ВыбратьСтроки();
		Пока 1=ТаблПослед.ПолучитьСтроку() Цикл
			Если 1=ТаблПослед.Значение.ПринадлежитПоследовательности(Документ) Тогда
				Если ТаблПослед.УстановитьТА=1 Тогда УстановитьТА=1; 
					Если РассчитатьБИ=1 Тогда Прервать; КонецЕсли;
				КонецЕсли;
				Если ТаблПослед.РассчитатьБИ=1 Тогда РассчитатьБИ=1; 
					Если УстановитьТА=1 Тогда Прервать; КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если УстановитьТА=1 Тогда УстановитьТАНа(Документ); КонецЕсли;
		Если РассчитатьБИ=1 Тогда БухИтоги.Рассчитать(, Документ, СписСчетов); КонецЕсли;
	КонецЕсли;
			
	Объект=СоздатьОбъект("Документ");
	Объект.НайтиДокумент(Документ);
	
	Попытка
		Если 1=Объект.Провести() Тогда Сообщение("Проведен документ: "+Документ, " "); КонецЕсли;	
	Исключение
		глКомментарий("Неудачная попытка проведения документа """+Документ+""": "+ОписаниеОшибки(), 0,,"!!");
	КонецПопытки;
	
КонецПроцедуры // ПровестиДокументУчестьТАиБИ()

//**************************************************************************************************
//	ВосстановитьПоследовательности(НачДокумент, КонДокумент, ТаблПослед, БухИтоги, СписСчетов)
//
//	Параметры:
//	НачДокумент - дата или документ, с которго восстанавливаются последовательности.
//	КонДокумент - дата или документ, по который восстанавливаются последовательности.
//	ТаблПослед - таблица последовательностей, см. процедуру ТаблицаПоследовательностей();
//	БухИтоги - объект типа "БухгалтерскиеИтоги", поддерживаемый в актуальном состоянии.
//	СписСчетов - объект типа "СписокЗначений" - список счетов для расчета актуальных бух. итогов.
//
//	Описание:
//	Процедура восстанавливает последовательности.
//	В немонопольном режиме перепроводит оперативные документы после ТА, передвигая ТА дальше.
//	В монопольном режиме по необходимости устанавливает ТА на проводимые документы и рассчитывает
//	актуальные бухгалтерские итоги на момент проводимого документа для указанного списка счетов.

Процедура ВосстановитьПоследовательности(НачДокумент, КонДокумент, ТаблПослед, БухИтоги, СписСчетов)
	
    НачПозиция=СформироватьПозициюДокумента(НачДокумент);
	КонПозиция=СформироватьПозициюДокумента(КонДокумент);
	Документ=ПервыйДокументПослеТАилиГП(НачПозиция, КонПозиция);

	Пока ПустоеЗначение(Документ)=0 Цикл
		ПровестиДокументУчестьТАиБИ(Документ, ТаблПослед, БухИтоги, СписСчетов);
		
		НачПозиция=СформироватьПозициюДокумента(Документ, 1);
		Документ=ПервыйДокументПослеТАилиГП(НачПозиция, КонПозиция);
	КонецЦикла;
	
КонецПроцедуры // ВосстановитьПоследовательности()

//**************************************************************************************************
//	ПровестиСписок()
//
//	Описение:
//	Проводит документы из СписокПроводимыхОбъектов.

Процедура ПровестиСписок()
	
	Перем ТаблПослед, БухИтоги, СписСчетов;
	
	СписокПроводимыхОбъектов.Сортировать(0, 1);
	ТаблицаПоследовательностей(ТаблПослед, БухИтоги, СписСчетов);
	
	НачДокумент='00.00.0000'; 
	Всего=СписокПроводимыхОбъектов.РазмерСписка();
	
	Для Номер=1 по Всего Цикл
		Состояние("Проведение документов "+Номер+" из "+Всего);
		ТекДокумент=СписокПроводимыхОбъектов.ПолучитьЗначение(Номер);
		
		Если 1=Восстанавливать Тогда
			ВосстановитьПоследовательности(НачДокумент, ТекДокумент, ТаблПослед, БухИтоги, СписСчетов);
		КонецЕсли;

		ПровестиДокументУчестьТАиБИ(ТекДокумент, ТаблПослед, БухИтоги, СписСчетов);
		НачДокумент=ТекДокумент;
	КонецЦикла;

	Если 1=Восстанавливать Тогда
		КонДокумент=?(Метаданные.Регистр()=0, '00.00.0000', ПолучитьПозициюТА());
		ВосстановитьПоследовательности(НачДокумент, КонДокумент, ТаблПослед, БухИтоги, СписСчетов);
	КонецЕсли;

КонецПроцедуры // ПровестиСписок()

//**************************************************************************************************
//	ПрочитатьСлужебнуюСтроку()
//
//	Возвращаемое значение:
//	1 - строка разобрана успешно, 0 - иначе
//
//	Описание:
//	Разбирает первую служебную строку файла загрузки.

Функция ПрочитатьСлужебнуюСтроку()

	Если ТекстЗагружаемыеДанные.КоличествоСтрок()=0 Тогда
		Предупреждение("Файл загрузки пустой!", 5);
		Возврат(0);
	КонецЕсли;
	
	СписокЗагрузки=СоздатьОбъект("СписокЗначений");
	СтрокаЗагрузки=ТекстЗагружаемыеДанные.ПолучитьСтроку(1);
	СписокЗагрузки.ИзСтрокиСРазделителями(СтрокаЗагрузки);

	Если СписокЗагрузки.РазмерСписка()<1 Тогда
		Предупреждение("Служебная строка файла загрузки пустая!", 5);
		Возврат(0);
	КонецЕсли;
	
	Имя=СписокЗагрузки.ПолучитьЗначение(1);
	Значение=ОтделитьРазделителем(Имя, "=");
	ДопустимыеФорматы="1";
	
	Если Имя<>"ФорматФайла" Тогда
		Предупреждение("Не указан формат файла загрузки!", 5);
		Возврат(0);
	ИначеЕсли 0=Найти(ДопустимыеФорматы, Значение) Тогда
		Предупреждение("Недопустимый формат файла загрузки!", 5);
		Возврат(0);
	КонецЕсли;
	
	СтрРазделительСтрок="";
	
	Для Номер=2 по СписокЗагрузки.РазмерСписка() Цикл
		Имя=СписокЗагрузки.ПолучитьЗначение(Номер);
		Значение=ОтделитьРазделителем(Имя, "=");
		
		Если Имя="РазделительСтрок" Тогда
			СтрРазделительСтрок=Значение;
        КонецЕсли;
	КонецЦикла;

	КоличЗагруженныхСтрок=1;
	Возврат(1);

КонецФункции // ПрочитатьСлужебнуюСтроку()	

//**************************************************************************************************
//	ЗагрузитьВсе()
//
//	Вызывается из формул элементов диалога

Функция КаталогФайла(Файл="") Далее

Процедура ЗагрузитьВсе()
	
	ТекстЗагружаемыеДанные.Открыть(ИмяФайлаЗагрузки);
	ИмяФайлаОшибок=КаталогФайла()+"Errors.txt";
	ТекстОшибки.Очистить();

	ТаблицаЗагруженныеОбъекты.УдалитьСтроки();
	СписокПроводимыхОбъектов.УдалитьВсе();
	
	Если 0=ПрочитатьСлужебнуюСтроку() Тогда Возврат; КонецЕсли;
	
	ЗагрузитьТекст();
	ПровестиСписок();
	Если ВыводитьОтчет=1 Тогда Печать(); КонецЕсли;
	
	Если ТекстОшибки.КоличествоСтрок()<>0 Тогда
		Предупреждение("Записан файл ошибок """+ИмяФайлаОшибок+""".");
		//ЗапуститьПриложение(ИмяФайлаОшибок);
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьВсе()

//**************************************************************************************************
//	КаталогФайла(Файл)
//
//	Параметры:
//	Файл - если передан, в него будет возвращено имя файла

//	Возвращаемое значение:
//	Строка - каталог файла выгрузки данных.
//
//	Описание:
//	Если каталог не существует, то пользователю предлагается его создать.

Функция КаталогФайла(Файл="")
	
	Каталог=""; Файл=ИмяФайлаЗагрузки; Разд=Найти(Файл, "\");
	
	Пока 0<Разд Цикл 
		Каталог=Каталог+Лев(Файл, Разд); Файл=Сред(Файл, Разд+1); Разд=Найти(Файл, "\");
	КонецЦикла;

	Если (4<СтрДлина(Каталог)) и (ФС.СуществуетФайл(Каталог+".")=0) Тогда
		Если 6<>Вопрос("Указанный каталог не существует! Создать?",4) Тогда Каталог="";
		Иначе ФС.СоздатьКаталог(Каталог);
		КонецЕсли;
	КонецЕсли;
	
	Возврат(Каталог);
	
КонецФункции // КаталогФайла()

//**************************************************************************************************
//	ОбработкаФормул()
//
//	Описание:
//	Вызывется из формул элементов диалога

Процедура ОбработкаФормул()
	
	Если Форма.АктивныйЭлемент()="кнПросмотр" Тогда
		Если ФС.СуществуетФайл(ИмяФайлаЗагрузки)=1 Тогда
			ЗапуститьПриложение(ИмяФайлаЗагрузки);
		Иначе
			Предупреждение("Указанный файл не существует!", 5);
		КонецЕсли;

	ИначеЕсли Форма.АктивныйЭлемент()="кнКаталог" Тогда
		Каталог=КаталогФайла();
		Если Каталог<>"" Тогда 
			ЗапуститьПриложение(Каталог); 
		КонецЕсли; 
	
	ИначеЕсли Форма.АктивныйЭлемент()="кнЗагрузить" Тогда
		Если ФС.СуществуетФайл(ИмяФайлаЗагрузки)=1 Тогда
			ЗагрузитьВсе();
		Иначе
			Предупреждение("Указанный файл не существует!", 5);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ОбработкаФормул()

//**************************************************************************************************

Процедура ПриОткрытии() // Предопределенная процедура
	
	Если 1=МонопольныйРежим() Тогда
	ИначеЕсли "Да"<>Вопрос("Загрузку данных рекомендуется выполнять
		                   |в монопольном режиме. Продолжить?", "Да+Нет") Тогда
		СтатусВозврата(0); Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Форма.Параметр)=1 Тогда
	ИначеЕсли ТипЗначенияСтр(Форма.Параметр)="СписокЗначений" Тогда
		ИмяФайлаЗагрузки=Форма.Параметр.Получить("ИмяФайлаЗагрузки");
		Восстанавливать=Форма.Параметр.Получить("Восстанавливать");
		ВыводитьСообщения=Форма.Параметр.Получить("ВыводитьСообщения");
		ВыводитьОтчет=Форма.Параметр.Получить("ВыводитьОтчет");
		ЗагрузитьВсе();
		СтатусВозврата(0); Возврат;
	КонецЕсли;

	// имя файла загрузки по умолчанию
	Если СокрЛП(ИмяФайлаЗагрузки)="" Тогда
		ИмяФайлаЗагрузки=КаталогПользователя()+"1sbtrans.txt";
	КонецЕсли;
	
	Если Метаданные.Последовательность()=0 Тогда
		Форма.Восстанавливать.Видимость(0);
	КонецЕсли;

КонецПроцедуры

//**************************************************************************************************

Процедура ПриНачалеВыбораЗначения(Элемент, Продолжать) // предопределенная процедура
	
	Перем Файл; Каталог=КаталогФайла(Файл);
		
	Если Элемент="ИмяФайлаЗагрузки" Тогда
		Выбор=ФС.ВыбратьФайл(0, Файл, Каталог, "Файл загрузки", "Текстовые (*.txt)|*.txt", "txt");
		Если Выбор=1 Тогда ИмяФайлаЗагрузки=Каталог+Файл; КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//**************************************************************************************************

//КоличСтрокНаТранзакцию=100;

ТекстЗагружаемыеДанные=СоздатьОбъект("Текст");
ТекстОшибки=СоздатьОбъект("Текст");

ТаблицаЗагруженныеОбъекты=СоздатьОбъект("ТаблицаЗначений");
СписокПроводимыхОбъектов=СоздатьОбъект("СписокЗначений");

ТаблицаЗагруженныеОбъекты.НоваяКолонка("Строка", "Число", 6, 0);
ТаблицаЗагруженныеОбъекты.НоваяКолонка("Ссылка", "Строка");
ТаблицаЗагруженныеОбъекты.НоваяКолонка("Объект");
ТаблицаЗагруженныеОбъекты.НоваяКолонка("Реквизиты", "СписокЗначений");
ТаблицаЗагруженныеОбъекты.НоваяКолонка("Результат", "Строка");
