// переменные для управления работой помощника
Перем Шаг, ПоследнийШаг, стрСовет, стрОписание, ИмяФормы;

Перем тбФильтрыПоВидамСубконто, ТекущийВидСубконто;
Перем тбХозОперации, тбПроводки;
Перем ИмяНастройки, КвоПользовательскихНастроек;
Перем ТекстФайла;
Перем спСчетаДляВыгрузки, спВидыСубконтоДляВыгрузки, спОбъектыАналитикиДляВыгрузки;
Перем спФирмы;

// ======================================
// Рисует слои помощника в зависимости от текущего шага
Процедура НарисоватьСлои()
	Форма.ИспользоватьСлой("Общий, Слой"+Строка(Шаг),2);
КонецПроцедуры 

// ======================================
// Назначение:
//		Используется для форматирования кода счета.
// 		Возвращает аргумент Стр либо в неизменном виде (если фПредставлятьКодСчетаСТочками = 0), 
// 		либо разделенный точками по шаблону ##.#.#.# (если фПредставлятьКодСчетаСТочками = 1)
// Аргументы:
//		Стр		- строка, содержащая код счета.
Функция ФорматироватьКодСчета(Стр)
	Результат = "";
	Если фПредставлятьКодСчетаСТочками = 0 Тогда
		Результат = Стр;
	Иначе
		ДлинаСтр = СтрДлина(СокрЛП(Стр));
		Для Сч = 1 по ДлинаСтр Цикл
			Результат = Результат + Сред(Стр, Сч, 1);
			Если ((Сч >= 2) и (Сч <= 4)) и (Сч < ДлинаСтр) Тогда
				Результат = Результат + ".";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// ======================================
Процедура ПоказатьСовет()
	стрСовет = "";
	Если Шаг = 1 Тогда
	    стрСовет = "Здесь будут показываться советы и комментарии по заполнению реквизитов, находящихся в окне";
	ИначеЕсли Шаг = 2 Тогда
	    стрСовет = "В списке всегда присутствует как минимум одна настройка - ""По умолчанию""";
	ИначеЕсли Шаг = 3 Тогда
	    стрСовет = "Если в списке отсутствуют необходимые счета, тогда заполните список корректных проводок и запустите эту обработку еще раз";
	ИначеЕсли Шаг = 4 Тогда
	    стрСовет = "Если не указывать фильтр для вида субконто, тогда будет выгружаться весь справочник (все существующие документы)";
	ИначеЕсли Шаг = 5 Тогда
	    стрСовет = "Если заполнение схемы проводок уже производилось ранее, и сейчас в нее нужно внести изменения, лучше сделать это вручную";
	ИначеЕсли Шаг = 6 Тогда
	    стрСовет = "В списке счетов должен быть отмечен хотя бы один из счетов";
	ИначеЕсли Шаг = 7 Тогда
	    стрСовет = "Если выбран режим ""из списка"", тогда в списке хотя бы один вид деятельности должен быть отмечен";
	ИначеЕсли Шаг = 8 Тогда
	    стрСовет = "В списке видов затрат должен быть отмечен хотя бы один из них";
	ИначеЕсли Шаг = 9 Тогда
	    стрСовет = "При сохранении настройки под новым именем, нужно ввести имя, отличное от уже существующих в списке сохраненных ранее настроек";
	ИначеЕсли Шаг = 10 Тогда
	    стрСовет = "Здесь будут показываться сообщения об ошибках, если такие произойдут во время выполнения выгрузки данных";
	ИначеЕсли Шаг = 11 Тогда
	    стрСовет = "";
	КонецЕсли;
КонецПроцедуры 

// ===============================
Процедура кОтмена()
	Если Вопрос("Прекратить работу помощника?","Да+Нет")="Да" Тогда
		Форма.Закрыть();
	КонецЕсли;
КонецПроцедуры

// ======================================
Процедура ПоказатьОписание()
	стрОписание = "";
    Если Шаг = 1 Тогда
        стрОписание = "Здесь будет показываться описание действий, которые нужно будет "
					+ "выполнить на каждом шаге Помощника.";
	ИначеЕсли Шаг = 2 Тогда
        стрОписание = "Настройка включает в себя список счетов, которые будут выгружаться "
					+ "в справочник ""План счетов"" ЗиК, а также фильтры для субконто "
					+ "счетов из этого списка.";
	ИначеЕсли Шаг = 3 Тогда
        стрОписание = "Данный список счетов содержит все счета, которые согласно "
					+ "корректным проводкам могут корреспондировать с 66-м счетом "
					+ """Расчеты по оплате труда"". Счет 23 ""Производство"" отмечен всегда." 
					+ РазделительСтрок
					+ "Флажок ""Представлять код счета по шаблону"" устанавливается в соответствии с используемой "
					+ "в ЗиК системой кодификации бухгалтерских счетов (по умолчанию - с точками-разделителями).";
	ИначеЕсли Шаг = 4 Тогда
		стрОписание = "В качестве фильтра для справочника можно задать элементы или группы "
					+ "элементов, которые будут выгружаться. Для документов можно задать дату - "
					+ "в этом случае будут выгружаться документы, по которым есть остатки на эту дату "
					+ "(в плане счетов или регистрах), а также документы, введенные после "
					+ "этой даты.";
	ИначеЕсли Шаг = 5 Тогда
        стрОписание = "После заполнения схемы проводок рекомендуется ее проверить - возможно "
					+ "на Вашем предприятии используется более сложная схема, и предложенная "
					+ "по умолчанию не содержит некоторых специфических проводок.";
	ИначеЕсли Шаг = 6 Тогда
        стрОписание = "Если Вы отметите в списке больше, чем один счет, тогда будет "
					+ "сформировано несколько хоз. операций с проводками, отличающимися "
					+ "выбранными Вами счетами.";
	ИначеЕсли Шаг = 7 Тогда
        стрОписание = "Если в режиме ""из списка"" Вы отметите в списке больше, "
					+ "чем один вид деятельности, тогда будет "
					+ "сформировано несколько хоз. операций с проводками, отличающимися "
					+ "выбранными Вами видами деятельности.";
	ИначеЕсли Шаг = 8 Тогда
        стрОписание = "Если Вы отметите в списке больше, чем один вид затарт, тогда будет "
					+ "сформировано несколько хоз. операций с проводками, отличающимися "
					+ "выбранными Вами видами затрат.";
	ИначеЕсли Шаг = 9 Тогда
        стрОписание = "При сохранении настройки под именем уже существующей, все параметры "
					+ "которые были в этой настройке будут заменены на новые. Если сохранить "
					+ "настройку под новым именем, она добавится в список пользовательских "
					+ "настроек при следующем использовании Помощника. Также нельзя сохранить "
					+ "настройку под именем ""По умолчанию"" - оно зарезервировано "
					+ "для служебных целей.";
	ИначеЕсли Шаг = 10 Тогда
        стрОписание = "Формирование файла выгрузки данных может занять длительное время в "
					+ "зависимости от объема данных в информационной базе. Производимые в "
					+ "текущий момент действия будут комментироваться в поле "
					+ """Процесс выполнения"".";
	ИначеЕсли Шаг = 11 Тогда
        стрОписание = "Теперь нужно выгруженные данные импортировать в ЗиК. "
					+ "Для этого необходимо воспользоваться стандартной обработкой "
					+ """Загрузка данных их текстового файла"" (Import77.ert). Эту обработку "
					+ "нужно запустить в конфигурации ЗиК и выбрать в ней в качестве файла "
					+ "загрузки только что сформированный файл.";
	КонецЕсли;
КонецПроцедуры 

// ===============================
// Назначение:
//		Устанавливает или снимает пометку со счета или группы счетов 
// Аргументы:
//		Счет	- счет (или группа) для которого нужно инвертировать пометку
//				  если не указан, тогда берется текущий счет в списке.
// 		Режим	- что нужно сделать со счетом в списке:
//				  -1 - инвертировать пометку
//				  0 - снять пометку
//				  1 - установить пометку
Процедура ИзмСчет(Счет=0, Режим=-1)
	Стр = "";

	// установим пометку для этого счета и всех его субсчетов в списке
	Для Инд = 1 по спСчета.РазмерСписка() Цикл
		// получим нужное значение пометки
		Если Режим = -1 Тогда
			НужныйРежим = 1 - спСчета.Пометка(Инд);
		Иначе
			НужныйРежим = Режим;
		КонецЕсли;
		
		Если Лев(спСчета.ПолучитьЗначение(Инд,Стр), СтрДлина(Счет)) = Счет Тогда
			спСчета.Пометка(Инд, НужныйРежим);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ИзмСчет

// ===============================
// Назначение:
//		Устанавливает список отмеченных счетов, их субконто и фильтры в соответствии с 
//		выбранной настройкой на 2-м шаге работы помощника
Процедура УстановитьПараметрыПоНастройке()
	// очистим пометки в списке счетов
	Для Инд = 1 по спСчета.РазмерСписка() Цикл
		спСчета.Пометка(Инд,0);
	КонецЦикла;
	
	Если спНастроек.ТекущаяСтрока() = 1 Тогда
		// настройка по умолчанию
		ИзмСчет("23",1);
		ИзмСчет("6411",1);
		ИзмСчет("651",1);
		ИзмСчет("652",1);
		ИзмСчет("653",1);
		ИзмСчет("656",1);
		ИзмСчет("81",1);
		ИзмСчет("82",1);
		ИзмСчет("91",1);
		ИзмСчет("92",1);
		ИзмСчет("93",1);
		
		спНастройкаСохранитьКак.ТекущаяСтрока(1);
		пРежимСохраненияНастроек = 2;
	Иначе
		// пользовательские настройки
		Стр = "";
		ИмяНастройки = спНастроек.ПолучитьЗначение(спНастроек.ТекущаяСтрока(),Стр);

		// установим список отмеченных счетов для выбранной настройки
		СписокСчетов = глВосстановитьЗначение(ИмяФормы,"СписокСчетов."+ИмяНастройки,"");
        Если ПустоеЗначение(СписокСчетов) = 0 Тогда
        	Спис = СоздатьОбъект("СписокЗначений");
			Спис.ИзСтрокиСРазделителями(СписокСчетов);
			Для Инд = 1 по Спис.РазмерСписка() Цикл
				ИзмСчет(Строка(Спис.ПолучитьЗначение(Инд,Стр)),1);
			КонецЦикла;
			Спис = 0;
		КонецЕсли;
		// 23 счет всегда д.быть выбран. Установим его "насильно" на случай, если была
		// ошибка при восстановнлении настройки
		ИзмСчет("23",1);
		
		// восстановим фильтры
		тбФильтрыПоВидамСубконто.УдалитьСтроки();
		КвоФильтров = глВосстановитьЗначение(ИмяФормы,"КвоФильтров."+ИмяНастройки, 0);
		Для Инд = 1 по КвоФильтров Цикл
			тбФильтрыПоВидамСубконто.НоваяСтрока();
			тбФильтрыПоВидамСубконто.ВидСубконто = глВосстановитьЗначение(ИмяФормы,"ВидСубконто"+Инд+"."+ИмяНастройки);
			тбФильтрыПоВидамСубконто.ЗначениеФильтра = глВосстановитьЗначение(ИмяФормы,"ЗначениеФильтра"+Инд+"."+ИмяНастройки);
		КонецЦикла;

		спНастройкаСохранитьКак.ТекущаяСтрока(спНастроек.ТекущаяСтрока()-1);
		пРежимСохраненияНастроек = 1;
	КонецЕсли;

	Если ИспользоватьСчетаРасходов <> Класс9 Тогда
		// заполним фильтры по видам затрат по умолчанию
		// если используются счета затрат класса 8 или классов 8 и 9
		// если же используется только класс 9 - тогда пусть пользователь
		// выбирает сам
		Спр = СоздатьОбъект("Справочник.ВидыЗатрат");
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
			Если Спр.ЭтоГруппа() = 1 Тогда
				Продолжить;
			КонецЕсли;
			ВЗ = Спр.ТекущийЭлемент();
			Если (Лев(ВЗ.Счет.Код, 2) = "81") или (Лев(ВЗ.Счет.Код, 2) = "82") Тогда
				// по умолчанию добавляем только виды затрат по оплате труда
				// и по отчислениям на социальные мероприятия
				Стр = 0;
				Если тбФильтрыПоВидамСубконто.НайтиЗначение(ВЗ,Стр,"ЗначениеФильтра") = 0 Тогда
					тбФильтрыПоВидамСубконто.НоваяСтрока();
					тбФильтрыПоВидамСубконто.ВидСубконто = ВидыСубконто.ВидыЗатрат;
					тбФильтрыПоВидамСубконто.ЗначениеФильтра = ВЗ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Спр = 0;
	КонецЕсли;
КонецПроцедуры //УстановитьПараметрыПоНастройке

// ===============================
// Возвращает:
//		"Документ" или "Справочник"
Функция ПолучитьТипВидаСубконто(ВидСубконто)
	Если ТипЗначенияСтр(ВидСубконто) = "Строка" Тогда
		// текущий вид субконто - "Заказ"
		Тип = "Документ";
	Иначе
		Тип = ВидСубконто.ТипСубконто();
		Если Найти(Тип,".") = 0 Тогда
			// "Дата" или что-то другое, в помощнике такие виды субконто 
			// не обрабатываются, вернем пустую строку
			Возврат "";
		Иначе
			// тип - или "Документ" или "Справочник"
			Тип = Лев(Тип, Найти(Тип,".")-1);
		КонецЕсли;
	КонецЕсли;
	Возврат Тип;
КонецФункции //ПолучитьТипВидаСубконто()

// ===============================
Процедура ЗаполнитьОписаниеФильтра(НомерВТаблице)
	тбФильтрПоВидуСубконто.ПолучитьСтрокуПоНомеру(НомерВТаблице);
	
	Тип = ПолучитьТипВидаСубконто(ТекущийВидСубконто);
	        
	ЗначениеФильтра = тбФильтрПоВидуСубконто.ЗначениеФильтра;
	Если Тип = "Документ" Тогда
		Если ПустоеЗначение(ЗначениеФильтра) = 1 Тогда
			тбФильтрПоВидуСубконто.Описание = "<Фильтр не задан, будут выгружаться все документы>";
		Иначе
			тбФильтрПоВидуСубконто.Описание = "Остатки на дату "+ЗначениеФильтра+", а также документы после этой даты";
		КонецЕсли;
	Иначе // "Справочник"
		Если ТекущийВидСубконто.ТипСубконто() = "Справочник.НашиДенежныеСчета" Тогда
			тбФильтрПоВидуСубконто.Описание = "<Фильтр не задан, этот справочник не экспортируется>";
		ИначеЕсли ПустоеЗначение(ЗначениеФильтра) = 1 Тогда
			тбФильтрПоВидуСубконто.Описание = "<Фильтр не задан, будет выгружаться весь справочник>";
		Иначе
			Если ЗначениеФильтра.ЭтоГруппа() = 1 Тогда
				тбФильтрПоВидуСубконто.Описание = "Группа элементов """+ЗначениеФильтра
												+""", код "+ЗначениеФильтра.ПолныйКод()
												+?(ПустоеЗначение(ЗначениеФильтра.Владелец)=1,
													""," ("+ЗначениеФильтра.Владелец+")");
			Иначе
				тбФильтрПоВидуСубконто.Описание = "Элемент """+ЗначениеФильтра
												+""", код "+ЗначениеФильтра.ПолныйКод()
												+?(ПустоеЗначение(ЗначениеФильтра.Владелец)=1,
													""," ("+ЗначениеФильтра.Владелец+")");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьОписаниеФильтра

// ===============================
// Назначение:
//		Вызывается при выборе строки в списке спВидыСубконто()
//		Заполняет таблицу тбФильтрПоВидуСубконто из общей таблицы
//		тбФильтрыПоВидамСубконто в соответствии с текущим видом субконто
// Аргументы:
//		Сохранять - если =1 - фильтры по текущему виду субконто сохраняются 
//							  в общей таблице в любом случае
//					если =0 - фильтры сохраняются только при изменении текущего
//							  вида субконто
Процедура ИзмВидСубконто(Сохранять=0)
	Стр = "";
	НовыйВидСубконто = спВидыСубконто.ПолучитьЗначение(спВидыСубконто.ТекущаяСтрока(),Стр);
	Если (ТекущийВидСубконто <> НовыйВидСубконто) или (Сохранять = 1) Тогда
		// сохраним фильтры по старому виду субконто
		Если ПустоеЗначение(ТекущийВидСубконто) = 0 Тогда
			Стр = 0;
			Пока тбФильтрыПоВидамСубконто.НайтиЗначение(ТекущийВидСубконто,Стр,"ВидСубконто") = 1 Цикл
				тбФильтрыПоВидамСубконто.УдалитьСтроку(Стр);
				Стр = 0;
			КонецЦикла;
			тбФильтрПоВидуСубконто.ВыбратьСтроки();
			Пока тбФильтрПоВидуСубконто.ПолучитьСтроку() = 1 Цикл
				Если ПустоеЗначение(тбФильтрПоВидуСубконто.ЗначениеФильтра) = 0 Тогда
					тбФильтрыПоВидамСубконто.НоваяСтрока();
					тбФильтрыПоВидамСубконто.ВидСубконто = ТекущийВидСубконто;
					тбФильтрыПоВидамСубконто.ЗначениеФильтра = тбФильтрПоВидуСубконто.ЗначениеФильтра;
				КонецЕсли;
			КонецЦикла;
			тбФильтрПоВидуСубконто.УдалитьСтроки();
		КонецЕсли;
		// заполним таблицу фильтрами по новому виду субконто
		ТекущийВидСубконто = НовыйВидСубконто;
		тбФильтрыПоВидамСубконто.ВыбратьСтроки();
		Пока тбФильтрыПоВидамСубконто.ПолучитьСтроку() = 1 Цикл
			Если тбФильтрыПоВидамСубконто.ВидСубконто = ТекущийВидСубконто Тогда
				тбФильтрПоВидуСубконто.НоваяСтрока();
				тбФильтрПоВидуСубконто.ЗначениеФильтра = тбФильтрыПоВидамСубконто.ЗначениеФильтра;
				ЗаполнитьОписаниеФильтра(тбФильтрПоВидуСубконто.НомерСтроки);
			КонецЕсли;
		КонецЦикла;
		тбФильтрПоВидуСубконто.УстановитьПараметрыКолонки("Описание",,,,"Фильтр по виду субконто "+ТекущийВидСубконто);
		// если нет ни одного фильтра - так и напишем
		Если тбФильтрПоВидуСубконто.КоличествоСтрок() = 0 Тогда
			тбФильтрПоВидуСубконто.НоваяСтрока();
			ЗаполнитьОписаниеФильтра(тбФильтрПоВидуСубконто.НомерСтроки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ИзмВидСубконто

// ===============================
// Выполняет проверку корректности заполнения реквизитов после каждого шага
Функция ПроверитьШаг()
    Если Шаг = 2 Тогда
	ИначеЕсли Шаг = 3 Тогда
	ИначеЕсли Шаг = 4 Тогда
		// сначала запомним фильтры по тек. виду субконто в общей таблице
		ИзмВидСубконто(1);
		// а теперь посмотрим, чтобы не было пустых фильтров
		тбФильтрыПоВидамСубконто.ВыбратьСтроки();
		Пока тбФильтрыПоВидамСубконто.ПолучитьСтроку() = 1 Цикл
			Если ПустоеЗначение(тбФильтрыПоВидамСубконто.ЗначениеФильтра) = 1 Тогда
			    стрСовет = "Есть незаполненные значения фильтров для вида субконто "+тбФильтрыПоВидамСубконто.ВидСубконто+".";
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Шаг = 5 Тогда
		//
	ИначеЕсли Шаг = 6 Тогда
		ЕстьПометки = 0;
		Для Инд = 1 по спСчетаДляСхемыПроводок.РазмерСписка() Цикл
			Если спСчетаДляСхемыПроводок.Пометка(Инд) = 1 Тогда
				ЕстьПометки = 1;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьПометки = 0 Тогда
		    стрСовет = "Не отмечен ни один счет из списка!";
			Возврат 0;
		КонецЕсли;
	ИначеЕсли Шаг = 7 Тогда
		Если пВидыДеятельности = 2 Тогда
			ЕстьПометки = 0;
			Для Инд = 1 по спВидыДеятельностиДляСхемыПроводок.РазмерСписка() Цикл
				Если спВидыДеятельностиДляСхемыПроводок.Пометка(Инд) = 1 Тогда
					ЕстьПометки = 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьПометки = 0 Тогда
				стрСовет = "Не отмечен ни один вид деятельности из списка!";
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Шаг = 8 Тогда
		ЕстьПометки = 0;
		Для Инд = 1 по спВидыЗатратДляСхемыПроводок.РазмерСписка() Цикл
			Если спВидыЗатратДляСхемыПроводок.Пометка(Инд) = 1 Тогда
				ЕстьПометки = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьПометки = 0 Тогда
		    стрСовет = "Не отмечен ни один вид затрат из списка!";
			Возврат 0;
		КонецЕсли;
	ИначеЕсли Шаг = 9 Тогда
		Если фСохранитьНастройку = 1 Тогда
			Если пРежимСохраненияНастроек = 2 Тогда
				ИмяНовойНастройки = СокрЛП(ИмяНовойНастройки);
				Если ПустоеЗначение(ИмяНовойНастройки) = 1 Тогда
					стрСовет = "Не задано имя для новой настройки!";
					Возврат 0;
				КонецЕсли;
				Если (ВРег(СокрЛП(ИмяНовойНастройки)) = "ПОУМОЛЧАНИЮ") 
				или (ВРег(СокрЛП(ИмяНовойНастройки)) = "ПО УМОЛЧАНИЮ") Тогда
					стрСовет = "Для новой настройки нельзя задавать имя ""По умолчанию""!";
					Возврат 0;
				КонецЕсли;
				Стр = "";
				Для Инд = 1 по спНастройкаСохранитьКак.РазмерСписка() Цикл
					ИмяНастройки = спНастройкаСохранитьКак.ПолучитьЗначение(Инд,Стр);
					Если ВРег(СокрЛП(ИмяНовойНастройки)) = ВРег(ИмяНастройки) Тогда
						стрСовет = "Для новой настройки нельзя задавать имя """+СокрЛП(ИмяНовойНастройки)+""" - уже есть пользовательская настройка с таким именем!";
						Возврат 0;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
    ИначеЕсли Шаг = 10 Тогда
		Если ПустоеЗначение(ИмяФайла) = 1 Тогда
		    стрСовет = "Не задано имя файла выгрузки!";
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

// ===============================
Процедура Редактировать()
	Инд = тбФильтрПоВидуСубконто.ТекущаяСтрока();
	
	Если Инд = 0 Тогда
		Возврат;
	КонецЕсли;

	Тип = ПолучитьТипВидаСубконто(ТекущийВидСубконто);
	
	ЗначениеФильтра = тбФильтрПоВидуСубконто.ЗначениеФильтра;
	Если Тип = "Документ" Тогда
		Если ВвестиДату(ЗначениеФильтра,"Дата фильтра по документам") = 1 Тогда
			тбФильтрПоВидуСубконто.ЗначениеФильтра = ЗначениеФильтра;
			ЗаполнитьОписаниеФильтра(Инд);
		КонецЕсли;
	Иначе // "Справочник"
		Если ТекущийВидСубконто.ТипСубконто() = "Справочник.НашиДенежныеСчета" Тогда
			// этот справочник не экспортируется
			Возврат;
		КонецЕсли;
		Спр = СоздатьОбъект(ТекущийВидСубконто.ТипСубконто());
		ИдентификаторСправочника = Сред(ТекущийВидСубконто.ТипСубконто(),СтрДлина("Справочник.")+1);
		Если Метаданные.Справочник(ИдентификаторСправочника).Владелец.Выбран() = 1 Тогда
			// у этого справочника есть владелец
			// выберем сначала владельца
			Если ПустоеЗначение(ЗначениеФильтра) = 0 Тогда
				Влад = ЗначениеФильтра.Владелец;
			Иначе
				СпрВлад = СоздатьОбъект("Справочник."+Метаданные.Справочник(ИдентификаторСправочника).Владелец.Идентификатор);
				Если СпрВлад.Выбрать("Владелец для выбора в справочнике "+ИдентификаторСправочника,"ФормаСписка") = 1 Тогда
					Влад = СпрВлад.ТекущийЭлемент();
				Иначе
					Возврат;
				КонецЕсли;
				СпрВлад = 0;
			КонецЕсли;
			Спр.ИспользоватьВладельца(Влад);
		КонецЕсли;
		Спр.НайтиЭлемент(ЗначениеФильтра);
		Спр.ВыборГруппы(1);
		Если Спр.Выбрать("Элемент (группа), которая будет выгружаться в ЗиК","ФормаСписка") = 1 Тогда
			тбФильтрПоВидуСубконто.ЗначениеФильтра = Спр.ТекущийЭлемент();
			ЗаполнитьОписаниеФильтра(Инд);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //Редактировать

// ===============================
Процедура Добавить()
	Если тбФильтрПоВидуСубконто.КоличествоСтрок() = 1 Тогда
		тбФильтрПоВидуСубконто.ПолучитьСтрокуПоНомеру(1);
		ЗначениеФильтра = тбФильтрПоВидуСубконто.ЗначениеФильтра;
		Если ПустоеЗначение(ЗначениеФильтра) = 1 Тогда
			// уже есть одна строка, которая = "фильтр не задан"
			// новую строку не добавляем, а редактируем существующую
			тбФильтрПоВидуСубконто.ТекущаяСтрока(1);
			Редактировать();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// добавляем новую строку
	тбФильтрПоВидуСубконто.НоваяСтрока();
	тбФильтрПоВидуСубконто.ТекущаяСтрока(тбФильтрПоВидуСубконто.КоличествоСтрок());
	Редактировать();
КонецПроцедуры //Добавить

// ===============================
Процедура ДобавитьНесколько()
Перем ФормаПодбора;

	Тип = ПолучитьТипВидаСубконто(ТекущийВидСубконто);
	Если Тип = "Документ" Тогда
		// для документов предусмотрен 
		// только один фильтр - начальная дата
		// обрабатываем, как при нажатии на кнопку "..."
		Добавить();
	Иначе // "Справочник"
		Если ТекущийВидСубконто.ТипСубконто() = "Справочник.НашиДенежныеСчета" Тогда
			// этот справочник не экспортируется
			Возврат;
		КонецЕсли;
		
		ИдентификаторСправочника = Сред(ТекущийВидСубконто.ТипСубконто(),СтрДлина("Справочник.")+1);
		Если Метаданные.Справочник(ИдентификаторСправочника).Владелец.Выбран() = 1 Тогда
			// у этого справочника есть владелец
			// выберем сначала владельца
			СпрВлад = СоздатьОбъект("Справочник."+Метаданные.Справочник(ИдентификаторСправочника).Владелец.Идентификатор);
			Влад = 0;
			Если СпрВлад.Выбрать("Владелец для выбора в справочнике "+ИдентификаторСправочника,"ФормаСписка") = 1 Тогда
				Влад = СпрВлад.ТекущийЭлемент();
			Иначе
				Возврат;
			КонецЕсли;
			СпрВлад = 0;
		КонецЕсли;
		
		ОткрытьПодбор(ТекущийВидСубконто.ТипСубконто(),,ФормаПодбора,1,тбФильтрПоВидуСубконто.ЗначениеФильтра);
		
		ФормаПодбора.ВыборГруппы(1);
		Если ПустоеЗначение(Влад) = 0 Тогда
			ФормаПодбора.ИспользоватьВладельца(Влад);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ДобавитьНесколько

// ===============================
Процедура ОбработкаПодбора(Элемент,КонтФормы)
	Если тбФильтрПоВидуСубконто.КоличествоСтрок() = 1 Тогда
		тбФильтрПоВидуСубконто.ПолучитьСтрокуПоНомеру(1);
		ЗначениеФильтра = тбФильтрПоВидуСубконто.ЗначениеФильтра;
		Если ПустоеЗначение(ЗначениеФильтра) = 1 Тогда
			// уже есть одна строка, которая = "фильтр не задан"
			// новую строку не добавляем, заменяем значение в существующей
			тбФильтрПоВидуСубконто.ТекущаяСтрока(1);
			тбФильтрПоВидуСубконто.ЗначениеФильтра = Элемент;
			ЗаполнитьОписаниеФильтра(1);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// добавляем новую строку
	тбФильтрПоВидуСубконто.НоваяСтрока();
	тбФильтрПоВидуСубконто.ЗначениеФильтра = Элемент;
	Инд = тбФильтрПоВидуСубконто.КоличествоСтрок();
	ЗаполнитьОписаниеФильтра(Инд);
КонецПроцедуры

// ===============================
Процедура Удалить()
	Инд = тбФильтрПоВидуСубконто.ТекущаяСтрока();

	тбФильтрПоВидуСубконто.УдалитьСтроку(Инд);

	// если нет ни одного фильтра - добавим строку "фильтр не задан"
	Если тбФильтрПоВидуСубконто.КоличествоСтрок() = 0 Тогда
		тбФильтрПоВидуСубконто.НоваяСтрока();
		ЗаполнитьОписаниеФильтра(Инд);
	КонецЕсли;
КонецПроцедуры //Удалить

// ===============================
Процедура УдалитьВсе()
	тбФильтрПоВидуСубконто.УдалитьСтроки();

	// если нет ни одного фильтра - добавим строку "фильтр не задан"
	Если тбФильтрПоВидуСубконто.КоличествоСтрок() = 0 Тогда
		тбФильтрПоВидуСубконто.НоваяСтрока();
		ЗаполнитьОписаниеФильтра(1);
	КонецЕсли;
КонецПроцедуры //Удалить

// ===============================
// Назначение:
//		Заполняет список субконто по отмеченным счетам в списке спСчета
Процедура ЗаполнитьСписокВидовСубконто()
	спВидыСубконто.УдалитьВсе();
	Стр = "";
	Для Инд = 1 по спСчета.РазмерСписка() Цикл
		Если спСчета.Пометка(Инд) = 0 Тогда
			Продолжить;
		КонецЕсли;

		Счет = СчетПоКоду(спСчета.ПолучитьЗначение(Инд,Стр));
		
		Для НомСубконто = 1 по Счет.КоличествоСубконто() Цикл
			ВидСубконто = Счет.ВидСубконто(НомСубконто);
			
			Если ВидСубконто.Идентификатор() = "Сотрудники" Тогда
				// Сотрудники в список субконто не включаются
				глКомментарий("У счета "+Счет+" есть аналитика по виду субконто Сотрудники, этот вид не включается в список.",1);
				Продолжить;
			КонецЕсли;

			Тип = ПолучитьТипВидаСубконто(ВидСубконто);

			Если (Тип = "Справочник") или (Тип = "Документ") Тогда
				// в список добавляем только виды субконто с типом
				// "справочник определенного вида" или 
				// "документ определенного вида"
				глДобавитьЗначениеБезПовторения(спВидыСубконто, ВидСубконто, Строка(ВидСубконто)+" ("+Тип+")");
			Иначе
				// комментарии выдаем только при добавлении в список видов
				// субконто, который доступен пользователю на форме
				глКомментарий("У счета "+Счет+" есть аналитика по виду субконто "+ВидСубконто+". Этот вид субконто не включается в список, т.к. в нем должны быть только типы субконто ""справочник определенного вида"" или ""документ определенного вида"".",1);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// В списке обязательно должны быть виды субконто ВидыДеятельности, 
	// Подразделения и ВидыЗатрат
	
	// Подразделения и ВидыДеятельности уже находятся в списке, 
	// т.к. это аналитика по 231 счету, а он всегда отмечен в списке
	
	// ...поэтому добавим только ВидыЗатрат
	ВидСубконто = ВидыСубконто.ВидыЗатрат;
	глДобавитьЗначениеБезПовторения(спВидыСубконто, ВидСубконто, Строка(ВидСубконто)+" (Справочник)");

	// В зависимости от константы...	
	Если Константа.ТипДопАналитикиЗиК = 1 Тогда
		// ...добавим "Документ.Заказ"
		глДобавитьЗначениеБезПовторения(спВидыСубконто, "Заказы", "Заказы (Документ)");

	ИначеЕсли Константа.ТипДопАналитикиЗиК = 2 Тогда
		// ...добавим "ВидыСубконто.ТМЦ"
		ВидСубконто = ВидыСубконто.ТМЦ;
		глДобавитьЗначениеБезПовторения(спВидыСубконто, ВидСубконто, Строка(ВидСубконто)+" (Справочник)");

	Иначе // ТипДопАналитикиЗиК = 0
		// ...дополнительное субконто не добавляем
		
	КонецЕсли;

	Для Инд = 1 по спВидыСубконто.РазмерСписка() Цикл
		ВидСубконто = спВидыСубконто.ПолучитьЗначение(Инд,Стр);
		Если ТипЗначенияСтр(ВидСубконто) = "Строка" Тогда
			Продолжить;
		КонецЕсли;
		Тип = ПолучитьТипВидаСубконто(ВидСубконто);
		ИдСпрИлиДок = Сред(ВидСубконто.ТипСубконто(),СтрДлина(Тип)+2);
		Если ВидСубконто.Идентификатор() <> ИдСпрИлиДок Тогда
			глКомментарий("Идентификатор вида субконто """+ВидСубконто+""" ("+ВидСубконто.Идентификатор()+") не совпадает с идентификатором типообразующего справочника/документа "+ИдСпрИлиДок+".",1);
		КонецЕсли;
	КонецЦикла;
	
	спВидыСубконто.ТекущаяСтрока(1);
	ИзмВидСубконто(1);
КонецПроцедуры //ЗаполнитьСписокВидовСубконто
    
// ===============================
Процедура СохранитьНастройки()
	Если фСохранитьНастройку = 1 Тогда
		// сохраняем список всех пользовательских настроек
		Если пРежимСохраненияНастроек = 2 Тогда
			СписокНастроек = спНастройкаСохранитьКак.ВСтрокуСРазделителями();
			Если ПустоеЗначение(СписокНастроек) = 1 Тогда
				СписокНастроек = """"+СокрЛП(ИмяНовойНастройки)+"""";
			Иначе
				СписокНастроек = СписокНастроек+","""+СокрЛП(ИмяНовойНастройки)+"""";
			КонецЕсли;
			глСохранитьЗначение(ИмяФормы,"СписокНастроек",СписокНастроек);
		КонецЕсли;
		
		// теперь сохраним список отмеченных счетов для выбранной настройки
		СписокСчетов = "";
		Стр = "";
		Для Инд = 1 по спСчета.РазмерСписка() Цикл
			Если спСчета.Пометка(Инд) = 1 Тогда
				СписокСчетов = СписокСчетов + спСчета.ПолучитьЗначение(Инд,Стр) + ",";
			КонецЕсли;
		КонецЦикла;
		СписокСчетов = Лев(СписокСчетов,СтрДлина(СписокСчетов)-1);
		глСохранитьЗначение(ИмяФормы,"СписокСчетов."+ИмяНастройки, СписокСчетов);

		// и наконец, сохраним фильтры
		ИзмВидСубконто(1);
		
		КвоФильтров = 0;
		тбФильтрыПоВидамСубконто.ВыбратьСтроки();
		Пока тбФильтрыПоВидамСубконто.ПолучитьСтроку() = 1 Цикл
			Если (ПустоеЗначение(тбФильтрыПоВидамСубконто.ВидСубконто) = 0) 
			и (ПустоеЗначение(тбФильтрыПоВидамСубконто.ЗначениеФильтра) = 0) Тогда
				КвоФильтров = КвоФильтров + 1;
				глСохранитьЗначение(ИмяФормы,"ВидСубконто"+КвоФильтров+"."+ИмяНастройки, тбФильтрыПоВидамСубконто.ВидСубконто);
				глСохранитьЗначение(ИмяФормы,"ЗначениеФильтра"+КвоФильтров+"."+ИмяНастройки, тбФильтрыПоВидамСубконто.ЗначениеФильтра);
			КонецЕсли;
		КонецЦикла;
		глСохранитьЗначение(ИмяФормы,"КвоФильтров."+ИмяНастройки, КвоФильтров);
	КонецЕсли;
КонецПроцедуры //СохранитьНастройки

// ===============================
Процедура ПоказатьСостояние(ТекстСообщения)
	тПроцессВыполнения = тПроцессВыполнения + ТекстСообщения + РазделительСтрок;
	Форма.Обновить();
КонецПроцедуры //ПоказатьСостояние

// ===============================
Процедура ВыгрузитьФирмы()
	ПоказатьСостояние("Выгружаются фирмы.");
	Для Инд = 1 по спФирмы.РазмерСписка() Цикл
		Фирма = спФирмы.ПолучитьЗначение(Инд);
		ТекстФайла.ДобавитьСтроку("""Ф"+СокрЛП(Фирма.Код)+""",""Элемент.Фирмы"","""",""?Префикс()"+СокрЛП(Фирма.Префикс)+"""");
	КонецЦикла;
КонецПроцедуры //ВыгрузитьФирмы

// ===============================
Процедура ВыгрузитьВидыСубконто()
	ПоказатьСостояние("Выгружаются виды субконто.");
	Стр = "";
	// сначала добавим виды субконто из списка на форме к общему списку видов субконто
	Для Инд = 1 по спВидыСубконто.РазмерСписка() Цикл
		ВидСубконто = спВидыСубконто.ПолучитьЗначение(Инд,Стр);
		глДобавитьЗначениеБезПовторения(спВидыСубконтоДляВыгрузки, ВидСубконто);
	КонецЦикла;
	
	// теперь выгрузим все виды субконто (из списка на форме + использованные в схеме проводок)
	Для Инд = 1 по спВидыСубконтоДляВыгрузки.РазмерСписка() Цикл
		ВидСубконто = спВидыСубконтоДляВыгрузки.ПолучитьЗначение(Инд,Стр);
		Тип = ПолучитьТипВидаСубконто(ВидСубконто);
		Если ТипЗначенияСтр(ВидСубконто) = "Строка" Тогда
			Идентиф = "Заказы";
			ИдентифВида = "Заказ"
		Иначе
			// идентификатор вида субконто
			Идентиф = СокрЛП(ВидСубконто.Идентификатор());
			// идентификатор типообразующего справочника/документа
			Если (Тип = "Справочник") или (Тип = "Документ") Тогда
				ИдентифВида = Сред(ВидСубконто.ТипСубконто(),СтрДлина(Тип)+2); 
			Иначе
				ИдентифВида = ""; 
			КонецЕсли;
		КонецЕсли;
		ТекстФайла.ДобавитьСтроку("""ВС"+СокрЛП(Инд)+""",""Элемент.ВидыСубконто"",""Записан"",""?Идентиф()"+Идентиф+""",""Наименование()"+СокрЛП(ВидСубконто)+""",""Тип()"+Тип+""",""ИдентифВида()"+ИдентифВида+"""");
		Состояние("Выгружено "+Инд+" видов субконто");
	КонецЦикла;
КонецПроцедуры //ВыгрузитьВидыСубконто

// ===============================
Процедура ВыгрузитьСчет(Счет)
	ТекстСтроки = """С"+СокрЛП(Счет.Код)+""",""Элемент.Счета"",""Записан"",""?Код()"+СокрЛП(ФорматироватьКодСчета(Счет.Код))+""",""Наименование()"+СокрЛП(Счет.Наименование)+"""";
	
	Если Лев(Счет.Код, 2) = "23" Тогда
		// Для 23 счета выгружается аналитика ВидДеятельности, Подразделения, ВидЗатрат 
		// и Заказ/ТМЦ/Ничего (в зав-ти от константы ТипДопАналитикиЗиК)
		ВидСубконто = ВидыСубконто.ВидыДеятельности;
		Поз = спВидыСубконтоДляВыгрузки.НайтиЗначение(ВидСубконто);
		ТекстСтроки = ТекстСтроки + ",""ВидСубконто1(#)ВС"+Поз+"""";
		
		ВидСубконто = ВидыСубконто.Подразделения;
		Поз = спВидыСубконтоДляВыгрузки.НайтиЗначение(ВидСубконто);
		ТекстСтроки = ТекстСтроки + ",""ВидСубконто2(#)ВС"+Поз+"""";
		
		ВидСубконто = ВидыСубконто.ВидыЗатрат;
		Поз = спВидыСубконтоДляВыгрузки.НайтиЗначение(ВидСубконто);
		ТекстСтроки = ТекстСтроки + ",""ВидСубконто3(#)ВС"+Поз+"""";
		
		// В зависимости от константы...	
		Если Константа.ТипДопАналитикиЗиК = 1 Тогда
			// ...добавим "Документ.Заказ"
			ВидСубконто = "Заказы";
			Поз = спВидыСубконтоДляВыгрузки.НайтиЗначение(ВидСубконто);
			ТекстСтроки = ТекстСтроки + ",""ВидСубконто4(#)ВС"+Поз+"""";
			
		ИначеЕсли Константа.ТипДопАналитикиЗиК = 2 Тогда
			// ...добавим "ВидыСубконто.ТМЦ"
			ВидСубконто = ВидыСубконто.ТМЦ;
			Поз = спВидыСубконтоДляВыгрузки.НайтиЗначение(ВидСубконто);
			ТекстСтроки = ТекстСтроки + ",""ВидСубконто4(#)ВС"+Поз+"""";
			
		Иначе // ТипДопАналитикиЗиК = 0
			// ...четвертая аналитика по 23 счету не ведется
		КонецЕсли;
		
	ИначеЕсли Счет = СчетПоКоду("ВР") Тогда
		// для счета ВР выгружаем только 3-ю аналитику по вал. дох/расх
		ВидСубконто = ВидыСубконто.ВалДоходыРасходы;
		Поз = спВидыСубконтоДляВыгрузки.НайтиЗначение(ВидСубконто);
		ТекстСтроки = ТекстСтроки + ",""ВидСубконто1()"",""ВидСубконто2()"",""ВидСубконто3(#)ВС"+Поз+"""";
		
	Иначе
		// для всех остальных счетов выгружаем все виды субконто
		Для НомСубконто = 1 по Счет.КоличествоСубконто() Цикл
			ВидСубконто = Счет.ВидСубконто(НомСубконто);
			
			Поз = спВидыСубконтоДляВыгрузки.НайтиЗначение(ВидСубконто);
			Если Поз > 0 Тогда
				ТекстСтроки = ТекстСтроки + ",""ВидСубконто"+НомСубконто+"(#)ВС"+Поз+"""";
			Иначе
				ТекстСтроки = ТекстСтроки + ",""ВидСубконто"+НомСубконто+"()""";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекстФайла.ДобавитьСтроку(ТекстСтроки);
КонецПроцедуры //ВыгрузитьСчет

// ===============================
Процедура ВыгрузитьПланСчетов()
	ПоказатьСостояние("Выгружается план счетов.");
	
	Стр = "";
	Для Инд = 1 по спСчета.РазмерСписка() Цикл
		Если спСчета.Пометка(Инд) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Счет = СчетПоКоду(спСчета.ПолучитьЗначение(Инд,Стр));
		Если Счет.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;

		// добавим все отмеченные счета в список счетов, которые будут выгружаться
		глДобавитьЗначениеБезПовторения(спСчетаДляВыгрузки, Счет.Код);
	КонецЦикла;

	// выгрузим полный список счетов (отмеченные в списке + использованные в схеме проводок)
	Для Инд = 1 по спСчетаДляВыгрузки.РазмерСписка() Цикл
		Счет = СчетПоКоду(спСчетаДляВыгрузки.ПолучитьЗначение(Инд,Стр));
		ВыгрузитьСчет(Счет);
		Состояние("Выгружено "+Инд+" счетов");
	КонецЦикла;
КонецПроцедуры //ВыгрузитьПланСчетов

// ===============================
Процедура ВыгрузитьДокументы(ВидСубконто)
	Поз = спВидыСубконтоДляВыгрузки.НайтиЗначение(ВидСубконто);
	
	Если ТипЗначенияСтр(ВидСубконто) = "Строка" Тогда
		Док = СоздатьОбъект("Документ.Заказ");
		ИдДокумента = "Заказ";
	Иначе
		Док = СоздатьОбъект(ВидСубконто.ТипСубконто());
		ИдДокумента = Сред(ВидСубконто.ТипСубконто(), СтрДлина("Документ.")+1);
	КонецЕсли;
	//ПоказатьСостояние("Выгружаются документы "+ИдДокумента+".");
	
	Стр = 0;
	Если тбФильтрыПоВидамСубконто.НайтиЗначение(ВидСубконто,Стр,"ВидСубконто") = 0 Тогда
		// нет фильтров по этим документам, выгружаем все документы
		ДатаНачала = ПолучитьПустоеЗначение("Дата");
	Иначе
		// есть фильтры по этим документам, выгружаем только то, что соответствует фильтру
		тбФильтрыПоВидамСубконто.ВыбратьСтроки();
		Пока тбФильтрыПоВидамСубконто.ПолучитьСтроку() = 1 Цикл
			Если тбФильтрыПоВидамСубконто.ВидСубконто <> ВидСубконто Тогда
				Продолжить;
			КонецЕсли;
			ДатаНачала = тбФильтрыПоВидамСубконто.ЗначениеФильтра;
			Прервать;
		КонецЦикла;
	КонецЕсли;

	Периодичность = Метаданные.Документ(ИдДокумента).ПериодичностьНомера;

	Инд = 0;	
	Док.ВыбратьДокументы(ДатаНачала);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		              
		Если Периодичность = "Все" Тогда
			КАУ = СокрЛП(Док.НомерДок);
		Иначе
			Если Периодичность = "Год" Тогда
				НачДата = НачГода(Док.ДатаДок);
				КонДата = КонГода(Док.ДатаДок);
			ИначеЕсли Периодичность = "Квартал" Тогда
				НачДата = НачКвартала(Док.ДатаДок);
				КонДата = НачКвартала(Док.ДатаДок);
			ИначеЕсли Периодичность = "Месяц" Тогда
				НачДата = НачМесяца(Док.ДатаДок);
				КонДата = НачМесяца(Док.ДатаДок);
			ИначеЕсли Периодичность = "День" Тогда
				НачДата = Док.ДатаДок;
				КонДата = Док.ДатаДок;
			КонецЕсли;
			КАУ = Формат(НачДата,"ДДДММГГГГ") + "/" + Формат(КонДата,"ДДДММГГГГ") 
				+ "/" + СокрЛП(Док.НомерДок);
		КонецЕсли;
		
		Наим = Док.ПредставлениеВида() + " N" + Док.НомерДок + " от " + Док.ДатаДок;
		
		ТекстФайла.ДобавитьСтроку(""""+ИдДокумента+КАУ+""",""Элемент.ОбъектыАналитУчета"",""Записан"",""?КАУ()"+КАУ+""",""Наименование()"+Наим+""",""?Владелец(#)ВС"+СокрЛП(Поз)+"""");
		Инд = Инд + 1;
		Состояние("Выгружено "+Инд+" документов "+ИдДокумента);
	КонецЦикла;
	Док = 0;
КонецПроцедуры //ВыгрузитьДокументы

// ===============================
Процедура ВыгрузитьЭлементСправочника(ИдСпр, Поз, ТекЭлемент)
	Если Метаданные.Справочник(ИдСпр).СерииКодов = "ВПределахПодчинения" Тогда
		КАУ = СокрЛП(ТекЭлемент.ПолныйКод());
		Если Метаданные.Справочник(ИдСпр).КоличествоУровней > 1 Тогда
			// только для многоуровневых справочников
			КАУ = "/" + КАУ;
		КонецЕсли;
	Иначе // СерииКодов = "ВесьСправочник"
		КАУ = СокрЛП(ТекЭлемент.Код);
	КонецЕсли;
	
	Если ПустоеЗначение(ТекЭлемент.Родитель) = 1 Тогда
		КАУРодителя = "";
	Иначе
		Родитель = ТекЭлемент.Родитель;
		Если Метаданные.Справочник(ИдСпр).СерииКодов = "ВПределахПодчинения" Тогда
			// если у элемента есть родитель, значит справочник многоуровневый
			КАУРодителя = "/" + СокрЛП(Родитель.ПолныйКод());
		Иначе // СерииКодов = "ВесьСправочник"
			КАУРодителя = СокрЛП(Родитель.Код);
		КонецЕсли;
	КонецЕсли;
	
	Если ИдСпр = "Подразделения" Тогда
		// справочник Подразделения выгружаем в одноименный справочник ЗиК
		Если ТекЭлемент.ЭтоГруппа() = 1 Тогда
			ТекстФайла.ДобавитьСтроку(""""+ИдСпр+КАУ+""",""Группа.Подразделения"",""Записан"",""?Код()"+КАУ+""",""Наименование()"+СокрЛП(ТекЭлемент.Наименование)+""",""?Владелец(#)Ф"+СокрЛП(ТекЭлемент.Владелец.Код)+""""+?(КАУРодителя="","",",""?Родитель(#)"+ИдСпр+КАУРодителя+""""));
		Иначе
			ТекстФайла.ДобавитьСтроку(""""+ИдСпр+КАУ+""",""Элемент.Подразделения"",""Записан"",""?Код()"+КАУ+""",""Наименование()"+СокрЛП(ТекЭлемент.Наименование)+""",""?Владелец(#)Ф"+СокрЛП(ТекЭлемент.Владелец.Код)+""""+?(КАУРодителя="","",",""?Родитель(#)"+ИдСпр+КАУРодителя+""""));
		КонецЕсли;
		// запомним Фирму этого подразделения
		глДобавитьЗначениеБезПовторения(спФирмы,ТекЭлемент.Владелец);
	Иначе
		// все остальные справочники - в "Объекты аналитического учета"
		Если ТекЭлемент.ЭтоГруппа() = 1 Тогда
			ТекстФайла.ДобавитьСтроку(""""+ИдСпр+КАУ+""",""Группа.ОбъектыАналитУчета"",""Записан"",""?КАУ()"+КАУ+""",""Наименование()"+СокрЛП(ТекЭлемент.Наименование)+""",""?Владелец(#)ВС"+СокрЛП(Поз)+""""+?(КАУРодителя="","",",""?Родитель(#)"+ИдСпр+КАУРодителя+""""));
		Иначе
			ТекстФайла.ДобавитьСтроку(""""+ИдСпр+КАУ+""",""Элемент.ОбъектыАналитУчета"",""Записан"",""?КАУ()"+КАУ+""",""Наименование()"+СокрЛП(ТекЭлемент.Наименование)+""",""?Владелец(#)ВС"+СокрЛП(Поз)+""""+?(КАУРодителя="","",",""?Родитель(#)"+ИдСпр+КАУРодителя+""""));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ВыгрузитьЭлементСправочника

// ===============================
Процедура ВыгрузитьСправочник(ВидСубконто)
	Поз = спВидыСубконтоДляВыгрузки.НайтиЗначение(ВидСубконто);
	ИдСправочника = Сред(ВидСубконто.ТипСубконто(), СтрДлина("Справочник.")+1);
	
	Если (ИдСправочника = "НашиДенежныеСчета") или (ИдСправочника = "Сотрудники") Тогда
		// эти справочники не экспортируется
		Возврат;
	КонецЕсли;

	Если спВидыСубконто.НайтиЗначение(ВидСубконто) = 0 Тогда
		// Этого вида субконто нет в списке, построенном на основании анализа 
		// списка отмеченных пользователем на форме счетов. Это значит,
		// что этот вид субконто встречается только в схеме проводок,
		// и заполнение схемы проводок включено.
		// Поэтому по этому виду субконто будем выгружать только те
		// объекты аналитики, которые встречаются в проводках.
		Стр = "";
		Для Инд = 1 по спОбъектыАналитикиДляВыгрузки.РазмерСписка() Цикл
			ЗначениеФильтра = спОбъектыАналитикиДляВыгрузки.ПолучитьЗначение(Инд,Стр);
			Пока ПустоеЗначение(ЗначениеФильтра.Родитель) = 0 Цикл
				// если есть родитель - выгрузим и его
				глДобавитьЗначениеБезПовторения(спОбъектыАналитикиДляВыгрузки,ЗначениеФильтра.Родитель);
				// ...и всех родителей более высокого уровня
				ЗначениеФильтра = ЗначениеФильтра.Родитель;
			КонецЦикла;
			ЗначениеФильтра = спОбъектыАналитикиДляВыгрузки.ПолучитьЗначение(Инд,Стр);
			Если ЗначениеФильтра.Вид() = ИдСправочника Тогда
				ВыгрузитьЭлементСправочника(ИдСправочника, Поз, ЗначениеФильтра);
				Состояние("Выгружено "+Инд+" элементов справочника "+ИдСправочника);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// ВидСубконто есть в списке спВидыСубконто
		Спр = СоздатьОбъект(ВидСубконто.ТипСубконто());
		Стр = 0;
		Если тбФильтрыПоВидамСубконто.НайтиЗначение(ВидСубконто,Стр,"ВидСубконто") = 0 Тогда
			// нет фильтров по этому справочнику, выгружаем весь справочник
			// независимо от того, есть ли элементы этого справочника в проводках
			Если ИдСправочника = "Подразделения" Тогда
				// справочник Подразделения подчинен Фирмам
				СпрФ = СоздатьОбъект("Справочник.Фирмы");
				СпрФ.ВыбратьЭлементы();
				Пока СпрФ.ПолучитьЭлемент() = 1 Цикл
					Спр.ИспользоватьВладельца(СпрФ.ТекущийЭлемент());
					Спр.ВыбратьЭлементы();
					Пока Спр.ПолучитьЭлемент() = 1 Цикл
						ВыгрузитьЭлементСправочника(ИдСправочника, Поз, Спр.ТекущийЭлемент());
						Состояние("Выгружено "+Инд+" элементов справочника "+ИдСправочника);
					КонецЦикла;
				КонецЦикла;
			Иначе // все остальные справочники
				Спр.ВыбратьЭлементы();
				Пока Спр.ПолучитьЭлемент() = 1 Цикл
					ВыгрузитьЭлементСправочника(ИдСправочника, Поз, Спр.ТекущийЭлемент());
					Состояние("Выгружено "+Инд+" элементов справочника "+ИдСправочника);
				КонецЦикла;
			КонецЕсли;
		Иначе
			// есть фильтры по этому справочнику, 
			// выгружаем только то, что соответствует фильтрам и то, что есть в проводках
			
			// сначала добавим фильтры в общий список
			тбФильтрыПоВидамСубконто.ВыбратьСтроки();
			Пока тбФильтрыПоВидамСубконто.ПолучитьСтроку() = 1 Цикл
				Если тбФильтрыПоВидамСубконто.ВидСубконто <> ВидСубконто Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеФильтра = тбФильтрыПоВидамСубконто.ЗначениеФильтра;
				глДобавитьЗначениеБезПовторения(спОбъектыАналитикиДляВыгрузки,ЗначениеФильтра);
				Если ЗначениеФильтра.ЭтоГруппа() = 1 Тогда
					// если это группа - выгрузим все содержимое этой группы
					Если ИдСправочника = "Подразделения" Тогда
						// справочник Подразделения подчинен Фирмам
						Спр.ИспользоватьВладельца(ЗначениеФильтра.Владелец);
					КонецЕсли;
					Спр.ИспользоватьРодителя(ЗначениеФильтра);
					Спр.ВыбратьЭлементы();
					Пока Спр.ПолучитьЭлемент() = 1 Цикл
						глДобавитьЗначениеБезПовторения(спОбъектыАналитикиДляВыгрузки,Спр.ТекущийЭлемент());
					КонецЦикла;
				КонецЕсли;
				Пока ПустоеЗначение(ЗначениеФильтра.Родитель) = 0 Цикл
					// если есть родитель - выгрузим и его
					глДобавитьЗначениеБезПовторения(спОбъектыАналитикиДляВыгрузки,ЗначениеФильтра.Родитель);
					// ...и всех родителей более высокого уровня
					ЗначениеФильтра = ЗначениеФильтра.Родитель;
				КонецЦикла;
			КонецЦикла;
			
			// а теперь выгрузим весь список 
			// (фильтры + объекты, использованные в проводках)
			Стр = "";
			Для Инд = 1 по спОбъектыАналитикиДляВыгрузки.РазмерСписка() Цикл
				ЗначениеФильтра = спОбъектыАналитикиДляВыгрузки.ПолучитьЗначение(Инд,Стр);
				Если ЗначениеФильтра.Вид() = ИдСправочника Тогда
					ВыгрузитьЭлементСправочника(ИдСправочника, Поз, ЗначениеФильтра);
					Состояние("Выгружено "+Инд+" элементов справочника "+ИдСправочника);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Спр = 0;
	КонецЕсли;
КонецПроцедуры //ВыгрузитьСправочник

// ===============================
Процедура ВыгрузитьОбъектыАналитики()
	ПоказатьСостояние("Выгружаются объекты аналитики.");
	Стр = "";

	// выгрузим объекты аналитики по общему списку
	// (список на форме + виды субконто, использованные в выгружаемой схеме проводок)
	Для Инд = 1 по спВидыСубконтоДляВыгрузки.РазмерСписка() Цикл
		ВидСубконто = спВидыСубконтоДляВыгрузки.ПолучитьЗначение(Инд,Стр);
		Тип = ПолучитьТипВидаСубконто(ВидСубконто);
		
		Если Тип = "Документ" Тогда
			ВыгрузитьДокументы(ВидСубконто);
		ИначеЕсли Тип = "Справочник" Тогда
			ВыгрузитьСправочник(ВидСубконто);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ВыгрузитьОбъектыАналитики
    
// ===============================
Функция Получить(Секция,нСтроки,нКолонки)
    Возврат Секция.Область(нСтроки,нКолонки,нСтроки,нКолонки).Текст;
КонецФункции

// ===============================
// заполняет таблицы Хоз.операций и проводок из соотв. таблиц
Процедура ЗаполнитьТаблицыХозОперацийИПроводок()
	тбХозОперации.УдалитьСтроки();
	тбПроводки.УдалитьСтроки();

	// хоз. операции
	Т = СоздатьОбъект("Таблица");
	Т.ИсходнаяТаблица("ХозОперации");
	Высота = Т.ВысотаСекции("ХозОперации");
	Секция = Т.ПолучитьСекцию("ХозОперации");
	Для Инд = 1 по Высота Цикл
		тбХозОперации.НоваяСтрока();
		тбХозОперации.Код = СокрЛП(Получить(Секция,Инд,1));
		тбХозОперации.Наименование = СокрЛП(Получить(Секция,Инд,2));
		тбХозОперации.ЭтоГруппа = СокрЛП(Получить(Секция,Инд,3));
		тбХозОперации.КодРодителя = СокрЛП(Получить(Секция,Инд,4));
		тбХозОперации.ШкалаСтавок = СокрЛП(Получить(Секция,Инд,5));
		тбХозОперации.СтарыйКод = тбХозОперации.Код;
	КонецЦикла;

	// проводки	
	Т = СоздатьОбъект("Таблица");
	Т.ИсходнаяТаблица("Проводки");
	Высота = Т.ВысотаСекции("Проводки");
	Секция = Т.ПолучитьСекцию("Проводки");
	Для Инд = 1 по Высота Цикл
		// проверим, при каких используемых классах счетов расходов используется эта проводка
		КлассыСчетов = СокрЛП(Получить(Секция,Инд,2));
		ВыгружатьПроводку = 1;
		Если ПустоеЗначение(КлассыСчетов) = 1 Тогда
			// классы не определены явно - считаем, что эта проводка присутствует всегда
		ИначеЕсли (КлассыСчетов = "Класс9") и (ИспользоватьСчетаРасходов <> Класс9) Тогда
			ВыгружатьПроводку = 0;
		ИначеЕсли (КлассыСчетов = "Класс8") и (ИспользоватьСчетаРасходов <> Класс8) Тогда
			ВыгружатьПроводку = 0;
		ИначеЕсли (КлассыСчетов = "Класс8и89") и (ИспользоватьСчетаРасходов = Класс9) Тогда
			ВыгружатьПроводку = 0;
		ИначеЕсли (КлассыСчетов = "Класс89") и (ИспользоватьСчетаРасходов <> Класс89) Тогда
			ВыгружатьПроводку = 0;
		ИначеЕсли (КлассыСчетов = "Класс9и89") и (ИспользоватьСчетаРасходов = Класс8) Тогда
			ВыгружатьПроводку = 0;
		КонецЕсли;

		Если ВыгружатьПроводку = 1 Тогда
			тбПроводки.НоваяСтрока();
			тбПроводки.Код = СокрЛП(Получить(Секция,Инд,1));
			тбПроводки.ХозОперация = СокрЛП(Получить(Секция,Инд,3));
			тбПроводки.ДтСчет = СокрЛП(Получить(Секция,Инд,4));
			тбПроводки.КтСчет = СокрЛП(Получить(Секция,Инд,5));
			тбПроводки.ДтСубконто1 = СокрЛП(Получить(Секция,Инд,6));
			тбПроводки.ДтСубконто2 = СокрЛП(Получить(Секция,Инд,7));
			тбПроводки.ДтСубконто3 = СокрЛП(Получить(Секция,Инд,8));
			тбПроводки.КтСубконто1 = СокрЛП(Получить(Секция,Инд,9));
			тбПроводки.КтСубконто2 = СокрЛП(Получить(Секция,Инд,10));
			тбПроводки.КтСубконто3 = СокрЛП(Получить(Секция,Инд,11));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ЗаполнитьТаблицыХозОперацийИПроводок

// ===============================
Процедура ПолучитьспХозОперацийСДублями(спХО)
	тбХозОперации.ВыбратьСтроки();
	Пока тбХозОперации.ПолучитьСтроку() = 1 Цикл
		тбПроводки.ВыбратьСтроки();
		Пока тбПроводки.ПолучитьСтроку() = 1 Цикл
			Если тбПроводки.ХозОперация <> тбХозОперации.Код Тогда
				Продолжить;
			КонецЕсли;
			Если (тбПроводки.ДтСчет = "Выбрать") или (тбПроводки.КтСчет = "Выбрать") 
			или (тбПроводки.ДтСубконто1 = "Выбрать") или (тбПроводки.КтСубконто1 = "Выбрать") 
			или (тбПроводки.ДтСубконто3 = "Выбрать") или (тбПроводки.КтСубконто3 = "Выбрать") Тогда
				глДобавитьЗначениеБезПовторения(спХО, тбХозОперации.Код);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры //ПолучитьспХозОперацийСДублями

// ===============================
// Делает дубль хоз.операции ХозОП
// Если каждый из параметров текСчет,текВидДеятельности,текВидЗатрат = "Выбрать"
//		тогда делается цикл по соответствующему списку, указанному пользователем
//		и вызывается рекурсивно эта же процедура с конкретным значением параметра
// Если же указаны конкретные параметры, тогда собственно и создается дубль
//		хоз. операции с проводками, в которых будут проставлены эти конктретные параметры
Процедура ПродублироватьХозОперациюПоПараметрам(ХозОп,Наим,РодительХО,ШС,текСч,текВД,текВЗ)
Перем Спр, Ном;
	Если (текСч <> "Выбрать") и (текВД <> "Выбрать") и (текВЗ <> "Выбрать") Тогда
		// создаем дубль хоз. операции
		тбХозОперации.НоваяСтрока();
		тбХозОперации.Код = Строка(тбХозОперации.НомерСтроки);
		Если ПустаяСтрока(Наим) = 0 Тогда
			тбХозОперации.Наименование = Наим;
		Иначе
			// наименование хоз. операции составляем в формате:
			// <ВидЗатрат> (<Счет>) [<ВидДеятельности>]
			СпрВЗ = СоздатьОбъект("Справочник.ВидыЗатрат");
			СпрВЗ.НайтиПоКоду(Число(текВЗ));
			НаимВЗ = СокрЛП(СпрВЗ.Наименование) + " (" + текСч + ") ";
			
			НаимВД = "";
			Если ПустаяСтрока(текВД) = 0 Тогда
				СпрВД = СоздатьОбъект("Справочник.ВидыДеятельности");
				СпрВД.НайтиПоКоду(Число(текВД));
				НаимВД = СокрЛП(СпрВД.Наименование);
				СпрВД = 0;
			КонецЕсли;
            
			// если получившееся наименование получается длиннее соотв. реквизита 
			// в ЗиК - урежем наименование вида затрат (и вида деятельности, если он есть)
			ОбщДлина = СтрДлина(НаимВЗ) + СтрДлина(НаимВД);
			Если ОбщДлина > 40 Тогда
				СокрВЗ = ОбщДлина - 40;
				Если ПустаяСтрока(текВД) = 0 Тогда
					// ВидДеятельности задан - урезать будем пропорционально
					СокрВЗ = Цел(СокрВЗ/2);
					СокрВД = ОбщДлина - 40 - СокрВЗ;
				КонецЕсли;
				
				НаимВЗ = СокрЛП(СпрВЗ.Наименование);
				НаимВЗ = Лев(НаимВЗ,СтрДлина(НаимВЗ)-СокрВЗ) + " (" + текСч + ") ";
				НаимВД = Лев(НаимВД,СтрДлина(НаимВД)-СокрВД);
			КонецЕсли;
			СпрВЗ = 0;
			
			тбХозОперации.Наименование = НаимВЗ + НаимВД;
		КонецЕсли;
		тбХозОперации.КодРодителя = РодительХО;
		тбХозОперации.ШкалаСтавок = ШС;
		тбХозОперации.СтарыйКод = ХозОп;
		
		// создаем для этой хоз. операции проводки
		тбПроводки.ВыбратьСтроки();
		Пока тбПроводки.ПолучитьСтроку() = 1 Цикл
			Если тбПроводки.ХозОперация <> ХозОп Тогда
				Продолжить;
			КонецЕсли;
			Ном = тбПроводки.НомерСтроки;
			
			Если тбПроводки.ДтСчет = "8хх" Тогда
				// счет берем из Вида затрат по этой проводке
				Спр = СоздатьОбъект("Справочник.ВидыЗатрат");
				Спр.НайтиПоКоду(Число(текВЗ));
				ДтСчет = СокрЛП(Спр.Счет);
				Спр = 0;
			Иначе
				ДтСчет = ?(тбПроводки.ДтСчет="Выбрать", текСч, тбПроводки.ДтСчет);
			КонецЕсли;
			ДтСубконто1 = ?(тбПроводки.ДтСубконто1="Выбрать", текВД, тбПроводки.ДтСубконто1);
			ДтСубконто2 = тбПроводки.ДтСубконто2;
			ДтСубконто3 = ?(тбПроводки.ДтСубконто3="Выбрать", текВЗ, тбПроводки.ДтСубконто3);

			Если тбПроводки.КтСчет = "8хх" Тогда
				// счет берем из Вида затрат по этой проводке
				Спр = СоздатьОбъект("Справочник.ВидыЗатрат");
				Спр.НайтиПоКоду(Число(текВЗ));
				КтСчет = СокрЛП(Спр.Счет);
				Спр = 0;
			Иначе
				КтСчет = ?(тбПроводки.КтСчет="Выбрать", текСч, тбПроводки.КтСчет);
			КонецЕсли;
			КтСубконто1 = ?(тбПроводки.КтСубконто1="Выбрать", текВД, тбПроводки.КтСубконто1);
			КтСубконто2 = тбПроводки.КтСубконто2;
			КтСубконто3 = ?(тбПроводки.КтСубконто3="Выбрать", текВЗ, тбПроводки.КтСубконто3);
			
			тбПроводки.НоваяСтрока();
			тбПроводки.ХозОперация = тбХозОперации.Код;
			тбПроводки.ДтСчет = ДтСчет;
			тбПроводки.ДтСубконто1 = ДтСубконто1;
			тбПроводки.ДтСубконто2 = ДтСубконто2;
			тбПроводки.ДтСубконто3 = ДтСубконто3;
			тбПроводки.КтСчет = КтСчет;
			тбПроводки.КтСубконто1 = КтСубконто1;
			тбПроводки.КтСубконто2 = КтСубконто2;
			тбПроводки.КтСубконто3 = КтСубконто3;
			
			// восстановим позицию для выборки
			тбПроводки.ПолучитьСтрокуПоНомеру(Ном);
		КонецЦикла;

		// 29 - это количество хоз. операций в таблице ХозОперации
		Состояние("Создано "+(тбХозОперации.НомерСтроки-29)+" новых хоз. операций");
	Иначе
		// делаем циклы по значениям, выбранным пользователем
		Если текСч = "Выбрать" Тогда
			Для НомСч = 1 по спСчетаДляСхемыПроводок.РазмерСписка() Цикл
				Если спСчетаДляСхемыПроводок.Пометка(НомСч) = 1 Тогда
					Стр = "";
					Сч = спСчетаДляСхемыПроводок.ПолучитьЗначение(НомСч,Стр);
					ПродублироватьХозОперациюПоПараметрам(ХозОп,Наим,РодительХО,ШС,Сч,текВД,текВЗ);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли текВД = "Выбрать" Тогда
			Если пВидыДеятельности = 1 Тогда
				ПродублироватьХозОперациюПоПараметрам(ХозОп,Наим,РодительХО,ШС,текСч,"",текВЗ);
			Иначе
				Для НомВД = 1 по спВидыДеятельностиДляСхемыПроводок.РазмерСписка() Цикл
					Если спВидыДеятельностиДляСхемыПроводок.Пометка(НомВД) = 1 Тогда
						Стр = "";
						ВД = спВидыДеятельностиДляСхемыПроводок.ПолучитьЗначение(НомВД,Стр);
						ПродублироватьХозОперациюПоПараметрам(ХозОп,Наим,РодительХО,ШС,текСч,ВД,текВЗ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли текВЗ = "Выбрать" Тогда
			Для НомВЗ = 1 по спВидыЗатратДляСхемыПроводок.РазмерСписка() Цикл
				Если спВидыЗатратДляСхемыПроводок.Пометка(НомВЗ) = 1 Тогда
					Стр = "";
					ВЗ = спВидыЗатратДляСхемыПроводок.ПолучитьЗначение(НомВЗ,Стр);
					ПродублироватьХозОперациюПоПараметрам(ХозОп,Наим,РодительХО,ШС,текСч,текВД,ВЗ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ПродублироватьХозОперациюПоПараметрам

// ===============================
Процедура ПродублироватьХозОперацию(ХозОп)
	// получим параметры этой хоз операции
	Стр = 0;
	Инд = тбХозОперации.НайтиЗначение(ХозОп,Стр,"Код");
	тбХозОперации.ПолучитьСтрокуПоНомеру(Стр);
	Наименование = тбХозОперации.Наименование;
	КодРодителя = тбХозОперации.КодРодителя;
	ШкалаСтавок = тбХозОперации.ШкалаСтавок;
	
	// в переменных Счет, ВидДеятельности, ВидЗатрат будем хранить признак
	// того, что в этой хоз операции есть соотв. параметры, выбранные пользователем
	Счет = "";
	ВидДеятельности = "";
	ВидЗатрат = "";
	тбПроводки.ВыбратьСтроки();
	Пока тбПроводки.ПолучитьСтроку() = 1 Цикл
		Если тбПроводки.ХозОперация <> ХозОп Тогда
			Продолжить;
		КонецЕсли;
		Если (тбПроводки.ДтСчет = "Выбрать") или (тбПроводки.КтСчет = "Выбрать") Тогда
			Счет = "Выбрать";
		КонецЕсли;
		Если (тбПроводки.ДтСубконто1 = "Выбрать") или (тбПроводки.КтСубконто1 = "Выбрать") Тогда
			ВидДеятельности = "Выбрать";
		КонецЕсли;
		Если (тбПроводки.ДтСубконто3 = "Выбрать") или (тбПроводки.КтСубконто3 = "Выбрать") Тогда
			ВидЗатрат = "Выбрать";
		КонецЕсли;
	КонецЦикла;
	
	// эта процедура собственно и сделает нужное количество копий хоз.операций
	ПродублироватьХозОперациюПоПараметрам(ХозОп,Наименование,КодРодителя,ШкалаСтавок,Счет,ВидДеятельности,ВидЗатрат);
КонецПроцедуры //ПродублироватьХозОперацию

// ===============================
Процедура ЗапомнитьВидыСубконто(Счет)
	Сч = СчетПоКоду(Счет);

	Если Сч = СчетПоКоду("ВР") Тогда
		// по счету ВР выгружается только 3-е субконто Вал. доходы/расходы
		ВидСубконто = Сч.ВидСубконто(3);
		глДобавитьЗначениеБезПовторения(спВидыСубконтоДляВыгрузки, ВидСубконто);

	ИначеЕсли Лев(Сч.Код,2) = "23" Тогда
	    // 23 счет всегда отмечен в списке счетов, которые показываются пользователю на форме,
		// виды субконто по этому счету выгружяются в список спВидыСубконто при переходе
		// на соотв. шаг помошника. Этот список будет объединен с спВидыСубконтоДляВыгрузки
		// на этапе выгрузки видов субконто. Поэтому сейчас 23 счет можно пропустить.

	Иначе // для всех остальных счетов
		Для НомСубконто = 1 по Сч.КоличествоСубконто() Цикл
			ВидСубконто = Сч.ВидСубконто(НомСубконто);
			
			Тип = ПолучитьТипВидаСубконто(ВидСубконто);

			Если (Тип = "Справочник") или (Тип = "Документ") Тогда
				// в список добавляем только виды субконто с типом
				// "справочник определенного вида" или 
				// "документ определенного вида"
				глДобавитьЗначениеБезПовторения(спВидыСубконтоДляВыгрузки, ВидСубконто);

			ИначеЕсли ВидСубконто = ВидыСубконто.МесяцНачисленияЗП Тогда
				// этот вид субконто выгружается, несмотря на то, что он не "справочник"
				// и не "документ"
				глДобавитьЗначениеБезПовторения(спВидыСубконтоДляВыгрузки, ВидСубконто);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //ДобавитьВидыСубконтоВСписокПоСчету

// ===============================
Процедура ЗапомнитьСчет(Счет)
	глДобавитьЗначениеБезПовторения(спСчетаДляВыгрузки, Счет);
	ЗапомнитьВидыСубконто(Счет);
КонецПроцедуры //ЗапомнитьСчет

// ===============================
Процедура ЗапомнитьОбъектАналитики(ИдСпр, КАУ)
	// получим код элемента из КАУ
	Код = ?(Лев(КАУ,1)="/", Сред(КАУ,2), КАУ);
	
	Спр = СоздатьОбъект("Справочник."+ИдСпр);
	Если Спр.НайтиПоКоду(Код) = 1 Тогда
		глДобавитьЗначениеБезПовторения(спОбъектыАналитикиДляВыгрузки, Спр.ТекущийЭлемент());
		
		Родитель = Спр.Родитель;
		Пока ПустоеЗначение(Родитель) = 0 Цикл
			глДобавитьЗначениеБезПовторения(спОбъектыАналитикиДляВыгрузки, Родитель);
			Родитель = Родитель.Родитель;
		КонецЦикла;
	КонецЕсли;
	Спр = 0;
КонецПроцедуры //ЗапомнитьОбъектАналитики

// ===============================
// возвращает строку по значению субконто проводки, 
// которая будет вставляться в файл выгрузки по справочнику Проводки из ЗиК 
Функция ПолучитьСсылкуНаСубконто(Рекв,КодСч,Значение)
	Перем ТекстСсылки;
	ТекстСсылки = "";
	
	Если ПустаяСтрока(КодСч) = 1 Тогда
		// если не задан счет - для него все субконто - Авто
		ТекстСсылки = ",""?АвтоСубконто"+Рекв+"()1""";
		
	ИначеЕсли Значение = "Авто" Тогда
		ТекстСсылки = ",""?АвтоСубконто"+Рекв+"()1""";
		
	ИначеЕсли ПустоеЗначение(Значение) = 0 Тогда
		Счет = СчетПоКоду(КодСч);
		Если (КодСч = "231") и (Число(Прав(Рекв,1)) = 3) Тогда
			// 3-е субконто на 23 счете считаем "Видом затрат"
			ВидСубконто = ВидыСубконто.ВидыЗатрат;
		Иначе
			ВидСубконто = Счет.ВидСубконто(Число(Прав(Рекв,1)));
		КонецЕсли;
		Тип = ПолучитьТипВидаСубконто(ВидСубконто);
		Ид = Сред(ВидСубконто.ТипСубконто(), СтрДлина(Тип)+2);
		
		Если Тип = "Справочник" Тогда
			ТекстСсылки = ",""?Субконто"+Рекв+"(#)"+Ид+Значение+"""";
			
			// запомним объекты аналитики, которые использовались в проводках
			ЗапомнитьОбъектАналитики(Ид,Значение);
			
		Иначе // Тип = "Документ", или что-то еще
			// В помощнике не поддерживается выгрузка документов, дат и т.п.
			// в качестве значений субконто в схеме проводок (только справочники)
			Возврат "";
		КонецЕсли;
	КонецЕсли;

	Возврат ТекстСсылки;
КонецФункции //ПолучитьСсылкуНаСубконто

// ===============================
Процедура ВыгрузитьСхемуПроводок()
	Если фЗаполнятьСхемуПроводок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьСостояние("Выгружается схема проводок.");

	// очистим справочник ХозОперации перед его заполнением
	// при этом элементы справочника Проводки пометятся на удаление автоматически
	ТекстФайла.ДобавитьСтроку(""""",""Элемент.ХозОперации"",""ЗамещеныВсе""");
	ТекстФайла.ДобавитьСтроку(""""",""Группа.ХозОперации"",""ЗамещеныВсе""");
	// справочники Счета и ОбъектыАналитУчета перед заполнением очистим тоже
	ТекстФайла.ДобавитьСтроку(""""",""Элемент.Счета"",""ЗамещеныВсе""");
	ТекстФайла.ДобавитьСтроку(""""",""Элемент.ОбъектыАналитУчета"",""ЗамещеныВсе""");
	ТекстФайла.ДобавитьСтроку(""""",""Группа.ОбъектыАналитУчета"",""ЗамещеныВсе""");
    
	// перенесем данные о хоз. операциях и проводках
	// из таблиц в таблицы значений
	ЗаполнитьТаблицыХозОперацийИПроводок();

	// Некоторые Хоз.операции могут содержать проводки, в которых вместо 
	// конкретных счетов, или значений субконто стоит "Выбрать"
	// Это означает, что пользователь должен вручную выбрать 
	// конкретные значения счетов (субконто), которые должны быть в этих проводках.
	// При этом возможна ситуация, когда пользователь выберет несколько разных
	// счетов (субконто). В этом случае нужно создать несколько аналогичных
	// хоз. операций, отличающихся только значениями счетов и/или значениями субконто,
	// которые выбрал пользователь.
	                                      
	// создадим список Хоз.Операций, которые нужно продублировать
	спХозОперацийСДублями = СоздатьОбъект("СписокЗначений");
	ПолучитьспХозОперацийСДублями(спХозОперацийСДублями);

	// продублируем все хоз.операции из полученного ранее списка
	// проводки для этих хоз.операций теперь будут содержать конкретные
	// значения, выбранные пользователем в диалоге
	Стр = "";
	Для Инд = 1 по спХозОперацийСДублями.РазмерСписка() Цикл
		ПродублироватьХозОперацию(спХозОперацийСДублями.ПолучитьЗначение(Инд,Стр));	
	КонецЦикла;
	
	// удалим в таблице тбХозОперации "старые" строки
	тбХозОперации.ВыбратьСтроки();
	Пока тбХозОперации.ПолучитьСтроку() = 1 Цикл
		Пока спХозОперацийСДублями.НайтиЗначение(тбХозОперации.Код) > 0 Цикл
			// удаляем "старую" хоз. операцию
			тбХозОперации.УдалитьСтроку(тбХозОперации.НомерСтроки);
		КонецЦикла;
	КонецЦикла;
	
	// удалим в таблице тбПроводки "старые" строки
	тбПроводки.ВыбратьСтроки();
	Пока тбПроводки.ПолучитьСтроку() = 1 Цикл
		Пока спХозОперацийСДублями.НайтиЗначение(тбПроводки.ХозОперация) > 0 Цикл
			// удаляем "старую" проводку
			тбПроводки.УдалитьСтроку(тбПроводки.НомерСтроки);
		КонецЦикла;
		Если ПустоеЗначение(тбПроводки.НомерСтроки) = 0 Тогда
			// заодно расставим коды (если в таблице еще остались необработанные строки)
			тбПроводки.Код = тбПроводки.НомерСтроки;
		КонецЕсли;
	КонецЦикла;

	// а теперь, наконец, выгружаем хоз операции и проводки:
	
	// хоз.операции
	Инд = 0;
	тбХозОперации.ВыбратьСтроки();
	Пока тбХозОперации.ПолучитьСтроку() = 1 Цикл
		Код = тбХозОперации.Код;
		Наименование = тбХозОперации.Наименование;
		ЭтоГруппа = тбХозОперации.ЭтоГруппа;
		КодРодителя = тбХозОперации.КодРодителя;
		ШкалаСтавок = тбХозОперации.ШкалаСтавок;
		Если ЭтоГруппа = "1" Тогда
			ТекстФайла.ДобавитьСтроку("""ХО"+Код+""",""Группа.ХозОперации"",""Записан"",""Наименование()"+Наименование+""""+?(КодРодителя="","",",""?Родитель(#)ХО"+КодРодителя+""""));
		Иначе
			ТекстФайла.ДобавитьСтроку("""ХО"+Код+""",""Элемент.ХозОперации"",""Записан"",""Наименование()"+Наименование+""""+?(КодРодителя="","",",""?Родитель(#)ХО"+КодРодителя+""""));
		КонецЕсли;
		Если ПустоеЗначение(ШкалаСтавок) = 0 Тогда
			// эту хоз. операцию запишем в соответствующий элемент справочника ШкалаСтавок
			ТекстФайла.ДобавитьСтроку("""ШС"+ШкалаСтавок+""",""Элемент.ШкалаСтавок"",""Записан"",""?Код()"+ШкалаСтавок+""",""ХозОперация(#)ХО"+Код+"""");
		КонецЕсли;
		Инд = Инд + 1;
		Состояние("Выгружено "+Инд+" хоз. операций");
	КонецЦикла;

	спСчетаВПроводках = СоздатьОбъект("СписокЗначений");
	спАналитикаВПроводках = СоздатьОбъект("СписокЗначений");
	
	// проводки
	Инд = 0;
	тбПроводки.ВыбратьСтроки();
	Пока тбПроводки.ПолучитьСтроку() = 1 Цикл
		Код = тбПроводки.Код;
		Владелец = тбПроводки.ХозОперация;
		ДтСчет = тбПроводки.ДтСчет;
		ДтСубконто1 = тбПроводки.ДтСубконто1;
		ДтСубконто2 = тбПроводки.ДтСубконто2;
		ДтСубконто3 = тбПроводки.ДтСубконто3;
		ДтСубконто4 = "";
		КтСчет = тбПроводки.КтСчет;
		КтСубконто1 = тбПроводки.КтСубконто1;
		КтСубконто2 = тбПроводки.КтСубконто2;
		КтСубконто3 = тбПроводки.КтСубконто3;
		КтСубконто4 = "";
		
		Если (ИспользоватьСчетаРасходов = Класс8) 
		и ((Лев(ДтСчет,1) = "9") или (Лев(КтСчет,1) = "9")) Тогда
			Продолжить;
		КонецЕсли;

		ТекстСтроки = """ПР"+Код+""",""Элемент.Проводки"",""Записан"",""?Код()"+Код+""",""?Владелец(#)ХО"+Владелец+"""";
		Если ПустаяСтрока(ДтСчет) = 0 Тогда
			ТекстСтроки = ТекстСтроки + ",""?СчетДебета(#)С"+ДтСчет+"""";
		КонецЕсли;
		Если ПустаяСтрока(КтСчет) = 0 Тогда
			ТекстСтроки = ТекстСтроки + ",""?СчетКредита(#)С"+КтСчет+"""";
		КонецЕсли;

		ТекстСтроки = ТекстСтроки + ПолучитьСсылкуНаСубконто("Дебет1",ДтСчет,ДтСубконто1);
		ТекстСтроки = ТекстСтроки + ПолучитьСсылкуНаСубконто("Дебет2",ДтСчет,ДтСубконто2);
		ТекстСтроки = ТекстСтроки + ПолучитьСсылкуНаСубконто("Дебет3",ДтСчет,ДтСубконто3);
		ТекстСтроки = ТекстСтроки + ПолучитьСсылкуНаСубконто("Дебет4",ДтСчет,ДтСубконто4);
		ТекстСтроки = ТекстСтроки + ПолучитьСсылкуНаСубконто("Кредит1",КтСчет,КтСубконто1);
		ТекстСтроки = ТекстСтроки + ПолучитьСсылкуНаСубконто("Кредит2",КтСчет,КтСубконто2);
		ТекстСтроки = ТекстСтроки + ПолучитьСсылкуНаСубконто("Кредит3",КтСчет,КтСубконто3);
		ТекстСтроки = ТекстСтроки + ПолучитьСсылкуНаСубконто("Кредит4",КтСчет,КтСубконто4);

		Если Лев(ДтСчет,2) = "23" Тогда
			Если ПустоеЗначение(Константа.ТипДопАналитикиЗиК) = 1 Тогда
				// четвертое субконто на 23-м счете не используется
			Иначе
				// четвертое субконто на 23-м счете используется, установим его в "Авто"
				ТекстСтроки = ТекстСтроки + ",""?АвтоСубконтоДебет4()1""";
			КонецЕсли;		
		КонецЕсли;		

		Если Лев(КтСчет,2) = "23" Тогда
			Если ПустоеЗначение(Константа.ТипДопАналитикиЗиК) = 1 Тогда
				// четвертое субконто на 23-м счете не используется
			Иначе
				// четвертое субконто на 23-м счете используется, установим его в "Авто"
				ТекстСтроки = ТекстСтроки + ",""?АвтоСубконтоКредит4()1""";
			КонецЕсли;		
		КонецЕсли;		

		ТекстФайла.ДобавитьСтроку(ТекстСтроки);
		
		Инд = Инд + 1;
		Состояние("Выгружено "+Инд+" проводок");

		// Запомним список всех счетов, которые использовались в проводках
		Если ПустаяСтрока(ДтСчет) = 0 Тогда
			ЗапомнитьСчет(ДтСчет);
		КонецЕсли;
		Если ПустаяСтрока(КтСчет) = 0 Тогда
			ЗапомнитьСчет(КтСчет);
		КонецЕсли;
 	КонецЦикла;
КонецПроцедуры //ВыгрузитьСхемуПроводок

// ===============================
Функция ВыгрузитьДанные()
	тПроцессВыполнения = "";
	ТекстФайла = СоздатьОбъект("Текст");
	ТекстФайла.ДобавитьСтроку("""ФорматФайла=1"",""РазделительСтрок=<разделитель строк>""");
	
	спСчетаДляВыгрузки.УдалитьВсе();
	спВидыСубконтоДляВыгрузки.УдалитьВсе();
	спОбъектыАналитикиДляВыгрузки.УдалитьВсе();
	спФирмы.УдалитьВсе();

	ВыгрузитьСхемуПроводок();	
    
	ВыгрузитьВидыСубконто();
	
	ВыгрузитьПланСчетов();
	
	ВыгрузитьОбъектыАналитики();
	
	ВыгрузитьФирмы();
	
	Попытка
		ТекстФайла.Записать(ИмяФайла);
		ТекстФайла = 0;
	Исключение
	    Возврат 0;
	КонецПопытки;
	                        
	СохранитьНастройки();

	// нормальное завершение
    Возврат 1;
КонецФункции //ВыгрузитьДанные

Процедура ЗаполнитьСписокВидовЗатратДляСхемыПроводок()
	спВидыЗатратДляСхемыПроводок.УдалитьВсе();
	
	// сначала добавим в список те виды затрат, которые выбраны в фильтрах
	Стр = 0;
	Если тбФильтрыПоВидамСубконто.НайтиЗначение(ВидыСубконто.ВидыЗатрат,Стр,"ВидСубконто") = 0 Тогда
		// фильтр не задан, т.е. выгружается весь справочник,
		// значит заполняем список всем справочником
		Спр = СоздатьОбъект("Справочник.ВидыЗатрат");
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
			Если Спр.ЭтоГруппа() = 1 Тогда
				Продолжить;
			КонецЕсли;
			ВЗ = Спр.ТекущийЭлемент();
			глДобавитьЗначениеБезПовторения(спВидыЗатратДляСхемыПроводок, ВЗ.Код, ВЗ.Наименование);
		КонецЦикла;
		Спр = 0;
	Иначе
		// добавляем виды затрат, которые выбраны в фильтрах
		тбФильтрыПоВидамСубконто.ВыбратьСтроки();
		Пока тбФильтрыПоВидамСубконто.ПолучитьСтроку() = 1 Цикл
			Если тбФильтрыПоВидамСубконто.ВидСубконто <> ВидыСубконто.ВидыЗатрат Тогда
				Продолжить;
			КонецЕсли;
			ВЗ = тбФильтрыПоВидамСубконто.ЗначениеФильтра;
			Если Лев(ВЗ.Счет.Код, 2) = "82" Тогда
				// отчисления на соц. нужды - пропускаем
				Продолжить;
			КонецЕсли;
			глДобавитьЗначениеБезПовторения(спВидыЗатратДляСхемыПроводок, ВЗ.Код, ВЗ.Наименование);
		КонецЦикла;
		
		Если ИспользоватьСчетаРасходов <> Класс9 Тогда
			// Добавим в список спВидыЗатратДляСхемыПроводок виды затрат
			// по оплате труда (счет затрат 81х)
			// (если используются счета затрат класса 8 или классов 8 и 9)
			Спр = СоздатьОбъект("Справочник.ВидыЗатрат");
			Спр.ВыбратьЭлементы();
			Пока Спр.ПолучитьЭлемент() = 1 Цикл
				Если Спр.ЭтоГруппа() = 1 Тогда
					Продолжить;
				КонецЕсли;
				ВЗ = Спр.ТекущийЭлемент();
				Если Лев(ВЗ.Счет.Код, 2) = "81" Тогда
					глДобавитьЗначениеБезПовторения(спВидыЗатратДляСхемыПроводок, ВЗ.Код, ВЗ.Наименование);
				КонецЕсли;
			КонецЦикла;
			Спр = 0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьСписокВидовЗатратДляСхемыПроводок

// ===============================
// Обрабатывает нажатие на кнопки Назад, Дальше
// Дельта - направление движения
Процедура ИзмШаг(Дельта)
	Если Дельта = 1 Тогда
		Если ПроверитьШаг()<>1 Тогда
			Возврат;
		КонецЕсли;
		// выполняем действия, необходимые при переходе на следующий шаг помощника
		Если Шаг = 2 Тогда
			УстановитьПараметрыПоНастройке();
		ИначеЕсли Шаг = 3 Тогда
			ЗаполнитьСписокВидовСубконто();
		ИначеЕсли Шаг = 5 Тогда
			Если фЗаполнятьСхемуПроводок = 1 Тогда
				ЗаполнитьСписокВидовЗатратДляСхемыПроводок();
			КонецЕсли
		ИначеЕсли Шаг = 9 Тогда
			Если фСохранитьНастройку = 1 Тогда
				Если пРежимСохраненияНастроек = 1 Тогда
					Стр = "";
					ИмяНастройки = спНастройкаСохранитьКак.ПолучитьЗначение(спНастройкаСохранитьКак.ТекущаяСтрока(),Стр);
				Иначе
					ИмяНастройки = СокрЛП(ИмяНовойНастройки);
				КонецЕсли;
			Иначе
				ИмяНастройки = "";
			КонецЕсли;
		ИначеЕсли Шаг = 10 Тогда
			Если ВыгрузитьДанные() = 0 Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли Шаг = ПоследнийШаг Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	Шаг = Шаг + Дельта;

	Если фЗаполнятьСхемуПроводок = 0 Тогда
		Пока (Шаг = 6) или (Шаг = 7) или (Шаг = 8) Цикл
			// пропускаем эти шаги, т.к. схему проводок заполнять не нужно
			Шаг = Шаг + Дельта;
		КонецЦикла;
	КонецЕсли;	
	
	НарисоватьСлои();
	ПоказатьСовет();
	ПоказатьОписание();
КонецПроцедуры

// ===============================
Процедура ЗаполнитьСписокНастроек()
	спНастроек.ДобавитьЗначение("По умолчанию");
	спНастроек.ТекущаяСтрока(1);
	
	СписокНастроек = глВосстановитьЗначение(ИмяФормы,"СписокНастроек","");
	Если ПустоеЗначение(СписокНастроек) = 0 Тогда
		спНастройкаСохранитьКак.ИзСтрокиСРазделителями(СписокНастроек);
	КонецЕсли;
	
	КвоПользовательскихНастроек = спНастройкаСохранитьКак.РазмерСписка();

	Стр = "";
	Для Инд = 1 по КвоПользовательскихНастроек Цикл
		спНастроек.ДобавитьЗначение(спНастройкаСохранитьКак.ПолучитьЗначение(Инд,Стр));
	КонецЦикла;
КонецПроцедуры //ЗаполнитьСписокНастроек

// ===============================
Процедура ДобавитьСчетВСписок(Счет)
	Если Счет = СчетПоКоду("232") Тогда
		// 232 счет не учавствует в операциях с з/п
		Возврат;
	КонецЕсли;
	Если (Лев(Счет.Код,2) = "30") или (Лев(Счет.Код,2) = "31")
	или (Лев(Счет.Код,2) = "33") Тогда
		// операции по выплате з/п не выгружаются
		Возврат;
	КонецЕсли;
	Если (Лев(Счет.Код,1) = "8") и (ИспользоватьСчетаРасходов = Класс9) Тогда
		// счета класса 8 не используются
		Возврат;
	КонецЕсли;
	Если (Лев(Счет.Код,1) = "9") и (ИспользоватьСчетаРасходов = Класс8) Тогда
		// счета класса 9 не используются
		Возврат;
	КонецЕсли;
	
	// добавим сам счет...
	Если Счет.ЭтоГруппа() = 0 Тогда
		глДобавитьЗначениеБезПовторения(спСчета, Счет.Код, Счет.Код+"    """+Счет.Наименование+"""");
	КонецЕсли;
	// ...и все его субсчета
	Сч = СоздатьОбъект("Счет.Основной");
	Сч.ИспользоватьРодителя(Счет);
	Сч.ВыбратьСчета();
	Пока Сч.ПолучитьСчет() = 1 Цикл
		Если Сч.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если Сч.Код = "232" Тогда
			// 232 счет не учавствует в операциях с з/п
			Продолжить;
		КонецЕсли;
		глДобавитьЗначениеБезПовторения(спСчета, Сч.Код, Сч.Код+"    """+Сч.Наименование+"""");
	КонецЦикла;
	Сч = 0;
КонецПроцедуры //ДобавитьСчетВСписок

// ===============================
// Назначение:
//		Заполняет списки значений, используемых в помощнике
Процедура ЗаполнитьСписки()
	// Заполняем список спСчета счетами, которые могут корреспондировать с 66 счетом
	// согласно корректным проводкам
	Корр = СоздатьОбъект("КорректныеПроводки");

	Корр.ВыбратьКорректныеПроводкиПоСчету("66",0); // 66 счет - счет дебета
	Пока Корр.ПолучитьКорректнуюПроводку() = 1 Цикл
		Если Корр.СчетКт = СчетПоКоду("66") Тогда
			// 66 счет пропускаем
			Продолжить;
		КонецЕсли;
		ДобавитьСчетВСписок(Корр.СчетКт);
	КонецЦикла;

	Корр.ВыбратьКорректныеПроводкиПоСчету("66",1); // 66 счет - счет кредита
	Пока Корр.ПолучитьКорректнуюПроводку() = 1 Цикл
		Если Корр.СчетДт = СчетПоКоду("66") Тогда
			// 66 счет пропускаем
			Продолжить;
		КонецЕсли;
		ДобавитьСчетВСписок(Корр.СчетДт);
	КонецЦикла;
	Корр = 0;

	спСчета.Сортировать();

	// заполняем список счетов затрат
	Сч = СчетПоКоду("231");
	глДобавитьЗначениеБезПовторения(спСчетаДляСхемыПроводок, Сч.Код, Сч.Код+"    """+Сч.Наименование+"""");
	Сч = СчетПоКоду("24");
	глДобавитьЗначениеБезПовторения(спСчетаДляСхемыПроводок, Сч.Код, Сч.Код+"    """+Сч.Наименование+"""");
	Если ИспользоватьСчетаРасходов <> Класс8 Тогда
		Сч = СчетПоКоду("91");
		глДобавитьЗначениеБезПовторения(спСчетаДляСхемыПроводок, Сч.Код, Сч.Код+"    """+Сч.Наименование+"""");
		Сч = СчетПоКоду("92");
		глДобавитьЗначениеБезПовторения(спСчетаДляСхемыПроводок, Сч.Код, Сч.Код+"    """+Сч.Наименование+"""");
		Сч = СчетПоКоду("93");
		глДобавитьЗначениеБезПовторения(спСчетаДляСхемыПроводок, Сч.Код, Сч.Код+"    """+Сч.Наименование+"""");
	КонецЕсли;
	
	// заполняем список видов деятельности
	Спр = СоздатьОбъект("Справочник.ВидыДеятельности");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		ВД = Спр.ТекущийЭлемент();
		глДобавитьЗначениеБезПовторения(спВидыДеятельностиДляСхемыПроводок, ВД.Код, ВД.Наименование);
	КонецЦикла;
	Спр = 0;
КонецПроцедуры //ЗаполнитьСписки

// ===============================
Процедура СоздатьТаблицы()
	// Эта таблица показывается на форме. В ней редактируем значения фильтров по 
	// текущему виду субконто
	тбФильтрПоВидуСубконто.НоваяКолонка("ЗначениеФильтра");
	тбФильтрПоВидуСубконто.НоваяКолонка("Описание","Строка");
	тбФильтрПоВидуСубконто.ВидимостьКолонки("ЗначениеФильтра",0);
	// Эта таблица на форме не отображается. В ней хранятся значения фильтров по 
	// всем видам субконто
	тбФильтрыПоВидамСубконто = СоздатьОбъект("ТаблицаЗначений");
	тбФильтрыПоВидамСубконто.НоваяКолонка("ВидСубконто");
	тбФильтрыПоВидамСубконто.НоваяКолонка("ЗначениеФильтра");
	// Эта таблица на форме не отображается. 
	// В ней хранятся хоз.операции, которые будут выгружаться
	тбХозОперации = СоздатьОбъект("ТаблицаЗначений");
	тбХозОперации.НоваяКолонка("Код","Строка");
	тбХозОперации.НоваяКолонка("Наименование","Строка");
	тбХозОперации.НоваяКолонка("ЭтоГруппа","Строка");
	тбХозОперации.НоваяКолонка("КодРодителя","Строка");
	тбХозОперации.НоваяКолонка("ШкалаСтавок","Строка");
	тбХозОперации.НоваяКолонка("СтарыйКод","Строка");
	// Эта таблица на форме не отображается. 
	// В ней хранятся проводки, которые будут выгружаться
	тбПроводки = СоздатьОбъект("ТаблицаЗначений");
	тбПроводки.НоваяКолонка("Код","Строка");
	тбПроводки.НоваяКолонка("ХозОперация","Строка");
	тбПроводки.НоваяКолонка("ДтСчет","Строка");
	тбПроводки.НоваяКолонка("ДтСубконто1","Строка");
	тбПроводки.НоваяКолонка("ДтСубконто2","Строка");
	тбПроводки.НоваяКолонка("ДтСубконто3","Строка");
	тбПроводки.НоваяКолонка("КтСчет","Строка");
	тбПроводки.НоваяКолонка("КтСубконто1","Строка");
	тбПроводки.НоваяКолонка("КтСубконто2","Строка");
	тбПроводки.НоваяКолонка("КтСубконто3","Строка");
КонецПроцедуры //СоздатьТаблицы

// ======================================
Процедура ПриОткрытии()
	фПредставлятьКодСчетаСТочками = 1;
	
	Шаг = 1;
	ПоследнийШаг = 11;
	
	ПоказатьСовет();
	ПоказатьОписание();
	НарисоватьСлои();
	
	Форма.ПанельИнструментов(0);
	    
	ИмяФормы = "Обработка.ВыгрузкаДанныхВЗиК.Форма";

	спСчетаДляВыгрузки = СоздатьОбъект("СписокЗначений");
	спВидыСубконтоДляВыгрузки = СоздатьОбъект("СписокЗначений");
	спОбъектыАналитикиДляВыгрузки = СоздатьОбъект("СписокЗначений");
	спФирмы = СоздатьОбъект("СписокЗначений");

	ЗаполнитьСписокНастроек();
	ЗаполнитьСписки();
	СоздатьТаблицы();
	
	пВидыДеятельности = 1;
	пРежимСохраненияНастроек = 2;

	ИмяФайла = глВосстановитьЗначение(ИмяФормы,"ИмяФайла",КаталогИБ()+"1sbtrans.txt");
КонецПроцедуры

// ===============================
Процедура ПриЗакрытии()
	// сохраним значения параметров обработки
	глСохранитьЗначение(ИмяФормы,"ИмяФайла",ИмяФайла);
КонецПроцедуры

// ======================================
Функция УстДоступность()
	Форма.кНазад.Доступность(1);
	Форма.кДальше.Доступность(1);
	Форма.кДальше.Заголовок("&Дальше >");
	Если Шаг = 1 Тогда
		Форма.кНазад.Доступность(0);
	ИначеЕсли Шаг = 2 Тогда
		//
	ИначеЕсли Шаг = 3 Тогда
		// нельзя снимать пометку с 231 счета
		Инд = спСчета.НайтиЗначение("231");
		Если Инд <> 0 Тогда
			спСчета.Пометка(Инд, 1);
		КонецЕсли;
		
	ИначеЕсли Шаг = 4 Тогда
		Если Форма.АктивныйЭлемент() = "спВидыСубконто" Тогда
			ИзмВидСубконто();
		КонецЕсли;
		
		Тип = ПолучитьТипВидаСубконто(ТекущийВидСубконто);
		
		Если тбФильтрПоВидуСубконто.КоличествоСтрок() = 1 Тогда
			тбФильтрПоВидуСубконто.ПолучитьСтрокуПоНомеру(1);
			ЗначениеФильтра = тбФильтрПоВидуСубконто.ЗначениеФильтра;
			Если ПустоеЗначение(ЗначениеФильтра) = 1 Тогда
				// уже есть одна строка, которая = "фильтр не задан"
				// новую строку не добавляем, а редактируем существующую
				Форма.кУдалить.Доступность(0);
				Форма.кУдалитьВсе.Доступность(0);
				Если Тип = "Справочник" Тогда
					Если ТекущийВидСубконто.ТипСубконто() = "Справочник.НашиДенежныеСчета" Тогда
						// этот справочник не экспортируется
						Форма.кДобавить.Доступность(0);
						Форма.кДобавитьНесколько.Доступность(0);
					Иначе
						Форма.кДобавить.Доступность(1);
						Форма.кДобавитьНесколько.Доступность(1);
					КонецЕсли;
				Иначе
					Форма.кДобавить.Доступность(1);
					Форма.кДобавитьНесколько.Доступность(1);
				КонецЕсли;
			Иначе
				Форма.кУдалить.Доступность(1);
				Форма.кУдалитьВсе.Доступность(1);
				Если Тип = "Справочник" Тогда
					Форма.кДобавить.Доступность(1);
					Форма.кДобавитьНесколько.Доступность(1);
				Иначе
					Форма.кДобавить.Доступность(0);
					Форма.кДобавитьНесколько.Доступность(0);
				КонецЕсли;
			КонецЕсли;
		Иначе // строк > 1
			Форма.кУдалить.Доступность(1);
			Форма.кУдалитьВсе.Доступность(1);
			// кнопка кДобавить доступна для справочников всегда
			// а для документов может быть только одна строка в таблице
			Форма.кДобавить.Доступность(1);
			Форма.кДобавитьНесколько.Доступность(1);
		КонецЕсли;
	ИначеЕсли Шаг = 5 Тогда
	ИначеЕсли Шаг = 6 Тогда
	ИначеЕсли Шаг = 7 Тогда
		Если пВидыДеятельности = 1 Тогда
			Форма.спВидыДеятельностиДляСхемыПроводок.Доступность(0);
			Форма.кУстановитьПометки.Доступность(0);
			Форма.кСнятьПометки.Доступность(0);
			Форма.кИнвертироватьПометки.Доступность(0);
		Иначе
			Форма.спВидыДеятельностиДляСхемыПроводок.Доступность(1);
			Форма.кУстановитьПометки.Доступность(1);
			Форма.кСнятьПометки.Доступность(1);
			Форма.кИнвертироватьПометки.Доступность(1);
		КонецЕсли;
	ИначеЕсли Шаг = 8 Тогда
	ИначеЕсли Шаг = 9 Тогда
		Если фСохранитьНастройку = 1 Тогда
			Если КвоПользовательскихНастроек > 0 Тогда
				Форма.пРежимСохраненияНастроек.Доступность(1);
			Иначе
				Форма.пРежимСохраненияНастроек.Доступность(0);
			КонецЕсли;
			Форма.пРежимСохраненияНастроек2.Доступность(1);
			Если пРежимСохраненияНастроек = 1 Тогда
				Форма.спНастройкаСохранитьКак.Доступность(1);
				Форма.тНастройкаСохранитьКак.Доступность(1);
				Форма.ИмяНовойНастройки.Доступность(0);
			Иначе
				Форма.спНастройкаСохранитьКак.Доступность(0);
				Форма.тНастройкаСохранитьКак.Доступность(0);
				Форма.ИмяНовойНастройки.Доступность(1);
			КонецЕсли;
		Иначе
			Форма.пРежимСохраненияНастроек.Доступность(0);
			Форма.пРежимСохраненияНастроек2.Доступность(0);
			Форма.спНастройкаСохранитьКак.Доступность(0);
			Форма.тНастройкаСохранитьКак.Доступность(0);
			Форма.ИмяНовойНастройки.Доступность(0);
		КонецЕсли;
	ИначеЕсли Шаг = 10 Тогда
	Иначе
		// последний шаг
		// теперь назад возвращаться нельзя, все действия помощника уже завершены
		Форма.кНазад.Доступность(0);
		Форма.кОтмена.Доступность(0);
		// меняем название кнопки с "Дальше" на "Готово"
		Форма.кДальше.Заголовок("&Готово");

		Форма.тНастройкаСохранена1.Видимость(фСохранитьНастройку);
		Форма.тНастройкаСохранена2.Видимость(фСохранитьНастройку);
		Форма.тНастройкаСохранена3.Видимость(фСохранитьНастройку);
	КонецЕсли;
	Возврат "";
КонецФункции

// ===============================
Процедура ПриНачалеВыбораЗначения(Рекв,ФлагСтандОбработки)
	Если Рекв = "ИмяФайла" Тогда
		// ИмяФайла - полный путь к файлу
		// разобьем его на имя каталога и имя файла
		ВремИмяФайла = ИмяФайла;
		ВремИмяКаталога = "";
		Инд = Найти(ВремИмяФайла,"\");
		Пока Инд <> 0 Цикл
			ВремИмяКаталога = ВремИмяКаталога + Сред(ВремИмяФайла,1,Инд);
			ВремИмяФайла = Сред(ВремИмяФайла,Инд+1);
			Инд = Найти(ВремИмяФайла,"\");
		КонецЦикла;
		// дадим пользователю выбрать
	    Если ФС.ВыбратьФайл(1,ВремИмяФайла,ВремИмяКаталога,"Выберите файл выгрузки","Текстовые файлы (*.txt)|*.txt","txt") = 1 Тогда
	        ИмяФайла = ВремИмяКаталога + ВремИмяФайла;
	    КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура Просмотр()
	ЗапуститьПриложение("notepad.exe """+ИмяФайла+"""");
КонецПроцедуры //Просмотр

// ===============================
// Расставляет пометки во всем списке значений Спис в 
// зависимоти от Режима:
//  1 = установить пометки
//  0 = снять пометки
// -1 = инвертировать пометки
Процедура УстановитьПрометки(Спис, Режим)
	Для Инд=1 По Спис.РазмерСписка() Цикл
		Если Режим = 1 Тогда
			Спис.Пометка(Инд,1);
		ИначеЕсли Режим = 0 Тогда
			Спис.Пометка(Инд,0); 
		Иначе
			Спис.Пометка(Инд,1-Спис.Пометка(Инд)); 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //УстановитьПрометки
