// ===============================
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
// ===============================

Перем ТипОтчетаДвижения;
Перем КрасныйЦвет;
Перем ЗеленыйЦвет;
Перем Расшифровка;
Перем Обновить;
Перем Таб;


// ===============================
// "СЛУЖЕБНЫЕ" ПРОЦЕДУРЫ И ФУНКЦИИ
// ===============================

// ===============================
// Возвращает название кода операции "на русском языке" для того, чтобы показать его 
// в отчете. 
// Параметры:
// 	РегКодОперации - КодОперации, как он указывается в регистре
// 	ВидРег - Идентификатор регистра
// Возврат:
// 	КодОперации - код операции текстом
Функция ОперацияТекстом(РегКодОперации,ВидРег)
	Если (ВидРег = "Партии") или (ВидРег = "Обороты") Тогда
		Если РегКодОперации=ПокупкаУслуги Тогда
			Возврат "Покупка услуги";
		ИначеЕсли РегКодОперации=СторноПокупкаУслуги Тогда
			Возврат "Сторно покупки услуги";
		ИначеЕсли РегКодОперации=ПродажаУслуги Тогда
			Возврат "Продажа услуги";
		ИначеЕсли РегКодОперации=СторноПродажаУслуги Тогда
			Возврат "Сторно продажи услуги";
		ИначеЕсли РегКодОперации=ДоходОтКурсовойРазницы Тогда
			Возврат "Доход/убыток от курсовой разницы";
		ИначеЕсли РегКодОперации=Закупка Тогда
			Возврат "Приходование ТМЦ на склад от поставщика";
		ИначеЕсли РегКодОперации=ПриходованиеАкциз Тогда
			Возврат "Приходование ТМЦ (акциз)";
		ИначеЕсли РегКодОперации=ПриходованиеПошлина Тогда
			Возврат "Приходование ТМЦ (пошлина)";
		ИначеЕсли РегКодОперации=ПриходованиеПеревозка Тогда
			Возврат "Приходование ТМЦ (перевозка)";
		ИначеЕсли РегКодОперации=ПриходованиеУслугиТаможни Тогда
			Возврат "Приходование ТМЦ (услуги таможни)";
		ИначеЕсли РегКодОперации=ВыпускПродукции Тогда
			Возврат "Приходование продукции";
		ИначеЕсли РегКодОперации=ВводОстатков Тогда
			Возврат "Ввод остатков ТМЦ";
		ИначеЕсли РегКодОперации=ВводОстатковДавальческихЗапасов Тогда
			Возврат "Ввод остатков давальческих запасов";
		ИначеЕсли РегКодОперации=Продажа Тогда
			Возврат "Списание ТМЦ со склада при продаже";
		ИначеЕсли РегКодОперации=РозничнаяПродажа Тогда
			Возврат "Отпуск ТМЦ из магазина при продаже";
		ИначеЕсли РегКодОперации=ВозвратПоставщику Тогда
			Возврат "Возврат ТМЦ поставщику";
		ИначеЕсли РегКодОперации=ВозвратРозничный Тогда
			Возврат "Приходование (возврат) купленного ТМЦ в магазин";
		ИначеЕсли РегКодОперации=ПродажаОтсутствующих Тогда
			Возврат "Продажа отсутствующего ТМЦ";
		ИначеЕсли РегКодОперации=ВозвратОтПокупателя Тогда
			Возврат "Возврат ТМЦ от покупателя";
		ИначеЕсли РегКодОперации=ПеремещениеВРозницу Тогда
			Возврат "Перемещение ТМЦ в розницу";
		ИначеЕсли РегКодОперации=ПеремещениеИзРозницы Тогда
			Возврат "Перемещение ТМЦ из розницы";
		ИначеЕсли РегКодОперации=ПеремещениеМеждуСкладами Тогда
			Возврат "Перемещение ТМЦ между складами";
		ИначеЕсли РегКодОперации=ПереоценкаНаСкладеДооценка Тогда
			Возврат "Переоценка ТМЦ на складе (дооценка)";
		ИначеЕсли РегКодОперации=ПереоценкаНаСкладеУценка Тогда
			Возврат "Переоценка ТМЦ на складе (уценка)";
		ИначеЕсли РегКодОперации=ПереоценкаВРознице Тогда
			Возврат "Переоценка ТМЦ в рознице";
		ИначеЕсли РегКодОперации=СписаниеИзлишков Тогда
			Возврат "Списание недостач";
		ИначеЕсли РегКодОперации=ОприходованиеИзлишков Тогда
			Возврат "Оприходование излишков";
		ИначеЕсли РегКодОперации=ВводОстатковТарыВозвратной Тогда
			Возврат "Ввод остатков возвратной тары";
		ИначеЕсли РегКодОперации=ВводОстатковТарыЗалоговой Тогда
			Возврат "Ввод остатков залоговой тары";
		ИначеЕсли РегКодОперации=ПередачаТарыВозвратнойПокупателю Тогда
			Возврат "Передача возвратной тары покупателю";
		ИначеЕсли РегКодОперации=ВозвратТарыВозвратнойОтПокупателя Тогда
			Возврат "Возврат возвратной тары от покупателя";
		ИначеЕсли РегКодОперации=ПолучениеТарыВозвратнойОтПоставщика Тогда
			Возврат "Получение возвратной тары от поставщика";
		ИначеЕсли РегКодОперации=ВозвратТарыВозвратнойПоставщику Тогда
			Возврат "Возврат залоговой тары поставщику";    
		ИначеЕсли РегКодОперации=ВводВЭксплуатациюМБП Тогда
			Возврат "Ввод МБП в эксплуатацию";
		ИначеЕсли РегКодОперации=СписаниеВПроизводство Тогда
			Возврат "Списание ТМЦ в производство";
		ИначеЕсли РегКодОперации=ВозвратИзПроизводства Тогда
			Возврат "Возврат ТМЦ из производства";
		ИначеЕсли РегКодОперации=ПолучениеДавальческогоСырья Тогда
			Возврат "Получение давальческого сырья";
		ИначеЕсли РегКодОперации=ВозвратДавальческогоСырья Тогда
			Возврат "Возврат давальческого сырья";
		ИначеЕсли РегКодОперации=ОтгрузкаДавальческойПродукции Тогда
			Возврат "Отгрузка давальческой продукции";
		ИначеЕсли РегКодОперации=ПередачаТарыЗалоговойПокупателю Тогда
			Возврат "Передача залоговой тары покупателю";
		ИначеЕсли РегКодОперации=ВозвратТарыЗалоговойОтПокупателя Тогда
			Возврат "Возврат залоговой тары от покупателя";
		ИначеЕсли РегКодОперации=ПолучениеТарыЗалоговойОтПоставщика Тогда
			Возврат "Получение залоговой тары от поставщика";
		ИначеЕсли РегКодОперации=ВозвратТарыЗалоговойПоставщику Тогда
			Возврат "Возврат залоговой тары поставщику";
		ИначеЕсли РегКодОперации=ПередачаВДавальческуюПереработку Тогда
			Возврат "Передача в давальч. переработку";
		ИначеЕсли РегКодОперации=ВозвратИзДавальческойПереработки Тогда
			Возврат "Возврат из давальч. переработки";
		ИначеЕсли РегКодОперации = СписаниеСкидокНаВес Тогда
			Возврат "Списание скидок на вес при продаже";
		Иначе
			Возврат "Новая операция: "+РегКодОперации;
		КонецЕсли;
	ИначеЕсли Найти(ВидРег, "Взаиморасчеты") <> 0 Тогда
		Если РегКодОперации=ВводОстатковОтгрузка Тогда
			Возврат "Ввод остатков - долг по отгрузке";
		
		ИначеЕсли РегКодОперации=ПерезачетВзаиморасчетов Тогда //--- УМК Сандомирский В.Ю. (04.12.14) 
			Возврат "Перезачет взаиморасчетов";	
			
		ИначеЕсли РегКодОперации=ВводОстатковОплата Тогда
			Возврат "Ввод остатков  - долг по оплате";
		ИначеЕсли РегКодОперации=АвансоваяОплата Тогда
			Возврат "Оплата - первое событие";
		ИначеЕсли РегКодОперации=ПостОплата Тогда
			Возврат "Оплата - второе событие";
		ИначеЕсли РегКодОперации=ВозвратАвансовойОплаты Тогда
			Возврат "Возврат авансовой оплаты";
		ИначеЕсли РегКодОперации=ВозвратПостОплаты Тогда
			Возврат "Возврат оплаты";
		ИначеЕсли РегКодОперации=АвансоваяОтгрузка Тогда
			Возврат "Отгрузка ТМЦ - первое событие";
		ИначеЕсли РегКодОперации=ПостОтгрузка Тогда
			Возврат "Отгрузка ТМЦ - второе событие";
		ИначеЕсли РегКодОперации=ВозвратАвансовойОтгрузки Тогда
			Возврат "Возврат авансовой отгрузки";
		ИначеЕсли РегКодОперации=ВозвратПостОтгрузки Тогда
			Возврат "Возврат пост отгрузки";        
		ИначеЕсли РегКодОперации=ПервоеСобытиеБартерПриход тогда
			Возврат "Бартер - первое событие, приход";
		ИначеЕсли РегКодОперации=ПервоеСобытиеБартерРасход тогда
			Возврат "Бартер - первое событие, расход";
		ИначеЕсли РегКодОперации=ВтороеСобытиеБартерПриход тогда
			Возврат "Бартер - второе событие, приход";
		ИначеЕсли РегКодОперации=ВтороеСобытиеБартерРасход тогда
			Возврат "Бартер - второе событие, расход";     
		ИначеЕсли РегКодОперации=ВозвратПервоеСобытиеБартерПриход тогда
			Возврат "Возврат. Бартер - первое событие, приход";     
		ИначеЕсли РегКодОперации=ВозвратПервоеСобытиеБартерРасход тогда
			Возврат "Возврат. Бартер - первое событие, расход";     
		ИначеЕсли РегКодОперации=ВозвратВтороеСобытиеБартерПриход тогда
			Возврат "Возврат. Бартер - второе событие, приход";     
		ИначеЕсли РегКодОперации=ВозвратВтороеСобытиеБартерРасход тогда
			Возврат "Возврат. Бартер - второе событие, расход";     
		ИначеЕсли РегКодОперации=КурсоваяРазницаДоход Тогда
			Возврат "Определение курсовой разницы (доход)";
		ИначеЕсли РегКодОперации=КурсоваяРазницаУбыток Тогда
			Возврат "Определение курсовой разницы (убыток)";
		ИначеЕсли РегКодОперации=НачислениеАкциза Тогда
			Возврат "Начисление акциза";
		ИначеЕсли РегКодОперации=НачислениеНДСнаИмпорт Тогда
			Возврат "Начисление НДС на импорт";
		ИначеЕсли РегКодОперации=НачислениеПошлины Тогда
			Возврат "Начисление пошлины";
		ИначеЕсли РегКодОперации=НачислениеТаможенныхУслуг Тогда
			Возврат "Начисление таможенных услуг";
		Иначе
			Возврат "Новая операция: "+РегКодОперации;
		КонецЕсли;      
	ИначеЕсли Найти(ВидРег, "ПроизводственныеЗатраты") <> 0 Тогда 
		Если РегКодОперации=ОтражениеЗатрат Тогда
			Возврат "Отражение затрат по производству продукции";
		ИначеЕсли РегКодОперации=ПерераспрЗатрат Тогда
			Возврат "Перераспределение затрат";
		ИначеЕсли РегКодОперации=ФормирСебестоимости Тогда
			Возврат "Списание затрат при формировании фактической себестоимости продукции";
		КонецЕсли;
	КонецЕсли;
КонецФункции //ОперацияТекстом

// ===============================
// ФорматСум(Сумма, ОтображениеНулевыхЗначений = "")
//
// Параметры:
//  Сумма - форматируемое число
//  ОтображениеНулевыхЗначений - параметр, определяющий стиль отображения нулевых
//   значений. Если передан символ "0", то нулевые значения не отображаются, если
//   передан символ "-", то вместо нулевых значений отображается прочерк.
//   Необязательный, по умолчанию нулевые значения отображаются как есть.
//
// ВозвращаемоеЗначение:
//  Строка с представлением полученной суммы
//
// Описание:
//  Используется при представлении чисел в строках сообщений, диалогах, отчетах
//  и т.д. Содержит единый для конфигурации стиль представления сумм.
//
Функция ФорматСум(Сумма, ОтображениеНулевыхЗначений = "")
	
	Возврат СокрЛ(Формат(Сумма, "Ч " + ОтображениеНулевыхЗначений + "18.2.,"));
	
КонецФункции // ФорматСум

// ===============================
Функция ПредставлениеФлагаНУ(Значение)
	
	Если Значение = НУ_ВозникновениеНОиВДВР Тогда
	    Возврат "Возникновение НО по НДС и ВД/ВР";

	ИначеЕсли Значение = НУ_СторноНОиВДВР Тогда
	    Возврат "Сторно НО по НДС и ВД/ВР";

	ИначеЕсли Значение = НУ_ВозникновениеНО Тогда
	    Возврат "Возникновение НО по НДС";

	ИначеЕсли Значение = НУ_СторноНО Тогда
	    Возврат "Сторно НО по НДС";

	ИначеЕсли Значение = НУ_ВозникновениеВДВР Тогда
	    Возврат "Возникновение ВД/ВР";

	ИначеЕсли Значение = НУ_СторноВДВР Тогда
	    Возврат "Сторно ВД/ВР";

	ИначеЕсли ПустоеЗначение(Значение)=1 Тогда
	    Возврат "";

	Иначе
	    Возврат "Новый флаг: "+Значение;

	КонецЕсли;

КонецФункции

// ===============================
Функция ПредставлениеФлагаУчета(Значение)
	
	Если Значение = 1 Тогда
		Возврат "Внутреннее перемещение";

	ИначеЕсли Значение = 2 Тогда
		Возврат "Внешнее перемещение";

	Иначе
		Возврат "Новый флаг учета: " + Значение;

	КонецЕсли;

КонецФункции

// ===============================
Функция ПредставлениеТипаЗатрат(Значение)
	Если Значение = НормыНаВыпуск Тогда
	    Возврат "Нормы на выпуск";
	ИначеЕсли Значение = НормыНаНезаверш Тогда
	    Возврат "Нормы на незавершенку";
	ИначеЕсли Значение = НормыНаНезавершПрош Тогда
	    Возврат "Нормы на незаверш. прошл.";
	Иначе
		Возврат "Новый тип затрат";
	КонецЕсли;
КонецФункции //ПредставлениеТипаЗатрат


// ===============================
Функция НаименованиеРегистра(МДРег)
	
	Идентификатор = МДРег.Идентификатор;
	
	Если Идентификатор="ВзаиморасчетыПокупателей" Тогда
		ВозвНаименованиеРегистра="Взаиморасчеты с покупателями";

	ИначеЕсли Идентификатор="ВзаиморасчетыПоставщиков" Тогда
		ВозвНаименованиеРегистра="Взаиморасчеты с поставщиками";

	ИначеЕсли Идентификатор="ВыпускПродукции" Тогда
		ВозвНаименованиеРегистра="Учет выпуска продукции";

	ИначеЕсли Идентификатор="НормативныеЗатраты" Тогда
		ВозвНаименованиеРегистра="Учет затрат по нормам";

	ИначеЕсли Идентификатор="Обороты" Тогда
		ВозвНаименованиеРегистра="Учет оборотов запасов";

	ИначеЕсли Идентификатор="Остатки" Тогда
		ВозвНаименованиеРегистра="Учет запасов на складах";

	ИначеЕсли Идентификатор="Партии" Тогда
		ВозвНаименованиеРегистра="Учет партий запасов";

	ИначеЕсли Идентификатор="ПроизводственныеЗатраты" Тогда
		ВозвНаименованиеРегистра="Учет затрат по выпуску продукции";

	ИначеЕсли Идентификатор="Резервы" Тогда
		ВозвНаименованиеРегистра="Учет резервирования запасов";

	Иначе // не относится к типовой конфигурации
		ВозвНаименованиеРегистра=МДРег.Представление();

	КонецЕсли;

	Возврат ВозвНаименованиеРегистра;
	
КонецФункции // НаименованиеРегистра

// ===============================
Функция ЕдУчета(ВидЗначения,Рег,РегИдентификатор)
	
	Если ВидЗначения = "Долг" Тогда	// ВзаиморасчетыПокупателей/ВзаиморасчетыПоставщиков
		ЗначениеВозврата = ?(Рег.Валюта.Выбран()=1,Рег.Валюта.Кратко,Гривня.Кратко);

	ИначеЕсли (ВидЗначения="ОстатокТовара") 	// Остатки/Партии
			Или (ВидЗначения="Резерв")			// Резервы
			Или (ВидЗначения="ПриходКво") 		// Обороты
			Или (ВидЗначения="РасходКво") Тогда	// Обороты
		ЗначениеВозврата = ?(Рег.ТМЦ.Выбран()=1,Рег.ТМЦ.БазоваяЕдиница,"");

	ИначеЕсли (ВидЗначения="Количество") Тогда				// НормативныеЗатраты/ПроизводственныеЗатраты/ВыпускПродукции
		Если (РегИдентификатор = "ВыпускПродукции") ИЛИ (РегИдентификатор = "ПлановыйВыпускПродукции")  Тогда 	// ВыпускПродукции
			ЗначениеВозврата = ?(Рег.Продукция.Выбран()=1,Рег.Продукция.БазоваяЕдиница,"");
		Иначе	                                           // НормативныеЗатраты/ПроизводственныеЗатраты
			ЗначениеВозврата = ?(Рег.Материал.Выбран()=1,Рег.Материал.БазоваяЕдиница,"");
		КонецЕсли;

	ИначеЕсли (ВидЗначения="КоличествоБрака") Тогда	// ВыпускПродукции
		ЗначениеВозврата = ?(Рег.Продукция.Выбран()=1,Рег.Продукция.БазоваяЕдиница,"");

	Иначе
		ЗначениеВозврата = Гривня.Кратко;
	
	КонецЕсли;

	ЗначениеВозврата = СокрЛП(ЗначениеВозврата);
	Возврат ЗначениеВозврата;
	
КонецФункции // ИзмерениеРесурса

// ===============================
Функция ПредставлениеЗначения(ВидРегистра,ВидЗначения,Значение)
	
	Если ПустоеЗначение(Значение)=1 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ВидЗначения="КодОперации" Тогда	// ВзаиморасчетыПокупателей/ВзаиморасчетыПоставщиков/Обороты/Партии/ПроизводственныеЗатраты
		ЗначениеВозврата = ОперацияТекстом(Значение,ВидРегистра);
		
	ИначеЕсли ВидЗначения="Флаг_НУ" Тогда	// ВзаиморасчетыПокупателей/ВзаиморасчетыПоставщиков
		ЗначениеВозврата = ПредставлениеФлагаНУ(Значение);
		
	ИначеЕсли ВидЗначения="ФлагУчета" Тогда	// Остатки
		ЗначениеВозврата = ПредставлениеФлагаУчета(Значение);
	
	ИначеЕсли Найти("=ДОЛГ=ДОЛГОСН=ДОХОД=ПРИХОДСУМ=ПРОДСТОИМОСТЬ=РАСХОДСУМ=СТОИМОСТЬ=СУММА=СУММАДАВ=НДС=СУММАСНДС_НУ=","="+ВРег(ВидЗначения)+"=")>0 Тогда
		ЗначениеВозврата = ФорматСум(Значение,"");

	ИначеЕсли ТипЗначенияСтр(Значение)="Документ" Тогда
		ЗначениеВозврата = глДокументВОтчете(Значение,"с номером","с датой");

	ИначеЕсли (ВидЗначения="ТипЗатрат") и (ВидРегистра = "НормативныеЗатраты") Тогда
		ЗначениеВозврата = ПредставлениеТипаЗатрат(Значение);

	Иначе
		ЗначениеВозврата = ""+Значение;

	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции // ЗначениеРегитсра

// ===============================
Процедура ПоказатьТаблицу(Таб, ИмяОтчета, ЗагОкна, ФиксСтрок = 1, ФиксСтолбцов = 0, ПечатьВерх = 2, ПечатьПраво = 0)
	
	Если ТипЗначенияСтр(Таб) <> "Таблица" Тогда
		Предупреждение("Ошибка при попытке показать отчет
			               |""" + ЗагОкна + """.
			               |Попробуйте еще раз.", 20);
		Возврат;
	КонецЕсли;
	ПечатьПраво = ?(ПечатьПраво = 0, Таб.ШиринаТаблицы(), ПечатьПраво);

	Таб.Опции(0, 0, ФиксСтрок, ФиксСтолбцов, "ИмяОпцийПечати" + ИмяОтчета, "ИмяРазмераОкна" + ИмяОтчета, );
	Таб.ОбластьПечати(ПечатьВерх, 2, , ПечатьПраво);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать(ЗагОкна, "");
	
КонецПроцедуры // ПоказатьТаблицу

// ===============================
Процедура ДвиженияРегистров()
	
	Если Метаданные.Документ(ВыбДокумент.Вид()).ОперативныйУчет = 0 Тогда
		Возврат;
	КонецЕсли;

	Таб.ВывестиСекцию("ШапкаДвиженийРегистров");
	НачВысотаТаблицы = Таб.ВысотаТаблицы();

	Для РНом = 1 По Метаданные.Регистр() Цикл

		МДРег = Метаданные.Регистр(РНом);
		РегИдентификатор 	= МДРег.Идентификатор;
		РегПредставление 	= МДРег.Представление();
		КвоИзмерений 		= МДРег.Измерение();
		КвоРесурсов	 		= МДРег.Ресурс();
		КвоРеквизитов		= МДРег.Реквизит();

		Рег = СоздатьОбъект("Регистр." + РегИдентификатор);
		Если Рег.ВыбратьДвиженияДокумента(ВыбДокумент) = 0 Тогда
			Продолжить;
		КонецЕсли;

		Состояние("Обработка регистра: " + РегПредставление);
		Таб.ВывестиСекцию("ИмяРегистра");
        
		МаксКвоАтрибутов = Макс(КвоИзмерений, КвоРесурсов, КвоРеквизитов);
		Индекс = 0;
		Пока Рег.ПолучитьДвижение() = 1 Цикл

			Индекс = Индекс + 1;
			Состояние("Обработка регистра: " + РегПредставление + ", движение: " + Индекс);

			Для НомерАтрибута = 1 По МаксКвоАтрибутов Цикл

				СекцияДвижение = Таб.ПолучитьСекцию("Движение");

				Если НомерАтрибута <= КвоИзмерений Тогда
                    Атрибут = МДРег.Измерение(НомерАтрибута);
					АтрИдентификатор = Атрибут.Идентификатор;
					АтрПредставление = Атрибут.Представление();

					Значение = Рег.ПолучитьАтрибут(АтрИдентификатор);

					СекцияДвижение.Измерение 		= АтрПредставление;
					СекцияДвижение.ЗначениеИзмерения= ПредставлениеЗначения(РегИдентификатор,АтрИдентификатор,Значение);
					
					Если ПустоеЗначение(Значение)=0 Тогда
						Если (ТипЗначенияСтр(Значение)="Справочник") Или (ТипЗначенияСтр(Значение)="Документ") Тогда
							СекцияДвижение.ЗначениеИзмерения.Расшифровка(Значение,1);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если НомерАтрибута <= КвоРесурсов Тогда
                    Атрибут = МДРег.Ресурс(НомерАтрибута);
					АтрИдентификатор = Атрибут.Идентификатор;
					АтрПредставление = Атрибут.Представление();

					Значение = Рег.ПолучитьАтрибут(АтрИдентификатор);

					СекцияДвижение.Ресурс 			= АтрПредставление;
					СекцияДвижение.ЗначениеРесурса 	= ПредставлениеЗначения(РегИдентификатор,АтрИдентификатор,Значение);
					СекцияДвижение.ИзмерениеРесурса = ?(ПустоеЗначение(Значение)=0,ЕдУчета(АтрИдентификатор,Рег,РегИдентификатор),"");
				КонецЕсли;

				Если НомерАтрибута <= КвоРеквизитов Тогда
                    Атрибут = МДРег.Реквизит(НомерАтрибута);
					АтрИдентификатор = Атрибут.Идентификатор;
					АтрПредставление = Атрибут.Представление();

					Значение = Рег.ПолучитьАтрибут(АтрИдентификатор);

					СекцияДвижение.Реквизит 			= АтрПредставление;
					СекцияДвижение.ЗначениеРеквизита 	= ПредставлениеЗначения(РегИдентификатор,АтрИдентификатор,Значение);
					
					Если ПустоеЗначение(Значение)=0 Тогда
						Если (ТипЗначенияСтр(Значение)="Справочник") Или (ТипЗначенияСтр(Значение)="Документ") Тогда
							СекцияДвижение.ЗначениеРеквизита.Расшифровка(Значение,1);
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;
				Таб.ВывестиСекцию(СекцияДвижение);
			КонецЦикла;

			КолКон = Таб.ВысотаТаблицы();
			КолНач = КолКон-МаксКвоАтрибутов+1;
			// оформляем +/-
			ПечОбл = Таб.Область(КолНач, 2, КолКон, 3);
			ПечОбл.Объединить();
			ПечОбл.ЦветТекста(?(Рег.Приход = 1, ЗеленыйЦвет, КрасныйЦвет));
			ПечОбл.РазмерШрифта(16);
			ПечОбл.Полужирный(1);
			ПечОбл.ВертикальноеПоложение(3);	// по центру
			ПечОбл.ГоризонтальноеПоложение(3);	// по центру
			ПечОбл.Текст = ?(Рег.Приход = 1, "+", "-");
			// оформляем № строки
			ПечОбл = Таб.Область(КолНач, 4, КолКон, 6);
			ПечОбл.Объединить();
			ПечОбл.ВертикальноеПоложение(3);	// по центру
			ПечОбл.ГоризонтальноеПоложение(3);	// по центру
			ПечОбл.Текст = ?(Рег.НомерСтроки() <> 0, Рег.НомерСтроки(), "-");

			Таб.Область(КолКон, 2, КолКон, 55).РамкаСнизу(4); // средняя сплошная
		КонецЦикла;
	КонецЦикла;

	Если НачВысотаТаблицы = Таб.ВысотаТаблицы() Тогда // ничего не выводили
		НеОбнаружено = "Движений регистров по документу не обнаружено!";
		Таб.ВывестиСекцию("НаличиеЗаписей");
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистров

// ===============================
Процедура ПроводкиДокумента()
	
	Если Метаданные.Документ(ВыбДокумент.Вид()).БухгалтерскийУчет = 0 Тогда
		Возврат;
	КонецЕсли;

	Таб.ВывестиСекцию("ШапкаПроводок");
	НачВысотаТаблицы = Таб.ВысотаТаблицы();

	Опер = СоздатьОбъект("Операция");
	Если Опер.НайтиОперацию(ВыбДокумент)=0 Тогда
		НеОбнаружено = "Бухгалтерские проводки по документу не сформированы!";
		Таб.ВывестиСекцию("НаличиеЗаписей");
		Возврат;
	КонецЕсли;

	СекцияПроводка = Таб.ПолучитьСекцию("Проводка");

	Опер.ВыбратьПроводки();
	Пока Опер.ПолучитьПроводку() = 1 Цикл

		НомерПроводки = "" + Опер.НомерПроводки() + ?(Опер.СложнаяПроводка() = 1, "/" + Опер.НомерКорреспонденции(), "");
		Состояние("Обработка проводок. Проводка: " + НомерПроводки);
		СекцияПроводка.НомерПроводки = НомерПроводки;

		Расшифровка = СоздатьОбъект("СписокЗначений");
		Расшифровка.Установить("Документ", 				Опер.Документ.ТекущийДокумент()	);
		Расшифровка.Установить("НомерПроводки", 		Опер.НомерПроводки()			);
		Расшифровка.Установить("НомерКорреспонденции", 	Опер.НомерКорреспонденции()		);
		СекцияПроводка.Область().Расшифровка(Расшифровка,1);

		СекцияПроводка.Фирма 		= Опер.НашаФирма;

		СекцияПроводка.СчетДт 		= Опер.Дебет.Счет;
		СекцияПроводка.СубконтоДт1 	= Опер.Дебет.Субконто(1);
		СекцияПроводка.СубконтоДт2 	= Опер.Дебет.Субконто(2);
		СекцияПроводка.СубконтоДт3 	= Опер.Дебет.Субконто(3);
		Для Инд=1 По Опер.Дебет.Счет.КоличествоСубконто() Цикл
			Значение = Опер.Дебет.Субконто(Инд);
			Если ПустоеЗначение(Значение)=0 Тогда
				Если (ТипЗначенияСтр(Значение)="Справочник") Или (ТипЗначенияСтр(Значение)="Документ") Тогда
					СекцияПроводка.Область(Инд, 7, Инд, 19).Расшифровка(Значение,1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		СекцияПроводка.СчетКт 		= Опер.Кредит.Счет;
		СекцияПроводка.СубконтоКт1 	= Опер.Кредит.Субконто(1);
		СекцияПроводка.СубконтоКт2 	= Опер.Кредит.Субконто(2);
		СекцияПроводка.СубконтоКт3 	= Опер.Кредит.Субконто(3);
		Для Инд=1 По Опер.Дебет.Счет.КоличествоСубконто() Цикл
			Значение = Опер.Кредит.Субконто(Инд);
			Если ПустоеЗначение(Значение)=0 Тогда
				Если (ТипЗначенияСтр(Значение)="Справочник") Или (ТипЗначенияСтр(Значение)="Документ") Тогда
					СекцияПроводка.Область(Инд, 24, Инд, 35).Расшифровка(Значение,1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		СекцияПроводка.Валюта 		= Опер.Валюта;
		СекцияПроводка.Курс 		= ?(Опер.Валюта.Выбран()=0,"",Формат(Опер.Валюта.Курс.Получить(ВыбДокумент.ДатаДок),"Ч10.5"));
		СекцияПроводка.ВалСумма 	= Формат(Опер.ВалСумма, 	"Ч 017.2.,");
		СекцияПроводка.Кво 			= Формат(Опер.Количество, 	"Ч 017.3.,");
		
		СекцияПроводка.Сумма 		= ФорматСум(Опер.Сумма, "0");
		СекцияПроводка.Комментарий 	= Опер.Комментарий;
		СекцияПроводка.НомерЖурнала = Опер.НомерЖурнала;
		Таб.ВывестиСекцию(СекцияПроводка);
	КонецЦикла;
	Таб.Область(Таб.ВысотаТаблицы(), 2, Таб.ВысотаТаблицы(), 55).РамкаСнизу(4); // средняя сплошная

	Если НачВысотаТаблицы = Таб.ВысотаТаблицы() Тогда // ничего не выводили
		НеОбнаружено = "Бухгалтерские проводки по документу не сформированы!";
		Таб.ВывестиСекцию("НаличиеЗаписей");
	КонецЕсли;
	
КонецПроцедуры // ПроводкиДокумента

// ===============================
Процедура РеквизитыСправочников()
	
	Пер = СоздатьОбъект("Периодический");
	Если Пер.ВыбратьПоДокументу(ВыбДокумент)=0 Тогда
		Возврат;
	КонецЕсли;
	
	Таб.ВывестиСекцию("ШапкаРеквизитов");
	ВидСправочника		="";
	ЭлементСправочника	="";
	КвоРеквизитовЭлемента	= 0;
	КвоРеквизитовВида		= 0;

	Пока Пер.ПолучитьЗначение()=1 Цикл
		ПерЭлемент = Пер.ТекущийОбъект();
		
		СекцияРеквизит = Таб.ПолучитьСекцию("Реквизит");

		Если ЭлементСправочника <> ПерЭлемент Тогда
			Если ПустоеЗначение(ЭлементСправочника)=0 Тогда
				Таб.Область(Таб.ВысотаТаблицы() - КвоРеквизитовЭлемента + 1, 13, Таб.ВысотаТаблицы(), 15).Объединить();
				Таб.Область(Таб.ВысотаТаблицы() - КвоРеквизитовЭлемента + 1, 16, Таб.ВысотаТаблицы(), 26).Объединить();
			КонецЕсли;
			КвоРеквизитовЭлемента = 0;

			СекцияРеквизит.Область(1, 13, 1, 55).РамкаСверху(3); // тонкая слошная
			ЭлементСправочника			= ПерЭлемент;
			СекцияРеквизит.КодЭлементаС	= СокрЛП(ПерЭлемент.Код);
			СекцияРеквизит.ЭлементС 	= СокрЛП(ПерЭлемент.Наименование);
		КонецЕсли; 
		
		Если ВидСправочника <> ПерЭлемент.Вид() Тогда
			Если ПустоеЗначение(ВидСправочника)=0 Тогда
				Таб.Область(Таб.ВысотаТаблицы() - КвоРеквизитовВида + 1, 2, Таб.ВысотаТаблицы(), 12).Объединить();
			КонецЕсли;
			КвоРеквизитовВида = 0;

			СекцияРеквизит.Область(1, 2, 1, 55).РамкаСверху(6); // двойная
			ВидСправочника				= ПерЭлемент.Вид();
			СекцияРеквизит.СправочникС 	= СокрЛП(ПерЭлемент.ПредставлениеВида());
		КонецЕсли; 

		КвоРеквизитовЭлемента	= КвоРеквизитовЭлемента	+ 1;
		КвоРеквизитовВида		= КвоРеквизитовВида		+ 1;

		СекцияРеквизит.НомерСтрокиС = Пер.НомерСтроки();
		СекцияРеквизит.РеквизитС 	= Метаданные.Справочник(ВидСправочника).Реквизит(СтрЗаменить(Пер.ТекущийРеквизит(),ВидСправочника+".",""));
		СекцияРеквизит.ДатаЗнач 	= СокрЛП(Формат(Пер.ДатаЗнач,"ДДДММГГГГ"));
		СекцияРеквизит.Значение 	= Пер.Значение;
		СекцияРеквизит.Область(1, 2, 1, 55).Расшифровка(ЭлементСправочника,1);
		Таб.ВывестиСекцию(СекцияРеквизит);
	КонецЦикла;
	Таб.Область(Таб.ВысотаТаблицы() - КвоРеквизитовВида  	+ 1,  2, Таб.ВысотаТаблицы(), 12).Объединить();
	Таб.Область(Таб.ВысотаТаблицы() - КвоРеквизитовЭлемента + 1, 13, Таб.ВысотаТаблицы(), 15).Объединить();
	Таб.Область(Таб.ВысотаТаблицы() - КвоРеквизитовЭлемента + 1, 16, Таб.ВысотаТаблицы(), 26).Объединить();
	Таб.Область(Таб.ВысотаТаблицы(), 2, Таб.ВысотаТаблицы(), 55).РамкаСнизу(4); // средняя сплошная
	
КонецПроцедуры // РеквизитыСправочников


// ===============================
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА
// ===============================

// ===============================
Процедура Сформировать()

	Если ВыбДокумент.Выбран() = 0 Тогда
		Предупреждение("Выберите документ!");
		Возврат;
	КонецЕсли;

	Пер = СоздатьОбъект("Периодический");
	Если (Метаданные.Документ(ВыбДокумент.Вид()).ОперативныйУчет = 0) 
   			И (Метаданные.Документ(ВыбДокумент.Вид()).БухгалтерскийУчет = 0) 
			И (Метаданные.Документ(ВыбДокумент.Вид()).Расчет = 0) 
			И (Пер.ВыбратьПоДокументу(ВыбДокумент)=0) Тогда
		Предупреждение("Выберите документ, формирующий бухгалтерские проводки, движения по регистрам,
			| записи журналов расчетов или устанавливающий реквизиты справочников!");
		Возврат;
	КонецЕсли;

	Если (ВыбДокумент.Проведен() = 0) 
			И (ВыбДокумент.Вид() <> "Операция") 
			И (Метаданные.Документ(ВыбДокумент.Вид()).Расчет = 0) Тогда
		Предупреждение("Выберите проведенный документ!");
		Возврат;
	КонецЕсли;

	Если Обновить = 2 Тогда
	    СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
	ТипОтчетаДвижения = 1;

	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.Установить("Отчет", 			"ДвиженияДокумента");
	Расшифровка.Установить("Док", 				ВыбДокумент);
	Расшифровка.Установить("ТипОтчетаДвижения", ТипОтчетаДвижения);

	Если (ТипЗначенияСтр(Таб) <> "Таблица") Или (Обновить = 0) Тогда
		Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;
	 
	Таб.ИсходнаяТаблица("ДвиженияДокумента");
	Таб.ВывестиСекцию("Кнопки");
	Таб.ВывестиСекцию("Заголовок");

	// получаем цвета
	СекцияЦвета = Таб.ПолучитьСекцию("Цвета");
	ЗеленыйЦвет = СекцияЦвета.ЗеленыйЦвет.ЦветФона();
	КрасныйЦвет = СекцияЦвета.КрасныйЦвет.ЦветФона();

	Если ТипОтчетаДвижения = 1 Тогда
		ПроводкиДокумента();
		ДвиженияРегистров();
		РеквизитыСправочников();
	ИначеЕсли ТипОтчетаДвижения = 2 Тогда
		ПроводкиДокумента();
	ИначеЕсли ТипОтчетаДвижения = 3 Тогда
		ДвиженияРегистров();
	ИначеЕсли ТипОтчетаДвижения = 5 Тогда
		РеквизитыСправочников();
	КонецЕсли;

	ПоказатьТаблицу(Таб, "ДвиженияДокумента", "Движения документа " + глПредставление(ВыбДокумент));
	ТипОтчетаДвижения=0;
	
КонецПроцедуры // Сформировать


// ===============================
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// ===============================

// ===============================
Процедура ПриОткрытии()
	
	Если (ТипЗначенияСтр(Форма.Параметр)="Документ") Или (Обновить = 1) Тогда
		ВыбДокумент=Форма.Параметр;
		Сформировать();
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Обновить = 0;
	Если глФлагРасшифровки = 1 Тогда
		Обновить 			= Число(глРасшифровка.Получить("Обновить"));
		ВыбДокумент 		= глРасшифровка.Получить("Док");
		ТипОтчетаДвижения 	= глРасшифровка.Получить("ТипОтчетаДвижения");

		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;

		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// ===============================
// ТЕЛО МОДУЛЯ
// ===============================

ТипОтчетаДвижения = 0;
