// ===============================
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
// ===============================

Перем СписокПозиций;	// список позиций, поступивших на вход
						// содержит: 
						//	1) спискок категорий цен
						//  2) список товаров, единиц, себестоимостей и цен товаров

Перем ЗначениеИзмененияРеквизитовЦены;			// значение, определяющее действие
                               
Перем НачальнаяДата;		// дата, на которую сбрасывается ГП

Перем ТаблицаЦен;			// таблица с ценами
Перем СписокКатегорийЦен;	// список обрабатываемых категорий цен
Перем СписокТоваров;		// список обрабатываемых товаров
Перем СписокЕдиниц;			// список единиц обрабатываемых товаров
Перем СписокСебестоимостей;	// список себестоимостей обрабатываемых товаров
    
Перем ЗначениеПометки,ЗначениеНеПометки;
      
Перем КатегорияЦенДляЗапроса;

// ===============================
// "СЛУЖЕБНЫЕ" ПРОЦЕДУРЫ И ФУНКЦИИ
// ===============================

// ===============================
// Название: ДобавитьЦенуВТаблицу
// Параметры: 
//  КатегорияЦены - категория добавляемой цены
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Описание:
//    добавляет новую колонку цен с категорией "КатегорияЦены" в таблицу  
//
Процедура ДобавитьЦенуВТаблицу(КатегорияЦены)                      
	Перем ТекПозВСпискеКопирЦен, ТекПозВСпискеОкруглЦен;           
	
	// вставляем на предпоследнюю позицию в список округляемых цен
	ТекПозВСпискеОкруглЦен = ОкругляемаяЦена.ТекущаяСтрока();
	Если ТекПозВСпискеОкруглЦен = ОкругляемаяЦена.РазмерСписка() Тогда
		ТекПозВСпискеОкруглЦен = ТекПозВСпискеОкруглЦен + 1;
	КонецЕсли;	
	ОкругляемаяЦена.ВставитьЗначение(ОкругляемаяЦена.РазмерСписка(),КатегорияЦены.ТекущийЭлемент());
	ОкругляемаяЦена.ТекущаяСтрока(ТекПозВСпискеОкруглЦен);                            
	                                   
	// вставляем на предпредпоследнюю позицию в список копируемых цен              
	ТекПозВСпискеКопирЦен = КопируемаяЦена.ТекущаяСтрока();
	Если ТекПозВСпискеКопирЦен >= (КопируемаяЦена.РазмерСписка()-1) Тогда
		ТекПозВСпискеКопирЦен = ТекПозВСпискеКопирЦен + 1;
	КонецЕсли;	
	КопируемаяЦена.ВставитьЗначение(КопируемаяЦена.РазмерСписка()-1,КатегорияЦены.ТекущийЭлемент());
	КопируемаяЦена.ТекущаяСтрока(ТекПозВСпискеКопирЦен);
	
	СписокКатегорийЦен.ДобавитьЗначение(КатегорияЦены.ТекущийЭлемент());
	
	НомерКолонкиЦен = ТаблицаЦен.КоличествоКолонок()+1;
	ТаблицаЦен.НоваяКолонка();  
	Таблица.НоваяКолонка(,,,,СокрЛП(КатегорияЦены.Наименование)+?(КатегорияЦены.ТорговаяНаценка=0,"","("+Строка(КатегорияЦены.ТорговаяНаценка)+"%)")); 
	   
	КатегорияЦенДляЗапроса = КатегорияЦены.ТекущийЭлемент();
	
	ТекстЗапроса = "
		|Цена 		= Справочник.Цены.ТекущийЭлемент;
		|Товар 		= Справочник.Цены.Владелец; 
		|Категория 	= Справочник.Цены.КатегорияЦены; 
		|Группировка Цена;
		|Условие (Товар В СписокТоваров); 
		|Условие (Категория = КатегорияЦенДляЗапроса);";
	
	Запрос = СоздатьОбъект("Запрос");			
	Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
		Предупреждение("Не выполнился запрос по справочнику цен.");
	КонецЕсли;	                      
	
	Запрос.ВНачалоВыборки();
	Пока Запрос.Группировка("Цена")>0 Цикл
		ВремЦена = Запрос.Цена;
		Если ВремЦена.Выбран()=0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НомерТовара = СписокТоваров.НайтиЗначение(ВремЦена.Владелец.ТекущийЭлемент());
		ТаблицаЦен.УстановитьЗначение(НомерТовара,НомерКолонкиЦен,ВремЦена.ТекущийЭлемент());
	КонецЦикла;	
	
КонецПроцедуры   // ДобавитьЦенуВТаблицу

// ===============================
// Название: ПерерисовкаСписка
// Параметры:           
//   Колонка - номер перерисовываемой колонки
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Флаг 
// Описание:
//    перерисовывает таблицу обрабатываемых позиций
//
Процедура ПерерисовкаСписка(НомерКолонки=0)
    Перем НомерСтроки;
	Перем Всего;                                                   
	                                                     
	Цена = СоздатьОбъект("Справочник.Цены");
	Цена.ИспользоватьДату(РабочаяДата());
	      
	КвоТоваров = СписокТоваров.РазмерСписка();
	
	Для НомерСтроки = 1 По КвоТоваров Цикл
		
		Если (НомерСтроки%10=0) Тогда
			Состояние("Перерисовка таблицы: "+Строка(НомерСтроки)+" из "+Строка(КвоТоваров));
		КонецЕсли;
		
		Товар 			= СписокТоваров.		ПолучитьЗначение(НомерСтроки); 
		Единица 		= СписокЕдиниц.			ПолучитьЗначение(НомерСтроки);
		Себестоимость 	= СписокСебестоимостей.	ПолучитьЗначение(НомерСтроки);

		Если (НомерКолонки=0) Или (НомерКолонки=2) Тогда
			Таблица.УстановитьЗначение(НомерСтроки,2,СокрЛП(Товар.Наименование)+
						?(ПустаяСтрока(Товар.Артикул)=1,"",", арт. "+СокрЛП(Товар.Артикул))+
						?(Товар.ТорговаяНаценка=0,"",", нац.= "+Строка(Товар.ТорговаяНаценка)+"%"));                                        
		КонецЕсли;				            

		Если (НомерКолонки=0) Или (НомерКолонки=3) Тогда
			Таблица.УстановитьЗначение(НомерСтроки,3,Строка(Окр(Себестоимость,2,1))+" "+СокрЛП(Гривня)+"/"+СокрЛП(Единица.Наименование));
		КонецЕсли;				            

		Если (НомерКолонки=0) Или (НомерКолонки=4) Тогда
			Таблица.УстановитьЗначение(НомерСтроки,4,Строка(Окр(Товар.УчетнаяЦена.Получить(РабочаяДата())*Единица.Коэффициент,2,1))+" "+СокрЛП(Гривня)+"/"+СокрЛП(Единица.Наименование));
		КонецЕсли;	
		    
		Если НомерКолонки >= 5 Тогда
			ПерваяКолонка 		= НомерКолонки; 
			ПоследняяКолонка 	= НомерКолонки;
		Иначе
			ПерваяКолонка 		= 5; 
			ПоследняяКолонка 	= Таблица.КоличествоКолонок();
		КонецЕсли;	
		
		Для Инд = ПерваяКолонка По ПоследняяКолонка Цикл
			ЦенаДляПоиска = ТаблицаЦен.ПолучитьЗначение(НомерСтроки,Инд-4);       
			Если ПустоеЗначение(ЦенаДляПоиска)=0 Тогда  
				
				Цена.НайтиЭлемент(ЦенаДляПоиска.ТекущийЭлемент());
				
				ОписаниеЦены = "";
				ОписаниеЦены = ОписаниеЦены + Строка(Цена.Цена)+" ";
				ОписаниеЦены = ОписаниеЦены + СокрЛП(Цена.Валюта.Кратко);
				ОписаниеЦены = ОписаниеЦены + "/"+СокрЛП(Цена.Единица.Наименование);
				Если (Цена.Наценка<>0) Или (Цена.ПометкаУдаления()=1) Тогда
					ОписаниеЦены = ОписаниеЦены + " (";
					ОписаниеЦены = ОписаниеЦены + ?(Цена.ПометкаУдаления()=0,"","уд.");

					Если (Цена.Наценка<>0) И (Цена.ПометкаУдаления()=1) Тогда
						ОписаниеЦены = ОписаниеЦены + ",";
					КонецЕсли;	                           

					ОписаниеЦены = ОписаниеЦены + ?(Цена.Наценка=0,"",Строка(Цена.Наценка)+"%");
					ОписаниеЦены = ОписаниеЦены + ")";
				КонецЕсли;                            
				Таблица.УстановитьЗначение(НомерСтроки,Инд,ОписаниеЦены); 
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры


// ===============================
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА
// ===============================

// ===============================
// Название: ДоступностьЭлементов
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Описание:
//    в зависимости от выбранного действия изменяет доступность элементов диалога
//
Процедура ДоступностьЭлементов(ВсеЭлементы=0)

	ЭлементДиалога = Форма.АктивныйЭлемент();

	Если ВсеЭлементы=1 Тогда
		Форма.ДействиеУдаления.Доступность(ВклДействиеУдаление); 

		Форма.ДействиеИзмененияРеквизитовЦены.	Доступность(ВклДействиеИзмененияРеквизитовЦены);	                                                         
		Форма.КнопкаВыбораЗначения.				Доступность(ВклДействиеИзмененияРеквизитовЦены);	                                                        

		Форма.ИзменяемаяЦена.		Доступность(ВклДействиеИзмененияЦен);	                                                         
		Форма.КопируемаяЦена.		Доступность(ВклДействиеИзмененияЦен);
		Форма.Знак.					Доступность(ВклДействиеИзмененияЦен);
		Форма.ПрибавляемаяЕдиница.	Доступность(ВклДействиеИзмененияЦен);

		Форма.ПорядокОкругления.Доступность(ВклДействиеОкругления); 
		Форма.ОкругляемаяЦена.	Доступность(ВклДействиеОкругления);
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ПрибавляемаяЕдиница") Тогда
		Если ПрибавляемаяЕдиница.ТекущаяСтрока()=3 Тогда	// наценка
			ВеличинаИзменения = 1;
			Форма.ВеличинаИзменения.Доступность(0);
		Иначе	
			Форма.ВеличинаИзменения.Доступность(ВклДействиеИзмененияЦен);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры   // ДоступностьЭлементов

// ===============================
// Название: ДоступностьФлагов
// Параметры: 
//  Режим - строка, определяющая при установке какого из флагов активизации действий 
//          была вызвана данная процедура
//   принимает следующие значения:
//		"Удаление"
//		"ИзменениеРеквизитов" 
//		"ИзменениеЦен" 
//		"Округление"
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//     флаги активизации действий
// Описание:
//    в зависимости от установленных флагов изменяет доступность элементов диалога
//
Процедура ДоступностьФлагов(ВсеЭлементы=0)
	
	ЭлементДиалога = Форма.АктивныйЭлемент();

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВклДействиеУдаление") Тогда
		ВклДействиеИзмененияРеквизитовЦены	= Мин(ВклДействиеИзмененияРеквизитовЦены,	ВклДействиеУдаление);
		ВклДействиеИзмененияЦен				= Мин(ВклДействиеИзмененияЦен,				ВклДействиеУдаление);
		ВклДействиеОкругления				= Мин(ВклДействиеОкругления,				ВклДействиеУдаление);
	КонецЕсли;
		
	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВклДействиеИзмененияРеквизитовЦены") Тогда
		ВклДействиеУдаление		= Мин(ВклДействиеУдаление,		ВклДействиеИзмененияРеквизитовЦены);
		ВклДействиеИзмененияЦен	= Мин(ВклДействиеИзмененияЦен,	ВклДействиеИзмененияРеквизитовЦены);
		ВклДействиеОкругления	= Мин(ВклДействиеОкругления,	ВклДействиеИзмененияРеквизитовЦены);
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВклДействиеИзмененияЦен") Тогда
		ВклДействиеУдаление					= Мин(ВклДействиеУдаление,					ВклДействиеИзмененияЦен);
		ВклДействиеИзмененияРеквизитовЦены	= Мин(ВклДействиеИзмененияРеквизитовЦены,	ВклДействиеИзмененияЦен);
		ВклДействиеОкругления				= Мин(ВклДействиеОкругления,				ВклДействиеИзмененияЦен);
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВклДействиеОкругления") Тогда
		ВклДействиеУдаление					= Мин(ВклДействиеУдаление,					ВклДействиеОкругления);
		ВклДействиеИзмененияРеквизитовЦены	= Мин(ВклДействиеИзмененияРеквизитовЦены,	ВклДействиеОкругления);
		ВклДействиеИзмененияЦен				= Мин(ВклДействиеИзмененияЦен,				ВклДействиеОкругления);
	КонецЕсли;

	ДоступностьЭлементов(1);
	
КонецПроцедуры   // ДоступностьФлагов

// ===============================
// Название: ПриДвойномЩелчкеНаТаблице
// Параметры:
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//  таблица значений "Таблица"
// Описание:
//   изменяет пометку строки таблицы
//
Процедура ПриДвойномЩелчкеНаТаблице()

	Таблица.Пометка = 3 - Таблица.Пометка;

КонецПроцедуры   // ПриДвойномЩелчкеНаТаблице

// ===============================
// Название: ГрупповаяПометка
// Параметры: 
//   Режим
//		1 - пометить все
//		2 - снять пометку
//		3 - инавертировать пометку
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Кнопки "Пометить все","Снять пометку","Инвертировать пометку".
// Описание:
//    в зависимости от значения параметра выполняет пометку всех позиций, 
//    снимает пометку со всех позиций или инвертирует ее
//
Процедура ГрупповаяПометка(Режим)
	Таблица.ВыбратьСтроки();
	Пока Таблица.ПолучитьСтроку()>0 Цикл
		Если Режим=1 Тогда
			Таблица.Пометка = ЗначениеПометки;
		ИначеЕсли Режим=2 Тогда
			Таблица.Пометка = ЗначениеНеПометки;
		ИначеЕсли Режим=3 Тогда
			Таблица.Пометка = 3 - Таблица.Пометка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// ===============================
// Название: ВыборЗначенияИзмененияРеквизитовЦены
// Параметры:
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//  Кнопка "Значение",.
// Описание:
//   открывает окно выбора значения
//
Процедура ВыборЗначенияИзмененияРеквизитовЦены()     
	Перем ВыбЗначение;

	Если ДействиеИзмененияРеквизитовЦены.ТекущаяСтрока()=1 Тогда // Установить валюту
		ВыбЗначение = СоздатьОбъект("Справочник.Валюты");
		Если ВыбЗначение.Выбрать("Выбор валюты цены",)=1 Тогда
			ЗначениеИзмененияРеквизитовЦеныВВидеСтроки 	= ВыбЗначение.Наименование;
			ЗначениеИзмененияРеквизитовЦены				= ВыбЗначение.ТекущийЭлемент();
		КонецЕсли;

	ИначеЕсли ДействиеИзмененияРеквизитовЦены.ТекущаяСтрока()=2 Тогда // Установить единицу измерения
		ВыбЗначение = СоздатьОбъект("Справочник.КлассификаторЕдИзм");
		Если ВыбЗначение.Выбрать("Выбор единицы измерения",)=1 Тогда
			ЗначениеИзмененияРеквизитовЦеныВВидеСтроки 	= ВыбЗначение.ПолнНаименование;
			ЗначениеИзмененияРеквизитовЦены				= ВыбЗначение.ТекущийЭлемент();
		КонецЕсли;

	ИначеЕсли ДействиеИзмененияРеквизитовЦены.ТекущаяСтрока()=3 Тогда // Установить торговую наценку
		ВыбЗначение = 0;
		Если ВвестиЧисло(ВыбЗначение,"Ввод величины наценки",8,2)=1 Тогда
			ЗначениеИзмененияРеквизитовЦеныВВидеСтроки  = Строка(ВыбЗначение);
			ЗначениеИзмененияРеквизитовЦены				= ВыбЗначение;
		КонецЕсли;

	КонецЕсли;
	ВыбЗначение = 0;
КонецПроцедуры   // ВыборЗначенияИзмененияРеквизитовЦены

// ===============================
// Название: ПриИзмененииДействияИзмененияРеквизитовЦены
// Параметры:
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//  Список  "ДействиеИзмененияРеквизитовЦены".
// Описание:
//   открывает окно выбора значения
//
Процедура ПриИзмененииДействияИзмененияРеквизитовЦены()     
	ЗначениеИзмененияРеквизитовЦеныВВидеСтроки="";
	ЗначениеИзмененияРеквизитовЦены=0;
	Если ДействиеИзмененияРеквизитовЦены.ТекущаяСтрока()=4 Тогда	// рассчитать торг. наценку
		Форма.КнопкаВыбораЗначения.Доступность(0);
	Иначе
		Форма.КнопкаВыбораЗначения.Доступность(1);
	КонецЕсли;	
КонецПроцедуры   // ПриИзмененииДействияИзмененияРеквизитовЦены

// ===============================
// Название: Выполнить
// Параметры:
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Кнопка "Выполнить",.
// Описание:
//   выполняет групповое действие
//
Процедура Выполнить()
	Перем НомерСтроки;
	Перем Док;
	Перем ТипДок;
	Перем Цена,ЦенаДляПоиска;
    Перем Значение;
	
	Перем КоординатыЯчейки,Область;

	Перем ЧислоОбработанныхПозиций;
	
	Перем НомерИзмененнойКолонки;
           
	НомерИзмененнойКолонки=0;
	
	Если (ВклДействиеИзмененияРеквизитовЦены=1) И (ПустоеЗначение(ЗначениеИзмененияРеквизитовЦены)=1) Тогда // пустое значение
		Если (ДействиеИзмененияРеквизитовЦены.ТекущаяСтрока()=1) Или
				(ДействиеИзмененияРеквизитовЦены.ТекущаяСтрока()=2) Тогда 
			Предупреждение("Не задано значение");
			Возврат;
		КонецЕсли;
	КонецЕсли;                          
	
	Если (ВклДействиеОкругления=1) И (ПустоеЗначение(ПорядокОкругления)=1) Тогда
		Предупреждение("Не задан порядок округления");
		Возврат;                                      
	КонецЕсли;	

	ЧислоОбработанныхПозиций = 0;
    
	Если ВклДействиеИзмененияЦен=1 Тогда     	// изменение цен
		Если ИзменяемаяЦена.ТекущаяСтрока()<ИзменяемаяЦена.РазмерСписка() Тогда  
			// не учетная цена        
			ИзмКатегория = ИзменяемаяЦена.ПолучитьЗначение(ИзменяемаяЦена.ТекущаяСтрока());
			Если СписокКатегорийЦен.НайтиЗначение(ИзмКатегория.ТекущийЭлемент())=0 Тогда
		    	ДобавитьЦенуВТаблицу(ИзмКатегория);
			КонецЕсли;
			НомерИзмКатегории=СписокКатегорийЦен.НайтиЗначение(ИзмКатегория.ТекущийЭлемент());
			НомерИзмененнойКолонки = 4+НомерИзмКатегории;
		Иначе
			НомерИзмКатегории= 0;
			НомерИзмененнойКолонки=4;
		КонецЕсли;
		
		Если КопируемаяЦена.ТекущаяСтрока()<(КопируемаяЦена.РазмерСписка()-1) Тогда  
			НомерКопирКатегории=КопируемаяЦена.ТекущаяСтрока();
		ИначеЕсли КопируемаяЦена.ТекущаяСтрока()=(КопируемаяЦена.РазмерСписка()-1) Тогда 
			// учетная цена
			НомерКопирКатегории=0;
		ИначеЕсли КопируемаяЦена.ТекущаяСтрока()=КопируемаяЦена.РазмерСписка() Тогда 	
			// себестоимость
			НомерКопирКатегории=-1;
		КонецЕсли;	
		
	ИначеЕсли ВклДействиеОкругления=1 Тогда     // округление цен
		
		Если ОкругляемаяЦена.ТекущаяСтрока()<ОкругляемаяЦена.РазмерСписка() Тогда  
			// не учетная цена                                                             
			ОкрКатегория = ОкругляемаяЦена.ПолучитьЗначение(ОкругляемаяЦена.ТекущаяСтрока());
			НомерОкрКатегории=СписокКатегорийЦен.НайтиЗначение(ОкрКатегория.ТекущийЭлемент());
			НомерИзмененнойКолонки = 4+НомерОкрКатегории;
		Иначе
			НомерОкрКатегории= 0;                       
			НомерИзмененнойКолонки = 4;
		КонецЕсли;	
		
	КонецЕсли;             
	
	Цена = СоздатьОбъект("Справочник.Цены");
	Цена.ИспользоватьДату(РабочаяДата(),1);			                           
	
	Единица = СоздатьОбъект("Справочник.Единицы");
	КвоТоваров = СписокТоваров.РазмерСписка();
	
	Для НомерТовара = 1 По КвоТоваров Цикл
		                                             
		Товар = СписокТоваров.ПолучитьЗначение(НомерТовара);
		
		Если Таблица.ПолучитьЗначение(НомерТовара,1)=ЗначениеНеПометки Тогда
			// не установлена пометка
			Продолжить;
		КонецЕсли;
		                     
		Если (ВклДействиеИзмененияРеквизитовЦены=1) Или (ВклДействиеУдаление=1) Тогда
			
			Для НомерКатегории = 1 По СписокКатегорийЦен.РазмерСписка() Цикл
				
				ЦенаДляПоиска = ТаблицаЦен.ПолучитьЗначение(НомерТовара,НомерКатегории);
				                         
				Если ПустоеЗначение(ЦенаДляПоиска)=1 Тогда
					Продолжить;
				КонецЕсли;       
				
				Если Цена.НайтиЭлемент(ЦенаДляПоиска)=0 Тогда
					Продолжить;
				КонецЕсли;       
		        
				глКомментарий("Выполняется обработка позиции "+СокрЛП(Цена.Владелец.Наименование)+
									?(ПустаяСтрока(Цена.Владелец.Артикул)=1,"",", арт. "+СокрЛП(Цена.Владелец.Артикул))+
									", цена "+СокрЛП(Цена.КатегорияЦены.Наименование),,,);
        		
				Если ВклДействиеУдаление=1 Тогда
					Если ДействиеУдаления.ТекущаяСтрока()=1 Тогда	// пометить на удаление
						Цена.Удалить(0);
					ИначеЕсли ДействиеУдаления.ТекущаяСтрока()=2 Тогда	// снять пометку удаления   
						Если Цена.ПометкаУдаления()=1 Тогда
							Цена.СнятьПометкуУдаления();
						КонецЕсли;
			        КонецЕсли;	
				КонецЕсли;	
					 
				Если ВклДействиеИзмененияРеквизитовЦены=1 Тогда
					Если ДействиеИзмененияРеквизитовЦены.ТекущаяСтрока()=1 Тогда		// установить валюту
						Цена.Цена = глПересчет(Цена.Цена, Цена.Валюта, ЗначениеИзмененияРеквизитовЦены.ТекущийЭлемент(), РабочаяДата());
						Цена.Валюта = ЗначениеИзмененияРеквизитовЦены.ТекущийЭлемент();
			
					ИначеЕсли ДействиеИзмененияРеквизитовЦены.ТекущаяСтрока()=2 Тогда	// установить единицу
						Единица.ИспользоватьВладельца(Товар.ТекущийЭлемент());
						Если Единица.НайтиПоРеквизиту("Единица",ЗначениеИзмененияРеквизитовЦены.ТекущийЭлемент(),0)>0 Тогда
							Если Цена.Единица.ТекущийЭлемент()<>Единица.ТекущийЭлемент() Тогда
								Если Цена.Единица.Коэффициент <> 0 Тогда
									Цена.Цена = Цена.Цена * Единица.Коэффициент / Цена.Единица.Коэффициент;
								Иначе
									Цена.Цена = 0;
								КонецЕсли;
								Цена.Единица = Единица.ТекущийЭлемент();
							КонецЕсли;	
						КонецЕсли;
							
					ИначеЕсли ДействиеИзмененияРеквизитовЦены.ТекущаяСтрока()=3 Тогда	// установить торговую наценку
						Цена.Наценка = ЗначениеИзмененияРеквизитовЦены;
						
			    	ИначеЕсли ДействиеИзмененияРеквизитовЦены.ТекущаяСтрока()=4 Тогда	// рассчитать торговую наценку
						Цена.Наценка = Цена.КатегорияЦены.ТорговаяНаценка+Товар.ТорговаяНаценка;
						
					КонецЕсли;	    
					
					Цена.Записать();
					
				КонецЕсли;	
					
				ЧислоОбработанныхПозиций = ЧислоОбработанныхПозиций + 1;
			
			КонецЦикла;	
		
		ИначеЕсли ВклДействиеОкругления=1 Тогда     // округление цен
			
			Если НомерОкрКатегории>0 Тогда // округляем не учетную цену
				
				ЦенаДляПоиска = ТаблицаЦен.ПолучитьЗначение(НомерТовара,НомерОкрКатегории);
					                         
				Если ПустоеЗначение(ЦенаДляПоиска)=1 Тогда
					Продолжить;
				КонецЕсли;       
				
				Если Цена.НайтиЭлемент(ЦенаДляПоиска)=0 Тогда
					Продолжить;
				КонецЕсли;       
			        
                глКомментарий("Выполняется обработка позиции "+СокрЛП(Цена.Владелец.Наименование)+
									?(ПустаяСтрока(Цена.Владелец.Артикул)=1,"",", арт. "+СокрЛП(Цена.Владелец.Артикул))+
									", цена "+СокрЛП(Цена.КатегорияЦены.Наименование),,,);
	        		                       
				Цена.Цена = Окр(Цена.Цена,5 - ПорядокОкругления.ТекущаяСтрока(),1);
				Цена.Записать();					
			
			Иначе	// округляем учетную цену
				        
				ВыбрТовар = СоздатьОбъект("Справочник.ТМЦ");
				Если ВыбрТовар.НайтиЭлемент(Товар.ТекущийЭлемент())=0 Тогда
					Продолжить;
				КонецЕсли;       
			    
                глКомментарий("Выполняется обработка позиции "+СокрЛП(Товар.Наименование)+
									?(ПустаяСтрока(Товар.Артикул)=1,"",", арт. "+СокрЛП(Товар.Артикул))+
									", учетная цена",,,);
	        	
				ВыбрТовар.УчетнаяЦена = Окр(ВыбрТовар.УчетнаяЦена.Получить(РабочаяДата()),5 - ПорядокОкругления.ТекущаяСтрока(),1);
				ВыбрТовар.Записать();                                         
				
			КонецЕсли;	
				
			ЧислоОбработанныхПозиций = ЧислоОбработанныхПозиций + 1;
			
		ИначеЕсли ВклДействиеИзмененияЦен=1 Тогда     	// изменение цен
			                                                                   
			Если НомерКопирКатегории>0 Тогда
				КопирЦена = ТаблицаЦен.ПолучитьЗначение(НомерТовара,НомерКопирКатегории);
				Если ПустоеЗначение(КопирЦена)=1 Тогда	// копируемая цена не задана
					ВеличинаКопирЦены 	= 0;
					ВалютаКопирЦены 	= Гривня;			    	
					ЕдиницаКопирЦены 	= Товар.ЕдиницаПоУмолчанию;	// любая
				Иначе
					Цена.НайтиЭлемент(КопирЦена.ТекущийЭлемент());
					ВеличинаКопирЦены 	= Цена.Цена;
					ВалютаКопирЦены 	= Цена.Валюта;			    	
					ЕдиницаКопирЦены 	= Цена.Единица;				
				КонецЕсли;                                                  
			Иначе	             
				ЕдиницаКопирЦены = СписокЕдиниц.ПолучитьЗначение(НомерТовара);
				Если НомерКопирКатегории=0 Тогда	// берем учетную цену
					ВеличинаКопирЦены = Товар.УчетнаяЦена.Получить(РабочаяДата())*ЕдиницаКопирЦены.Коэффициент;
				Иначе	// берем себестоимость
					ВеличинаКопирЦены = СписокСебестоимостей.ПолучитьЗначение(НомерТовара);
				КонецЕсли;	
				ВалютаКопирЦены	= Гривня;			    	
			КонецЕсли;	
				
			
			Если НомерИзмКатегории>0 Тогда // изменяем не учетную цену
				            
				ИзменЦена = ТаблицаЦен.ПолучитьЗначение(НомерТовара,НомерИзмКатегории);
					                         
				Если ПустоеЗначение(ИзменЦена)=1 Тогда
					// новые цену установим на дату начала работы
					Цена.ИспользоватьДату(НачальнаяДата,1);			                           
					Цена.ИспользоватьВладельца(Товар.ТекущийЭлемент());
					Цена.Новый();
					Цена.Валюта = ВалютаКопирЦены.ТекущийЭлемент();
					Цена.Единица = ЕдиницаКопирЦены.ТекущийЭлемент();
					Цена.КатегорияЦены = ИзменяемаяЦена.ПолучитьЗначение(ИзменяемаяЦена.ТекущаяСтрока()).ТекущийЭлемент();
					Цена.Наценка = Цена.КатегорияЦены.ТорговаяНаценка + Товар.ТорговаяНаценка;
				Иначе
					Цена.НайтиЭлемент(ИзменЦена.ТекущийЭлемент());
					ВеличинаКопирЦены = ВеличинаКопирЦены * Цена.Единица.Коэффициент/
										ЕдиницаКопирЦены.Коэффициент;					
				КонецЕсли;       
				
                глКомментарий("Выполняется обработка позиции "+СокрЛП(Товар.Наименование)+
									?(ПустаяСтрока(Товар.Артикул)=1,"",", арт. "+СокрЛП(Товар.Артикул))+
									", цена "+СокрЛП(Цена.КатегорияЦены.Наименование),,,);
	        	
				ВеличинаНаценки = Цена.Наценка;					
									
			Иначе	// изменяем учетную цену
				        
				ВыбрТовар = СоздатьОбъект("Справочник.ТМЦ");
				Если ВыбрТовар.НайтиЭлемент(Товар.ТекущийЭлемент())=0 Тогда
					Продолжить;
				КонецЕсли;       

				ВеличинаКопирЦены = ВеличинаКопирЦены * СписокЕдиниц.ПолучитьЗначение(НомерТовара).Коэффициент 
									/ ЕдиницаКопирЦены.Коэффициент;					
				
				глКомментарий("Выполняется обработка позиции "+СокрЛП(Товар.Наименование)+
									?(ПустаяСтрока(Товар.Артикул)=1,"",", арт. "+СокрЛП(Товар.Артикул))+
									", учетная цена",,,);
	        	
				ВеличинаНаценки = 0;
				
			КонецЕсли;	
			
			ИзменениеЦены=0;
			
			Если ПрибавляемаяЕдиница.ТекущаяСтрока()=1 Тогда		// ед. валюты
				ИзменениеЦены = ВеличинаИзменения;
			ИначеЕсли ПрибавляемаяЕдиница.ТекущаяСтрока()=2 Тогда	// %
				ИзменениеЦены = ВеличинаКопирЦены*ВеличинаИзменения/100;
			ИначеЕсли ПрибавляемаяЕдиница.ТекущаяСтрока()=3 Тогда   // наценок
				ИзменениеЦены = ВеличинаКопирЦены*ВеличинаНаценки*ВеличинаИзменения/100;
			КонецЕсли;	
			                                                 
			Если Знак.ТекущаяСтрока()=1 Тогда		// +
				ВеличинаКопирЦены = ВеличинаКопирЦены + ИзменениеЦены;
			ИначеЕсли Знак.ТекущаяСтрока()=2 Тогда  // -              
				ВеличинаКопирЦены = ВеличинаКопирЦены - ИзменениеЦены;
			КонецЕсли;	
			
			ВеличинаКопирЦены = Макс(ВеличинаКопирЦены,0);
			
			Если НомерИзмКатегории>0 Тогда // изменяем не учетную цену
				Цена.Цена = ВеличинаКопирЦены;
				Цена.Записать();					                    
				
				ТаблицаЦен.УстановитьЗначение(НомерТовара,НомерИзмКатегории,Цена.ТекущийЭлемент());
				
			Иначе	// изменяем учетную цену
				ВыбрТовар.УчетнаяЦена.Установить(РабочаяДата(), ВеличинаКопирЦены / СписокЕдиниц.ПолучитьЗначение(НомерТовара).Коэффициент);
				ВыбрТовар.Записать();                                         
			КонецЕсли;	
			
			// восстановим дату изменения цен
			Цена.ИспользоватьДату(РабочаяДата(),1);
			ЧислоОбработанныхПозиций = ЧислоОбработанныхПозиций + 1;
			
		КонецЕсли;	                                                
		
	КонецЦикла;	
	         
	ПерерисовкаСписка(НомерИзмененнойКолонки);
	
	Предупреждение("Групповая обработка завершена. Число обработанных цен: "+Строка(ЧислоОбработанныхПозиций));
	
КонецПроцедуры


// ===============================
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// ===============================

// ===============================
Процедура ПриОткрытии()	// Предопределенная процедура
    Перем Обработано;    
	
	// будем отслеживать только реальные изменения этих реквизитов
	Форма.ДействиеИзмененияРеквизитовЦены.ВыполнятьФормулуТолькоПриИзменении(1); 
	
	Если ПустоеЗначение(Форма.Параметр)=1 Тогда
		Предупреждение("Не указан список обрабатываемых позиций. Данная обработка запускается автоматически из других процедур конфигурации.");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;	
	             
	СписокПозиций = Форма.Параметр;
	             
	// заполняем нижеприведенные списки
	// ТаблицаЦен;				// таблица с ценами
	// СписокКатегорийЦен;		// список обрабатываемых категорий цен
	// СписокТоваров;			// список обрабатываемых товаров
	// СписокЕдиниц;			// список единиц обрабатываемых товаров
	// СписокСебестоимостей;	// список себестоимостей обрабатываемых товаров
    
	// получаем все категории цен
	НомерПозиции = 0;   
	СписокКатегорийЦен = СоздатьОбъект("СписокЗначений");
	Пока СписокПозиций.РазмерСписка()>НомерПозиции Цикл
		НомерПозиции = НомерПозиции + 1;
		КатегорияЦены = СписокПозиций.ПолучитьЗначение(НомерПозиции);
		Если ТипЗначенияСтр(КатегорияЦены)<>"Справочник" Тогда
			НомерПозиции = НомерПозиции - 1;
			Прервать;
		ИначеЕсли Врег(КатегорияЦены.Вид())<>"КАТЕГОРИИЦЕН" Тогда
			НомерПозиции = НомерПозиции - 1;
			Прервать;
		Иначе
			СписокКатегорийЦен.ДобавитьЗначение(КатегорияЦены.ТекущийЭлемент());
		КонецЕсли;	                                             
	КонецЦикла;	                 

	Если НомерПозиции>0 Тогда
		СписокПозиций.УдалитьЗначение(1,НомерПозиции);
	КонецЕсли;	                                      
	
	// получаем все категории товары, их единицы, себестоимость и цены
	СписокТоваров 			= СоздатьОбъект("СписокЗначений");
	СписокЕдиниц 			= СоздатьОбъект("СписокЗначений");
	СписокСебестоимостей 	= СоздатьОбъект("СписокЗначений"); 
	ТаблицаЦен 				= СоздатьОбъект("ТаблицаЗначений");
	                                                                
	// число колонок в таблице равно числу цен 
	ТаблицаЦен.КоличествоКолонок(СписокКатегорийЦен.РазмерСписка());
	                 
	Обработано = 0;
	
	ЧислоТоваров = 0;
	НомерПозиции = 0;   
	Пока СписокПозиций.РазмерСписка()>НомерПозиции Цикл
		НомерПозиции = НомерПозиции + 1;

		Товар = СписокПозиций.ПолучитьЗначение(НомерПозиции);
		НомерПозиции = НомерПозиции + 1;
		Единица = СписокПозиций.ПолучитьЗначение(НомерПозиции);
		НомерПозиции = НомерПозиции + 1;
		Себестоимость = СписокПозиций.ПолучитьЗначение(НомерПозиции);
		
		ЕстьЦена = 0;
		        
		ЧислоТоваров = ЧислоТоваров + 1;
		ТаблицаЦен.НоваяСтрока(ЧислоТоваров);
		
		Пока СписокПозиций.РазмерСписка()>НомерПозиции Цикл
			НомерПозиции = НомерПозиции + 1;
			Цена = СписокПозиций.ПолучитьЗначение(НомерПозиции);
		    
			Если Врег(ТипЗначенияСтр(Цена))<>"СПРАВОЧНИК" Тогда
				НомерПозиции = НомерПозиции - 1;
				Прервать;
			ИначеЕсли Врег(Цена.Вид())<>"ЦЕНЫ" Тогда
				НомерПозиции = НомерПозиции - 1;
				Прервать;
			Иначе                                                                   
				   
				Обработано = Обработано + 1;
				Если (Обработано%10=0) Тогда
					Состояние("Подготовка цен: "+Строка(Обработано));
				КонецЕсли;
		        
				НомерКатегории = 0;
				НомерКатегории = СписокКатегорийЦен.НайтиЗначение(Цена.КатегорияЦены.ТекущийЭлемент());
				Если НомерКатегории>0 Тогда
					ТаблицаЦен.УстановитьЗначение(ЧислоТоваров,НомерКатегории,Цена.ТекущийЭлемент());
				КонецЕсли;	
				
				ЕстьЦена = 1;
			КонецЕсли;	                                             
		КонецЦикла;	         
		                                                         
		// для данного товара была отобрана по крайней мере одна цена
		СписокТоваров.ДобавитьЗначение(Товар.ТекущийЭлемент());
		СписокЕдиниц.ДобавитьЗначение(Единица.ТекущийЭлемент());
		СписокСебестоимостей.ДобавитьЗначение(Себестоимость);
		
	КонецЦикла;	                 	
	
	Если НомерПозиции>0 Тогда
		СписокПозиций.УдалитьЗначение(1,НомерПозиции);
	КонецЕсли;	                                      
	
	Таблица.КоличествоКолонок(3+СписокКатегорийЦен.РазмерСписка());
	Таблица.КоличествоСтрок(ЧислоТоваров);
	Таблица.ВставитьКолонку("Пометка",1,"Число",4,0,"Пометка"); 
	Таблица.ВыводитьПиктограммы("Пометка",1);
	Таблица.УстановитьПараметрыКолонки(2,"Строка",50,,"Позиция"); 
	Таблица.УстановитьПараметрыКолонки(3,"Строка",20,,"Себестоимость"); 
	Таблица.УстановитьПараметрыКолонки(4,"Строка",20,,"Учетная цена");
	
	Для Индекс = 5 По Таблица.КоличествоКолонок() Цикл
		Таблица.УстановитьПараметрыКолонки(Индекс,"Строка",30,,"Цена");
	КонецЦикла;
	
	Для Индекс = 1 По Таблица.КоличествоСтрок() Цикл
		Таблица.УстановитьЗначение(Индекс,1,ЗначениеПометки);
	КонецЦикла;
	
	// перерисовка названий колонок
	Для НомерКолонки = 5 По Таблица.КоличествоКолонок() Цикл
		КатегорияЦены = СписокКатегорийЦен.ПолучитьЗначение(НомерКолонки-4);
		Таблица.УстановитьПараметрыКолонки(НомерКолонки,,,,СокрЛП(КатегорияЦены.Наименование)+?(КатегорияЦены.ТорговаяНаценка=0,"","("+Строка(КатегорияЦены.ТорговаяНаценка)+"%)")); 
	КонецЦикла;
	                           
	ОкругляемаяЦена.УдалитьВсе();
	СписокКатегорийЦен.Выгрузить(ОкругляемаяЦена);
	ОкругляемаяЦена.ДобавитьЗначение("учетная"); 

	КопируемаяЦена.УдалитьВсе();
	СписокКатегорийЦен.Выгрузить(КопируемаяЦена);
	КопируемаяЦена.ДобавитьЗначение("учетная"); 
	КопируемаяЦена.ДобавитьЗначение("себестоимость");
	
	Таблица.Фиксировать(0,1);
	
	ПерерисовкаСписка();
	
	ДоступностьЭлементов(1);
	
КонецПроцедуры	// ПриОткрытии


// ===============================
// ТЕЛО МОДУЛЯ
// ===============================

ЗначениеИзмененияРеквизитовЦены=0;

// инициализация списков
ПорядокОкругления.УдалитьВсе();
ПорядокОкругления.ДобавитьЗначение(0.0001);
ПорядокОкругления.ДобавитьЗначение(0.001);
ПорядокОкругления.ДобавитьЗначение(0.01);
ПорядокОкругления.ДобавитьЗначение(0.1);
ПорядокОкругления.ДобавитьЗначение(1);
ПорядокОкругления.ДобавитьЗначение(10);
ПорядокОкругления.ДобавитьЗначение(100);
ПорядокОкругления.ДобавитьЗначение(1000);
ПорядокОкругления.ДобавитьЗначение(10000);
ПорядокОкругления.ТекущаяСтрока(1);

ДействиеУдаления.ДобавитьЗначение("Пометить на удаление");					//	
ДействиеУдаления.ДобавитьЗначение("Снять пометку удаления");				//		
ДействиеУдаления.ТекущаяСтрока(1);

ДействиеИзмененияРеквизитовЦены.ДобавитьЗначение("Установить валюту");   	//	
ДействиеИзмененияРеквизитовЦены.ДобавитьЗначение("Установить единицу");   	//	 
ДействиеИзмененияРеквизитовЦены.ДобавитьЗначение("Установить наценку");		//	 
ДействиеИзмененияРеквизитовЦены.ДобавитьЗначение("Рассчитать наценку");		//	
ДействиеИзмененияРеквизитовЦены.ТекущаяСтрока(1);                          

КатегорииЦен = СоздатьОбъект("Справочник.КатегорииЦен");
КатегорииЦен.ВыбратьЭлементы();
Пока КатегорииЦен.ПолучитьЭлемент()>0 Цикл
	Если КатегорииЦен.ПометкаУдаления()=0 Тогда
		ИзменяемаяЦена.ДобавитьЗначение(КатегорииЦен.ТекущийЭлемент()); 
	КонецЕсли;	
КонецЦикла;       
ИзменяемаяЦена.ДобавитьЗначение("учетная"); 

Знак.ДобавитьЗначение("+");      		//	 
Знак.ДобавитьЗначение("-");      		//	
Знак.ТекущаяСтрока(1);

ПрибавляемаяЕдиница.ДобавитьЗначение("Ед. валюты");      	//	  
ПрибавляемаяЕдиница.ДобавитьЗначение("%");      			//	 
ПрибавляемаяЕдиница.ДобавитьЗначение("наценка");      		//	 
ПрибавляемаяЕдиница.ТекущаяСтрока(1);

НачальнаяДата = Константа.ДатаНачалаРаботы;

ЗначениеПометки 	= 2; 
ЗначениеНеПометки 	= 1;
