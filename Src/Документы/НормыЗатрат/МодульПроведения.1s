Перем СписокСтатейКалькуляции;        
Перем Материал, Полуфабрикат, ВозвратныйОтход, СтатьяКалькуляции;

//===============================
Функция ПроверкаШапки()
	глВсеВыбрано = 1;
    глВыбранЛи(Фирма,"Фирма");
	глВыбранЛи(Продукция,"Продукция");  
	глВсеВыбрано = ?(глВсеВыбрано = 0, 0, глПроверкаДублейСтрок(Контекст));
	Если глВсеВыбрано = 1 Тогда
		Если (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Продукция) и (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Полуфабрикат)
			и (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Услуга) Тогда
			глКомментарий("Продукция должна быть вида ""Продукция"", ""Полуфабрикат"" или ""Услуга""!",0,,"!");
			глВсеВыбрано = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если КоличествоСтрок() = 0 Тогда
		глКомментарий("Не заполнена табличная часть документа!",0,,"!");
		глВсеВыбрано = 0;
	КонецЕсли;
	
	//Для проверки статей калькуляций заданых в процентном соотношении от базовой затраты
	СписокСтатейКалькуляции = СоздатьОбъект("СписокЗначений");
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ПустоеЗНачение(Элемент) = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если Элемент.Вид() <> "СтатьиКалькуляции"  Тогда
			глДобавитьЗначениеБезПовторения(СписокСтатейКалькуляции,Элемент.ВидЗатрат.СтатьяКалькуляции);
		Иначе
			глДобавитьЗначениеБезПовторения(СписокСтатейКалькуляции,Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат глВсеВыбрано;
КонецФункции

//===============================
Функция ПроверкаСтроки()
	глВсеВыбрано = 1;
    глВыбранЛи(ВидЭлемента,"Вид элемента",НомерСтроки);
	глВыбранЛи(Элемент,"Элемент",НомерСтроки);
	Если ПустоеЗначение(Процент) = 0 Тогда
		глВыбранЛи(БазоваяЗатрата,"Базовая затрата",НомерСтроки);
	КонецЕсли;
	//остальные реквизиты проверить
	Если (ВидЭлемента = Материал) или (ВидЭлемента = ВозвратныйОтход) Тогда
		Если (Элемент.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга) или (Элемент.ВидТМЦ = Перечисление.ВидыТМЦ.Продукция)
		или (Элемент.ВидТМЦ = Перечисление.ВидыТМЦ.Полуфабрикат) или (Элемент.ВидТМЦ = Перечисление.ВидыТМЦ.Набор)	Тогда
			глВсеВыбрано = 0;
			глКомментарий("Нельзя выбирать ТМЦ с видом " + СокрЛП(Элемент.ВидТМЦ) +"! Строка "+НомерСтроки+".", 0,,"!");
		КонецЕсли;
		//Если ПустоеЗначение(Кво) = 1 Тогда
		//	глВсеВыбрано = 0;
		//	глКомментарий("Количество обязательно должно быть указано! Строка "+НомерСтроки+".", 1,,"!");
		//КонецЕсли;
	ИначеЕсли ВидЭлемента = Полуфабрикат Тогда
		Если (Элемент.ВидТМЦ <> Перечисление.ВидыТМЦ.Полуфабрикат) и (Элемент.ВидТМЦ <> Перечисление.ВидыТМЦ.Продукция) Тогда
			глВсеВыбрано = 0;
			глКомментарий("Можно выбирать ТМЦ с видом ""Полуфабрикат"" или ""Продукция""! Строка "+НомерСтроки+".", 0,,"!");
		ИначеЕсли Элемент = Продукция Тогда
			глВсеВыбрано = 0;
			глКомментарий("Производимый полуфабрикат не может включать сам себя в качестве затраты! Строка "+НомерСтроки+".", 0,,"!");
		ИначеЕсли Элемент.УровеньПередела.Получить(ДатаДок)<= Продукция.УровеньПередела.Получить(ДатаДок) Тогда
			глВсеВыбрано = 0;
			глКомментарий("Уровень передела элемента затрат """+СокрЛП(""+Элемент)+""" должен быть больше уровня передела ""Продукции""! Строка "+НомерСтроки+".", 0,,"!");
		КонецЕсли;          
		//Если ПустоеЗначение(Кво) = 1 Тогда
		//	//глВсеВыбрано = 0;
		//	//глКомментарий("Количество обязательно должно быть указано! Строка "+НомерСтроки+".", 1,,"!");
		//КонецЕсли;
	ИначеЕсли ВидЭлемента = СтатьяКалькуляции Тогда
		Если (ПустоеЗначение(БазоваяЗатрата) = 0) и (СписокСтатейКалькуляции.НайтиЗначение(БазоваяЗатрата) = 0) Тогда
			глВсеВыбрано = 0;
		    глКомментарий("Указана базовая затрата, которая не присутствует в документе! Строка "+НомерСтроки+".", 0,,"!");
		КонецЕсли;
		Если ПустоеЗначение(Сумма) = 1 Тогда
			глВсеВыбрано = 0;
			глКомментарий("Сумма обязательно должна быть указана! Строка "+НомерСтроки+".", 1,,"!");
		КонецЕсли;
	КонецЕсли;
	
	
	Если (ПустоеЗначение(Константа.УМК_ДатаНачалаПартииОстатки) <> 1) //--- УМК Сандомирский В.Ю. (03.10.14) проверка чтобы ТМЦ не содержал ТМЦ для прихода
				И (Константа.УМК_ДатаНачалаПартииОстатки <= ДатаДок)  Тогда 
	
		Если ПустоеЗначение(Элемент.ТМЦДляПрихода.Получить(ДатаДок)) <> 1 Тогда
			
			Сообщить("В строке № " + НомерСтроки  + " Элемент " + Элемент + " содержит ТМЦ для приходования " + Элемент.ТМЦДляПрихода.Получить(ДатаДок) + " !!! это не допустимо !!!","!!!");
			
			глВсеВыбрано = 0;
		КонецЕсли;			
					
	КонецЕсли;//... УМК Сандомирский В.Ю. (03.10.14) проверка чтобы ТМЦ не содержал ТМЦ для прихода
	
	Возврат глВсеВыбрано;
КонецФункции // ПроверкаСтроки()

// ===============================
// Возвращает:
// 0 - очистить нормы не удалось
// 1 - очищение норм прошло успешно
// 2 - в заказе уже указана правильная норма и очищать ее не нужно
Функция ОчисткаНормВЗаказах()
	фВозврата = 1;
	//Очищаем в заказах реквизит НормыЗатрат, если он ссылается на текущий документ
	СписокДок = СоздатьОбъект("СписокЗначений");
	Док = СоздатьОбъект("Документ");
	ДокПодчиненныйЗаказ = СоздатьОбъект("Документ.Заказ");
	Док.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Вид() = "Заказ" Тогда
			СписокДок.ДобавитьЗначение(Док.ТекущийДокумент());
		КонецЕсли;
	КонецЦикла;        
	Для Позиция = 1 По СписокДок.РазмерСписка() Цикл
		ДокПодчиненныйЗаказ.НайтиДокумент(СписокДок.ПолучитьЗначение(Позиция));
		ДокПодчиненныйЗаказ.ВыбратьСтроки();
		Пока ДокПодчиненныйЗаказ.ПолучитьСтроку() = 1 Цикл
			Если ДокПодчиненныйЗаказ.НормыЗатрат = ТекущийДокумент() Тогда
				Если (ДокПодчиненныйЗаказ.ТекущийДокумент() = Заказ) Тогда //и (ДокПодчиненныйЗаказ.Продукция = Продукция) Тогда
					// Очищать нормы не нужно, так как сразу же придется записывать их обратно
					фВозврата = 2;
					Продолжить;
				КонецЕсли;
			    ДокПодчиненныйЗаказ.НормыЗатрат = 0;
				глКомментарий("Очищен реквизит ""Нормы затрат"" в документе "+СокрЛП(ДокПодчиненныйЗаказ)+". Строка " +ДокПодчиненныйЗаказ.НомерСтроки+".",3,,"I");
			КонецЕсли;
		КонецЦикла;
		Попытка
			ДокПодчиненныйЗаказ.Записать();
		Исключение
			глКомментарий("Возможно, документ заказ "+СокрЛП(ДокПодчиненныйЗаказ)+" редактируется. Закройте форму заказа и повторите проведение!",0,,"!");
			глНеПроводить(Контекст);
			фВозврата = 0;
		КонецПопытки;
	КонецЦикла;
	Док = 0;
	ДокПодчиненныйЗаказ = 0;
	Возврат фВозврата;
КонецФункции //ОчиститьЗаказы

//===============================
Процедура ОбработкаПроведения(спПараметры) 	
	//--- УМК Сандомирский В.Ю. (23.06.15) проверка на такую же 
	Если фДляЗаказа = 1 Тогда 
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|Без итогов;
		|ТекПродукция = Документ.НормыЗатрат.Продукция;
		|фДляЗаказа = Документ.НормыЗатрат.фДляЗаказа;
		|Условие(ТекПродукция = Продукция);
		|Условие(фДляЗаказа = 1);
		|Группировка Документ;
		|"//}}ЗАПРОС
		;
		
		Запрос = СоздатьОбъект("Запрос");
		
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		    Возврат;
		КонецЕсли;
		
		НашлиПовтор = 0;
		ТЗ_Проверка = СоздатьОбъект("ТаблицаЗначений");
		Запрос.Выгрузить(ТЗ_Проверка);
		ТЗ_Проверка.ВыбратьСтроки();
		Пока ТЗ_Проверка.ПолучитьСтроку() = 1 Цикл
			Если ТЗ_Проверка.Документ <> ТекущийДокумент() Тогда
				Предупреждение("Найден еще один документ с флажком ""Для заказа"" " + ТЗ_Проверка.Документ, 20);
				НашлиПовтор = 1;				
				Прервать;				
			КонецЕсли;
		КонецЦикла;
			
		Если НашлиПовтор = 1 Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;							
	КонецЕсли;	
	
	фЗаписатьНормыВКонтекстЗаказа = 0;
	Если ПустоеЗначение(спПараметры) = 0 Тогда
		Если ТипЗначенияСтр(спПараметры) = "СписокЗначений" Тогда
			Конт = спПараметры.Получить("Контекст");	
			//Проверяем, что указанный Заказ совпадает с переданным в контексте
			Если Конт.ТекущийДокумент() = Заказ Тогда
				фЗаписатьНормыВКонтекстЗаказа = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   
	
	Если ПроверкаШапки() = 0 Тогда
	    глНеПроводить(Контекст);
	    Возврат;
	КонецЕсли;             
	
	//--- УМК Сандомирский В.Ю. (03.10.14) проверим все строки и потом уже запретим проведение
	//--- Проверка строк 
	ОшибкиВстроках = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ПроверкаСтроки()=0 Тогда
		    ОшибкиВстроках = 1
		КонецЕсли;
	КонецЦикла;
	
	Если ОшибкиВстроках = 1 Тогда
	    глНеПроводить(Контекст);
		Возврат;
	КонецЕсли;
	//... УМК Сандомирский В.Ю. (03.10.14) проверим все строки и потом уже запретим проведение

	Если фДляЗаказа = 1 Тогда
		УстановитьРеквизитСправочника(Продукция, "НормыЗатрат", ТекущийДокумент(), ДатаДок);
	КонецЕсли;
	ПП = Продукция.ПроцПотерь.Получить(ДатаДок);
	Если ПП <> 0 Тогда
		ПроцПотерь = ПП;	    
	КонецЕсли;
	Если фДляЗаказа = 1 Тогда
		// проверим нормы в подчинённой продукции
		Если Продукция.КоэфСтд = 0 Тогда
			Сообщить("У продукции не задан коэф. стандартный");
		Иначе
			З = КвоПродукции * (Продукция.КоэфСтд / 100);
			З = Продукция.КоэфСтд - ?(З < Продукция.ФЕК, 0, 50);			
			УстановитьРеквизитСправочника(Продукция, "Замес", З, ДатаДок);			
		КонецЕсли;
		// проверим не является ли эта продукция родителей для других
		Спр = СоздатьОбъект("Справочник.ТМЦ");
		Спр.ВыбратьЭлементыПоРеквизиту("ТМЦСТакимЖеФаршем", Продукция, 0, 0);
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
			Нормы = глПолучитьНормыДляЗаказа(Спр.ТекущийЭлемент());
			
			ЕстьОтличия = глСравнитьНормы(Спр.ТекущийЭлемент(), Продукция, Нормы, ТекущийДокумент());
			Если ЕстьОтличия <> "" Тогда
				Сообщить("Есть отличия в нормах у подчинённой продукции: " + Строка(Спр.ТекущийЭлемент()) + ": " + ЕстьОтличия);
			КонецЕсли;
		КонецЦикла;
		Спр.ВыбратьЭлементыПоРеквизиту("ОдинаковаяПрРазныеМарк", Продукция, 0, 0);
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
			Нормы = глПолучитьНормыДляЗаказа(Спр.ТекущийЭлемент());
			
			ЕстьОтличия = глСравнитьНормы(Спр.ТекущийЭлемент(), Продукция, Нормы, ТекущийДокумент(), 1, ДатаДок);
			Если ЕстьОтличия <> "" Тогда
				Сообщить("Есть отличия в нормах у подчинённой продукции (с такой же маркировкой): " + Строка(Спр.ТекущийЭлемент()) + ": " + ЕстьОтличия);
			КонецЕсли;
		КонецЦикла;
		
		
		// проверим нормы у владельца
		Если ПустоеЗначение(Продукция.ТМЦСТакимЖеФаршем) = 0 Тогда
			Нормы = глПолучитьНормыДляЗаказа(Продукция.ТМЦСТакимЖеФаршем);
			
			ЕстьОтличия = глСравнитьНормы(Продукция, Продукция.ТМЦСТакимЖеФаршем, ТекущийДокумент(), Нормы);
			Если ЕстьОтличия <> "" Тогда
				Сообщить("Есть отличия в нормах продукции с таким же фаршем: " + Строка(Продукция.ТМЦСТакимЖеФаршем) + ": " + ЕстьОтличия);
			КонецЕсли;			
		КонецЕсли;
		
		// проверим нормы у владельца с такой же маркировкой
		Если ПустоеЗначение(Продукция.ОдинаковаяПрРазныеМарк) = 0 Тогда
			Нормы = глПолучитьНормыДляЗаказа(Продукция.ОдинаковаяПрРазныеМарк);
			
			ЕстьОтличия = глСравнитьНормы(Продукция, Продукция.ОдинаковаяПрРазныеМарк, ТекущийДокумент(), Нормы, 1, ДатаДок);
			Если ЕстьОтличия <> "" Тогда
				Сообщить("Есть отличия в нормах продукции с таким же фаршем: " + Строка(Продукция.ОдинаковаяПрРазныеМарк) + ": " + ЕстьОтличия);
			КонецЕсли;			
		КонецЕсли;		
	КонецЕсли;
		
	//Если ОчисткаНормВЗаказах()=1 Тогда
	//	Если Заказ.Выбран() = 0 Тогда
			
	//		
	//		// установить учетную цену базовой единицы продукции
	//		УчетнаяЦена = Итог("Сумма") / (КвоПродукции * КоэффициентПродукции);
	//		УстановитьРеквизитСправочника(Продукция, "УчетнаяЦена", УчетнаяЦена, ДатаДок);
	//	Иначе
	//		Если фЗаписатьНормыВКонтекстЗаказа = 1 Тогда
	//			Если Конт.Продукция = Продукция Тогда
	//				Конт.НормыЗатрат = ТекущийДокумент();
	//				Конт.Форма.Обновить();
	//			Иначе
	//				глКомментарий("Нельзя указывать продукцию отличную от продукции в заказе, из которого мы создали нормы затрат!",0,,"!");
	//				глНеПроводить(Контекст);
	//			    Возврат;
	//			КонецЕсли;
	//		Иначе    
	//			//проверяем что в заказе для данной продукции есть только одна норма затрат
	//			ДокЗаказ = СоздатьОбъект("Документ.Заказ");
	//			ДокЗаказ.НайтиДокумент(Заказ);
	//			ДокЗаказ.ВыбратьСтроки();
	//			фЗаписалиНорму = 0; фПоЭтойНорме = 0;
	//			Пока ДокЗаказ.ПолучитьСтроку() = 1  Цикл
	//				Если ДокЗаказ.Продукция = Продукция Тогда
	//					Если (ПустоеЗначение(ДокЗаказ.НормыЗатрат) = 1) или (ДокЗаказ.НормыЗатрат = ТекущийДокумент()) Тогда
	//					    ДокЗаказ.НормыЗатрат = ТекущийДокумент();    
	//						Если ДокЗаказ.Кво = 0 Тогда
	//							ДокЗаказ.Кво = КвоПродукции;
	//							ДокЗаказ.Ед = ЕдПродукции;
	//							ДокЗаказ.Коэффициент = КоэффициентПродукции;
	//						КонецЕсли;
	//						Попытка
	//							ДокЗаказ.Записать();
	//						Исключение
	//							глКомментарий("Возможно, документ заказ "+СокрЛП(ДокЗаказ)+" редактируется. Закройте форму заказа и повторите проведение!",0,,"!");
	//							глНеПроводить(Контекст);
	//			    			Возврат;
	//						КонецПопытки;
	//						глКомментарий("Заполнен реквизит ""Нормы затрат"" в документе "+СокрЛП(ДокЗаказ)+". Строка"+ДокЗаказ.НомерСтроки+".",3,,"I");
	//						фЗаписалиНорму = 1;
	//						фПоЭтойНорме = фПоЭтойНорме + 1;
	//					Иначе
	//						фПоЭтойНорме = фПоЭтойНорме + 1;
	//					КонецЕсли;  
	//				КонецЕсли;
	//			КонецЦикла;
	//			
	//			Если фЗаписалиНорму = 0 Тогда
	//			    глКомментарий("Не найдена (или соответствует другой норме затрат) продукция " + СокрЛП(""+Продукция) + " в заказе!", 0,,"!");
	//				глНеПроводить(Контекст);
	//			    Возврат;
	//			КонецЕсли;
	//			          
	//			Если фПоЭтойНорме > 1 Тогда
	//			    глКомментарий("Более чем одна норма затрат по продукции " + СокрЛП(""+Продукция) + " в заказе!", 0,,"!");
	//				глНеПроводить(Контекст);
	//			    Возврат;
	//			КонецЕсли;  
	//			
	//			//Очищаем значение значение в справочнике ТМЦ
	//			ОчиститьДвижения("Справочник.ТМЦ");
	//		КонецЕсли;  // фЗаписатьНормыВКонтекстЗаказа = 1
	//	КонецЕсли;  // Заказ.Выбран() = 0 
	//Иначе  
	//	// Либо ошибка, либо ничего не надо делать, так как в заказе уже прописана правильная норма
	//КонецЕсли; // ОчисткаНормВЗаказах()=1

КонецПроцедуры // ОбработкаПроведения()  

//===============================
Процедура ОбработкаУдаленияПроведения() 
	ОчисткаНормВЗаказах();
КонецПроцедуры         

Материал = Перечисление.ВидыЭлементовСоставаПродукции.Материал;
Полуфабрикат = Перечисление.ВидыЭлементовСоставаПродукции.Полуфабрикат;
ВозвратныйОтход = Перечисление.ВидыЭлементовСоставаПродукции.ВозвратныйОтход;
СтатьяКалькуляции = Перечисление.ВидыЭлементовСоставаПродукции.СтатьяКалькуляции;
