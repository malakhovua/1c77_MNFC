Перем ИзменениеУчетнойСтоимости;
Перем НачальнаяДатаДокумента;

// ===============================
Функция УстДоступность()
	ИзмУчСт = ?(ВидПереоценкиТМЦ = ИзменениеУчетнойСтоимости, 1, 0);
	Форма.Заголовок(глЗаголовок(Контекст,"Переоценка ТМЦ"));
	Форма.СчетЗатрат.Доступность(ИзмУчСт);
	Форма.ВидЗатрат.Доступность(ИзмУчСт);
	Форма.Процент.Видимость(ИспользоватьПроцент);
	Форма.НоваяЦена.Доступность(1-ИспользоватьПроцент);
	Форма.кПечать.Доступность(Проведен()*(1-Модифицированность()));
	Возврат "";
КонецФункции

// ======================================
Процедура ИзмМестоХранения()
	Если МестоХранения.Выбран() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если ((МестоХранения.Тип = Склады) и (МестоХранения.ВидСклада = Оптовый))
	или (МестоХранения.Тип = МОЛы) Тогда
		ВидПереоценкиТМЦ = Перечисление.ВидыПереоценкиТМЦ.ИзменениеУчетнойСтоимости; 
		глСохранитьЗначение(Контекст,"МестоХранения",МестоХранения);
	Иначе
		// розничный склад
		Если МестоХранения.СуммовойУчет = 1 Тогда 
			Предупреждение("Нельзя проводить переоценку на розничном складе (магазине) с суммовым учетом!");
		 	МестоХранения = глВосстановитьЗначение(Контекст,"МестоХранения");
		КонецЕсли;
		Если ((МестоХранения.Тип = Склады) и (МестоХранения.ВидСклада = Оптовый))
		или (МестоХранения.Тип = МОЛы) Тогда
			ВидПереоценкиТМЦ = Перечисление.ВидыПереоценкиТМЦ.ИзменениеУчетнойСтоимости;
		Иначе	                                                                        
			ВидПереоценкиТМЦ = Перечисление.ВидыПереоценкиТМЦ.ИзменениеТорговойНаценки;
		КонецЕсли;
		глСохранитьЗначение(Контекст,"МестоХранения",МестоХранения);
	КонецЕсли;
КонецПроцедуры 

// ===============================
Процедура ИзмТМЦ()
	Если ТМЦ.Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;
	
	СчетУчета = ТМЦ.Счет;
	
	Если МестоХранения.ВидСклада = Розничный Тогда
		ЦенаТовара = глВернутьЦену(ТМЦ, Константа.РозничнаяКатегорияЦен);
	Иначе
		ЦенаТовара = глВернутьЦену(ТМЦ, КатегорияЦен);
	КонецЕсли;
	
	Если ПустоеЗначение(ЦенаТовара) = 1 Тогда
		НоваяЦена = 0;
	Иначе
		ЦенаТовара.ИспользоватьДату(ДатаДок);
		НоваяЦена = глПересчет(ЦенаТовара.Цена, ЦенаТовара.Валюта, Гривня, ДатаДок);
	КонецЕсли;		
	
КонецПроцедуры
              
// ===============================
Процедура ИзмПроцент()
	Если Процент <= -100 Тогда
	    Процент = 0;
		Возврат;
	КонецЕсли;
	Если Вопрос("Пересчитать суммы?","Да+Нет")="Нет" Тогда
		Возврат;
	КонецЕсли;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если СтараяЦена = 0 Тогда
		    Продолжить;
		КонецЕсли;
	    НоваяЦена = СтараяЦена * (1 + Процент/100);
		Если НоваяЦена = СтараяЦена Тогда
			НоваяСумма = СтараяСумма;
		Иначе
			НоваяСумма = НоваяЦена * Кво;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// ===============================
Процедура ИзмИспользоватьПроцент()
	Если (ИспользоватьПроцент = 1) И (Процент <> 0) Тогда
	    ИзмПроцент();
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура ИзмНоваяЦена()
	НоваяСумма = НоваяЦена * ?(ПустоеЗначение(Кво)=1,1,Кво);
КонецПроцедуры

// ===============================
Процедура ВводНового(ПризнакКопирования)
	Если ПризнакКопирования = 1	Тогда
		глУстановитьНомер(Контекст);
	    Возврат;
	КонецЕсли;
	глУстановитьФирму(Контекст);
	// по умолчанию - другие доходы от операционной деятельности
	СчетДоходов = глВосстановитьЗначение(Контекст,"СчетДоходов",СчетПоКоду("71.9"));
	СчетЗатрат = глВосстановитьЗначение(Контекст,"СчетЗатрат");
    Если ((глПроверитьСчетЗатрат(СчетЗатрат,0,0,"Счет затрат")=0) 
	ИЛИ (СчетЗатрат.Выбран() = 0)) Тогда
		Если ИспользоватьСчетаРасходов = Класс8 Тогда
		    СчетЗатрат = СчетПоКоду("85"); // другие затраты
		Иначе
		    СчетЗатрат = СчетПоКоду("94.6"); // затраты от обесценивания запасов
		КонецЕсли;
	КонецЕсли;
	ВидЗатрат = глВосстановитьЗначение(Контекст,"ВидЗатрат");
	Подразделение = глВосстановитьЗначение(Контекст,"Подразделение");
	ВидДеятельности = глВосстановитьЗначение(Контекст,"ВидДеятельности");
	КатегорияЦен = глВосстановитьЗначение(,"ОсновнаяКатегорияЦен");
	МестоХранения = глВосстановитьЗначение(Контекст,"ОсновнойСклад");
	ИзмМестоХранения();
КонецПроцедуры

// ===============================
Процедура ПриЗаписи()
	Автор = глПользователь;
	глПроверкаДатыДок(Контекст,"Запись");
	Если глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	глСохранитьЗначение(Контекст,"ВидПереоценкиТМЦ", ВидПереоценкиТМЦ);
	глСохранитьЗначение(Контекст,"СчетДоходов", СчетДоходов);
	глСохранитьЗначение(Контекст,"СчетЗатрат", СчетЗатрат);
	глСохранитьЗначение(Контекст,"ВидЗатрат", ВидЗатрат);
	глСохранитьЗначение(Контекст,"Подразделение", Подразделение);
	глСохранитьЗначение(Контекст,"ВидДеятельности", ВидДеятельности);
	глСохранитьЗначение(Контекст,"ОсновнойСклад",МестоХранения);
КонецПроцедуры

// ===============================
Процедура ПриОткрытии()
	НачальнаяДатаДокумента = ДатаДок;
	Форма.кПравоваяПоддержка.Видимость(глВидимостьПравовойПоддержки);
	глПроверкаДатыДок(Контекст,"Открытие");
	ПриЗаписиПерепроводить(1);
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.кОК.Доступность(0);
		Форма.кПровести.Доступность(0);
		Форма.кДействия.Доступность(0);
		Форма.кЗаполнить.Доступность(0);
		Форма.кРассчитать.Доступность(0);
		Форма.кФирма.Доступность(0);
		Форма.КнопкаПоУмолчанию("кЗакрыть");
	Иначе
		Форма.КнопкаПоУмолчанию("кОК");
	КонецЕсли;	
	Форма.ДатаДок.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ТМЦ.ВыполнятьФормулуТолькоПриИзменении(1);
	Если Константа.ПоказыватьОстаткиТМЦ = Нет Тогда
	    Форма.тОстатокПолный.Видимость(0);
	    Форма.тОстатокПоСкладу.Видимость(0);
	КонецЕсли;
	
	Форма.Кво.Доступность(0);
	Форма.СтараяЦена.Доступность(0);
	Форма.СтараяСумма.Доступность(0);
	
	Форма.ТМЦ.ВыполнятьФормулуТолькоПриИзменении(1);
	ИзменениеУчетнойСтоимости = Перечисление.ВидыПереоценкиТМЦ.ИзменениеУчетнойСтоимости;

	глСохранитьЗначение(Контекст,"МестоХранения",МестоХранения);
КонецПроцедуры


// ===============================
// Назначение: заполняет реквизиты СтараяЦена и СтараяСумма данными из регистра
//		
// Аргументы: ЗапросПоПартиям - запрос к регистру
//		
Процедура РассчитатьЦенуИСумму(ЗапросПоПартиям,фЗаполнить = 0)
	Если ВидПереоценкиТМЦ = Перечисление.ВидыПереоценкиТМЦ.ИзменениеУчетнойСтоимости Тогда
		СтараяСумма = ЗапросПоПартиям.Стоимость;
	Иначе
		СтараяСумма = ЗапросПоПартиям.ПродСтоимость;
	КонецЕсли;
	
	СтараяЦена = ?(Кво=0,0,СтараяСумма/Кво);

	Если фЗаполнить	= 1 Тогда
	// если пересчитываем сммы в строке, то пересчет новой суммы 
	// делаем только при указнном проценте.
		Если ИспользоватьПроцент = 1 Тогда
			НоваяСумма = СтараяСумма * (100 + Процент)/100;
			НоваяЦена = ?(Кво=0,0,НоваяСумма/Кво);
		Иначе
			НоваяСумма = НоваяЦена*Кво;
		КонецЕсли;
	Иначе
		Если ИспользоватьПроцент <> 1 Тогда
			НоваяСумма = СтараяСумма;
		Иначе
			НоваяСумма = СтараяСумма * (100 + Процент)/100;
		КонецЕсли;	
		НоваяЦена = ?(Кво=0,0,НоваяСумма/Кво);
	КонецЕсли;
КонецПроцедуры //РассчитатьЦенуИСумму

// Назначение: выбирает остатки по регистру Партии
//		
// Аргументы: фЗаполнить - признак начального заполнения.
// 				фЗаполнить = 0 - выполнить начальное заполнение документа
//				фЗаполнить = 1 - выполнить рассчет цены и суммы для строк документа
// ===============================
Процедура Заполнить(фЗаполнить = 0)
	Если фЗаполнить = 0 Тогда
	    // начальное заполнение документа
		Если КоличествоСтрок()>0 Тогда
			Рез = Вопрос("Удалить существующие строки?","Да+Нет+Отмена");
		    Если Рез ="Да" Тогда
	        	УдалитьСтроки();
		    ИначеЕсли Рез = "Отмена" Тогда
		    	Возврат;
		    КонецЕсли;
		КонецЕсли;
	КонецЕсли;
                  
	Если Выбран() = 0 Тогда
		Если Вопрос("Документ не записан. Записать?", "Да+Нет") = "Да" Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		// проверим дату документа
		текТекущийДокумент = СоздатьОбъект("Документ.ПереоценкаТМЦ");
		текТекущийДокумент.НайтиДокумент(ТекущийДокумент());
		Если текТекущийДокумент.ДатаДок <> ДатаДок Тогда
			Если Вопрос("Была изменена дата документа. Записать измененный документ?", "Да+Нет") = "Да" Тогда
				Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	ЗапросПоПартиям = СоздатьОбъект("Запрос");
	ПозицияИтогов = "";
	Если Выбран()=1 Тогда // документ существует
		Если СравнитьТА()<=0 Тогда // и находится до ТА
			ПозицияИтогов = СформироватьПозициюДокумента(ТекущийДокумент(),-1); 
		КонецЕсли;
	КонецЕсли;      
	ТекстЗапроса = ?(ПустоеЗначение(ПозицияИтогов)=1,"","Период с ПозицияИтогов по ПозицияИтогов;");

	ТекстЗапроса = ТекстЗапроса +"
	|Обрабатывать НеПомеченныеНаУдаление;
	|_Фирма			= Регистр.Партии.Фирма;
	|_Счет			= Регистр.Партии.Счет;
	|_МестоХранения	= Регистр.Партии.МестоХранения;
	|_ТМЦ			= Регистр.Партии.ТМЦ;
	|_ПрихДокумент	= Регистр.Партии.ПрихДокумент;
	|_ОстатокТовара	= Регистр.Партии.ОстатокТовара;
	|_Стоимость 	= Регистр.Партии.Стоимость;
	|_ПродСтоимость = Регистр.Партии.ПродСтоимость;
	|Функция ОстатокТовара = КонОст(_ОстатокТовара);
	|Функция Стоимость 	   = КонОст(_Стоимость);
	|Функция ПродСтоимость = КонОст(_ПродСтоимость);
	|Группировка _ТМЦ;
	|Группировка _Счет;
	|Группировка _ПрихДокумент;
	|Условие(_Фирма = Фирма);
	|";
                                  
	Если фЗаполнить = 1 Тогда
		спТМЦ = СоздатьОбъект("СписокЗначений");
		ВыгрузитьТабличнуюЧасть(спТМЦ,"ТМЦ");
		спПартии = СоздатьОбъект("СписокЗначений");
		ВыгрузитьТабличнуюЧасть(спПартии,"Предпочтение");
		Для Номер = 1 По спПартии.РазмерСписка() Цикл
			Если ПустоеЗначение(спПартии.ПолучитьЗначение(Номер)) = 1 Тогда
			    спПартии.УстановитьЗначение(Номер,ПолучитьПустоеЗначение("Документ"));
			КонецЕсли;
		КонецЦикла;	
		спСчета = СоздатьОбъект("СписокЗначений");
		ВыгрузитьТабличнуюЧасть(спСчета,"СчетУчета");
		ТекстЗапроса = ТекстЗапроса +"Условие(_ТМЦ в спТМЦ);
		|Условие(_Счет в спСчета);
		|Условие(_ПрихДокумент в спПартии);";
	КонецЕсли;
	
	Если ((ВидПереоценкиТМЦ = Перечисление.ВидыПереоценкиТМЦ.ИзменениеТорговойНаценки)
	ИЛИ (глПартионныйУчетПоСкладам = Да)) Тогда
		ТекстЗапроса = ТекстЗапроса +"Условие(_МестоХранения = МестоХранения);";
	КонецЕсли;
	
	Если ЗапросПоПартиям.Выполнить(ТекстЗапроса) = 0 Тогда
		Предупреждение("Не выполнился запрос по регистру Партии!");
		Возврат;
	КонецЕсли;                                                     
				                  
	Если фЗаполнить = 0 Тогда
	    // начальное заполнение документа
		Пока ЗапросПоПартиям.Группировка("_ТМЦ") = 1 Цикл
			Пока ЗапросПоПартиям.Группировка("_Счет") = 1 Цикл
				Пока ЗапросПоПартиям.Группировка("_ПрихДокумент") = 1 Цикл
					
					Если ПустоеЗначение(ЗапросПоПартиям._Счет) = 0 Тогда
						Если ЗапросПоПартиям._Счет.Забалансовый = 1 Тогда
							Продолжить;
						КонецЕсли;	
					КонецЕсли;
					
					Если ЗапросПоПартиям.ОстатокТовара < 0 Тогда
						// у реквизита "Кво" стоит признак "неотрицательны", эти строки не заполнились бы количеством
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока();
					НазначитьТип("Предпочтение","Документ");
					ТМЦ 		 = ЗапросПоПартиям._ТМЦ;                       
					Предпочтение = ЗапросПоПартиям._ПрихДокумент;
					СчетУчета	 = ЗапросПоПартиям._Счет;
					Кво			 = ЗапросПоПартиям.ОстатокТовара;
					
					РассчитатьЦенуИСумму(ЗапросПоПартиям);
				КонецЦикла; // _ПрихДокумент
			КонецЦикла; // _Счет
		КонецЦикла; // _ТМЦ
	Иначе
		// расчета сумм в строках документа
		ВыбратьСтроки();
		Пока ПолучитьСтроку() =1 Цикл                  
			текПредпочтение = ?(ПустоеЗначение(Предпочтение)=1,ПолучитьПустоеЗначение("Документ"),Предпочтение);
			Если ЗапросПоПартиям.Получить(ТМЦ,СчетУчета,текПредпочтение) = 1 Тогда
				Кво	= ЗапросПоПартиям.ОстатокТовара;
				РассчитатьЦенуИСумму(ЗапросПоПартиям,1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура ВыборПредпочтения()
	СтарПредпочтение = Предпочтение;
	спОтбор = СоздатьОбъект("СписокЗначений");
	спСчета=СоздатьОбъект("СписокЗначений");
	спСчета.ДобавитьЗначение(СчетУчета);
	спОтбор.Установить("Счет",спСчета);
	Если глПартионныйУчетПоСкладам = Да Тогда
	    спОтбор.Установить("МестоХранения",МестоХранения);
	КонецЕсли;
	спОтбор.Установить("Контекст",Контекст);      
	ОткрытьФормуМодально("Справочник.Контрагенты.ВыборПредпочтения", спОтбор);
	Если (ПустоеЗначение(Предпочтение) = 0)
	И (ТипЗначения(Предпочтение) = 11) Тогда
	    // в качестве предпочтения выбран контрагент, 
		// в данном документе должна быть выбрана конкретная партия
		глКомментарий("В качестве партии необходимо выбирать документ.",0);
		НазначитьТип("Предпочтение",ТипЗначенияСтр(СтарПредпочтение));
		Предпочтение = СтарПредпочтение;
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура Печать()
	глУстПропись(Гривня);

	Таб = СоздатьОбъект("Таблица");
	СуффиксТаблицы = ?(Константа.ФормыНаУкраинском = Да,"_Укр","");
	Таб.ИсходнаяТаблица("Таблица"+СуффиксТаблицы);

	ТоварСтр =  "ТМЦ" + ?(глВосстановитьЗначение(,"ФормыНаУкраинском",Да) = Да, "/Партія", "/Партия");
	
	Если ВидПереоценкиТМЦ = ИзменениеУчетнойСтоимости Тогда
		// это изменение учетной стоимости
		Если Константа.ФормыНаУкраинском = Да Тогда
		    СтараяЦенаСтр = "Ціна облікова";
			НоваяЦенаСтр = "Ціна облікова нова";
			СуммаПереоценкиСтр = "Сума переоцінки";
			ВсегоСтр = "Разом:";
		Иначе
			СтараяЦенаСтр = "Цена учетная";
			НоваяЦенаСтр = "Цена учетная новая";
			СуммаПереоценкиСтр = "Сумма переоценки";
			ВсегоСтр = "Всего:";
		КонецЕсли;
	Иначе
		// это изменение торговой наценки
		Если Константа.ФормыНаУкраинском = Да Тогда
		    СтараяЦенаСтр = "Ціна роздр. з ПДВ";
			НоваяЦенаСтр = "Ціна роздр. з ПДВ нова";
			СуммаПереоценкиСтр = "Сума переоцінки з ПДВ";
			ВсегоСтр = "Разом з ПДВ:";
		Иначе
			СтараяЦенаСтр = "Цена розн. с НДС";
			НоваяЦенаСтр = "Цена розн. с НДС новая";
			СуммаПереоценкиСтр = "Сумма переоценки с НДС";
			ВсегоСтр = "Всего с НДС:";
		КонецЕсли;
	КонецЕсли;
	
	Таб.ВывестиСекцию("Шапка");
	Ном = 1;
	ВыбратьСтроки();
	СуммаПереоценки = 0.00;
	Пока ПолучитьСтроку()=1 Цикл
		МетодРасчетаСебестоимости=глПолучитьМетодРасчетаСебестоимости(ТМЦ,ДатаДок);
		Если МетодРасчетаСебестоимости <> Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
		    Таб.ВывестиСекцию("Строка");
			Таб.ВывестиСекцию("Партия");
		Иначе
			Таб.ВывестиСекцию("Строка_");
		КонецЕсли;	
		СуммаПереоценки = СуммаПереоценки + (НоваяСумма - СтараяСумма);
		Ном = Ном+1;
	КонецЦикла;
	
	Если ВидПереоценкиТМЦ <> ИзменениеУчетнойСтоимости Тогда
		// изменение торговой наценки
		НДС = Окр(СуммаПереоценки * Константа.БазНДС.Ставка.Получить(ДатаДок),2);
		Таб.ВывестиСекцию("ИтогоНДС");
	КонецЕсли;
	
	Таб.ВывестиСекцию("Дно");
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Опции(0,0,,);
	Таб.Показать("Акт переоценки ТМЦ","");
КонецПроцедуры

// ======================================
Процедура ОбработкаВыбораЗначения(Значение,Рекв,ФлагСтандОбр)
	Если Рекв = "СчетЗатрат" Тогда
	    Если глПроверитьСчетЗатрат(Значение,2,0)=0 Тогда
	        ФлагСтандОбр = 0;
	    КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

// ======================================
Процедура ИзмСчетДоходов()
	Если (СчетДоходов.ВидСубконто(1) = ВидыСубконто.Контрагенты) 
	и (СчетДоходов.ВидСубконто(2) = ВидыСубконто.Договора) Тогда
	    Предупреждение("Счет доходов не может быть счетом взаиморасчетов!");
		СчетДоходов = 0;
	КонецЕсли;
КонецПроцедуры 

// ======================================
Процедура ИзмСчетЗатрат()
	Если (СчетЗатрат.ВидСубконто(1) = ВидыСубконто.Контрагенты) 
	и (СчетЗатрат.ВидСубконто(2) = ВидыСубконто.Договора) Тогда
	    Предупреждение("Счет затрат не может быть счетом взаиморасчетов!");
		СчетЗатрат = 0;
		Возврат;
	КонецЕсли;  
	Если глПроверитьСчетЗатрат(СчетЗатрат,2,0)=0 Тогда
		СчетЗатрат = 0;
		Возврат;
	КонецЕсли;
КонецПроцедуры 

// ===============================
Процедура ПриНачалеРедактированияСтроки()
	Если ПустоеЗначение(Предпочтение)=1 Тогда
		Форма.Предпочтение.НазначитьТип("Справочник.Контрагенты");
		Предпочтение=ПолучитьПустоеЗначение("Справочник.Контрагенты");
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура ПриРедактированииНовойСтроки()
	Форма.Предпочтение.НазначитьТип("Справочник.Контрагенты");
	Предпочтение=ПолучитьПустоеЗначение("Справочник.Контрагенты");
КонецПроцедуры

// ===============================
Процедура ПриНачалеВыбораЗначения(Рекв,ФлагСтандОбр)
	Если Рекв="Предпочтение" Тогда
	    ВыборПредпочтения();    
		ФлагСтандОбр = 0;
	КонецЕсли;
КонецПроцедуры
// ===============================
// Инициализируем список действий по кнопке "Действия"
СписокДействий = глПолучитьСписокДействий("
	|ДвиженияДокумента,                  
	|ОбновлениеЦен,
	|ОткрытьВЖурнале");