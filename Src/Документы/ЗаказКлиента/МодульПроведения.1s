Перем ПересчКво, ПервыйДок, ПоЗаказу;
Перем Товар;
Перем СчетНДС,СубконтоНДС1,СубконтоНДС2; // для бартера
Перем ВремРег;       
Перем спОтбор;
Перем НДСПервоеСобытие, НДСВтороеСобытие, ВзаиморасчетыГрн; // для исправления ошибок при округлениях
Перем АвансВал,АвансОсн; // для погашения аванса в валюте

// ===========================
Функция ПроверкаШапки()
    глВсеВыбрано = 1;
	глПроверкаДатыДок(Контекст,"Проведение");
    глВыбранЛи(Фирма,"Фирма");
    глВыбранЛи(Контрагент,"Контрагент");
    глВыбранЛи(СчетКонтрагента,"Счет контрагента");
	Если глВсеВыбрано = 1 Тогда
		Если глПроверитьСчетВзаиморасчетов(СчетКонтрагента) = 0 Тогда
			глКомментарий("Счет контрагента ("+СчетКонтрагента+") не является счетом учета взаиморасчетов!",1,,"!");
		    глВсеВыбрано = 0;
		ИначеЕсли (Валюта = Гривня)
		И (СчетКонтрагента.Валютный = 1) Тогда
			глКомментарий("Нельзя выбирать валютный счет, если валюта документа "+Гривня+" !",1,,"!");
			глВсеВыбрано = 0;       
		ИначеЕсли (Валюта <> Гривня)
		И (СчетКонтрагента.Валютный = 0) Тогда
			глКомментарий("Нельзя выбирать не валютный счет, если валюта документа "+Валюта+" !",1,,"!");
			глВсеВыбрано = 0;
		КонецЕсли;	
	КонецЕсли;	
    глВыбранЛи(МестоХранения,"Место хранения");
    глВыбранЛи(Валюта,"Валюта");
    глВыбранЛи(ВидТорговли,"Вид торговли");
	глВыбранЛи(ВидТары,"Вид тары");
    глВыбранЛи(СубконтоВалДох,"Субконто валовых доходов");
    глВыбранЛи(Подразделение,"Подразделение сбыта");
	глВыбранЛи(ВидНДС,"Вид НДС");
  	глВсеВыбрано = ?(глВсеВыбрано = 0, 0, глПроверкаДублейСтрок(Контекст));
	Если Валюта <> Гривня Тогда
	    Если ВидТорговли <> Перечисление.ВидыТорговли.Предоплата Тогда
			глКомментарий("Продавать за валюту можно только на условиях предоплаты!",0,,"!");
    		глВсеВыбрано = 0;
		КонецЕсли;               		
		Если ВидНДС = ОсновнаяСтавкаНДС Тогда
			// это явная ошибка, запрещаем проведение 
        	глКомментарий("При продаже за валюту нельзя указывать НДС!",0,,"!");
    		глВсеВыбрано = 0;
		ИначеЕсли ВидНДС <> ЛьготнаяСтавкаНДС Тогда
			// просто предупредим, но жестко не запрещаем
		    глКомментарий("Отгрузка за валюту вероятно должна проходить по ставке НДС """+ЛьготнаяСтавкаНДС+"""!",2)
		КонецЕсли;	
    КонецЕсли;    
    Если МестоХранения.ВидСклада = Розничный Тогда
        глКомментарий("Накладная предназначена для отгрузки ТМЦ с ОПТОВОГО склада, а не РОЗНИЧНОГО (магазина)!",0,,"!");
        глКомментарий("Проверьте параметры склада!",2);
        глВсеВыбрано = 0;
	КонецЕсли;
	Если ВидТорговли = Перечисление.ВидыТорговли.Нал Тогда
		глВыбранЛи(Касса,"Касса");
    КонецЕсли;
	глПроверкаНДСВДокументе(Контекст, Итог("СуммаБезНДС"), Итог("СуммаСНДС"), Итог("НДС"));
	
    Возврат глВсеВыбрано;
КонецФункции

// ===========================
Функция ПроверкаСтроки()
    глВсеВыбрано = 1;
    глВыбранЛи(ТМЦ,"ТМЦ",НомерСтроки);
    глВыбранЛи(ТМЦ.ВидДеятельности,"Вид деятельности в карточке ТМЦ",НомерСтроки);  
	глВсеВыбрано = ?(глПроверкаТовараВДокументе(Контекст,ТМЦ,НомерСтроки,1)=Да, глВсеВыбрано, 0);
	ЕстьКалькулируемыеУслуги = 0;
	Если ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
		Если глПолучитьНормы(ТМЦ,,1,ДатаДок,ПоЗаказу,,1)=1 Тогда // калькулируемая услуга
			ЕстьКалькулируемыеУслуги = 1;
			Если глВсеВыбрано = 1 Тогда
				Если (ТМЦ.ВидДеятельности.ПозаказноеПроизводство = Да) И (ПустоеЗначение(ПоЗаказу) = 1) Тогда
					глКомментарий("В строке "+НомерСтроки+" выбрана услуга, в карточке которой указан вид деятельности с позаказным производством!",0,,"!");
					глВсеВыбрано = 0;                         
				ИначеЕсли (ТМЦ.ВидДеятельности.ПозаказноеПроизводство = Нет) И (ПустоеЗначение(ПоЗаказу) = 0) Тогда
					глКомментарий("В строке "+НомерСтроки+" выбрана услуга, в карточке которой указан вид деятельности с непозаказным производством!",0,,"!");
					глВсеВыбрано = 0;                         
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьКалькулируемыеУслуги = 1 Тогда
		глВыбранЛи(ПодразделениеПроизв,"Подразделение производства");
		глПроверитьТипПодразделения(ПодразделениеПроизв,"подразделения производства");
	КонецЕсли;
    Возврат глВсеВыбрано;
КонецФункции
                       
// ===============================
Процедура РассчитатьШапку(ЧастичноПровести = 0)
	СуммаГрнСНДС = глПересчет(Итог("СуммаСНДС"),Валюта,ДатаДок,Гривня,ДатаДок);
	// определяем заказ в документе для проводок по услугам
	ПоЗаказу = глПолучитьЗаказ(Договор);
	// если выбран договор, проводим по нему, иначе по пустому договору
	Если ПустоеЗначение(Договор) = 1 Тогда
	    ПервыйДок = ПолучитьПустоеЗначение("Документ");
	ИначеЕсли Найти("Договор,Заказ",Договор.Вид()) <> 0 Тогда
	    ПервыйДок = Договор;
	Иначе
		ПервыйДок = ПолучитьПустоеЗначение("Документ");
	КонецЕсли;
	Если (Константа.НДСпоВходящимНН = Да) и (Валюта = Гривня) Тогда
		// проводку по налоговому кредиту сделаем в
		// документе ЗаписьКнигиПриобретения
		СчетНДС = СчетПоКоду("64.4.2");
		СубконтоНДС1 = Контрагент;
		СубконтоНДС2 = ПервыйДок;
	Иначе
		// сразу налоговый кредит
		СчетНДС = СчетПоКоду("64.1.5");
		СубконтоНДС1 = ВидНДС;
		СубконтоНДС2 = 0;
	КонецЕсли;
	// взаиморасчеты
	ФлагОтгрузки = 1;
	ЗнакОплаты = -1; 
	// партии
	спОтбор = СоздатьОбъект("СписокЗначений");
	спСчета = СоздатьОбъект("СписокЗначений");
	ВремРег = СоздатьОбъект("Регистры");
	Если ПустоеЗначение(ЧастичноПровести) = 1 Тогда
		// взаиморасчеты
		// при частичном проведении регистры взаиморасчетов и партий не понадобятся
		
		// партии
		// сформируем список счетов для отбора	
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если спСчета.НайтиЗначение(ТМЦ.Счет) = 0 Тогда
				спСчета.ДобавитьЗначение(ТМЦ.Счет);
			КонецЕсли;	
		КонецЦикла;	
		спОтбор.Установить("Счет",спСчета);
		Если глПартионныйУчетПоСкладам = Да Тогда
		    спОтбор.Установить("МестоХранения", МестоХранения);
		КонецЕсли;
		Если Договор.Вид()="Заказ" Тогда
		    спОтбор.Установить("ПрихДокумент",Договор);
		КонецЕсли;
		глРассчитатьОстаткиПартий(Контекст, ВремРег, Фирма, спОтбор, 1);
	КонецЕсли;
    спОтбор.Установить("МестоХранения",);
	// фильтр по складу нужен только для партий
	глРассчитатьОстаткиИРезервы(Контекст, ВремРег, спОтбор,1,1);
	Если глПартионныйУчетПоСкладам = Да Тогда
	    спОтбор.Установить("МестоХранения", МестоХранения);
	КонецЕсли;
КонецПроцедуры
                           
// возвращает код операции для регистров Партии и Обороты
// ===========================
Функция ПолучитьКодОперации(СчетТМЦ=0)

	Если ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Тара Тогда
		Если ВидТары = Перечисление.ВидыТары.Покупная Тогда
			Возврат Продажа;
		ИначеЕсли ВидТары = Перечисление.ВидыТары.Залоговая Тогда
			Возврат ПередачаТарыЗалоговойПокупателю;
		Иначе // Возвратная тара
			Возврат ПередачаТарыВозвратнойПокупателю;
		КонецЕсли;
	ИначеЕсли ПустоеЗначение(СчетТМЦ) = 0 Тогда
		Если СчетТМЦ.Забалансовый = 0 Тогда
			Возврат Продажа;
		Иначе	
			глКомментарий("Не определился код операции для ТМЦ "+ТМЦ+".",0,,"!");
			Возврат 0;
		КонецЕсли;	
	Иначе	
		Возврат Продажа;						
	КонецЕсли;
КонецФункции

// формирует проводки по списанию ТМЦ
// ===============================
Процедура ПроводкиТовар(СписываемыйТМЦ,СчетП,СчетПТары,СписываемыйОстаток,СписываемаяСтоимость,ПоставкаП,ПрихДокументП)
	//Если (ВидТары = Перечисление.ВидыТары.Залоговая)
	//И (ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Тара) Тогда
	//	СубконтоДебетТары1 = ?(СчетПТары=СчетПоКоду("2843"),Контрагент,МестоХранения);
	//	СубконтоКредитТары1 = ?(СчетП=СчетПоКоду("2843"),Контрагент,МестоХранения);
	//	// проводки для тары
	//	глПроводка(Контекст,СчетПТары,СчетП,СписываемаяСтоимость,"Себестоимость",СписываемыйОстаток, СубконтоДебетТары1,СписываемыйТМЦ,ПоставкаП,
	//	СубконтоКредитТары1,СписываемыйТМЦ,ПоставкаП, ,,"НК",1,0);
	//Иначе	
	//// проводки для обычного ТМЦ
	//	СчРеал = глСчетРеализации(СписываемыйТМЦ);
	//	// проводки по реализации ...
	//	Если СписываемыйТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
	//		// услуг
	//		глПроводка(Контекст,СчРеал,СчетП,СписываемаяСтоимость,"Реализация: услуги",СписываемыйОстаток,ТМЦ.ВидДеятельности,ПодразделениеПроизв,,
	//		ТМЦ.ВидДеятельности,ПодразделениеПроизв,, ,,"ОУ",1,0);
	//	Иначе	    
	//		// обычных ТМЦ 
	//		Если ВидТорговли = Перечисление.ВидыТорговли.Давал Тогда
	//			глПроводка(Контекст,"2093",СчетП,СписываемаяСтоимость,"Себестоимость",СписываемыйОстаток,Контрагент,ТМЦ,,
	//			МестоХранения,СписываемыйТМЦ,ПоставкаП, ,,"НК",1,0);				
	//		Иначе
	//			Если (СписываемыйТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Продукция) Или (СписываемыйТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Товар) 
	//					Или (ИспользоватьСчетаРасходов = Класс9) Тогда
	//				глПроводка(Контекст,СчРеал,СчетП,СписываемаяСтоимость,"Себестоимость",СписываемыйОстаток,СписываемыйТМЦ.ВидДеятельности,Подразделение,,
	//				МестоХранения,СписываемыйТМЦ,ПоставкаП, ,,"НК",1,0);
	//			Иначе
	//				глПроводкаПоЗатратам(Контекст,СчРеал,СчетП,СписываемаяСтоимость,"Себестоимость",СписываемыйОстаток, СписываемыйТМЦ.ВидДеятельности,Подразделение,Константа.ВидЗатратСебестРеалПроизвЗапасов,
	//					МестоХранения,СписываемыйТМЦ,ПоставкаП, ,, "НК",1,0);
	//			КонецЕсли;
	//			// для возвратной тары сделаем проводку по забалансовому счету
	//			Если (ВидТары = Перечисление.ВидыТары.Возвратная)
	//			И (ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Тара) Тогда
	//				глПроводка(Контекст,СчетПТары,,СписываемаяСтоимость,"Себестоимость",СписываемыйОстаток, Контрагент,СписываемыйТМЦ,,
	//				,,, ,,"НК",1,0);
	//			КонецЕсли;				
	//		КонецЕсли;
	//	КонецЕсли;	
	//Конецесли;
КонецПроцедуры

// Наименование: СформироватьДвиженияПартии
// Назначение: рассчитать необходимеы параметры и сформировать движения по регистрам 
// Партии и Обороты. Сформировать проводки.
//		В процессе обработки в процедуре изменятся следующие пареметры:
//															ОсталосьСписать											
//															ОсталосьСуммаСНДСПоСтроке											
//															ОсталосьСуммаБезНДСПоСтроке											
// Параметры: 
// 			тбОстатки - таблица остатков, при списании кол-ва большего, чем есть на складе, этот параметр пустой
//			тбПартии - таблица партий, при списании кол-ва большего, чем есть на складе, этот параметр пустой
//			ОсталосьСписать - количество ТМЦ, которое необходимо списать
// 			ВсегоСписатьПоСтроке - количество ТМЦ, указанное в строке документа в базовых единица
//			ВсегоСуммаСНДСПоСтроке - сумма с НДС указанная в строке документа, пересчитанная по курсу документа в гривни
//			ВсегоСуммаБезНДСПоСтроке - сумма без НДС указанная в строке документа, пересчитанная по курсу документа в гривни
// 			ОсталосьСуммаСНДСПоСтроке - сумма с НДС, которую необходимо списать
//			ОсталосьСуммаБезНДСПоСтроке - сумма без НДС, которую необходимо списать
//			ПоставщикП - поставщик, для проведения по регистрам
//			ПоставкаП - документ поставки, для проведения по регистрам
//			ПрихДокументП - приходный документ, для проведения по регситрам
// ===============================
Функция СформироватьДвиженияПартии(тбОстатки,тбПартии,ОсталосьСписать,ВсегоСписатьПоСтроке,ВсегоСуммаСНДСПоСтроке,
	ВсегоСуммаБезНДСПоСтроке,ОсталосьСуммаСНДСПоСтроке,ОсталосьСуммаБезНДСПоСтроке,ПоставщикП,ПоставкаП,ПрихДокументП, Признак)
	
	Если ПустоеЗначение(тбОстатки) = 1 Тогда
		ОстатокТовараПоПартии = 0;
		// если надо списать больше чем есть на складе
		СписываемыйОстатокТовара = ОсталосьСписать;	
		// рассчитаем коэфициент списания не по остатку партии, а по остатку по строке документа
		КоэфСписания = СписываемыйОстатокТовара / ВсегоСписатьПоСтроке;
		СписываемаяСтоимость = ВсегоСуммаСНДСПоСтроке * КоэфСписания;
		СписываемаяПродСтоимость = 0;
		// определим сумму реализации текущей списываемой партии
		СуммаРеализацииБезНДС = ОсталосьСуммаБезНДСПоСтроке;
		СуммаРеализацииСНДС = ОсталосьСуммаСНДСПоСтроке;
		СчетП = ТМЦ.Счет;
	Иначе	                                          
		ОстатокТовараПоПартии = тбОстатки.ОстатокТовара;
		// нормальное списание
		СписываемыйОстатокТовара = Мин(ОсталосьСписать, ОстатокТовараПоПартии);
		КоэфСписания = СписываемыйОстатокТовара / ОстатокТовараПоПартии;
		КоэфРеализации = СписываемыйОстатокТовара / ВсегоСписатьПоСтроке;
		// определим себестоимость текущей списываемой партии используя коэфициент списания 
		СписываемаяСтоимость = тбОстатки.Стоимость * КоэфСписания;
		СписываемаяПродСтоимость = тбОстатки.ПродСтоимость * КоэфСписания;
		Если СписываемыйОстатокТовара = ОсталосьСписать Тогда
			// определим себестоимость текущей списываемой партии используя 
			// если списывается вся сумма указаная в строке документа
			СуммаРеализацииСНДС = ОсталосьСуммаСНДСПоСтроке;
			СуммаРеализацииБезНДС = ОсталосьСуммаБезНДСПоСтроке;
		Иначе                                                
			// определим себестоимость текущей списываемой партии используя 
			// если списывется часть суммы указаной в строке документа 
			СуммаРеализацииСНДС = Окр(ВсегоСуммаСНДСПоСтроке * КоэфРеализации,2);
			СуммаРеализацииБезНДС = Окр(ВсегоСуммаБезНДСПоСтроке * КоэфРеализации,2);
		КонецЕсли;  
		СчетП = тбПартии.Счет;		
	КонецЕсли;		                                                                
	// доход от продажи 
	Доход = СуммаРеализацииСНДС - СписываемаяСтоимость;
	// осталось списать по суммам
	ОсталосьСуммаБезНДСПоСтроке = ОсталосьСуммаБезНДСПоСтроке - СуммаРеализацииБезНДС;
	ОсталосьСуммаСНДСПоСтроке = ОсталосьСуммаСНДСПоСтроке - СуммаРеализацииСНДС;
	КодОперации	= ПолучитьКодОперации(СчетП);
	Если КодОперации = 0 Тогда
		глКомментарий("Невозможно определить код операции!",0,,"!");		
		Возврат 0;
	КонецЕсли;	
	МестоХраненияП = ?(глПартионныйУчетПоСкладам = Да,МестоХранения,0);
	Если (ВидТары <> Перечисление.ВидыТары.Покупная)
	и (ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Тара) Тогда
		// залоговая и возвратная тара:
		// списываем с балансового счета
		глПровестиПартию(Контекст, 0, 0, Фирма, ТМЦ, СчетП, МестоХраненияП, ПоставщикП, 
			ПоставкаП, ПрихДокументП,СписываемыйОстатокТовара, СписываемаяСтоимость, СписываемаяПродСтоимость,
			КодОперации,1 ,СуммаРеализацииБезНДС, Доход, , Признак);
		// и приходуем на забалансовый счет
		Если ВидТары = Перечисление.ВидыТары.Залоговая Тогда
			СчетПТары = ГлПолучитьСчетУчетаТМЦ("ТараЗалоговая",ТМЦ);
		Иначе
			СчетПТары = СчетПоКоду("ТВ");
			// для возвратной тары проводки по НДС не делаются
			СуммаРеализацииСНДС = СуммаРеализацииБезНДС;
		КонецЕсли;
		// Параметры проведения для возвратной тары
		МестоХраненияП = Контрагент;
		ПрихДокументП = ТекущийДокумент();
		СписываемаяПродСтоимость = СуммаСНДС;
		глПровестиПартию(Контекст, 1, 0, Фирма, ТМЦ, СчетПТары, МестоХраненияП, ПоставщикП, 
			ПоставкаП, ПрихДокументП,СписываемыйОстатокТовара, СписываемаяСтоимость, СписываемаяПродСтоимость,
			КодОперации,0 ,0, 0, Признак);
	Иначе
		Если ВидТорговли = Перечисление.ВидыТорговли.Давал Тогда
			Доход = 0;
			СуммаРеализацииСНДС = 0;
			КодОперации = ПередачаВДавальческуюПереработку;
			ФлагОборота = 0;
		Иначе
			ФлагОборота = 1;
		КонецЕсли;
		глПровестиПартию(Контекст, 0, 0, Фирма, ТМЦ, СчетП, МестоХраненияП, ПоставщикП, 
			ПоставкаП, ПрихДокументП,СписываемыйОстатокТовара, СписываемаяСтоимость, СписываемаяПродСтоимость,
			КодОперации, ФлагОборота ,СуммаРеализацииСНДС, Доход, , Признак);
		Если ВидТорговли = Перечисление.ВидыТорговли.Давал Тогда
			//Проведем по оборотам
			КодОперации = ПередачаВДавальческуюПереработку;
			Регистр.Обороты.ПривязыватьСтроку(НомерСтроки);
			Регистр.Обороты.Фирма = Фирма;
			Регистр.Обороты.Счет = "2093";
			Регистр.Обороты.ТМЦ = ТМЦ;
			Регистр.Обороты.Поставщик = ПоставщикП;
			Регистр.Обороты.Покупатель = Контрагент;
			Регистр.Обороты.ВидДеятельности = ТМЦ.ВидДеятельности;
			Регистр.Обороты.КодОперации = КодОперации;
			Регистр.Обороты.Партия		 = ПоставкаП;
			Регистр.Обороты.Признак	 = Признак;
			Регистр.Обороты.ПриходКво = - СписываемыйОстатокТовара;
			Регистр.Обороты.ПриходСум = - СписываемаяСтоимость;
			Регистр.Обороты.РасходКво = 0;
			Регистр.Обороты.РасходСум = 0;
		    Регистр.Обороты.ДвижениеВыполнить();			
			глПровестиПартию(Контекст, 1, 0, Фирма, ТМЦ, СчетПоКоду("2093"), Контрагент, ПоставщикП, 
				ПоставкаП, ПрихДокументП,СписываемыйОстатокТовара, СписываемаяСтоимость, СписываемаяПродСтоимость,
				КодОперации, 0,0, 0, , Признак);
		КонецЕсли;			
	КонецЕсли;  
	ПроводкиТовар(ТМЦ,СчетП,СчетПТары,СписываемыйОстатокТовара,СписываемаяСтоимость,ПоставкаП,ПрихДокументП);							
	Если ПустоеЗначение(тбПартии) = 0 Тогда
		глУчестьСписание(тбОстатки,СписываемыйОстатокТовара,СписываемаяСтоимость,СписываемаяПродСтоимость);
	КонецЕсли;
	ОсталосьСписать = ОсталосьСписать - СписываемыйОстатокТовара;
	Возврат 1;
КонецФункции

// ===============================
Процедура ДвижениеНормативныеЗатраты(СтатьяКалькуляции, Материал, СписываемоеКво, СписываемаяСумма)
	//Регистр.НормативныеЗатраты.ПривязыватьСтроку(НомерСтроки);
	//Регистр.НормативныеЗатраты.Фирма = Фирма;
	//Регистр.НормативныеЗатраты.ВидДеятельности = ТМЦ.ВидДеятельности;
	//Регистр.НормативныеЗатраты.Подразделение = ПодразделениеПроизв;
	//Регистр.НормативныеЗатраты.Продукция = ТМЦ;
	//Регистр.НормативныеЗатраты.СтатьяКалькуляции = СтатьяКалькуляции;
	//Регистр.НормативныеЗатраты.Заказ = ПоЗаказу;
	//Регистр.НормативныеЗатраты.Материал = Материал;
	//Регистр.НормативныеЗатраты.ТипЗатрат = НормыНаВыпуск;
	//Регистр.НормативныеЗатраты.Количество = СписываемоеКво;
	//Регистр.НормативныеЗатраты.Сумма = СписываемаяСумма; 
	//Регистр.НормативныеЗатраты.ДвижениеВыполнить();
КонецПроцедуры

// ===============================
Процедура ДвижениеВыпускПродукции(КвоПродукции,КвоБрака,СуммаПродукции,СуммаДавПродукции,Партия) 
	//Регистр.ВыпускПродукции.ПривязыватьСтроку(НомерСтроки);
	//Регистр.ВыпускПродукции.Фирма = Фирма;
	//Регистр.ВыпускПродукции.ВидДеятельности = ТМЦ.ВидДеятельности;
	//Регистр.ВыпускПродукции.Подразделение = ПодразделениеПроизв;
	//Регистр.ВыпускПродукции.Заказ = ПоЗаказу;
	//Регистр.ВыпускПродукции.Продукция = ТМЦ;
	//Регистр.ВыпускПродукции.Партия = Партия; 
	//Регистр.ВыпускПродукции.Количество = КвоПродукции;  
	//Регистр.ВыпускПродукции.КоличествоБрака = КвоБрака;  
	//Регистр.ВыпускПродукции.Сумма = СуммаПродукции; 
	//Регистр.ВыпускПродукции.СуммаДав = СуммаДавПродукции; 
	//Регистр.ВыпускПродукции.ДвижениеВыполнить();
КонецПроцедуры      

// ===============================
Процедура ДвиженияСтрокаПроизводство(тбНормы,СебестоимостьПродукции)
	
	СебестоимостьПродукции = 0;
	Если ПустоеЗначение(ПоЗаказу) = 0 Тогда
		Партия = ПоЗаказу;
	ИначеЕсли Константа.МетодРасчетаСебестоимостиПроизводственныхЗапасов.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
		Партия = ПолучитьПустоеЗначение("Документ");
	Иначе
		Партия = ТекущийДокумент();
	КонецЕсли;

	СуммаМатЗатратПоПродукции = 0;	//Сумма материальных затрат по нормам на продукцию
	СуммаНеМатЗатратПоПродукции = 0;//Сумма нематериальных затрат по нормам на продукцию
	СуммаВозврОтходовПоПродукции = 0;//Сумма возвратных отходов по нормам на продукцию
	
	тбНормы.ВыбратьСтроки();
	Пока тбНормы.ПолучитьСтроку() = 1 Цикл
		// показываем нормативные затраты
		ДвижениеНормативныеЗатраты(тбНормы.СтатьяКалькуляции,тбНормы.Материал,тбНормы.Кво * ?(тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.ВозвратныйОтход,-1,1),тбНормы.Сумма);
		
		Если тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.ВозвратныйОтход Тогда
			СуммаВозврОтходовПоПродукции = СуммаВозврОтходовПоПродукции + тбНормы.Сумма;
		ИначеЕсли (тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.Материал)
				или (тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.Полуфабрикат) Тогда
			СуммаМатЗатратПоПродукции = СуммаМатЗатратПоПродукции + тбНормы.Сумма;
		ИначеЕсли (тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.СтатьяКалькуляции) Тогда
			СуммаНеМатЗатратПоПродукции = СуммаНеМатЗатратПоПродукции + тбНормы.Сумма;
		КонецЕсли;
	КонецЦикла;

	// Определяем себестоимость заданного количества продукции
	Если Константа.СпособПриходованияПродукции = Перечисление.СпособыПриходованияПродукции.ПоПлановойСебестоимости  Тогда
		//Плановую себестоимость берем из справочинка ТМЦ, УчетнаяЦена
		СебестоимостьПродукции = ТМЦ.УчетнаяЦена.Получить(ДатаДок) * Кво;
	ИначеЕсли Константа.СпособПриходованияПродукции = Перечисление.СпособыПриходованияПродукции.ПоНормативнойСебестоимости  Тогда
		//Считаем себестоимость как общую сумму затрат по нормативам
		СебестоимостьПродукции = СуммаМатЗатратПоПродукции + СуммаНеМатЗатратПоПродукции - СуммаВозврОтходовПоПродукции;
	ИначеЕсли Константа.СпособПриходованияПродукции = Перечисление.СпособыПриходованияПродукции.ПоСебестоимостиФактическогоСостава  Тогда
		//Считаем себестоимость как фактические материальные затраты + плановые прочие затраты по нормативам
		СебестоимостьПродукции = СуммаНеМатЗатратПоПродукции - СуммаВозврОтходовПоПродукции;
	ИначеЕсли Константа.СпособПриходованияПродукции = Перечисление.СпособыПриходованияПродукции.БезСебестоимости Тогда
		СебестоимостьПродукции = 0;
	КонецЕсли;
	//Движения по ВЫПУСКУ ПРОДУКЦИИ
	ДвижениеВыпускПродукции(Кво,0,СебестоимостьПродукции,0,Партия);
КонецПроцедуры //ДвиженияСтрокаПроизводство

// ===============================
Функция ДвиженияПартии() 
//Перем фОшибка;	// возвращаемое значение
//Перем ИтогСуммаСНДС, ИтогНДС;	// базы распределения сумм
//	Если ВидТорговли = Перечисление.ВидыТорговли.Давал Тогда
//		Возврат 1;
//	КонецЕсли;
//
//	фОшибка = 1;              
//	
//	глКомментарий("Выполняются движения партий ТМЦ",2);
//	Предпочтение = 0;
//	тбПартии = 0;
//	тбОстатки = 0;
//	ИнвСтратегияПредпочтения = 0;
//	ИнвСтратегияПродажи = 0;
//	глСформироватьТаблицуПартий(Контекст, ВремРег,Фирма, спОтбор, Предпочтение, 
//		тбПартии, тбОстатки, ИнвСтратегияПредпочтения, ИнвСтратегияПродажи);
//	
//	// инициализация алгоритмов корректого распределения
//	глОчиститьКлючОкр("Взаим");
//	глОчиститьКлючОкр("НДС");
//	глОчиститьКлючОкр("НДСперв");
//	// нужно изменить стоимоть ТМЦ в соответствии курсом аванса
//	кАванса = ?(ПустоеЗначение(Итог("СуммаБезНДС"))=1,0,АвансВал/Итог("СуммаБезНДС")); // часть аванса в себестоимости
//	Если кАванса<>0 Тогда
//	    КурсАванса = ?(ПустоеЗначение(АвансВал*глКратностьДляВалюты(Валюта,ДатаДок))=1,0,АвансОсн/АвансВал*глКратностьДляВалюты(Валюта,ДатаДок));
//	Иначе
//		КурсАванса = глКурсДляВалюты(Валюта,ДатаДок);
//	КонецЕсли;                           
//	// расчитаем базы распределения 
//	глОпределитьБазыРаспределения(Контекст, ИтогСуммаСНДС, ИтогНДС);
//	ИтогСуммаСНДС		= глПересчет(ИтогСуммаСНДС	* кАванса,		Валюта,КурсАванса,	Гривня,ДатаДок) 
//						+ глПересчет(ИтогСуммаСНДС	* (1 - кАванса),Валюта,ДатаДок,		Гривня,ДатаДок);
//	ИтогНДС 			= глПересчет(ИтогНДС		* кАванса,		Валюта,КурсАванса,	Гривня,ДатаДок) 
//						+ глПересчет(ИтогНДС		* (1 - кАванса),Валюта,ДатаДок,		Гривня,ДатаДок);
//	НДСпоВзаиморасчетам	= НДСПервоеСобытие + НДСВтороеСобытие;
//	ВыбратьСтроки();
//	Пока ПолучитьСтроку()=1 Цикл
//		Признак = ?(ВУП = Да, "В", "");
//		МетодРасчетаСебестоимости = глПолучитьМетодРасчетаСебестоимости(ТМЦ,ДатаДок);
//		ВсегоСписать			  = Кво * Коэффициент;
//		ОсталосьСписать			  = ВсегоСписать;
//		// Сумму по строке пересчитываем по курсу документа с учетом аванса в гривни 
//		ПострСуммаСНДС	= глПересчет(СуммаСНДС 	* кАванса,		Валюта,КурсАванса,	Гривня,ДатаДок) 
//						+ глПересчет(СуммаСНДС	* (1 - кАванса),Валюта,ДатаДок,		Гривня,ДатаДок);
//		ПострНДС		= глПересчет(НДС 		* кАванса,		Валюта,КурсАванса,	Гривня,ДатаДок) 
//						+ глПересчет(НДС		* (1 - кАванса),Валюта,ДатаДок,		Гривня,ДатаДок);
//		Если (ВидТары <> Перечисление.ВидыТары.Залоговая) Или (ТМЦ.ВидТМЦ <> Перечисление.ВидыТМЦ.Тара) Тогда
//			// не залоговая тара, округляем с учетом накопленных погрешностей округления
//			ПострСуммаСНДС	= глОкрКорр("Взаим", ?(ИтогСуммаСНДС = 0, 0, ВзаиморасчетыГрн * ПострСуммаСНДС / ИтогСуммаСНДС),2);
//			ПострНДС		= глОкрКорр("НДС", ?(ИтогНДС = 0, 0, НДСпоВзаиморасчетам * ПострНДС / ИтогНДС),2);
//			ПострНДСПерв	= глОкрКорр("НДСперв", ?(НДСпоВзаиморасчетам = 0, 0, НДСПервоеСобытие * ПострНДС / НДСпоВзаиморасчетам),2);
//		Иначе
//			ПострНДСПерв	= 0;
//		КонецЕсли;
//		ПострСуммаБезНДС 	= ПострСуммаСНДС - ПострНДС;
//		ОсталосьСуммаСНДС	= ПострСуммаСНДС;
//		ОсталосьСуммаБезНДС	= ПострСуммаБезНДС;
//		// Формирование проводок по реализации
//		// вторая часть сложной проводки по доходам
//		Если ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Продукция Тогда
//			ВидТМЦ = "продукция";
//			СчетДоходов = "70.1"
//		ИначеЕсли ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Товар Тогда
//			ВидТМЦ = "запасы";
//			СчетДоходов = "70.2"
//		ИначеЕсли ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
//			ВидТМЦ = "услуги";
//			СчетДоходов = "70.3"
//		Иначе
//			ВидТМЦ = "другие оборотные активы";
//			СчетДоходов = "71.2"
//		КонецЕсли;
//		// сразу сделаем проводки по доходам, при формировании они сами свернуться
//		Если (ВидТары <> Перечисление.ВидыТары.Залоговая) Или (ТМЦ.ВидТМЦ <> Перечисление.ВидыТМЦ.Тара) Тогда
//			// залоговая тара не проходит по взаиморасчетам
//			глПроводка(Контекст,,СчетДоходов,ПострСуммаСНДС,"Реализация: "+ВидТМЦ,, ,,,
//			ТМЦ.ВидДеятельности,Подразделение,МестоХранения, ,,"НК",1,"Реализация");
//		КонецЕсли;
//		Если ВидТорговли = Перечисление.ВидыТорговли.Нал Тогда
//			// одновременно и отгрузка и оплата, налоговые обязательства показываем на всю сумму
//		    глПроводка(Контекст,СчетДоходов,,ПострНДС,"НДС: оплата наличными:",, ТМЦ.ВидДеятельности,Подразделение,МестоХранения,
//			,,, ,,"НК",1,"НДС первого события");
//		Иначе       
//			// в случае бартера и предоплаты НДС состоит из части по первому событию и остального, 			
//			// проводка для первого события
//			глПроводка(Контекст,СчетДоходов,,ПострНДСПерв,"НДС: "+СокрЛП(ВидТМЦ)+": первое событие",, ТМЦ.ВидДеятельности,Подразделение,МестоХранения,
//				,,, ,,"НК",1,"НДС первого события");                  
//			// проводка для второго события
//			глПроводка(Контекст,СчетДоходов,,ПострНДС - ПострНДСПерв,"НДС: "+СокрЛП(ВидТМЦ)+": второе событие",, ТМЦ.ВидДеятельности,Подразделение,МестоХранения,
//			,,, ,,"НК",1,"НДС второго события");
//		Конецесли;		   
//		// проводки и движения по услугам отдельно
//		Если ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
//			тбНормы = 0; СуммаУчБезНДС = 0;
//			// получаем нормы
//			Если глПолучитьНормы(ТМЦ,Ед,Кво,ДатаДок,ПоЗаказу,тбНормы) = 1 Тогда 
//				// калькулируемая услуга
//				ДвиженияСтрокаПроизводство(тбНормы,СуммаУчБезНДС);
//				Доход = ОсталосьСуммаБезНДС - СуммаУчБезНДС;
//				СчетУч = СчетПоКоду("231");
//			Иначе
//				Доход = 0;
//				СчетУч = ТМЦ.Счет;
//			КонецЕсли;
//			ПроводкиТовар(ТМЦ,СчетУч,0,ОсталосьСписать,СуммаУчБезНДС,ТекущийДокумент(),ТекущийДокумент());	
//			глПровестиПартию(Контекст, 0, 0, Фирма, ТМЦ, СчетУч,
//				0,0, ТекущийДокумент(), ТекущийДокумент(), ОсталосьСписать, ОсталосьСуммаБезНДС, 
//				0, ПродажаУслуги, 1, ОсталосьСуммаСНДС,Доход,,Признак);
//			Продолжить;
//		КонецЕсли;
//		НС=0;   
//		// находим в тбПартии первую партию, соответсв. текущей строке документа
//		Если тбПартии.НайтиЗначение(НомерСтроки,НС,"НомерСтрокиДокумента")=1 Тогда
//			тбПартии.ПолучитьСтрокуПоНомеру(НС);
//		Иначе
//			// если такой строки нет, переходим на первую строку таблицы
//			тбПартии.ВыбратьСтроки();
//			тбПартии.ПолучитьСтроку();
//		КонецЕсли;
//		// обрабатываем все строки тбПартии с соответсв. номером строки документа
//		Пока тбПартии.НомерСтрокиДокумента = НомерСтроки Цикл
//			// берем необходимые параметры партии из тбПартии
//			Если тбПартии.ТМЦ.Счет = тбПартии.Счет Тогда
//				МестоХраненияП = тбПартии.МестоХранения;
//				ПоставщикП = тбПартии.Поставщик;
//				ПоставкаП = тбПартии.Поставка;
//				ПрихДокументП = тбПартии.ПрихДокумент;
//				СчетП = тбПартии.Счет;
//				// проверяем соответствие партиии заказу
//				Если глПартияСоответствуетЗаказу(ПрихДокументП,Договор,1)=0 Тогда
//					Если тбПартии.ПолучитьСтроку()=0 Тогда
//						Прервать;
//					КонецЕсли;
//					Продолжить;
//				КонецЕсли;
//				НС =0;                               
//				// находим остаток текущей партии в тбОстатки по ключу
//				Если тбОстатки.НайтиЗначение(глПолучитьКлючТбОстатков(ПрихДокументП,ПоставкаП,ТМЦ.Код,СчетП),НС,"Ключ")=1 Тогда
//					тбОстатки.ПолучитьСтрокуПоНомеру(НС);
//					ОстатокТовара = тбОстатки.ОстатокТовара;
//					// если остаток 0, то с текущей партии не списываем
//					Если ОстатокТовара = 0 Тогда
//						Если тбПартии.ПолучитьСтроку()=0 Тогда
//							Прервать;
//						КонецЕсли;
//						Продолжить;
//					КонецЕсли;
//					// сформируем движения по регистрам и проводки
//					Если СформироватьДвиженияПартии(тбОстатки,тбПартии,ОсталосьСписать,ВсегоСписать,ПострСуммаСНДС
//					,ПострСуммаБезНДС,ОсталосьСуммаСНДС,ОсталосьСуммаБезНДС,ПоставщикП,ПоставкаП
//					,ПрихДокументП, Признак) = 0 Тогда
//						фОшибка = 0;
//					КонецЕсли;	
//				КонецЕсли;
//			КонецЕсли;
//			Если ОсталосьСписать = 0 Тогда
//				Прервать;
//			КонецЕсли;   
//			Если тбПартии.ПолучитьСтроку()=0 Тогда
//				Прервать;
//			КонецЕсли;
//		КонецЦикла; 
//		Если ОсталосьСписать > 0 Тогда
//			глСообщитьОбОтсутствииПартии(0, Фирма, ТМЦ, НомерСтроки);
//			Если Константа.РазрешитьОтрицОстатки = Нет Тогда
//				фОшибка = 0;
//			Иначе				
//				глСообщитьОСозданииПартии(ТМЦ, ОсталосьСписать);
//				ПрихДокументП = ?(МетодРасчетаСебестоимости<>Перечисление.МетодыРасчетаСебестоимости.ПоСреднему
//				,ТекущийДокумент(),0);           
//				// сформируем движения по регистрам и проводки
//				Если СформироватьДвиженияПартии(,,ОсталосьСписать,ВсегоСписать,ПострСуммаСНДС
//				,ПострСуммаБезНДС,ОсталосьСуммаСНДС,ОсталосьСуммаБезНДС,,
//				,ПрихДокументП, Признак) = 0 Тогда
//					фОшибка = 0;
//				КонецЕсли;	
//			КонецЕсли; 
//		КонецЕсли; // ОсталосьСписать > 0
//	КонецЦикла; // строки документа
//	Возврат фОшибка;
КонецФункции
                                 
// ===============================
Процедура ДвиженияРезерв();
	//Если ДокументОснование.Вид()="Счет" Тогда
	//	глКомментарий("Выполняется снятие резерва на продаваемые ТМЦ",2);
	//	
	//	ВыбратьСтроки();
	//	Пока ПолучитьСтроку()=1 Цикл
	//		НС = 0;
	//		ТекущийРезерв = ВремРег.Резервы.Остаток(Фирма,ТМЦ,ДокументОснование,"Резерв");
	//		СписываемыйРезерв = Мин(ТекущийРезерв,Кво*Коэффициент);
	//		Если СписываемыйРезерв > 0 Тогда
	//			Регистр.Резервы.ПривязыватьСтроку(НомерСтроки);
	//			Регистр.Резервы.Фирма=Фирма;
	//			Регистр.Резервы.ТМЦ=ТМЦ;
	//			Регистр.Резервы.ДокументРезерва=ДокументОснование;
	//			Регистр.Резервы.Резерв=СписываемыйРезерв;
	//			Регистр.Резервы.ДвижениеРасходВыполнить();
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
КонецПроцедуры        

// ===============================
Процедура ДвиженияОстатки()
	        
//	глКомментарий("Выполняются движения остатков ТМЦ",2);
//
//	// определим документ по которому зарезервированы ТМЦ
//	Если ПустоеЗначение(ДокументОснование) = 0 Тогда
//		Если ДокументОснование.Вид() = "Счет" Тогда
//			РезервПоСчету = ДокументОснование;
//		КонецЕсли;	
//	КонецЕсли;
//	ВыбратьСтроки();
//	Пока ПолучитьСтроку()=1 Цикл       
//		Если ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
//			Продолжить;
//		КонецЕсли;
//		ВсегоСписать = Кво * Коэффициент;
//		// движения по регистру Остатки
//		глПровестиОстатки(Контекст, ВремРег, Фирма, МестоХранения, ТМЦ, ВсегоСписать, 0, 0,,, 1, РезервПоСчету);
//	КонецЦикла;
//	
КонецПроцедуры

// ===============================
// Назначение:
//		Отражает движения документа в регистрах
// ===============================
Функция ДвиженияВзаиморасчеты()
//	// взаиморасчеты
//	ФлагОтгрузки = 1;
//	ЗнакОплаты = -1; 
//
//	тбСуммыПогашения = глПолучитьСуммыДляПогашения(Контекст, Фирма, Валюта);
//	тбДолги 		 = глПолучитьИтогиВзаиморасчетов(Контекст,ВремРег, Фирма, ?(ВидТорговли = Перечисление.ВидыТорговли.Бартер,-ЗнакОплаты,ЗнакОплаты), Контрагент, ПервыйДок, Валюта);
//	// Проверяем возможность кредита 
//	Если (ВидТорговли = Перечисление.ВидыТорговли.Кредит ) 
//		И (Константа.РазрешитьПревышениеКредита = Нет) Тогда
//		глКомментарий("Проверяется возможность кредита",2);
//		// получим таблицу долгов для определения суммы задолженности
//		тбДолгиКред = глПолучитьИтогиВзаиморасчетов(Контекст, ВремРег, Фирма,ЗнакОплаты, Контрагент, 0);
//		ДолгКонтрагента = 0;
//		Просрочено = 0;
//		ПросроченныйДолг = 0;
//		тбДолгиКред.ВыбратьСтроки();
//		Пока тбДолгиКред.ПолучитьСтроку()=1 Цикл
//			Если тбДолгиКред.ДолгОсн <= 0 Тогда
//				Продолжить;
//			КонецЕсли;
//			текКредДок = тбДолгиКред.КредДокумент;
//			ВидДокКред = текКредДок.Вид();
//			Если глЕстьРеквизитШапки("ВидТорговли",ВидДокКред)=Да Тогда              
//				// учитываем только документы по торговому кредиту
//				Если текКредДок.ВидТорговли <> Перечисление.ВидыТорговли.Кредит Тогда
//					Продолжить;
//				КонецЕсли;
//			КонецЕсли;
//			ДолгКонтрагента = ДолгКонтрагента + глПересчет(тбДолгиКред.ДолгОсн,Гривня,ДатаДок,Контрагент.ВалютаКредита,ДатаДок,);
//			// расчитаем дату оплаты долга по ткущему документу из таблицы долгов
//			Если глЕстьРеквизитШапки("ДатаОплаты",ВидДокКред)=Да Тогда
//			    ДатаОплаты = текКредДок.ДатаОплаты;
//				Если ПустоеЗначение(ДатаОплаты)=1 Тогда
//				    ДатаОплаты = текКредДок.ДатаДок;
//				КонецЕсли;
//			Иначе 
//				ДатаОплаты = текКредДок.ДатаДок + Контрагент.Глубина.Получить(текКредДок.ДатаДок);
//			КонецЕсли;                                 
//			// рассчитаем на сколько просрочен долг
//			Если ДатаДок > ДатаОплаты Тогда
//				ПросроченныйДолг = ПросроченныйДолг + тбДолгиКред.ДолгОсн;
//				Если Просрочено<(ДатаДок-ДатаОплаты) Тогда
//				    Просрочено = ДатаДок-ДатаОплаты;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		ДолгКонтрагента = ДолгКонтрагента + глПересчет(Итог("СуммаСНДС"),Валюта,ДатаДок,Контрагент.ВалютаКредита,ДатаДок,);
//		СуммаКредита = Контрагент.СуммаКредита.Получить(ДатаДок);
//		глКомментарий("Долг контрагента составляет "+глФРМ(ДолгКонтрагента,Контрагент.ВалютаКредита,1)+", сумма кредита "+ глФРМ(СуммаКредита,Контрагент.ВалютаКредита,1) +".",3);
//		Если ПустоеЗначение(СуммаКредита) = 0 Тогда 
//			Если ДолгКонтрагента > СуммаКредита Тогда
//				глКомментарий(Шаблон("Сумма накладной вместе с текущим долгом клиента ([глФРМ(ДолгКонтрагента,Контрагент.ВалютаКредита,1)]) превышает сумму кредита ([глФРМ(СуммаКредита,Контрагент.ВалютаКредита,1)]). "),0,,"!");
//				Возврат 0;
//			КонецЕсли;
//		КонецЕсли;
//		Если Просрочено>0 Тогда
//		    глКомментарий(Шаблон("Просрочена оплата [глФРМ(ПросроченныйДолг,Гривня,1)] на [Просрочено] дней."),0,,"!");
//			Возврат 0;
//		КонецЕсли;
//		глКомментарий("Отпуск ТМЦ в кредит разрешен",3);
//	КонецЕсли;		       
//	глПровестиПоВзаиморасчетам(Контекст, ФлагОтгрузки, ЗнакОплаты, 0, Фирма, тбДолги, тбСуммыПогашения, Валюта,Контрагент, ПервыйДок, ВидТорговли, ДокументОснование);
//	НДСПервоеСобытие = 0;
//	НДСВтороеСобытие = 0;     
//	АвансВал = 0; // в валюте
//	АвансОсн = 0; // в основной валюте                      
//	ВзаиморасчетыГрн = 0;
//	РегПоставщики=ВремРег.ВзаиморасчетыПоставщиков;	
//	РегПокупатели=ВремРег.ВзаиморасчетыПокупателей;	
//	РегПокупатели.ВыбратьДвиженияДокумента(ТекущийДокумент());
//	Пока РегПокупатели.ПолучитьДвижение() = 1 Цикл
//		Если (Константа.ПроводкиПоКассеТолькоОрдерами = Нет)
//		И (ВидТорговли = Перечисление.ВидыТорговли.Нал) 
//		И (РегПокупатели.Расход = 1) Тогда
//			// При оплате наличными формируются 2 движения, надо взять только одно. Ввозьмем приход.
//			Продолжить;
//		КонецЕсли;
//		Если (Найти(АвансоваяОтгрузка+ПостОтгрузка+ПервоеСобытиеБартерРасход+ВтороеСобытиеБартерРасход+ПостОплата,РегПокупатели.КодОперации) = 0) Тогда
//			// для формирования проводок по взаиморасчетам нам нужны только эти коды операций
//			Продолжить;	
//		КонецЕсли;      
//		// проводки по взаиморасчетам
//		Если Валюта = Гривня Тогда
//			глПроводка(Контекст,СчетКонтрагента,,РегПокупатели.Долг,"Реализация",, Контрагент,ПервыйДок,,
//			,,, ,,"НК",1,"Реализация",1);					
//		Иначе	
//			глПроводка(Контекст,СчетКонтрагента,,РегПокупатели.ДолгОсн,"Реализация",, Контрагент,ПервыйДок,,
//			,,, РегПокупатели.Валюта,РегПокупатели.Долг,"НК",1,"Реализация",1);					
//		КонецЕсли;	  
//		ВзаиморасчетыГрн = ВзаиморасчетыГрн + РегПокупатели.ДолгОсн;
//		// погашение аванса
//		Если (РегПокупатели.КодОперации = ПостОтгрузка) И (глВыделятьЛиАвансыПоСчету(СчетКонтрагента) = 1) Тогда
//			Если Валюта=Гривня Тогда
//				глПроводка(Контекст,"6811",СчетКонтрагента,РегПокупатели.Долг,"Реализация: погашен авансовый платеж",, Контрагент,ПервыйДок,,
//				Контрагент,ПервыйДок,, ,,"НК",1,0);
//			Иначе
//				глПроводка(Контекст,"6812",СчетКонтрагента,РегПокупатели.ДолгОсн,"Реализация за валюту: погашен авансовый платеж",, Контрагент,ПервыйДок,,
//				Контрагент,ПервыйДок,, РегПокупатели.Валюта,РегПокупатели.Долг,"НК",1,0);
//			КонецЕсли;
//			// погашение аванса покупателя
//			АвансВал = АвансВал + РегПокупатели.Долг;
//			АвансОсн = АвансОсн + РегПокупатели.ДолгОсн;
//		КонецЕсли;
//		// проводки по НДС
//        Если глДелатьПроводкиПоНалогам(РегПокупатели,"НДС") = 1 Тогда
//			Если (РегПокупатели.КодОперации = АвансоваяОтгрузка) Или (РегПокупатели.КодОперации = ПервоеСобытиеБартерРасход) Тогда     					
//				// для первого события
//				глПроводка(Контекст,,"6415",РегПокупатели.НДС,"НДС: первое событие",, ,,,
//				ВидНДС,,, ,,"НК",1,"НДС первого события",1);                                                     
//				НДСПервоеСобытие = НДСПервоеСобытие + РегПокупатели.НДС;
//			ИначеЕсли РегПокупатели.КодОперации = ВтороеСобытиеБартерРасход Тогда     					
//				// для второго события
//				глПроводка(Контекст,,"6415",РегПокупатели.НДС,"НДС: второе событие",, ,,,
//				ВидНДС,,, ,,"НК",1,"НДС второго события",1);
//				// посчитаем НДС предварительной оплаты
//				НДСВтороеСобытие = НДСВтороеСобытие + РегПокупатели.НДС;
//			ИначеЕсли РегПокупатели.КодОперации = ПостОтгрузка Тогда     					
//				// для второго события
//				глПроводка(Контекст,,"643",РегПокупатели.НДС,"НДС: второе событие",, ,,,
//				Контрагент,ПервыйДок,, ,,"НК",1,"НДС второго события",1);
//				// посчитаем НДС предварительной оплаты
//				НДСВтороеСобытие = НДСВтороеСобытие + РегПокупатели.НДС;
//			КонецЕсли;                                                                        
//		КонецЕсли;                                                                        
//		// сформируем проводки по ВД/ВР
//		Если глДелатьПроводкиПоНалогам(РегПокупатели,"ВД/ВР") = 1 Тогда
//			Если СубконтоВалДох <> Константа.НиДоходНиРасход Тогда
//				глПроводка(Контекст,"ВД","ВД",РегПокупатели.СуммаСНДС_НУ-РегПокупатели.НДС,"Валовые доходы",, Контрагент,ПервыйДок,СубконтоВалДох,
//				Контрагент,ПервыйДок,СубконтоВалДох, ,,"НК",1,0);
//			КонецЕсли;
//		КонецЕсли;
//		// дополнительные проводки для отдельных видов торговли
//		Если ВидТорговли = Перечисление.ВидыТорговли.Нал Тогда
//			// сформируме проводки по кассе, если они нужны
//			Если Константа.ПроводкиПоКассеТолькоОрдерами = Нет Тогда
//				глПроводка(Контекст,Касса.СчетУчета,СчетКонтрагента,РегПокупатели.Долг,"Оплата наличными",, Касса,,,
//				Контрагент,ПервыйДок,, ,,"НК",1,0);
//			КонецЕсли;
//		ИначеЕсли ВидТорговли = Перечисление.ВидыТорговли.Бартер Тогда
//			Если РегПокупатели.КодОперации = ПервоеСобытиеБартерРасход Тогда     					
//				// первое событие по бартеру показываем как аванс в счет встречной поставки
//				Если глВыделятьЛиАвансыПоСчету(СчетКонтрагента) = 1 Тогда
//					Сч = ?(Валюта=Гривня, "3711", "3712");
//				Иначе
//					Сч = ?(Валюта=Гривня, "631", "632");
//				КонецЕсли;        
//				глПроводка(Контекст,Сч,СчетКонтрагента,РегПокупатели.Долг,"Бартер: первое событие",, Контрагент,ПервыйДок,,
//				Контрагент,ПервыйДок,, ,,"НК",1,0);
//			КонецЕсли;	
//		КонецЕсли;
//	КонецЦикла;
//	
//	// для бартера просмотрим другой регистр		
//	Если ВидТорговли = Перечисление.ВидыТорговли.Бартер Тогда
//		РегПоставщики.ВыбратьДвиженияДокумента(ТекущийДокумент());
//		Пока РегПоставщики.ПолучитьДвижение() = 1 Цикл
//			Если Найти(ПервоеСобытиеБартерРасход+ВтороеСобытиеБартерРасход,РегПоставщики.КодОперации) = 0 Тогда
//				// для формирования проводок по взаиморасчетам нам нужны только эти коды операций
//				Продолжить;	
//			КонецЕсли;      
//			// первая часть сложной проводки по доходам
//			Если Валюта = Гривня Тогда
//				глПроводка(Контекст,СчетКонтрагента,,РегПоставщики.Долг,"Реализация",, Контрагент,ПервыйДок,,
//				,,, ,,"НК",1,"Реализация",1);					
//			Иначе	
//				глПроводка(Контекст,СчетКонтрагента,,РегПоставщики.ДолгОсн,"Реализация",, Контрагент,ПервыйДок,,
//				,,, РегПоставщики.Валюта,РегПоставщики.Долг,"НК",1,"Реализация",1);					
//			КонецЕсли;	     			
//			ВзаиморасчетыГрн = ВзаиморасчетыГрн + РегПоставщики.ДолгОсн;
//			Если РегПоставщики.КодОперации = ПервоеСобытиеБартерРасход Тогда     					
//			ИначеЕсли РегПоставщики.КодОперации = ВтороеСобытиеБартерРасход Тогда			                    
//				// сформируем проводки по НДС
//				Если глДелатьПроводкиПоНалогам(РегПоставщики,"НДС") = 1 Тогда
//					глПроводка(Контекст,СчетНДС,"64.4.1",РегПоставщики.НДС,"НДС: второе событие",, СубконтоНДС1,СубконтоНДС2,,
//					Контрагент,ПервыйДок,, ,,"НК");
//					// для второго события
//					глПроводка(Контекст,,"64.3",РегПоставщики.НДС,"НДС: второе событие",, ,,,
//					Контрагент,ПервыйДок,, ,,"НК",1,"НДС второго события",1);
//					// посчитаем НДС предварительной оплаты
//					НДСВтороеСобытие = НДСВтороеСобытие + РегПоставщики.НДС;
//				КонецЕсли;	       
//				// закрываем долг по бартеру
//				Если глВыделятьЛиАвансыПоСчету(СчетКонтрагента) = 1 Тогда
//					Сч = ?(Валюта=Гривня, "6811", "6812");
//					глПроводка(Контекст,Сч,СчетКонтрагента,РегПоставщики.Долг,"Бартер: второе событие: погашение аванса",, Контрагент,ПервыйДок,,
//					Контрагент,ПервыйДок,, ,,"НК",1,0);
//				КонецЕсли;
//				// сформируем проводки по ВД/ВР для бартера, если суммы не относятся только к НДС
//				Если глДелатьПроводкиПоНалогам(РегПоставщики,"ВД/ВР") = 1 Тогда
//					Если Константа.БартерВалРасх <> Константа.НиДоходНиРасход Тогда
//						глПроводка(Контекст,"ВР","ВР",РегПоставщики.СуммаСНДС_НУ-РегПоставщики.НДС,"Бартер: валовые издержки",, Контрагент,ПервыйДок,Константа.БартерВалРасх,
//						Контрагент,ПервыйДок,Константа.БартерВалРасх, ,,"НК",1,0);
//					Конецесли;
//				Конецесли;				
//			КонецЕсли;	
//		КонецЦикла;
//	КонецЕсли;
//	Возврат 1;
КонецФункции //ДвиженияРегистров

// ===============================
Процедура ОбработкаПроведения(ЧастичноПровести = 0)
	глКомментарий("Начало",2,Контекст);
	Если ПроверкаШапки()=0 Тогда
	    глНеПроводить(Контекст);
	    Возврат;
	КонецЕсли;
//	РассчитатьШапку(ЧастичноПровести);
//	ВремРег.Актуальность(1);	
////	ДвиженияОстатки();      
//	ВремРег.Актуальность(0);
//	Если ЧастичноПровести = 1 Тогда
//		Если РежимПроведения<>1 Тогда
//			РежимПроведения=1;
//		КонецЕсли;
//		Возврат;
//	КонецЕсли;
//	Если ВидТорговли <> Перечисление.ВидыТорговли.Давал Тогда
//		Если ДвиженияВзаиморасчеты() = 0 Тогда	
//			глТбОперация.УдалитьСтроки();
//		    глНеПроводить(Контекст);
//		    Возврат;
//		КонецЕсли;
//	Иначе
//		АвансВал = 0;
//	КонецЕсли;
//	Если ДвиженияПартии() = 0 Тогда
//		глТбОперация.УдалитьСтроки();
//	    глНеПроводить(Контекст);
//		Возврат;
//	КонецЕсли;	          
//	ДвиженияРезерв();
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ПроверкаСтроки()=0 Тогда
			глТбОперация.УдалитьСтроки();
		    глНеПроводить(Контекст);
		    Возврат;                                                                  
			
		КонецЕсли;
		
		Регистр.План.Контрагент = Контрагент;
		Регистр.План.ТМЦ = ТМЦ;
		Регистр.План.Кол = Кво*Коэффициент;
		Регистр.План.ДвижениеПриходВыполнить();

		Если ВидТорговли = Перечисление.ВидыТорговли.Давал Тогда		
			КодОперации = ПередачаВДавальческуюПереработку;
		//	глПровестиПартию(Контекст, 0, 0, Фирма, ТМЦ, ТМЦ.Счет, МестоХранения, "", 
		//		"", "", Кво*Коэффициент, СуммаБезНДС, 0, КодОперации, 0, 0, 0, , "");

			//Проведем по оборотам
			//Регистр.Обороты.ПривязыватьСтроку(НомерСтроки);
			//Регистр.Обороты.Фирма = Фирма;
			//Регистр.Обороты.Счет = "2093";
			//Регистр.Обороты.ТМЦ = ТМЦ;
			//Регистр.Обороты.Поставщик = "";
			//Регистр.Обороты.Покупатель = Контрагент;
			//Регистр.Обороты.ВидДеятельности = ТМЦ.ВидДеятельности;
			//Регистр.Обороты.КодОперации = КодОперации;
			//Регистр.Обороты.Партия		 = "";
			//Регистр.Обороты.Признак	 = "";
			//Регистр.Обороты.ПриходКво = - Кво*Коэффициент;
			//Регистр.Обороты.ПриходСум = - СуммаБезНДС;
			//Регистр.Обороты.РасходКво = 0;
			//Регистр.Обороты.РасходСум = 0;
		    //Регистр.Обороты.ДвижениеВыполнить();			
			//глПровестиПартию(Контекст, 1, 0, Фирма, ТМЦ, СчетПоКоду("2093"), Контрагент, "", 
			//	"", "", Кво*Коэффициент, СуммаБезНДС, 0, КодОперации, 0, 0, 0, , "");
			//глПроводка(Контекст,"2093",ТМЦ.Счет,СуммаБезНДС,"Себестоимость",Кво*Коэффициент,Контрагент,ТМЦ,,
			//	МестоХранения,ТМЦ,"", ,,"НК",1,0);				
				
		КонецЕсли;			
	КонецЦикла;	
	//РежимПроведения=0;
	//глЗаписатьПроводкиВОперацию(Контекст);
	//Операция.СуммаОперации = Итог("СуммаСНДС");
	//Операция.Содержание = Примечание;
	//Операция.Записать();
	глКомментарий("Окончание",2,Контекст);
КонецПроцедуры

// ===============================
Процедура ОбработкаУдаленияПроведения()	
	РежимПроведения=0;
КонецПроцедуры
