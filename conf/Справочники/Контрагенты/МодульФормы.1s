Перем тПолнНаименование, тЮридическийАдрес;

Процедура ЗаполнитьСписокФирм() Далее //--- УМК Сандомирский В.Ю, (09.01.15)

// ===============================
Процедура ЗаполнитьФайлы()
	Перем КомлектующиеНабора;
	Перем Индекс;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	ФЛ = СоздатьОбъект("Справочник.ФайлыКонтрагентов");
	ФЛ.ИспользоватьВладельца(ТекущийЭлемент());
	ФЛ.ВыбратьЭлементы();
	Индекс = 0; 
	Файлы.УдалитьСтроки();
	Пока ФЛ.ПолучитьЭлемент()=1 Цикл
		Если ФЛ.ПометкаУдаления()=1 Тогда
		    Продолжить;
		КонецЕсли;

	    Индекс = Индекс + 1;
		Файлы.НоваяСтрока(Индекс);
		Файлы.Ссылка = ФЛ.ТекущийЭлемент();
		Файлы.Категория = ФЛ.Категория;
		Файлы.Описание = ФЛ.Наименование;
	КонецЦикла;
	
	Файлы.Сортировать("Категория,Описание");
КонецПроцедуры	// ЗаполнитьСписокКомплектующих      

// ===============================
Процедура ПриВводеАдреса(ВидАдр)
	ТекАдрес = ПолучитьАтрибут(ВидАдр);
	ОткрытьФормуМодально("Обработка.ВводАдреса",ТекАдрес);
	УстановитьАтрибут(ВидАдр,ТекАдрес);
	Если (ВидАдр = "ЮридическийАдрес") и (ПустоеЗначение(СокрЛП(ФизическийАдрес)) = 1) Тогда
		ФизическийАдрес = ЮридическийАдрес;
	ИначеЕсли (ВидАдр = "ФизическийАдрес") и  (ПустоеЗначение(СокрЛП(ЮридическийАдрес)) = 1) Тогда
		ЮридическийАдрес = ФизическийАдрес;
	КонецЕсли;	
КонецПроцедуры

// ===============================//--- УМК Сандомирский В.Ю, смежные ЕДРПОУ (28.05.14)
Процедура ЗаполнитьСписокЕДРПОУ()
	Перем ЕДРПОУКонтрагента;
	Перем СтроковоеПредставлениеЕДРПОУ;
	
	ЕДРПОУКонтрагента = СоздатьОбъект("Справочник.КодыЕДРПОУ");
	ЕДРПОУКонтрагента.ИспользоватьВладельца(ТекущийЭлемент());
	ЕДРПОУКонтрагента.ВыбратьЭлементы();
	Пока ЕДРПОУКонтрагента.ПолучитьЭлемент()=1 Цикл
	    Если ЕДРПОУКонтрагента.ПометкаУдаления()=1 Тогда
	        // помеченные на удаление не добавляем
			Продолжить;
		КонецЕсли;
		СтроковоеПредставлениеЕДРПОУ = СокрЛП(ЕДРПОУКонтрагента.Наименование);
		СписокЕДРПОУ.ДобавитьЗначение(ЕДРПОУКонтрагента.ТекущийЭлемент(),СтроковоеПредставлениеЕДРПОУ);
	КонецЦикла;               
	СписокЕДРПОУ.СортироватьПоПредставлению();
	Если СписокЕДРПОУ.РазмерСписка() = 0 Тогда
		Форма.кИзменитьЕДРПОУ.Доступность(0);
		Форма.кУдалитьЕДРПОУ.Доступность(0);
	КонецЕсли;
КонецПроцедуры	// ЗаполнитьСписокЕДРПОУ

// ===============================
Процедура ЗаполнитьСписокРасчетныхСчетов()
	Перем СчетаКонтрагента;
	Перем СтроковоеПредставлениеСчета;
	
	СчетаКонтрагента = СоздатьОбъект("Справочник.ДенежныеСчета");
	СчетаКонтрагента.ИспользоватьВладельца(ТекущийЭлемент());
	СчетаКонтрагента.ВыбратьЭлементы();
	Пока СчетаКонтрагента.ПолучитьЭлемент()=1 Цикл
	    Если СчетаКонтрагента.ПометкаУдаления()=1 Тогда
	        // помеченные на удаление не добавляем
			Продолжить;
		КонецЕсли;
		СтроковоеПредставлениеСчета = "Р/с № " + СокрП(СчетаКонтрагента.НомерСчета) +
									  " в " + СокрП(СчетаКонтрагента.Банк.Наименование);
		СписокСчетов.ДобавитьЗначение(СчетаКонтрагента.ТекущийЭлемент(),СтроковоеПредставлениеСчета);
	КонецЦикла;               
	СписокСчетов.СортироватьПоПредставлению();
	Если СписокСчетов.РазмерСписка() = 0 Тогда
		Форма.кИзменить.Доступность(0);
		Форма.кУдалить.Доступность(0);
	КонецЕсли;
КонецПроцедуры	// ЗаполнитьСписокРасчетныхСчетов

// ===============================
// НАЗВАНИЕ: ЗаполнитьСписокКатегорий()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ОПИСАНИЕ:
// заполняет таблицу "СписокКатегорий" из справочника "КатегорииКонтрагентов"
// только теми категориями, к которым принадлежит контрагент.
Процедура ЗаполнитьСписокКатегорий()
	Перем КатегорииДляВыбора;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	КатегорииДляВыбора = СоздатьОбъект("Справочник.КатегорииКонтрагентов");
	КатегорииДляВыбора.ИспользоватьВладельца(ТекущийЭлемент());
	
	// очищаем все строки
	СписокКатегорий.УдалитьВсе();
	
	КатегорииДляВыбора.ВыбратьЭлементы();
	Пока КатегорииДляВыбора.ПолучитьЭлемент() = 1 Цикл
	    Если КатегорииДляВыбора.ПометкаУдаления() = 0 Тогда
			// помеченные на удаление не добавляем
			СписокКатегорий.ДобавитьЗначение(КатегорииДляВыбора.ТекущийЭлемент(),
			                                 КатегорииДляВыбора.Категория.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокКатегорий.РазмерСписка() = 0 Тогда
		Форма.кУдалитьКатегорию.Доступность(0);
	КонецЕсли;
КонецПроцедуры	// ЗаполнитьСписокКатегорий

// ===============================
// НАЗВАНИЕ: УстДоступность()
// ПАРАМЕТРЫ: Нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: нет
// ОПИСАНИЕ:
//   Устанавливает видимость и доступность элементов диалога в зависимости от
//   текущей закладки и вида контрагента
Функция УстДоступность()
	Форма.кнИстория.Видимость(1);			
	// доступность и видимость в зависимости от закладки
	Закладка = Форма.Закладки.ПолучитьЗначение(Форма.Закладки.ТекущаяСтрока());

	Если Закладка = "Общие" Тогда
		Если ВидКонтрагента = Перечисление.ВидыКонтрагентов.Нерезидент тогда
			Форма.тИНН.Доступность(0);
			Форма.ИНН.Доступность(0);
			Форма.тНомерСвидетельства.Доступность(0);
			Форма.НомерСвидетельства.Доступность(0);
			Форма.тЕДРПОУ.Доступность(0);			
			Форма.ЕДРПОУ.Доступность(0);			
			Форма.тЕДРПОУ.Заголовок("ЕДРПОУ:");
			Форма.рКоды.Доступность(0);			
		ИначеЕсли ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо тогда
			Форма.тИНН.Доступность(1);		
			Форма.ИНН.Доступность(1);		
			Форма.тНомерСвидетельства.Доступность(1);
			Форма.НомерСвидетельства.Доступность(1);
			Форма.ЕДРПОУ.Доступность(1);
			Форма.тЕДРПОУ.Доступность(1);
			Форма.тЕДРПОУ.Заголовок("ДРФО:");
			Форма.рКоды.Доступность(1);			
		Иначе
			Форма.тИНН.Доступность(1);		
			Форма.ИНН.Доступность(1);		
			Форма.тНомерСвидетельства.Доступность(1);
			Форма.НомерСвидетельства.Доступность(1);
			Форма.ЕДРПОУ.Доступность(1);			
			Форма.тЕДРПОУ.Доступность(1);
			Форма.тЕДРПОУ.Заголовок("ЕДРПОУ:");
			Форма.рКоды.Доступность(1);
		КонецЕсли;

	ИначеЕсли Закладка = "Дополнительно" Тогда
		Форма.кОчиститьЗаказ.Доступность(БазДоговор.Выбран());
	ИначеЕсли Закладка = "Файлы" Тогда
		Если Файлы.КоличествоСтрок() = 0 Тогда
			Форма.кИзменитьФайл.Доступность(0);
			Форма.кУдалитьФайл.Доступность(0);
			Форма.кОткрытьФайл.Доступность(0);
		Иначе
			Форма.кИзменитьФайл.Доступность(1);
			Форма.кУдалитьФайл.Доступность(1);
			Форма.кОткрытьФайл.Доступность(1);
		КонецЕсли;
		Если Файлы.ТекущаяСтрока() <> 0 Тогда
			Если Файлы.Ссылка.Картинка = 1 Тогда
			    Путь = СокрЛП(Файлы.Ссылка.Путь);
				сКартинка.Загрузить(Путь);
			Иначе
				Файлы.ВыбратьСтроки();
				Пока Файлы.ПолучитьСтроку() = 1 Цикл
					Если Файлы.Ссылка.Картинка = 1 Тогда
					    Путь = СокрЛП(Файлы.Ссылка.Путь);
						Если Путь <> "" Тогда
							сКартинка.Загрузить(Путь);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	Возврат "";
КонецФункции	

// ===============================
// НАЗВАНИЕ: ИзмВидКонтрагента()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ВЫЗЫВАЕТСЯ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА:
// поле "ВидКонтрагента"
// ОПИСАНИЕ:
// Отрабытывает при изменении вида контрагента.
// Вид контрагента:
// 	Организация - убрать закладку "Паспортные данные"
//	Частное лицо - добавить закладку "Паспортные данные"
Процедура ИзмВидКонтрагента()
	Перем ИмяПоказываемогоСлоя,ИмяСкрываемогоСлоя;
	
	Если ВидКонтрагента <> Перечисление.ВидыКонтрагентов.ЧастноеЛицо Тогда
	    ИмяПоказываемогоСлоя = "Организация";
		ИмяСкрываемогоСлоя = "ЧастноеЛицо";
		тПолнНаименование = "Полн. наименование:";
		тЮридическийАдрес = "Юридический:";
	ИначеЕсли ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо Тогда
	    ИмяПоказываемогоСлоя = "ЧастноеЛицо";
		ИмяСкрываемогоСлоя = "Организация";
		тПолнНаименование = "Ф.И.О.:";
		тЮридическийАдрес = "Адрес:";
	КонецЕсли;

	// значения по-умолчанию
	Если ВидКонтрагента = Перечисление.ВидыКонтрагентов.Организация Тогда
		ПлательщикНалогаНаПрибыль = 1;
	Иначе
		ПлательщикНалогаНаПрибыль = 0;
	КонецЕсли;

	// очистим неиспользуемые реквизиты
	Если ВидКонтрагента = Перечисление.ВидыКонтрагентов.Нерезидент тогда
		ИНН = "";
		НомерСвидетельства = "";
		ЕДРПОУ = "";
	ИначеЕсли ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо тогда
		Директор = "";
		ГлавныйБухгалтер = "";
		Контакт = "";
	КонецЕсли;
                                        
	Если ВидКонтрагента <> Перечисление.ВидыКонтрагентов.ЧастноеЛицо тогда
		ДокДатаВыдачи = "";
		ДокКемВыдан ="";
		ДокНомер ="";
		ДокСерия ="";
	КонецЕсли;	

	// скрыть слой
	Форма.ИспользоватьСлой(ИмяСкрываемогоСлоя,0);
	// показать слой
	Форма.ИспользоватьСлой(ИмяПоказываемогоСлоя,1);
КонецПроцедуры

// ===============================
// НАЗВАНИЕ: ДобавитьРасчетныйСчет()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ВЫЗЫВАЕТСЯ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА:
// кнопка "Добавить" в слое "РасчСчет"
// ОПИСАНИЕ:
// Открывает форму нового расчетного счета
Процедура ДобавитьРасчетныйСчет()
	Перем ФормаЗаписи;
	ОткрытьФормуМодально("Элемент.ДенежныеСчета",Контекст,,,ТекущийЭлемент());
	СписокСчетов.СортироватьПоПредставлению();	
КонецПроцедуры

// ===============================
// НАЗВАНИЕ: ИзменитьРасчетныйСчет()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ВЫЗЫВАЕТСЯ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА:
// кнопка "Изменить" в слое "РасчСчет"
// ОПИСАНИЕ:
// Открывает форму текущего в списке расчетного счета для редактирования
Процедура ИзменитьРасчетныйСчет()
	Перем ФормаЗаписи;
	Эл=СписокСчетов.ПолучитьЗначение(СписокСчетов.ТекущаяСтрока());
	ОткрытьФормуМодально(Эл,Контекст);     
	СписокСчетов.СортироватьПоПредставлению();
КонецПроцедуры

// ===============================
// НАЗВАНИЕ: УдалитьРасчетныйСчет()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ВЫЗЫВАЕТСЯ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА:
// кнопка "Удалить" в слое "РасчСчет"
// ОПИСАНИЕ:
// Удаляет из списка текущий расчетный счет и помечает его на
// удаление в базе
Процедура УдалитьРасчетныйСчет()
	Если Вопрос("Удалить расчетный счет?",4)=7 Тогда
		Возврат;
	КонецЕсли;
	Поз=СписокСчетов.ТекущаяСтрока();
	Эл=СписокСчетов.ПолучитьЗначение(Поз);
	Спр=СоздатьОбъект("Справочник.ДенежныеСчета");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		Спр.Удалить(0);
		СписокСчетов.УдалитьЗначение(Поз);
		СписокСчетов.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Если СписокСчетов.РазмерСписка()=0 Тогда
			Форма.кИзменить.Доступность(0);
			Форма.кУдалить.Доступность(0);
		КонецЕсли;
		Форма.Обновить();
	КонецЕсли;
	СписокСчетов.СортироватьПоПредставлению();
КонецПроцедуры

// ===============================
// НАЗВАНИЕ: ДобавитьКатегорию()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ВЫЗЫВАЕТСЯ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА:
// кнопка "Добавить" в слое "Категории"
// ОПИСАНИЕ:
// открывает форму списка справочника "Категории" в режиме "Подбор"
Процедура ДобавитьКатегорию()
	Если Форма.МодальныйРежим() = 1 Тогда
	     Предупреждение("Внимание! Форма открыта в модальном режиме. Невозможно добавить категорию!"); 
		 Возврат;
	КонецЕсли;	
	ОткрытьПодбор("Справочник.ВидыКатегорий",,,1);
КонецПроцедуры	// ДобавитьКатегорию

// ===============================
// НАЗВАНИЕ: УдалитьКатегорию()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ВЫЗЫВАЕТСЯ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА:
// кнопка "Удалить" в слое "Категории"
// ОПИСАНИЕ:
// удаляет категорию из списка "СписокКатегорий" и
// помечает соответствующую запись в справочнике "КатегорииКонтрагентов"
Процедура УдалитьКатегорию()
	Перем КатегорияДляУдаления;
	Перем Позиция;
	

	Позиция = СписокКатегорий.ТекущаяСтрока();
	Если Позиция = 0 Тогда
	    // не выбран элемент
		Возврат;
	КонецЕсли;

	Если Вопрос("Вы действите хотите удалить контрагента из категории?",4)=7  Тогда
		// Сказали нет
	    Возврат;
	КонецЕсли;

	КатегорияДляУдаления = СоздатьОбъект("Справочник.КатегорииКонтрагентов");
	Если КатегорияДляУдаления.НайтиЭлемент(СписокКатегорий.ПолучитьЗначение(Позиция)) = 0 Тогда
		// не нашли. непонятно, как категория появилась в списке
		Возврат;
	КонецЕсли;
	
	КатегорияДляУдаления.Удалить(0);
	СписокКатегорий.УдалитьЗначение(Позиция);
	
	// если до сих пор не вышли из процедуры,
	// то теперь надо добавить товар к категории
	РазмерСписка = СписокКатегорий.РазмерСписка();
	Если РазмерСписка = 0 Тогда
	    
		// если в списке нет ни одной категории,
		// делаем недоступной кнопку удалить
		Форма.кУдалитьКатегорию.Доступность(0);
	Иначе
		// установим текущий элемент в списке
		Если Позиция > РазмерСписка Тогда
		    Позиция = РазмерСписка;
		КонецЕсли;
		СписокКатегорий.ТекущаяСтрока(Позиция);
		
		Форма.кУдалитьКатегорию.Доступность(1);
	КонецЕсли;
	
КонецПроцедуры	// УдалитьКатегорию

// ===============================
// Название: ПоказатьИсторию()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Кнопка "История",.
// Описание:
// Открывается форма обработки для редактирования периодических реквизитов
Процедура ПоказатьИсторию()
	Если Выбран()=0 Тогда
	     Предупреждение("Историю периодических реквизитов можно" + РазделительСтрок +
		                          "смотреть только для сохраненного элемента");
		Возврат;
	КонецЕсли;

	глРедактироватьИсториюЗначений(Контекст,
	"",
	"История периодических реквизитов ("+ТекущийЭлемент()+")",1);
КонецПроцедуры // ПоказатьИсторию

// ===============================
// Название: ИзмНаименование()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Наименование,.
// Описание:
// процедура предназначена для автоматического формирования
// поля "ПолнНаименование" на основе поля "Наименование"
Процедура ИзмНаименование()
	Если ПустоеЗначение(ПолнНаименование) = 1 Тогда
	    // только если "ПолноеНаименование" не заполнено
		ПолнНаименование = Наименование;
	КонецЕсли;
КонецПроцедуры	// ПриИзмененииНаименования

// ===============================
Процедура ВводНового(ПризнКопирования)	// Предопределенная процедура
	ИспользоватьДату(Константа.ДатаНачалаРаботы);

	Если  ПризнКопирования=0 Тогда
		// новый элемент не скопирован
		ВидКонтрагента = Перечисление.ВидыКонтрагентов.Организация;
		ПлательщикНалогаНаПрибыль = 1;
		ВалютаКредита = Гривня;
		ВалютаКредитаПоставщика = Гривня;
		
		ГлубинаВКалендарныхДнях = Константа.БазГлубинаКредитаВКалендарныхДнях;
		ГлубинаКредитаПоставщикаВКалендарныхДнях = Константа.БазГлубинаКредитаВКалендарныхДнях;
	Иначе
		БазДоговор = "";
		РезультатСверкиДата = Дата(0);
		РезультатСверкиКоммент = "";
		РезультатСверкиСумма = 0;
		РезультатСверкиСуммаНал = 0;
		Телефоны = "";
		Телефоны1 = "";
		Телефоны2 = "";
		ФизическийАдрес = "";
		ЮридическийАдрес = "";
		Контакт = "";
		Контакт1 = "";
		Контакт2 = "";
		ИНН = "";
		ЕДРПОУ = "";
		НомерСвидетельства = "";
		
		КонтрагентВзаимозачета = ""; //--- УМК Сандомирский В.Ю, (20.11.14)
		ОсновнойПартнер = "";
		
	КонецЕсли;
	ВыделятьПоЛюбому = Родитель.ВыделятьПоЛюбому;
	
	ЭлементНовый = 1;
КонецПроцедуры	// ВводНового

// ===============================
Процедура ПриВыбореЗакладки(Номер,Значение) Далее
//
//Процедура УстДоступностьКтСотр()
//	Форма.НачислятьНаКонтрагента.Доступность(1-НачислятьНаСотрудника.Выбран());
//	Форма.НачислятьНаСотрудника.Доступность(1-НачислятьНаКонтрагента.Выбран());
//КонецПроцедуры
// ===============================
Процедура ПриОткрытии()	// Предопределенная процедура
	Если Константа.ЗапретитьРедактированиеСправочников = Да Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//+ umk
	Если ЭтоОсновнойПартнер = 1 Тогда
		Форма.Наименование.Доступность(0);
	КонецЕсли;
	// -umk
	
	Если (НазваниеНабораПрав() = "Заказ") ИЛИ (НазваниеНабораПрав() = "УдаленныйДоступ") Тогда
	    СтатусВозврата(0);
	КонецЕсли;
	Если (НазваниеНабораПрав() <> "Администратор") И (НазваниеНабораПрав() <> "АдминистраторМладший") И (НазваниеНабораПрав() <> "ПроизводствоКасса") Тогда  // права на ДатаЦ
		Форма.ДатаЦ.Доступность(0);
	КонецЕсли;
	
	Форма.Наименование.ВыполнятьФормулуТолькоПриИзменении(1);
	СохранениеПериодическихРеквизитов(2, "*");
	Форма.ИспользоватьЗакладки(1);

	// добавляем закладки, которые используются всегда
	Форма.Закладки.ДобавитьЗначение("Общие");    
	Форма.Закладки.ДобавитьЗначение("Дополнительно");
	Форма.Закладки.ДобавитьЗначение("Кредиты"); 
	Если Выбран() = 1 Тогда
		Форма.Закладки.ДобавитьЗначение("Категории");
		Форма.Закладки.ДобавитьЗначение("Файлы","Файлы");
	КонецЕсли;                   

	Если ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо Тогда
		// у частного лица есть паспортные данные
		Форма.ИспользоватьСлой("ЧастноеЛицо",1);
		тПолнНаименование = "Ф.И.О.:";
		тЮридическийАдрес = "Адрес:";
	Иначе
		Форма.ИспользоватьСлой("Организация",1);
		тПолнНаименование = "Полн. наименование:";
		тЮридическийАдрес = "Юридический:";
	КонецЕсли;
	
	Если Выбран()=1 Тогда
		// выполнить действия для существующего элемента
		
		ЗаполнитьСписокРасчетныхСчетов();
		ЗаполнитьСписокЕДРПОУ();								//--- УМК Сандомирский В.Ю, смежные ЕДРПОУ (28.05.14)
		
		ЗаполнитьСписокКатегорий();
		ЗаполнитьФайлы();
		
		Форма.Закладки.ДобавитьЗначение("Расчетные счета");
		
		Форма.Закладки.ДобавитьЗначение("Смежные ЕДРПОУ");		//--- УМК Сандомирский В.Ю, смежные ЕДРПОУ (28.05.14)
		Форма.Закладки.ДобавитьЗначение("Настройка экспорта документов"); 

		Парам = СокрП(Форма.Параметр);
		НомЗакладки = Форма.Закладки.НайтиЗначение(Парам);
		Если НомЗакладки>0 Тогда
		    Форма.Закладки.ТекущаяСтрока(НомЗакладки);
		КонецЕсли;
		ПриВыбореЗакладки(,Парам);
	Иначе
		ПриВыбореЗакладки(,"");
	КонецЕсли;                        
	
	// проверяем, есть ли движения по регистрам Взаиморасчеты* 
	Если Выбран()=1 Тогда
		фЕстьДвижения=0;
		РегВзаим=СоздатьОбъект("Регистр.ВзаиморасчетыПоставщиков");
		РегВзаим.УстановитьЗначениеФильтра("Контрагент",ТекущийЭлемент(),1);
		РегВзаим.ВыбратьДвижения('01.01.2000',,);
		Если РегВзаим.ПолучитьДвижение()=1 Тогда
			фЕстьДвижения=1;
		КонецЕсли;
		РегВзаим=0;
		Если фЕстьДвижения=0 Тогда
			РегВзаим=СоздатьОбъект("Регистр.ВзаиморасчетыПокупателей");
			РегВзаим.УстановитьЗначениеФильтра("Контрагент",ТекущийЭлемент(),1);
			РегВзаим.ВыбратьДвижения('01.01.2000',,);
			Если РегВзаим.ПолучитьДвижение()=1 Тогда
				фЕстьДвижения=1;
			КонецЕсли;
			РегВзаим=0;
		КонецЕсли;
	КонецЕсли;
	
	Для инд = 1 По 7 Цикл
		Чис = Число(Сред(ДниОплаты, Инд, 1));
		Если Инд = 1 Тогда
		    ф1 = Чис;
		ИначеЕсли Инд = 2 Тогда
		    ф2 = Чис;
		ИначеЕсли Инд = 3 Тогда
		    ф3 = Чис;
		ИначеЕсли Инд = 4 Тогда
		    ф4 = Чис;
		ИначеЕсли Инд = 5 Тогда
		    ф5 = Чис;
		ИначеЕсли Инд = 6 Тогда
		    ф6 = Чис;
		ИначеЕсли Инд = 7 Тогда
		    ф7 = Чис;
		КонецЕсли;
	КонецЦикла;
	
//*	УстДоступностьКтСотр();
	УстДоступность();
	
	Хозяин.ВидыДляВыбора("Контрагенты,Сотрудники"); //--- УМК Сандомирский В.Ю, (19.09.14)
	
	ЗаполнитьСписокФирм(); //--- УМК Сандомирский В.Ю, (09.01.15)
	
КонецПроцедуры	// ПриОткрытии

// ===============================
Процедура ПриВыбореЗакладки(Номер,Значение)	// Предопределенная процедура
	Перем СтрокаСписка;
	
	// этот слой показываем всегда
	СтрокаСписка = "Общий";
	
	Если Значение = "Дополнительно" Тогда
		// Кредиты
		СтрокаСписка = СтрокаСписка + ",Дополнительный";
	ИначеЕсли Значение = "Кредиты" Тогда
		// Кредиты
		СтрокаСписка = СтрокаСписка + ",Кредиты";
	ИначеЕсли Значение = "Расчетные счета" Тогда
		// Расчетные счета
		СтрокаСписка = СтрокаСписка + ",РасчетныеСчета";
	ИначеЕсли Значение = "Смежные ЕДРПОУ" Тогда
		// Расчетные счета
		СтрокаСписка = СтрокаСписка + ",СмежныеЕДРПОУ";
	ИначеЕсли Значение = "Категории" Тогда
		// Категории
		СтрокаСписка = СтрокаСписка + ",Категории";
	ИначеЕсли Значение = "Файлы" Тогда
		// Категории
		СтрокаСписка = СтрокаСписка + ",Файлы";
		//экспорт документов 
	ИначеЕсли Значение = "Настройка экспорта документов" Тогда
		СтрокаСписка = СтрокаСписка + ",НастройкаЭкспортаДокументов";
	Иначе
		// Общие
		СтрокаСписка = СтрокаСписка + ",Основной";
		Если ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо Тогда
		    СтрокаСписка = СтрокаСписка + ",ЧастноеЛицо";
		Иначе//Если ВидКонтрагента = Организация
		    СтрокаСписка = СтрокаСписка + ",Организация"
		КонецЕсли;
	КонецЕсли;     

	Форма.ИспользоватьСлой(СтрокаСписка,2);
КонецПроцедуры	// ПриВыбореЗакладки
 
// ===============================
Процедура ОбработкаПодбора(Элемент, КонтекстФормы)	// Предопределенная процедура
	Перем Категории, КатегорияДляПоиска;
	Перем Позиция;
	
	КатегорияДляПоиска = СоздатьОбъект("Справочник.КатегорииКонтрагентов");
	КатегорияДляПоиска.ИспользоватьВладельца(ТекущийЭлемент());
	
	// добавляем категорию только если ее нет в списке
	КатегорияДляПоиска.ВыбратьЭлементы();
	Пока КатегорияДляПоиска.ПолучитьЭлемент()=1 Цикл
	    Если КатегорияДляПоиска.Категория = Элемент Тогда
			// категория уже есть
			Если  КатегорияДляПоиска.ПометкаУдаления()=0 Тогда
				// контрагент уже принадлежит категории
		        Возврат;
			Иначе
				// снимаем пометку удаления
				КатегорияДляПоиска.СнятьПОметкуУдаления();
				Категории = КатегорияДляПоиска.ТекущийЭлемент();
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;
	
    Если ПустоеЗначение(Категории) = 1 Тогда
		// если  не нашли помеченную на удаление категорию, то создаем новую запись.
		Категории = СоздатьОбъект("Справочник.КатегорииКонтрагентов");
		Категории.ИспользоватьВладельца(ТекущийЭлемент());
		Категории.Новый();
		Категории.Категория = Элемент;
		Попытка
			Категории.Записать();
		Исключение
			Предупреждение(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	// добавляем в список
	СписокКатегорий.ДобавитьЗначение(Категории.ТекущийЭлемент(),
	                                 Категории.Категория.Наименование);
	СписокКатегорий.ТекущаяСтрока(СписокКатегорий.РазмерСписка());								 
	Форма.кУдалитьКатегорию.Доступность(1);
КонецПроцедуры	// ОбработкаПодбора

// ===============================
Процедура ПриЗаписи()	// Предопределенная процедура
	// в процедуре при записи проверятся заполнение обязательных реквизитов
	
	Если Выбран() = 0 Тогда
		// Если документ еще не записан
		Записать();
		// Чтоб не дергать базу второй раз на запись
		СтатусВозврата(0);
	КонецЕсли;
	
	глВсеВыбрано = 1;
	
	глВыбранЛи(Код,"Код");
	глВыбранЛи(Наименование,"Наименование");
    Если ВидКонтрагента = Перечисление.ВидыКонтрагентов.Организация Тогда
		глВыбранЛи(ПолнНаименование,"Полное наименование");
	Иначе
		глВыбранЛи(ПолнНаименование,"ФИО");
    КонецЕсли;
	глВыбранЛи(ВидКонтрагента,"Вид (организация или частное лицо)");
	глВыбранЛи(ВалютаКредитаПоставщика,"Валюта кредита поставщика");
	глВыбранЛи(ВалютаКредита,"Валюта кредита покупателя");
	
	Если глВсеВыбрано=0 Тогда
		// не заполнено обязательное поле
		Сообщить("Элемент справочника не записан!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	глЗаписьПериодическихРеквизитов(Контекст);
	
    // если записываем новый элемент, то должны 
	// добавить дополнительные закладки
	
	Если Форма.Закладки.НайтиЗначение("Расчетные счета")=0 Тогда
		// если нет закладки "Расчетные счета", то ее нужно добавить
	    Форма.Закладки.ДобавитьЗначение("Расчетные счета");
	КонецЕсли;

	Если Форма.Закладки.НайтиЗначение("Категории")=0 Тогда
	    // если нет закладки "Категория", то ее нужно добавить
		Форма.Закладки.ДобавитьЗначение("Категории");
	КонецЕсли;

	//--- УМК Сандомирский В.Ю, Закоментил 24.04.14
	//глОтправитьУведомлениеЭП("Справочник.Контрагенты", "Контрагенты: уведомление об изменении", ?(ТекущийЭлемент().Выбран() = 1, "Изменен","Добавлен новый") + " элемент справочника Контрагенты: " + Строка(Код) + ", " + Наименование + " пользователь: " + Строка(глПользователь));	

	
	
	// + umk
	
	Если (ПустоеЗначение(ОсновнойПартнер) = 0) И (ОсновнойПартнер.ЭтоОсновнойПартнер = 0) Тогда
		Сообщить("В поле ""Основной партнер"" изменен контрагент!");
		ОсновнойПартнер = "";
	КонецЕсли;	
	
	Если ЭтоОсновнойПартнер = 1 Тогда
		
		Если ПустоеЗначение(глОсновнойКонтрагентИерархии(Родитель,ТекущийЭлемент())) = 0 Тогда
			Сообщить("Для данной групы Основной партнер уже существует!");
			ЭтоОсновнойПартнер = 0;
			Форма.Наименование.Доступность(1);
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Если (ЭтоГруппа() = 0) И (ЭтоОсновнойПартнер = 0) 
	И (ПустоеЗначение(ОсновнойПартнер) = 1) Тогда
		
		//Найдем основного контрагент
		ОсновнойПартнер = глОсновнойКонтрагентИерархии(Родитель, ТекущийЭлемент(), 1);
		
	КонецЕсли;
	
	Если (ЭтоГруппа() = 0) И (ПустоеЗначение(БазДоговор) = 1) Тогда
		УстановитьДоговорПоУмолчанию(Контекст);
	КонецЕсли;

	// - umk
	
	Если Выбран() = 1 Тогда
		Уровень = Уровень();
	Иначе
		Уровень = Родитель.Уровень + 1;
	КонецЕсли;
	
КонецПроцедуры	// ПриЗаписи

Процедура ПослеЗакрытия()
     
КонецПроцедуры

// ===============================
Процедура ПриЗакрытии()	// Предопределенная процедура

КонецПроцедуры	// ПриЗакрытии

// ===============================
Процедура ИзмЕДРПОУ()
	//Если ВидКонтрагента = Перечисление.ВидыКонтрагентов.Организация Тогда
	//	Если СтрДлина(СокрЛП(ЕДРПОУ)) > 8 Тогда
	//	    глКомментарий("Для организаций длина кода ЕДРПОУ не должна превышать 8 символов. Проверьте код ЕДРПОУ.",1);
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры //ИзмЕДРПОУ
     
// ===============================
Процедура ВыборДоговора()
	Фрм = СоздатьОбъект("СписокЗначений");
	Фрм.ДобавитьЗначение(ТекущийЭлемент(),"Контрагент");
	Фрм.ДобавитьЗначение("ДоговораКонтрагентов","ГрафаОтбора"); // значения "Договора"
	
	ОткрытьФормуМодально("Журнал.ПолныйЖурнал.ДляВыбораДоговоровИСчетов",Фрм,);
	
	Если ПустоеЗначение(Фрм.Получить("Документ")) = 0 Тогда
		БазДоговор=Фрм.Получить("Документ");
	КонецЕсли;
	             
	Если БазДоговор.Выбран() = 1  Тогда
		Если БазДоговор.Контрагент <> ТекущийЭлемент() Тогда
			Предупреждение("Договор не принадлежит данному контрагенту!");
			БазДоговор = глВосстановитьЗначение(,"БазДоговор");
		КонецЕсли;
	КонецЕсли;
	глСохранитьЗначение(,"БазДоговор",БазДоговор);
	
КонецПроцедуры //ВыборДоговора()

Процедура ИзмКН(Чис)
	ДОплаты = "";
	Для Инд = 1 По 7 Цикл
		ДОплаты = ДОплаты + Шаблон("[ф" + Строка(Инд) + "]");
	КонецЦикла;
	ДниОплаты = ДОплаты;
КонецПроцедуры

// ===============================
Процедура ПриНачалеВыбораЗначения(Рекв,Флаг)
	Если Рекв = "БазДоговор" Тогда
		Флаг = 0;
		Если Выбран() = 1 Тогда
			ВыборДоговора();	
		ИначеЕсли Вопрос("Договор можно выбрать только
							|после записи контрагента.
							|Записать контрагента?", "Да+Нет") = "Да" Тогда
		    Записать();     
			ВыборДоговора();
		КонецЕсли;
	ИначеЕсли Рекв = "ПутьДляЭкспортаРН" Тогда
		НачКат = СокрЛП(ПутьДляЭкспортаРН);
		Если ФС.ВыбратьКаталог(НачКат, "Выберите каталог для экспорта") = 1 Тогда
			ПутьДляЭкспортаРН = НачКат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
// ОБРАБОТКА СПИСКА ФАЙЛОВ

// ===============================
Процедура ДобавитьФайл()
	Перем ФормаЗаписи;
	Если Выбран() = 0 Тогда
		Предупреждение("Элемент сначала следует записать!");
		Возврат;
	КонецЕсли;	
	ОткрытьФормуМодально("Элемент.ФайлыКонтрагентов",Контекст,,,ТекущийЭлемент());
КонецПроцедуры	// ДобавитьКомпл

// ===============================
// Модально открывается форма текущего в списке файлов для редактирования
Процедура ИзменитьФайл()
	Перем ФормаЗаписи;                                        
	Поз=Файлы.ТекущаяСтрока();	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;               	
	Эл=Файлы.ПолучитьЗначение(Поз,"Ссылка");
	ОткрытьФормуМодально(Эл,Контекст);
КонецПроцедуры	// ИзменитьКомпл

// ===============================
// Удаляет текущий файл в списке 
Процедура УдалитьФайл()
	Если Вопрос("Удалить файл?",1)=2 Тогда
		Возврат;
	КонецЕсли;
	Поз=Файлы.ТекущаяСтрока();
	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;

	Эл=Файлы.ПолучитьЗначение(Поз,"Ссылка");
	Спр=СоздатьОбъект("Справочник.ФайлыКонтрагентов");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		Спр.Удалить(0);
		Файлы.УдалитьСтроку(Поз);
		Файлы.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьФайл()
	Поз = Файлы.ТекущаяСтрока();
	Если Поз <> 0 Тогда
	    ЗапуститьПриложение(СокрЛП(Файлы.ПолучитьЗначение(Поз, "Ссылка").Путь));
	КонецЕсли;
КонецПроцедуры


//=================================//--- УМК Сандомирский В.Ю, смежные ЕДРПОУ (28.05.14)
// НАЗВАНИЕ: ДобавитьЕДРПОУ()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ВЫЗЫВАЕТСЯ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА:
// кнопка "Добавить" в слое "КодыЕДРПОУ"
// ОПИСАНИЕ:
// Открывает форму нового расчетного счета
Процедура ДобавитьЕДРПОУ()
	Перем ФормаЗаписи;
	ОткрытьФормуМодально("Элемент.КодыЕДРПОУ",Контекст,,,ТекущийЭлемент());
	СписокЕДРПОУ.СортироватьПоПредставлению();	
КонецПроцедуры

//=================================//--- УМК Сандомирский В.Ю, смежные ЕДРПОУ (28.05.14)
// НАЗВАНИЕ: ИзменитьЕДРПОУ()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ВЫЗЫВАЕТСЯ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА:
// кнопка "Изменить" в слое "КодыЕДРПОУ"
// ОПИСАНИЕ:
// Открывает форму текущего в списке расчетного счета для редактирования
Процедура ИзменитьЕДРПОУ()
	Перем ФормаЗаписи;
	Эл=СписокЕДРПОУ.ПолучитьЗначение(СписокЕДРПОУ.ТекущаяСтрока());
	ОткрытьФормуМодально(Эл,Контекст);     
	СписокЕДРПОУ.СортироватьПоПредставлению();
КонецПроцедуры

// ===============================//--- УМК Сандомирский В.Ю, смежные ЕДРПОУ (28.05.14)
// НАЗВАНИЕ: УдалитьЕДРПОУ()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ВЫЗЫВАЕТСЯ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА:
// кнопка "Удалить" в слое "КодыЕДРПОУ"
// ОПИСАНИЕ:
// Удаляет из списка текущий расчетный счет и помечает его на
// удаление в базе
Процедура УдалитьЕДРПОУ()
	Если Вопрос("Удалить ЕДРПО смежного контрагента ?",4)=7 Тогда
		Возврат;
	КонецЕсли;
	Поз = СписокЕДРПОУ.ТекущаяСтрока();
	Эл  = СписокЕДРПОУ.ПолучитьЗначение(Поз);
	Спр=СоздатьОбъект("Справочник.КодыЕДРПОУ");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		Спр.Удалить(0);
		СписокЕДРПОУ.УдалитьЗначение(Поз);
		СписокЕДРПОУ.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Если СписокЕДРПОУ.РазмерСписка()=0 Тогда
			Форма.кИзменить.Доступность(0);
			Форма.кУдалить.Доступность(0);
		КонецЕсли;
		Форма.Обновить();
	КонецЕсли;
	СписокЕДРПОУ.СортироватьПоПредставлению();
КонецПроцедуры


//====================================================================== //--- УМК Сандомирский В.Ю, (09.01.15)
Процедура ЗаполнитьСписокФирм()
	Перем РазрешенныйВидУпаковки;
	Перем Индекс;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	ФирмыКонтрагента = СоздатьОбъект("Справочник.УМК_ФирмыПечатиКонтрагента");
	ФирмыКонтрагента.ИспользоватьВладельца(ТекущийЭлемент());
	ФирмыКонтрагента.ПорядокКодов();
	ФирмыКонтрагента.ВыбратьЭлементы();
	Индекс = 0; 
	СписокФирм.УдалитьСтроки();
	Пока ФирмыКонтрагента.ПолучитьЭлемент()=1 Цикл
		Если ФирмыКонтрагента.ПометкаУдаления()=1 Тогда
		    Продолжить;
		КонецЕсли;

	    Индекс = Индекс + 1;
		СписокФирм.НоваяСтрока(Индекс);
		СписокФирм.Ссылка 	= ФирмыКонтрагента.ТекущийЭлемент();
		СписокФирм.Фирма	= ФирмыКонтрагента.Фирма;
		
	КонецЦикла;
	
КонецПроцедуры	// ЗаполнитьСписокВидовУпаковки

//====================================================================== //--- УМК Сандомирский В.Ю, (09.01.15)
Процедура ДобавитьФирму()
	Перем ФормаЗаписи;
	Если Выбран() = 0 Тогда
		Предупреждение("Элемент сначала следует записать!");
		Возврат;
	КонецЕсли;	
	ОткрытьФормуМодально("Элемент.УМК_ФирмыПечатиКонтрагента",Контекст,,,ТекущийЭлемент());
	ЗаполнитьСписокФирм();
КонецПроцедуры // Добавить

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура ИзменитьФирму()
	Перем ФормаЗаписи;
	Поз=СписокФирм.ТекущаяСтрока();	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;               	
	Эл=СписокФирм.ПолучитьЗначение(Поз,"Ссылка");
	ОткрытьФормуМодально(Эл,Контекст);
	ЗаполнитьСписокФирм();
КонецПроцедуры // Изменить

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура УдалитьФирму()
	
	Перем Поз;
	
	Поз=СписокФирм.ТекущаяСтрока();
	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;
	
	Эл=СписокФирм.ПолучитьЗначение(Поз,"Ссылка");

	Если Вопрос("Удалить фирму печати ?",1)=2 Тогда
		Возврат;
	КонецЕсли;
	Спр=СоздатьОбъект("Справочник.УМК_ФирмыПечатиКонтрагента");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		Спр.Удалить(0);
		СписокФирм.УдалитьСтроку(Поз);
		СписокФирм.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры // Удалить


СписокФирм.НоваяКолонка("Ссылка","Справочник.УМК_ФирмыПечатиКонтрагента",,,,0);
СписокФирм.НоваяКолонка("Фирма","Справочник.Фирмы",,,"Фирма для печати");

СписокФирм.ВидимостьКолонки("Ссылка",0);

КонтрагентВзаимозачета.ВидыДляВыбора("Контрагенты,Сотрудники");

ПерваяЗапись = 0;
// ===============================
Файлы.НоваяКолонка("Ссылка","Справочник.ФайлыКонтрагентов",,,,0);
Файлы.НоваяКолонка("Категория","Справочник.ВидыКатегорий",,,"Кат.",10);
Файлы.НоваяКолонка("Описание","Строка",,,"Описание",30);
Файлы.ВидимостьКолонки("Ссылка", 0);