
Перем СтарыйЭлемент;
Перем ИнформационнаяСтрока;
Перем КатегорииЦен;

Перем ТипЦены;

Перем ТоварВПрайсе;
Перем КонтПодб;	// контекст подбора

Перем ФормаСпискаЦен;	// контекст формы списка подчиненного справочника "Цены"

// переменная используется при подборе
// может принимать следующие значения
// 0 - не добавлять дубль
// 1 - спрашивать при нахождении дубля
// 2 - добавлять дубль без вопросов
// значение по умолчанию 1
Перем ДублироватьПриПодборе;

// используется в обработке подбора вместе с ДублироватьПриПодборе
// если значение - ДА, то в процедуре ДобавитьТовар, после вопроса,
// значение ДублироватьПриПодборе устанавливется либо в 0, либо в 2
Перем ДобавлениеГруппы;

//******************************************************************************
// "СЛУЖЕБНЫЕ" ПРОЦЕДУРЫ И ФУНКЦИИ
//******************************************************************************

// ===============================
// Название: СформироватьИнформационнуюСтроку()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// Строка с дополнительной информацией 
// Описание:
// процедура предназначена для формирования информационной
// строки для текущего элемента в списке. К такой
// может относится информация которую из-за большого объема
// нет смысла помещать в список, либо при размещении ее в
// колонке будет заметная ухудшение производительности
// (к примеру сложновычисляемая информация из регистра и т.д.)
Функция СформироватьИнформационнуюСтроку()
	Перем Цена, Валюта;
	Перем ТекТовар;
	
	Если ТекущийЭлемент()<>СтарыйЭлемент Тогда
		// новый элемент не равен текущему
		// так как функция будет вызываться каждый раз при перерисовки формы
		// (необязательно, что в этот момент будет выбран другой элемент в списке),
		// то чтобы не выполнять ненужные вычисления проверяем, что в списке
		// выбран элемент, отличный от того, для которого была сформирована
		// информационная строка

		Если ТекущийЭлемент().ЭтоГруппа()=0 Тогда
			Если ПустоеЗначение(ТипЦены) = 0 Тогда
				// вычислим цену товара
				ТекТовар = ТекущийЭлемент().Товар;
				Цена = глВернутьЦену(ТекТовар, ТипЦены);
				Если ПустоеЗначение(Цена) = 0 Тогда
					// нашли цену
					Цена.ИспользоватьДату(РабочаяДата());
					ИнформационнаяСтрока = Формат(Цена.Цена,глФорматСуммы) + " " + Цена.Валюта.Кратко + " за " + Цена.Единица.Единица;
				Иначе
					// нет цены товара в указанной категории цен
					ИнформационнаяСтрока = "Цена отсутствует"
				КонецЕсли;
			Иначе
				ИнформационнаяСтрока = "";
			КонецЕсли;
		Иначе
			ИнформационнаяСтрока = "";
		КонецЕсли;
	КонецЕсли;
	
	СтарыйЭлемент = ТекущийЭлемент();
    
	Возврат ИнформационнаяСтрока;
КонецФункции
                   
//******************************************************************************
Процедура Подбор()
	РодительДляПрайса=ТекущийЭлемент().Родитель;
	ОткрытьПодбор("ТМЦ","ДляПрайса",КонтПодб);
	КонтПодб.РодительДляПрайса.ВыборГруппы(1);
	КонтПодб.РодительДляПрайса=РодительДляПрайса;
	УстановитьЗначениеВПодборе("РодительДляПрайса",РодительДляПрайса);
КонецПроцедуры

//******************************************************************************
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА
//******************************************************************************

// ===============================
Процедура ПечатьПрайса()
	ОткрытьФорму("Обработка.ПечатьПрайсЛиста"+"#", "Прайс_лист");
КонецПроцедуры

//******************************************************************************
Процедура ПриИзмененииТипаЦены()
	Перем Позиция;
	
	// получаем позицию текущей строки
	Позиция = ТипыЦен.ТекущаяСтрока();
	// запоминаем значение из текущей строки
	Если Позиция > 0 Тогда
		ТипЦены = ТипыЦен.ПолучитьЗначение(Позиция);
	Иначе
		ТипЦены = ПолучитьПустоеЗначение("Справочник.Цены");
	КонецЕсли;
	// для перерисовки инф. строки нужно очистить значение 
	// переменной СтарыйЭлемент
	СтарыйЭлемент = ПолучитьПустоеЗначение("Справочник.ТМЦ");
КонецПроцедуры

// ===============================
Процедура ПечатьЦенника()
	Перем ПечЕдиница, ПечНаименование,ПечРозн;
	Перем ЦенаТовара;
	Перем ТипРозничной;
	
	ТипРозничной = Константа.РозничнаяКатегорияЦен;
	
	Если ПустоеЗначение(ТипРозничной) = 1 Тогда
		Предупреждение("Установите в настройках параметров учета"+РазделительСтрок+
		                "тип розничной цены!");
		Возврат;
	КонецЕсли;
	//  Создание Таблицы для выходного отчета
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Ценник");
 	ЧислоСтрок=0;
 	Столбик=1;
 	Ряд=0;

	ВыбТовар=ТекущийЭлемент();
	
	Если ПустоеЗначение(ВыбТовар) = 1 Тогда
		Предупреждение("Выберите товар или группу товаров!");
		Возврат;
	КонецЕсли;
	
	Если ВыбТовар.ЭтоГруппа()=1 Тогда
		ТоварВПрайсе = СоздатьОбъект("Справочник.Прайс_лист");
		ТоварВПрайсе.ВключатьПодчиненные(1);
		ТоварВПрайсе.ИспользоватьРодителя(ВыбТовар);
		ТоварВПрайсе.ВыбратьЭлементы();
		Пока ТоварВПрайсе.ПолучитьЭлемент()>0 Цикл
			Если ТоварВПрайсе.ПометкаУдаления()=1 Тогда
				Продолжить;
			КонецЕсли;
			Если ТоварВПрайсе.ЭтоГруппа()=1 Тогда
				Продолжить;
			КонецЕсли;   
			ПечНаименование=ТоварВПрайсе.Товар.Наименование;
			ЦенаТовара = глВернутьЦену(ТоварВПрайсе.Товар,ТипРозничной);
			Если ПустоеЗначение(ЦенаТовара) = 1 Тогда
				// пропускаем товары без цен
				Продолжить;
			КонецЕсли;
			
			ПечЕдиница = ЦенаТовара.Единица.Получить(РабочаяДата());
			ВремЦена = ЦенаТовара.Цена.Получить(РабочаяДата());
			
			ПечРозн = СокрЛ(Формат(ВремЦена,"Ч15.2"))+" "+ЦенаТовара.Валюта.Получить(РабочаяДата()).Кратко;
			
		 	Столбик=?(Столбик=0,1,0);
		 	Ряд=?(Столбик=0,Ряд+1,Ряд);
			Если Ряд>3 Тогда
				Таб.НоваяСтраница();
				Ряд=1;
			КонецЕсли;
		 	Если Столбик=0 Тогда
				Таб.ВывестиСекцию("Товар|Ценник");
			Иначе
				Таб.ПрисоединитьСекцию("Товар|Ценник");
		 	КонецЕсли;
			глОживить(1);
		КонецЦикла;
	Иначе

		ПечНаименование=ВыбТовар.Товар.Наименование;
		ЦенаТовара = глВернутьЦену(ВыбТовар.Товар,ТипРозничной);
		Если ПустоеЗначение(ЦенаТовара) = 1 Тогда
			// пропускаем товары без цен
			Предупреждение("У товара "+ВыбТовар.Товар.Наименование+РазделительСтрок+
			               "не найден тип цены '"+ТипРозничной.Наименование+"'");
			Возврат;			   
		КонецЕсли;
		
		ПечЕдиница = ЦенаТовара.Единица.Получить(РабочаяДата());
		ВремЦена = ЦенаТовара.Цена.Получить(РабочаяДата());
		
		ПечРозн = СокрЛ(Формат(ВремЦена,"Ч15.2"))+" "+ЦенаТовара.Валюта.Получить(РабочаяДата()).Кратко;
		Таб.ВывестиСекцию("Товар");
	КонецЕсли;
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,0,0,ПарСтрСпр);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Ценник товаров","");
	ВыбТовар=0;
КонецПроцедуры

//******************************************************************************
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//******************************************************************************
Процедура ПриОткрытии()
	Перем КатегорииЦен,ТекТипЦены;
	
	Форма.кПравоваяПоддержка.Видимость(глВидимостьПравовойПоддержки);
	
	// восстановим значение последненго использованного типа цены
	ТекТипЦены = ВосстановитьЗначение("ТипЦеныПрайса");
	// заполним список ТипыЦен
	КатегорииЦен = СоздатьОбъект("Справочник.КатегорииЦен");
	КатегорииЦен.ВыбратьЭлементы();
	Пока КатегорииЦен.ПолучитьЭлемент() = 1 Цикл
		Если КатегорииЦен.ПометкаУдаления() = 1 Тогда
			// пропускаем помеченнные на удаление
			Продолжить;
		КонецЕсли;
		ТипыЦен.ДобавитьЗначение(КатегорииЦен.ТекущийЭлемент());
	КонецЦикла;
	
	// первая в списке цена и будет ценой по умолчанию
	Если ТипыЦен.РазмерСписка() > 0 Тогда
		// проверим, а вдруг удалили все категории цен
		Поз = ТипыЦен.НайтиЗначение(ТекТипЦены);
		Если Поз > 0 Тогда
			// если тип цены был сохранен, то установим
			// список в сохраненную позицию
			ТипЦены = ТипыЦен.ТекущаяСтрока(Поз);
		КонецЕсли;
		 ПриИзмененииТипаЦены();
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура ПриЗаписи()	// Предопределенная процедура
	// в процедуре при записи проверятся заполнение обязательных реквизитов
	Перем Описани;
	Перем ФлагОшибки;
	
	// изначально считаем, что не все обязательные поля заполнены
	ФлагОшибки = 1;
	
	// проверка обязательных полей
	Если ПустоеЗначение(Товар) = 1 Тогда
	    Описание = "Не заполнено поле 'Товар'";
		Активизировать("Товар");
	Иначе
		// все обязательные поля заполнены
		ФлагОшибки = 0;
	КонецЕсли;
	
	Если ФлагОшибки=1 Тогда
	    
		// не заполнено обязательное поле
		Предупреждение(Описание);
		СтатусВозврата(0);
	КонецЕсли;

КонецПроцедуры	// ПриЗаписи

//******************************************************************************
Процедура ПриЗакрытии()
	Перем ТекТипЦены;
	Перем Поз;
	
	Поз = ТипыЦен.ТекущаяСтрока();
	Если Поз > 0 Тогда
		ТекТипЦены = ТипыЦен.ПолучитьЗначение(Поз);
	Иначе
		ТекТипЦены = ПолучитьПустоеЗначение("Справочник.Цены");
	КонецЕсли;
	СохранитьЗначение("ТипЦеныПрайса", ТекТипЦены);
КонецПроцедуры

//******************************************************************************
Процедура ДобавитьТовар(Товар, ГруппаПрайса)
	Перем ТоварДляПоиска;
	Перем ТоварДляДобавления;
	
	Перем ДопСТрокаВопроса;
	
	Если ДублироватьПриПодборе < 2 Тогда
		
		// выбор единицы измерения
		ТоварДляПоиска = СоздатьОбъект("Справочник.Прайс_лист");
		Если ТоварДляПоиска.НайтиПоРеквизиту("Товар",Товар,1)=1 Тогда
			// товар уже есть в прайсе
			Если ТоварДляПоиска.ПометкаУдаления() = 1 Тогда
				// убираем пометку удаления
				ТоварДляПоиска.СнятьПометкуУдаления();
				Возврат;
			КонецЕсли;
			
			Если ДублироватьПриПодборе = 0 Тогда
				// не добавлять
				Сообщить("Товар " + СокрЛП(Товар.Наименование) + " уже есть в прайс-листе!");
				Возврат;
			Иначе
				Если ДобавлениеГруппы = ДА Тогда
					ДопСТрокаВопроса = РазделительСтрок+"Добавить? (использовать для других повторов)";
					тм = 10;
				Иначе
					ДопСТрокаВопроса = РазделительСтрок+"Добавить?";
					тм = 0;
				КонецЕсли;
				
				// ДублироватьПриПодборе = 1, нужно спросить
				РезВопроса = Вопрос("Товар " + СокрЛП(Товар.Наименование) + 
				            " уже есть в прайс-листе!"+ДопСТрокаВопроса,
							"Да+Нет", тм);
				
				Если ДобавлениеГруппы = ДА Тогда
					Если РезВопроса <> "Да" Тогда
						ДублироватьПриПодборе = 0;
						// дубли и дальше не добавлять
						Возврат;
					Иначе
						// добавлять дубли не спрашивая
						ДублироватьПриПодборе = 2;
					КонецЕсли;
				Иначе
					Если РезВопроса <> "Да" Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ТоварДляДобавления = СоздатьОбъект("Справочник.Прайс_лист");
	
	Если ПустоеЗначение(ГруппаПрайса) = 0 Тогда
		ТоварДляДобавления.ИспользоватьРодителя(ГруппаПрайса);
	КонецЕсли;
	
	ТоварДляДобавления.Новый();
	ТоварДляДобавления.Товар = Товар;
	ТоварДляДобавления.Наименование = Товар.Наименование;
	
	ТоварДляДобавления.Записать();
КонецПроцедуры

// ===============================
// ГруппаТоваров - группа из справочника ТМЦ
// ГруппаПрайса   - группа и справочника прайс_лист, куда вставляем "ГруппаТоваров"
Процедура ДобавитьГруппуТоваров(ГруппаТоваров,ГруппаПрайса)
	Перем ТекущийРодительДляПрайса, ГруппаПрайсаДляПоиска;
	Перем ВыборкаТоваров;
	
	Если (ГруппаПрайса.Уровень() < 3) И (ПустоеЗначение(ГруппаТоваров) = 0) Тогда
		// создаем группы в прайсе
		ГруппаПрайсаДляПоиска =  СоздатьОбъект("Справочник.Прайс_лист");
		ГруппаПрайсаДляПоиска.ИспользоватьРодителя(ГруппаПрайса);
		Если ГруппаПрайсаДляПоиска.НайтиПоНаименованию(ГруппаТоваров.Наименование, 1, 1) = 0 Тогда
			// группу с таким именем не нашли. Создадим новую
			ТекущийРодительДляПрайса = СоздатьОбъект("Справочник.Прайс_лист");
			ТекущийРодительДляПрайса.ИспользоватьРодителя(ГруппаПрайса);
			ТекущийРодительДляПрайса.НоваяГруппа();
			ТекущийРодительДляПрайса.Наименование = ГруппаТоваров.Наименование;
			ТекущийРодительДляПрайса.Записать();
		Иначе
			// группа с таким именем уже есть. будем использовать ее
			ТекущийРодительДляПрайса = ГруппаПрайсаДляПоиска.ТекущийЭлемент();
		КонецЕсли;
	Иначе
		// в прайсе не может быть группы ниже 3-го уровня
		// поэтому добавляем товары в текущую группу
		ТекущийРодительДляПрайса = ГруппаПрайса;
	КонецЕсли;

	ВыборкаТоваров = СоздатьОбъект("Справочник.ТМЦ");
	Если ПустоеЗначение(ГруппаТоваров) = 0 Тогда
		ВыборкаТоваров.ИспользоватьРодителя(ГруппаТоваров);
	КонецЕсли;
	ВыборкаТоваров.ВключатьПодчиненные(0);
	ВыборкаТоваров.ВыбратьЭлементы();
	Пока ВыборкаТоваров.ПолучитьЭлемент() = 1 Цикл
		Если ВыборкаТоваров.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если ВыборкаТоваров.ЭтоГруппа() = 1 Тогда
			ДобавитьГруппуТоваров(ВыборкаТоваров.ТекущийЭлемент(),ТекущийРодительДляПрайса.ТекущийЭлемент());
		Иначе
			ДобавитьТовар(ВыборкаТоваров.ТекущийЭлемент(), ТекущийРодительДляПрайса.ТекущийЭлемент());
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//******************************************************************************
Процедура ОбработкаПодбора(Выбор)	// предопределенная процедура
	Если  Выбор.ЭтоГруппа() = 1 Тогда
		// добавляем группу товаров
		ДобавлениеГруппы = ДА;
		НачатьТранзакцию();
		ДобавитьГруппуТоваров(Выбор, КонтПодб.РодительДляПрайса);
		ЗафиксироватьТранзакцию();
	Иначе
		// добавляем товар
		ДобавитьТовар(Выбор, КонтПодб.РодительДляПрайса);
		ДобавлениеГруппы = НЕТ;
	КонецЕсли;
	ДублироватьПриПодборе = 1;
КонецПроцедуры	// ОбработкаПодбора

//// ===============================
// ТЕЛО МОДУЛЯ
ТоварВПрайсе=СоздатьОбъект("Справочник.Прайс_лист");
Форма.КнопкаПоУмолчанию("КнЗакрыть");
ИнформационнаяСтрока = "";
ДублироватьПриПодборе = 1;
ДобавлениеГруппы = НЕТ;