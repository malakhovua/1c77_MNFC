Перем ВТ, ШТ, Укр;
Перем ИмяФормы;
Перем СтарыйЭлемент;
Перем ИнформационнаяСтрока;
Перем ТипЦены;
Перем ТипРеализОтчета;
Перем ТЗ_ПрайсЛист; 	//--- УМК Сандомирский В.Ю. (21.10.14)
Перем ТЗ_ПрайсЛистВак;
Перем ТЗ_Отгрузочный; 	//--- УМК Сандомирский В.Ю. (20.03.14)
Перем СписПриемка; 	//--- УМК Сандомирский В.Ю. (20.03.14)

//Перем СпрПрайс, СпрСтрокиПрайс;	//--- УМК Сандомирский В.Ю. (21.10.14)
                         
// ===============================
// Название: СформироватьИнформационнуюСтроку()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// Строка с дополнительной информацией 
// Описание:
// процедура предназначена для формирования информационной
// строки для текущего элемента в списке. К такой
// может относится информация которую из-за большого объема
// нет смысла помещать в список, либо при размещении ее в
// колонке будет заметная ухудшение производительности
// (к примеру сложновычисляемая информация из регистра и т.д.)
Функция СформироватьИнформационнуюСтроку()
	Перем Цена, Валюта;
	
	Если ТекущийЭлемент()<>СтарыйЭлемент Тогда
		// новый элемент не равен текущему
		// так как функция будет вызываться каждый раз при перерисовки формы
		// (необязательно, что в этот момент будет выбран другой элемент в списке),
		// то чтобы не выполнять ненужные вычисления проверяем, что в списке
		// выбран элемент, отличный от того, для которого была сформирована
		// информационная строка

		Если ТекущийЭлемент().ЭтоГруппа()=0 Тогда
			Если ПустоеЗначение(ТипЦены) = 0 Тогда
				// вычислим цену товара
				Цена = глВернутьЦену(ТекущийЭлемент(), ТипЦены);
				Если ПустоеЗначение(Цена) = 0 Тогда
					// нашли цену
					Цена.ИспользоватьДату(РабочаяДата());
					ИнформационнаяСтрока = Строка(Цена.Цена) + " " + Цена.Валюта.Кратко + " за " + Цена.Единица.Единица;
				Иначе
					// нет цены товара в указанной категории цен
					ИнформационнаяСтрока = "Цена отсутствует"
				КонецЕсли;
			Иначе
				ИнформационнаяСтрока = "";
			КонецЕсли;
		Иначе
			ИнформационнаяСтрока = "";
		КонецЕсли;
	КонецЕсли;
	
	СтарыйЭлемент = ТекущийЭлемент();
    
	Возврат ИнформационнаяСтрока;
КонецФункции

// ===============================
Процедура ИзмТипыЦен()
	Перем Позиция;
	Позиция = ТипыЦен.ТекущаяСтрока();
	// запоминаем значение из текущей строки
	Если Позиция > 0 Тогда
		ТипЦены = ТипыЦен.ПолучитьЗначение(Позиция);
	Иначе
		ТипЦены = ПолучитьПустоеЗначение("Справочник.Цены");
	КонецЕсли;
	// для перерисовки инф. строки нужно очистить значение 
	// переменной СтарыйЭлемент
	СтарыйЭлемент = ПолучитьПустоеЗначение("Справочник.ТМЦ");
	СформироватьИнформационнуюСтроку();	
КонецПроцедуры

// ===============================
Процедура ПечатьКаталогаТорг()
	Спис = СоздатьОбъект("СписокЗначений");
	Спис.ДобавитьЗначение(Родитель, "Родитель");
	Спис.ДобавитьЗначение("ТМЦ", "Вид");
	ОткрытьФорму("Обработка.ПечатьПрайсЛиста"+"#", Спис);
КонецПроцедуры
                                                          
// =======================
Процедура ПечатьБух()
	// <MR> - возможно стоит сделать другие цвета у таблицы
	ВТ=0;
	ШТ=0;
	//  Создание Таблицы для выходного отчета
	Тов=СоздатьОбъект("Справочник.ТМЦ");
	Укр = Константа.ФормыНаУкраинском;
	ВыбТовар=ТекущийЭлемент();
	Если ВыбТовар.Уровень()=1 Тогда
		Если Укр = Да Тогда
			Заг="Всi ТМЦ.";
		Иначе
			Заг="По всем ТМЦ.";
		КонецЕсли
	Иначе
		Тов.ВключатьПодчиненные(1);
		Тов.ИспользоватьРодителя(ВыбТовар.Родитель);
		Если Укр = Да Тогда
		    Заг = "ТМЦ групи ";
		Иначе
			Заг = "По ТМЦ группы ";
		КонецЕсли;
		Заг=Заг+ВыбТовар.Родитель.Наименование;
	КонецЕсли;
 	глЧислоСтрок=0;
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица(?(Укр = Да,"Укр","Рус"));
	Таб.ВывестиСекцию("Отчет");
	Тов.ВыбратьЭлементы();
	Пока Тов.ПолучитьЭлемент()>0 Цикл 
		Если Тов.ЭтоГруппа()=1 тогда
			Таб.ВывестиСекцию("Группа");
		Иначе
			ПечПрод = глФРМВал(Тов.УчетнаяЦена,Гривня,1);
			РознЦена = глВернутьЦену(Тов, Константа.РозничнаяКатегорияЦен);
			Если ПустоеЗначение(РознЦена) = 1 Тогда
				ПечРозн = 0;
			Иначе
				РознЦена.ИспользоватьДату(РабочаяДата());
				ПечРозн = глФРМВал(глПересчет(РознЦена.Цена,РознЦена.Валюта,Гривня,РабочаяДата()),Гривня,1);
			КонецЕсли;
			Таб.ВывестиСекцию("Товар");
		КонецЕсли;
		глОживить(1);
	КонецЦикла;
	ВТ=Таб.ВысотаТаблицы();
	ШТ=Таб.ШиринаТаблицы();
	Таб.ПовторятьПриПечатиСтроки(4,4);
	Таб.ВывестиСекцию("Итог");
//	Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,4,0);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Список ТМЦ по каталогу","");
	ВыбТовар = 0;
КонецПроцедуры
                             
// ===============================
// Название: ПечатьЭтикетки()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элемента диалога:
// кнопка "Этикетка"
// НЕТ
// Описание:
// создание печатной формы этикетки со штрихкодом
// Если текущий элемент группа, то выдается предупреждение 
Процедура ПечатьЭтикетки()
	// печать этикетки использует компонент ActiveX
	// разработки фирмы Shenk&Horn - ActiveBarcode версии 3.50
	ВыбТовар=ТекущийЭлемент();
	Если ВыбТовар.ЭтоГруппа()=1 Тогда
	    Предупреждение("Укажите товар, а не группу");
	    Возврат;
	КонецЕсли;
	Если ПустоеЗначение(ШтрихКод)=1 Тогда
	    Предупреждение("Не задан штрих код товара");
	    Возврат;
	КонецЕсли;
	Попытка
		АВС=СоздатьОбъект("BARCODE.BarcodeCtrl.1");
	Исключение
		Предупреждение(ОписаниеОшибки()+РазделительСтрок
					+"Компонент ActiveBarcode не установлен на данном компьютере!"+РазделительСтрок
					+"Порядок установки компоненты ActiveBarcode описан в документации.");
	    Возврат;
	КонецПопытки;
	//  Создание Таблицы для выходного отчета
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Этикетка");

	ПечНаименование=Наименование+"; "+БазоваяЕдиница;
	ПечШтрихКод=Строка(ШтрихКод);
	Таб.ВывестиСекцию("Товар|Этикетка");

	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,0,0,ПарСтрСпр);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Этикетка","");
	ВыбТовар=0;
КонецПроцедуры

// ===============================
Процедура ПечатьЦенника()
	Перем ПечЕдиница, ПечНаименование,ПечРозн;
	Перем ЦенаТовара;
	Перем Таб;
 	Перем ЧислоСтрок;
 	Перем Столбик;
 	Перем Ряд;

	//  Создание Таблицы для выходного отчета
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Ценник");
 	ЧислоСтрок=0;
 	Столбик=1;
 	Ряд=0;

	ВыбТовар=ТекущийЭлемент();
	
	Если ПустоеЗначение(ВыбТовар) = 1 Тогда
		Предупреждение("Выберите товар или группу товаров!");
		Возврат;
	КонецЕсли;
	
	Если ВыбТовар.ЭтоГруппа()=1 Тогда
		Тов = СоздатьОбъект("Справочник.ТМЦ");
		Тов.ВключатьПодчиненные(1);
		Тов.ИспользоватьРодителя(ВыбТовар);
		Тов.ВыбратьЭлементы();
		Пока Тов.ПолучитьЭлемент()>0 Цикл
			Если Тов.ПометкаУдаления()=1 Тогда
				Продолжить;
			КонецЕсли;
			Если Тов.ЭтоГруппа()=1 Тогда
				Продолжить;
			КонецЕсли;  

			ПечНаименование=Тов.ПолнНаименование;
			ЦенаТовара = глВернутьЦену(Тов,ТипЦены);
			Если ПустоеЗначение(ЦенаТовара) = 1 Тогда
				// пропускаем товары без цен
				Продолжить;
			КонецЕсли;
			
			ПечЕдиница = ЦенаТовара.Единица.Получить(РабочаяДата());
			ВремЦена = ЦенаТовара.Цена.Получить(РабочаяДата());
			      
			ПечРозн = СокрЛ(Формат(ВремЦена,"Ч15.2"))+" "+ЦенаТовара.Валюта.Получить(РабочаяДата()).Кратко;
			
		 	Столбик=?(Столбик=0,1,0);
		 	Ряд=?(Столбик=0,Ряд+1,Ряд);
			Если Ряд>3 Тогда
				Таб.НоваяСтраница();
				Ряд=1;
			КонецЕсли;
		 	Если Столбик=0 Тогда
				Таб.ВывестиСекцию("Товар|Ценник");
			Иначе
				Таб.ПрисоединитьСекцию("Товар|Ценник");
		 	КонецЕсли;
			глОживить(1);
		КонецЦикла;
	Иначе         

		ПечНаименование=ВыбТовар.ПолнНаименование;
		ЦенаТовара = глВернутьЦену(ВыбТовар,ТипЦены);   
		
		Если ПустоеЗначение(ТипЦены) = 1 Тогда
			// не печатаем товар без цен
			Предупреждение("У товара "+ВыбТовар.Наименование+РазделительСтрок+
			               "не найден список типов цен.");
			Возврат;
		КонецЕсли;                                     
		
		Если ПустоеЗначение(ЦенаТовара) = 1 Тогда
			// не печатаем товар без цены
			Предупреждение("У товара "+ВыбТовар.Наименование+РазделительСтрок+
			               "не найден тип цены '"+ТипЦены.Наименование+"'");
			Возврат;
		КонецЕсли;
		
		ПечЕдиница = ЦенаТовара.Единица.Получить(РабочаяДата());
		ВремЦена = ЦенаТовара.Цена.Получить(РабочаяДата());
		  
		ПечРозн = СокрЛ(Формат(ВремЦена,"Ч15.2"))+" "+ЦенаТовара.Валюта.Получить(РабочаяДата()).Кратко;
		Таб.ВывестиСекцию("Товар");
	КонецЕсли;
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,0,0,ПарСтрСпр);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Ценник товаров","");
	ВыбТовар=0;
КонецПроцедуры

Процедура ПечатьЭтикеткиИнфо()
	Парам = ТекущийЭлемент();
	ОткрытьФорму("Отчет.Этикетка", Парам);	
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю. (05.09.14)
Процедура ПечатьОтчетПоУпаковкам()	
	Попытка
		глРасшифровка.УдалитьВсе();
	Исключение
		глРасшифровка = СоздатьОбъект("СписокЗначений");
	КонецПопытки;

	глФлагРасшифровки = 5;
	//глОбновить = 2;
	СписокВыбТМЦ = СоздатьОбъект("СписокЗначений");
	СписокВыбТМЦ.ДобавитьЗначение(ТекущийЭлемент(),ТекущийЭлемент().Наименование);
	
	глРасшифровка.Установить("ВыбДата", РабочаяДата());
	глРасшифровка.Установить("СписокВыбТМЦ", СписокВыбТМЦ);	
	ОткрытьФорму("Отчет.УМК_ОтчетПоУпаковкам");	
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю. (27.02.15)
Процедура ПечатьОтчетПоУпаковкамСРеквизитами()	
	Попытка
		глРасшифровка.УдалитьВсе();
	Исключение
		глРасшифровка = СоздатьОбъект("СписокЗначений");
	КонецПопытки;
	глФлагРасшифровки = 5;
	//глОбновить = 2;
	СписокВыбТМЦ = СоздатьОбъект("СписокЗначений");
	СписокВыбТМЦ.ДобавитьЗначение(ТекущийЭлемент(),ТекущийЭлемент().Наименование);
	
	глРасшифровка.Установить("ВыбДата", РабочаяДата());
	глРасшифровка.Установить("СписокВыбТМЦ", СписокВыбТМЦ);	
	ОткрытьФорму("Отчет.УМК_ОтчетПоУпаковкамФилиал");	
КонецПроцедуры

//======================================================================
// процедура выбора печати 
// ===============================
Процедура ВыборПечати()
	Перем ВыбЗначение;
	ВыбПечать = СоздатьОбъект("СписокЗначений");

	ВыбПечать.ДобавитьЗначение(1,"&Каталог");
	ВыбПечать.ДобавитьЗначение(2,"&Ценник");
	ВыбПечать.ДобавитьЗначение(3,"&Этикетка");
	ВыбПечать.ДобавитьЗначение(4,"&Этикетка инфо");
	ВыбПечать.ДобавитьЗначение(5,"&Отчет по упаковкам");					//--- УМК Сандомирский В.Ю. (05.09.14) 
	ВыбПечать.ДобавитьЗначение(6,"&Отчет по упаковкам с реквизитами");		//--- УМК Сандомирский В.Ю. (27.02.15)
	
	Если ВыбПечать.ВыбратьЗначение(ВыбЗначение,"",,3,1) <> 1 Тогда
	    Возврат;
	КонецЕсли;    
	
	Если ВыбЗначение = 2 тогда
		ПечатьЦенника();		
	ИначеЕсли ВыбЗначение = 1 тогда   
		ПечатьКаталогаТорг();
	ИначеЕсли ВыбЗначение = 3 тогда
		ПечатьЭтикетки();
	ИначеЕсли ВыбЗначение = 4 тогда
		ПечатьЭтикеткиИнфо();
	ИначеЕсли ВыбЗначение = 5 тогда
		ПечатьОтчетПоУпаковкам();
	ИначеЕсли ВыбЗначение = 6 тогда
		ПечатьОтчетПоУпаковкамСРеквизитами();	//--- УМК Сандомирский В.Ю. (27.02.15) 	
	КонецЕсли;	

КонецПроцедуры
                           
// ===============================
// Название: ПоказатьЦены()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Кнопка "Цены",.
// Описание:
// Открывается форма списка подчиненного справочника цены
Процедура ПоказатьЦены()
	Перем ФормаСпискаЦен;
	
	Если ПустоеЗначение(ТекущийЭлемент())=0 Тогда
	    Если ЭтоГруппа()=0 Тогда
			ФормаСпискаЦен = ТекущийЭлемент();
			ОткрытьФорму("Справочник.Цены.ФормаСписка",ФормаСпискаЦен);
		Иначе
			Предупреждение("Цены для группы не показываются. Выберите товар.");
		КонецЕсли;
	Иначе
		Предупреждение("Выберите товар.");

	КонецЕсли;

КонецПроцедуры	// ПоказатьЦены

// ===============================
Функция УстДоступность()
	фГруппа = ТекущийЭлемент().ЭтоГруппа(); 

	
	Возврат "";
КонецФункции	 

// ===============================
// Название: ПоказатьИсторию()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Кнопка "История",.
// Описание:
// Открывается форма обработки для редактирования периодических реквизитов
Процедура ПоказатьИсторию()
	ТекЭлемент = ТекущийЭлемент();
	Если ПустоеЗначение(ТекЭлемент) = 1 Тогда
	     Предупреждение("Не выбрано ТМЦ.");
		Возврат;
	КонецЕсли;

	Если ТекЭлемент.ЭтоГруппа() = 1 Тогда
	     Предупреждение("Выберите элемент, а не группу.");
		Возврат;
	КонецЕсли;

	глРедактироватьИсториюЗначений(Контекст,
	"",
	"История периодических реквизитов ("+ТекущийЭлемент()+")");
КонецПроцедуры // ПоказатьИсторию

// ===============================
Процедура ПриОткрытии()
	Перем КатегорииЦен,ТекТипЦены;
	
	ИспользоватьДату(РабочаяДата());
	Форма.кПравоваяПоддержка.Видимость(глВидимостьПравовойПоддержки);
	
	// восстановим значение последненго использованного типа цены
	ТекТипЦены = глВосстановитьЗначение(ИмяФормы, "ТипЦеныКаталога", "");
	// заполним список ТипыЦен
	КатегорииЦен = СоздатьОбъект("Справочник.КатегорииЦен");
	КатегорииЦен.ВыбратьЭлементы();
	Пока КатегорииЦен.ПолучитьЭлемент() = 1 Цикл
		Если КатегорииЦен.ПометкаУдаления() = 1 Тогда
			// пропускаем помеченнные на удаление
			Продолжить;
		КонецЕсли;
		ТипыЦен.ДобавитьЗначение(КатегорииЦен.ТекущийЭлемент());
	КонецЦикла;
	
	// первая в списке цена и будет ценой по умолчанию
	Если ТипыЦен.РазмерСписка() > 0 Тогда
		// проверим, а вдруг удалили все категории цен
		Поз = ТипыЦен.НайтиЗначение(ТекТипЦены);
		Если Поз > 0 Тогда
			// если тип цены был сохранен, то установим
			// список в сохраненную позицию
			ТипЦены = ТипыЦен.ТекущаяСтрока(Поз);
		КонецЕсли;
		ИзмТипыЦен();
	КонецЕсли;

	Если глПроверяемыеНаборы.НайтиЗначение(НазваниеНабораПрав()) = 1 Тогда
		ИерархическийСписок(1,0);
	КонецЕсли;

	//--- УМК Сандомирский В.Ю. (06.01.15)
	СпрПрайс = СоздатьОбъект("Справочник.УМК_ПрайсЛист");				
	СпрСтрокиПрайс = СоздатьОбъект("Справочник.УМК_СтрокиПрайсЛиста");	
	ТЗ_ПрайсЛист = СоздатьОбъект("ТаблицаЗначений");
	ТЗ_ПрайсЛист.НоваяКолонка("ТМЦ");
	
	ТЗ_ПрайсЛистВак = СоздатьОбъект("ТаблицаЗначений");
	ТЗ_ПрайсЛистВак.НоваяКолонка("ТМЦ");
	
	СпрСтрокиПрайс.ВыбратьЭлементы(0);
	Пока СпрСтрокиПрайс.ПолучитьЭлемент() = 1 Цикл
		Если (СпрСтрокиПрайс.ПометкаУдаления() <> 1) Тогда
			Если (СпрСтрокиПрайс.Владелец.ДляВакуума = 0) Тогда
				ТЗ_ПрайсЛист.НоваяСтрока();
				ТЗ_ПрайсЛист.ТМЦ = СпрСтрокиПрайс.ТМЦ.ТекущийЭлемент();
			Иначе
				ТЗ_ПрайсЛистВак.НоваяСтрока();
				ТЗ_ПрайсЛистВак.ТМЦ = СпрСтрокиПрайс.ТМЦ.ТекущийЭлемент();
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;	
	//... УМК Сандомирский В.Ю. (06.01.15)
	
	СписПриемка = СоздатьОбъект("СписокЗначений");
	СпрПриемка = СоздатьОбъект("Справочник.УМК_Приемка");
	СпрПриемка.ВыбратьЭлементы();
	Пока СпрПриемка.ПолучитьЭлемент() = 1 Цикл
		Если СпрПриемка.ПометкаУдаления() = 0 Тогда
			СписПриемка.ДобавитьЗначение(СпрПриемка.ТМЦ);
		КонецЕсли;
	КонецЦикла;
	
	//--- УМК Сандомирский В.Ю. (20.03.15)			
	СпрСтрокиОтгрузочного 	= СоздатьОбъект("Справочник.УМК_СтрокиОтгрузочного");	
	ТЗ_Отгрузочный = СоздатьОбъект("ТаблицаЗначений");
	ТЗ_Отгрузочный.НоваяКолонка("ТМЦ");
	СпрСтрокиОтгрузочного.ВыбратьЭлементы(0);
	Пока СпрСтрокиОтгрузочного.ПолучитьЭлемент() = 1 Цикл
		Если СпрСтрокиОтгрузочного.ПометкаУдаления() <> 1 Тогда
			ТЗ_Отгрузочный.НоваяСтрока();
			ТЗ_Отгрузочный.ТМЦ = СпрСтрокиОтгрузочного.ТМЦ.ТекущийЭлемент();
		КонецЕсли;
	КонецЦикла;	
	//... УМК Сандомирский В.Ю. (20.03.15)

	глУстановитьНачальнуюГруппуПользователя(Контекст, глГруппыДоступаПродукции);
КонецПроцедуры

// ===============================
Процедура ПриЗакрытии()
	Перем ТекТипЦены;
	Перем Поз;
	
	Поз = ТипыЦен.ТекущаяСтрока();
	Если Поз > 0 Тогда
		ТекТипЦены = ТипыЦен.ПолучитьЗначение(Поз);
	Иначе
		ТекТипЦены = ПолучитьПустоеЗначение("Справочник.Цены");
	КонецЕсли;
	глСохранитьЗначение(ИмяФормы,"ТипЦеныКаталога", ТекТипЦены);
КонецПроцедуры

// =============================== //--- УМК Сандомирский В.Ю, закоментил (28.05.14)

//Процедура ПересчитатьВУП()
//	СпМеню = СоздатьОбъект("СписокЗначений");
//	СпМеню.ДобавитьЗначение(1, "Цена в/уп.");
//	СпМеню.ДобавитьЗначение(2, "Цена газ/уп.");
//	СпМеню.ДобавитьЗначение(3, "Цена в/уп. опт.");
//	Зн = 1;
//	Если СпМеню.ВыбратьЗначение(Зн,,,,1) = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
//	Если Вопрос("Вы уверены, что хотите установить новую цену в/п"+ РазделительСтрок + 
//	 			" на всю продукцию группы: " + Родитель.Наименование, "Да+Нет") = "Нет" Тогда
//	 	Возврат;	    
//	КонецЕсли;
//	 
//	ВДата = РабочаяДата();
//	Если ВвестиДату(ВДата, "На какую дату установить новое значение?") = 0 Тогда
//	    Возврат
//	КонецЕсли;
//	
//	НЦена = 0;
//	Если ВвестиЧисло(НЦена, "Введите новую цену в/уп.?", 12, 2) = 0 Тогда
//	    Возврат
//	КонецЕсли;
//	
//	НачатьТранзакцию();
//	СпрТМЦ.ИспользоватьРодителя(Родитель);
//	СпрТМЦ.ВыбратьЭлементы();
//	Пока СпрТМЦ.ПолучитьЭлемент() = 1 Цикл
//		Если СпрТМЦ.ЭтоГруппа() = 0 Тогда
//			Если Зн = 1 Тогда
//			    Если СпрТМЦ.ЦенаВУП.Получить(ВДата) <> НЦена Тогда
//			        СпрТМЦ.ЦенаВУП.Установить(ВДата, НЦена);
//					Сообщить(СпрТМЦ);
//				КонецЕсли;
//			ИначеЕсли Зн = 2 Тогда
//			    Если СпрТМЦ.ЦенаГаз.Получить(ВДата) <> НЦена Тогда
//			        СпрТМЦ.ЦенаГаз.Установить(ВДата, НЦена);
//					Сообщить(СпрТМЦ);
//				КонецЕсли;				
//			Иначе				
//			    Если СпрТМЦ.ЦенаВУПО.Получить(ВДата) <> НЦена Тогда
//			        СпрТМЦ.ЦенаВУПО.Установить(ВДата, НЦена);
//					Сообщить(СпрТМЦ);
//				КонецЕсли;			    
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если Вопрос("Сохранить новую цену?", "Да+Нет") = "Да" Тогда
//	    ЗафиксироватьТранзакцию();
//	Иначе
//		ОтменитьТранзакцию();
//	КонецЕсли;	
//КонецПроцедуры

Процедура ОткрытьНормы()
	Если ТекущийЭлемент().Выбран() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КФормы = ТекущийЭлемент();
	ОткрытьФорму("Журнал.ПолныйЖурнал.ДляПросмотраНорм", КФормы);	
КонецПроцедуры

Процедура Движения()
	Попытка
		глРасшифровка.УдалитьВсе();
	Исключение
		глРасшифровка = СоздатьОбъект("СписокЗначений");
	КонецПопытки;
	
	глФлагРасшифровки = 1;
	глОбновить = 1;
		
	// восстанавливаем настройки из списка
	глРасшифровка.Установить("Дата1", НачМесяца(ТекущаяДата()));
	//глРасшифровка.Установить("Дата1", '01.06.2011');
	глРасшифровка.Установить("Дата2", КонМесяца(ТекущаяДата()));
	глРасшифровка.Установить("ВыбФирма");
	глРасшифровка.Установить("ВыбНоменклатура", ТекущийЭлемент());
	глРасшифровка.Установить("ВидОтчета", 1); 
	глРасшифровка.Установить("ЦенаТовара", 1);
	глРасшифровка.Установить("фБезГрупп", 1);
	глРасшифровка.Установить("ДеталПоСкладам", 1);  
	глРасшифровка.Установить("ДеталПоДокументам", 1);  	
	
	ОткрытьФорму("Отчет.ОстаткиТМЦ");		
	глФлагРасшифровки = 0;
	глРасшифровка = "";
	глОбновить = 0;	
КонецПроцедуры

Процедура Партии()
	Попытка
		глРасшифровка.УдалитьВсе();
	Исключение
		глРасшифровка = СоздатьОбъект("СписокЗначений");
	КонецПопытки;

	глФлагРасшифровки = 1;
	глОбновить = 1;

	глРасшифровка.Установить("Дата1", НачМесяца(ТекущаяДата()));
	глРасшифровка.Установить("Дата2", КонМесяца(ТекущаяДата()));
	глРасшифровка.Установить("ВыбФирма");
	глРасшифровка.Установить("ВыбНоменклатура", ТекущийЭлемент());
	глРасшифровка.Установить("ВидСтоимости", 1);
	глРасшифровка.Установить("Колс", 1);
	глРасшифровка.Установить("фБезГрупп", 1);
	Группировки = СоздатьОбъект("СписокЗначений");
	Группировки.ДобавитьЗначение("Поставщик", 	    "Поставщик");           
	Группировки.ДобавитьЗначение("Счет", 	        "Счет учета");
	Группировки.ДобавитьЗначение("МестоХранения",  	"Место хранения");
	Группировки.ДобавитьЗначение("Номенклатура",   	"Номенклатура");
	Группировки.ДобавитьЗначение("ПрихДокумент", 	"Партиеобразующий документ");
	Группировки.ДобавитьЗначение("Документ",	    "Документ движения");
	
	Группировки. Пометка(1,0);
	Группировки. Пометка(2,0);
	Группировки. Пометка(3,0);
	Группировки. Пометка(4,1);
	Группировки. Пометка(5,0);
	Группировки. Пометка(6,1);
	
	глРасшифровка.Установить("Группировки", Группировки);
	ОткрытьФорму("Отчет.ПартииТМЦ");
	глФлагРасшифровки = 0;
	глРасшифровка = "";
	глОбновить = 0;	
КонецПроцедуры

Процедура ПриВыбореРодителя(Элт)
	СтатусВозврата(глПроверитьДоступностьГруппы(Элт));
	Если глПользователь.НакладыватьФильтрыПриОткрытии = 1 Тогда
		СтатусВозврата(глГруппыДоступаПродукции.Принадлежит(Элт));
	КонецЕсли;		
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю, закоментил (22.09.14)
Функция ВернутьИру()
	Если ПустоеЗначение(ТекущийЭлемент()) <> 1 Тогда		
		Возврат ТекущийЭлемент().фИра.Получить(РабочаяДата());		
	КонецЕсли;
КонецФункции // ВернутьИру()

//====================================================================== //--- УМК Сандомирский В.Ю. (21.10.14) изм.(06.01.15)
Функция ВернутьПрайс()		
	ТекСтрока = "";
	Если ТЗ_ПрайсЛист.НайтиЗначение(ТекущийЭлемент(),ТекСтрока,"ТМЦ") = 1 Тогда
		Возврат 6;
	КонецЕсли;		
КонецФункции // ВернутьИру()

Функция ВернутьПрайсВак()		
	ТекСтрока = "";
	Если ТЗ_ПрайсЛистВак.НайтиЗначение(ТекущийЭлемент(),ТекСтрока,"ТМЦ") = 1 Тогда
		Возврат 6;
	КонецЕсли;		
КонецФункции // ВернутьИру()

Функция ВернутьПриемка()		
	ТекСтрока = "";
	Если СписПриемка.НайтиЗначение(ТекущийЭлемент()) <> 0 Тогда
		Возврат 6;
	КонецЕсли;		
КонецФункции // ВернутьИру()

//====================================================================== //--- УМК Сандомирский В.Ю. (20.03.15) 
Функция ВернутьОтгрузочный()
		
	ТекСтрока = "";
	ТекКолонка = "";
	Если ТЗ_Отгрузочный.НайтиЗначение(ТекущийЭлемент(),ТекСтрока,ТекКолонка) = 1 Тогда
		Возврат 9;
	КонецЕсли;
		
КонецФункции // ВернутьИру()

//====================================================================== //--- УМК Сандомирский В.Ю. (29.10.14)
Процедура ПечатьПрайса()	
	ОткрытьФорму("Обработка.УМК_ПечатьПрайсЛиста");
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю. (20.10.15)
Процедура ПечатьОтгрузочного()
	Перем ВыбЗначение;
	ВыбПечать = СоздатьОбъект("СписокЗначений");
	
	ВыбПечать.ДобавитьЗначение("Ф1","&Выделять Ф2");
	ВыбПечать.ДобавитьЗначение("Новые","&Выделять новые");
	ВыбПечать.ДобавитьЗначение("НеВыделять","&Не выделять");
	ВыбПечать.ДобавитьЗначение("Коды","&Коды для весов");
	ВыбПечать.ДобавитьЗначение("Склад","&Склад в/г упаковки");	
		
	Если ВыбПечать.ВыбратьЗначение(ВыбЗначение,"",,3,1) <> 1 Тогда
	    Возврат;
	КонецЕсли;    

	СписПараметров = СоздатьОбъект("СписокЗначений");
	СписПараметров.Установить("ТипЦен", ПолучитьПустоеЗначение("Справочник.КатегорииЦен"));
	СписПараметров.Установить("Вариант", ВыбЗначение);
	ОткрытьФорму("Обработка.УМК_ПечатьОтгрузочного", СписПараметров);
КонецПроцедуры

Процедура ПриПереносеЭлементаВДругуюГруппу(Элемент, Группа)
	Если глГруппыДоступаПродукции.РазмерСписка() <> 0 Тогда // запретим переносит в группу доступа
		Если (глГруппыДоступаПродукции.Принадлежит(Элемент) = 0) Тогда
			Предупреждение("Вам запрещено ТМЦ переносить в свою группу доступа");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Уровень = Группа.Уровень()+1;
	
КонецПроцедуры
