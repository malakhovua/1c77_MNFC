Перем СтарБазоваяЕдиница;
Перем СтарВидЗатрат;

Перем ПерваяЗапись; // Флаг того, что записывается новый элемент.
                    // Используется для того, чтобы записать единицу по умолчанию

Перем НажатаКнопкаЗаписать; // Флаг того, что была нажата кнопка Записать
							// Используется для того, чтобы добавить дополнительные закладки
Перем фЕстьДвижения; // Флаг наличия движений по текущему ТМЦ по регистру партии	
Перем ВведенКопированием, ОбъектКопирования;
Перем ТекущиеНормыЗатрат;


Перем СпрПрайс, СпрСтрокиПрайс;			//--- УМК Сандомирский В.Ю. (21.10.14)
Перем Гатунок, Оболочка, СрокХранения, НаименованиеПрайса; 	//--- УМК Сандомирский В.Ю. (21.10.14) инфа из прайса УМК 
		
Перем ТекЗакладка;		//--- УМК Сандомирский В.Ю. (14.05.15) 

Процедура ЗаполнитьСписокВидовУпаковки() Далее		//--- УМК Сандомирский В.Ю. (09.09.14)
Процедура ЗаполнитьСписокСкладовСписания() Далее
Процедура ЗаполнитьСписокЭтапов() Далее

//======================================================================
Процедура КопироватьСкладыСписания(ОбъектКопирования, Проверять = 0)
	СпрМат = СоздатьОбъект("Справочник.СкладыСписанияДляПродукцииИМатериалов");
	СпрМат2 = СоздатьОбъект("Справочник.СкладыСписанияДляПродукцииИМатериалов");
	СпрМат.ИспользоватьВладельца(ОбъектКопирования);
	СпрМат2.ИспользоватьВладельца(ТекущийЭлемент());
	СпрМат.ВыбратьЭлементы();
	Пока СпрМат.ПолучитьЭлемент() = 1 Цикл
		Если СпрМат.ПометкаУдаления() = 0 Тогда
			Если Проверять = 1 Тогда
				Если СпрМат2.НайтиПоРеквизиту("Материал", СпрМат.Материал, 0) = 1 Тогда
					Если СпрМат2.ПометкаУдаления() = 1 Тогда
						СпрМат2.СнятьПометкуУдаления();
					КонецЕсли;
				Иначе
					СпрМат2.Новый();
				КонецЕсли;
			Иначе
				СпрМат2.Новый();
			КонецЕсли;			
			СпрМат2.Материал = СпрМат.Материал;
			СпрМат2.СкладСписания = СпрМат.СкладСписания;
			СпрМат2.Записать();
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры // 

// ===============================
Процедура ИзмНаименование()
	Если (СокрЛП(ПолнНаименование) = "") Тогда
		ПолнНаименование = Наименование;
	КонецЕсли
КонецПроцедуры 

// ===============================
// Название: ПечатьЭтикетки()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// кнопка "Этикетка".
// Описание:
// процедура формирует печаную форму этикетки штрихкода
Процедура ПечатьЭтикетки()
	Если Модифицированность() = 1 Тогда
		Предупреждение("Нужно сохранить элемент");
		Возврат;
	КонецЕсли;
	
	Парам = СоздатьОбъект("СписокЗначений");
	Парам.ДобавитьЗначение(ТекущийЭлемент(), "ТМЦ");
	Парам.ДобавитьЗначение(1, "Признак");
	ОткрытьФорму("Отчет.Этикетка", Парам);

//	Перем КомпонентABC;
//	
//	// печать этикетки использует компонент ActiveX
//	// разработки фирмы Shenk&Horn - ActiveBarcode версии 3.50
//	Если ПустоеЗначение(ШтрихКод)=1 Тогда
//	    Предупреждение("Не задан штрих код товара");
//	    Возврат;
//	КонецЕсли;
//	Попытка
//		КомпонентABC=СоздатьОбъект("BARCODE.BarcodeCtrl.1");
//	Исключение
//		Предупреждение(ОписаниеОшибки()+РазделительСтрок
//					+"Компонент ActiveBarcode не установлен на данном компьютере!"+РазделительСтрок
//					+"Порядок установки компоненты ActiveBarcode описан в документации.");
//	    Возврат;
//	КонецПопытки;
//	
//	//  Создание Таблицы для выходного отчета
//	Таб=СоздатьОбъект("Таблица");
//	Таб.ИсходнаяТаблица("Этикетка");
//
//	ПечНаименование=Наименование+"; "+БазоваяЕдиница;
//	ПечШтрихКод=Строка(ШтрихКод);
//	Таб.ВывестиСекцию("Товар|Этикетка");
//
//	//Вызов выходного отчета в окно просмотра и редактирования.
//	Таб.Опции(0,0,0,0,ПарСтрСпр);
//	Таб.Защита(Константа.ФлагЗащитыТаблиц);
//	Таб.ТолькоПросмотр(1);
//	Таб.Показать("Этикетка","");
//	ВыбТовар=0;
КонецПроцедуры	// ПечатьЭтикетки

// ===============================
Процедура ПечатьЦенника()
	Перем ПечНаименование, Ценник, ВремЦена, ЦенаТовара, ПечЕдиница, ПечВалюта;
	Если Выбран() = 0 Тогда
		Предупреждение("Элемент не сохранен!");
		Возврат;
	КонецЕсли;
	
	Ценник = СоздатьОбъект("Таблица");
	Ценник.ИсходнаяТаблица("Ценник");
	
	ПечНаименование = ПолнНаименование; 	
	
	// Печатаем цену, указанную как розничная
	Если ПустоеЗначение(Константа.РозничнаяКатегорияЦен) = 0 Тогда
		ЦенаТовара = глВернутьЦену(ТекущийЭлемент(), Константа.РозничнаяКатегорияЦен);
		Если ПустоеЗначение(ЦенаТовара) = 0 Тогда
			ВремЦена = ЦенаТовара.Цена.Получить(РабочаяДата());   
			ПечВалюта = ЦенаТовара.Валюта.Получить(РабочаяДата());
			ПечЕдиница = ЦенаТовара.Единица.Получить(РабочаяДата());
			ПечРозн = СокрЛ(Формат(ВремЦена,"Ч15.2"))+" "+ПечВалюта.Кратко;
		Иначе
			// цену не нашли
			// не печатаем товар без цены
			Предупреждение("У товара "+Наименование+РазделительСтрок+
			               "не найден тип цены '"+Константа.РозничнаяКатегорияЦен.Наименование+"'");
			Возврат;
		КонецЕсли;
	Иначе
		// не задана розничная категория
			Предупреждение("Не задана розничная категория цен.");
			Возврат;
	КонецЕсли;
	
	Ценник.ВывестиСекцию("Товар|Ценник");
	Ценник.Опции(0,0,0,0);
	Ценник.Показать("Ценник");

КонецПроцедуры

// ===============================
//	Возращаемое значение:
//		1 - уникален
//		0 - нет
//	Вызавается из поля "Штрихкод"
//	Описание:
Функция ПроверкаУникальностиШтрихкода()
	Перем ЕдиницаДляПоиска;
	Перем ВозвращаемоеЗначение;
	
	Если ПустоеЗначение(Штрихкод)=1 Тогда
	      // пустой штрихкод не проверяем на уникальность
		Возврат 1;
	КонецЕсли;

	ВозвращаемоеЗначение = 1;
	// проверим , а нет ли у другого товара такого же штрихкода
	ЕдиницаДляПоиска = СоздатьОбъект("Справочник.Единицы");
	Если ЕдиницаДляПоиска.НайтиПоРеквизиту("Штрихкод",ШтрихКод,1)=1 Тогда
		// штрихкод найден
		Если Выбран()=1 Тогда
			Если (ТекущийЭлемент() <> ЕдиницаДляПоиска.Владелец) Тогда
				// найден такой штрихкод в единице измерения другого товара
				ВозвращаемоеЗначение = 0;
			ИначеЕсли БазоваяЕдиница <> ЕдиницаДляПоиска.Единица Тогда
				// найден в единице измерения этого товар, но тип не совбадет с базовым
				ВозвращаемоеЗначение = 0;
			КонецЕсли;
		Иначе
			ВозвращаемоеЗначение = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
КонецФункции

// ===============================
Процедура ВыбратьЛьготу()
Перем Выб;
    Спр = СоздатьОбъект("Справочник.ШкалаСтавок");
	Спис = СоздатьОбъект("СписокЗначений");
	Если Спр.НайтиПоКоду("ЛьготыНДС") = 1 Тогда
	    Льготы = Спр.ТекущийЭлемент();
		Спр.ИспользоватьРодителя(Льготы);
		Спр.ВыбратьЭлементы(); 
		Пока Спр.ПолучитьЭлемент() = 1 Цикл 
			Спис.ДобавитьЗначение(Спр.ТекущийЭлемент());	
		КонецЦикла;
		Выб = ПолучитьПустоеЗначение("Справочник.ШкалаСтавок");
		Выб = ЛьготаНДС; // справочник ТМЦ
		Если Спис.ВыбратьЗначение(Выб,,,,2) = 1 Тогда
			ЛьготаНДС = Выб;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// ===============================
// Название: СформироватьШтрихКод()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// кнопка "Сформирвать свой штрихкод".
// Описание:
// процедура предназначена для формирования штрихкода
// в формате EAN 13. Сформированный штрихкод записывается в реквизит "ШтрихКод"
Процедура СформироватьШтрихКод() //Формирование внутреннего шрих кода
	Перем Префикс;
	
	Если ПустоеЗначение(ШтрихКод)=0 Тогда
		// если штрихкод уже задан, то сначала нужно уточнить,
		// а действительно ли нужно формировать
		Если Вопрос("Штрих-код задан. Сформировать новый?",4)<>6 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;    
	
	Префикс = "20";
	ШтрихКод=глСформироватьEAN13(Строка(Префикс)+глДополнитьСтроку(Строка(Код),"0",8,1) + 
									  глДополнитьСтроку(Строка(1),"0",2,1));
КонецПроцедуры	// СформироватьШтрихКод

// ===============================
Процедура ЗаполнитьСписокКомплектующих()
	Перем КомлектующиеНабора;
	Перем Индекс;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	КомлектующиеНабора = СоздатьОбъект("Справочник.Комплектация");
	КомлектующиеНабора.ИспользоватьВладельца(ТекущийЭлемент());
	КомлектующиеНабора.ВыбратьЭлементы();
	Индекс = 0; 
	СписокКомплектующих.УдалитьСтроки();
	Пока КомлектующиеНабора.ПолучитьЭлемент()=1 Цикл
		Если КомлектующиеНабора.ПометкаУдаления()=1 Тогда
		    Продолжить;
		КонецЕсли;

	    Индекс = Индекс + 1;
		СписокКомплектующих.НоваяСтрока(Индекс);
		СписокКомплектующих.Ссылка 		= КомлектующиеНабора.ТекущийЭлемент();
		СписокКомплектующих.СвязаныйТМЦ = КомлектующиеНабора.Товар;
		СписокКомплектующих.Количество 	= КомлектующиеНабора.Кво;
	КонецЦикла;
	
КонецПроцедуры	// ЗаполнитьСписокКомплектующих 

// =============================== //--- УМК Сандомирский В.Ю, (для связанные элементы ценообразования ) 22.04.14
Процедура ЗаполнитьСписокСвязаныхЭлементов()
	Перем СвязанныеЭлементы;
	Перем Индекс;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	СвязанныеЭлементы = СоздатьОбъект("Справочник.СвязаныеЭлементыЦенообразования");
	СвязанныеЭлементы.ИспользоватьВладельца(ТекущийЭлемент());
	СвязанныеЭлементы.ВыбратьЭлементы();
	Индекс = 0; 
	СписокСвязаныхЭлементов.УдалитьСтроки();
	Пока СвязанныеЭлементы.ПолучитьЭлемент()=1 Цикл
		Если СвязанныеЭлементы.ПометкаУдаления()=1 Тогда
		    Продолжить;
		КонецЕсли;

	    Индекс = Индекс + 1;
		СписокСвязаныхЭлементов.НоваяСтрока(Индекс);
		СписокСвязаныхЭлементов.Ссылка 		= СвязанныеЭлементы.ТекущийЭлемент();
		СписокСвязаныхЭлементов.СвязаныйТМЦ	= СвязанныеЭлементы.СвязаныйТМЦ;
		СписокСвязаныхЭлементов.Коэффициент = СвязанныеЭлементы.Коэффициент;
	КонецЦикла;
	
КонецПроцедуры	// ЗаполнитьСписокСвязаныхЭлементов 

// ===============================
Процедура ЗаполнитьФайлы()
	Перем КомлектующиеНабора;
	Перем Индекс;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	ФЛ = СоздатьОбъект("Справочник.Файлы");
	ФЛ.ИспользоватьВладельца(ТекущийЭлемент());
	ФЛ.ВыбратьЭлементы();
	Индекс = 0; 
	Файлы.УдалитьСтроки();
	Пока ФЛ.ПолучитьЭлемент()=1 Цикл
		Если ФЛ.ПометкаУдаления()=1 Тогда
		    Продолжить;
		КонецЕсли;

	    Индекс = Индекс + 1;
		Файлы.НоваяСтрока(Индекс);
		Файлы.Ссылка = ФЛ.ТекущийЭлемент();
		Файлы.Категория = ФЛ.Категория;
		Файлы.Описание = ФЛ.Наименование;
	КонецЦикла;
	
	Файлы.Сортировать("Категория,Описание");
КонецПроцедуры	// ЗаполнитьФайлы      

// ======================================
Процедура ПолучитьТекущиеНормыЗатрат()
	
	Пер = СоздатьОбъект("Периодический");
	Пер.ИспользоватьОбъект("НормыЗатрат", ТекущийЭлемент());
	ТекущиеНормыЗатрат = Пер.ЗначениеНаДату(РабочаяДата());
	
КонецПроцедуры	// ПолучитьТекущиеНормыЗатрат

// ======================================
Процедура ЗаполнитьНормативныйСостав()
	ПолучитьТекущиеНормыЗатрат();
	Если ТекущиеНормыЗатрат.Выбран() = 1 Тогда
		Док = СоздатьОбъект("Документ.НормыЗатрат");
		Док.НайтиДокумент(ТекущиеНормыЗатрат);
		Док.ВыгрузитьТабличнуюЧасть(СписокНормыЗатрат,"НомерСтроки,ВидЭлемента,Элемент,Кво,Ед,Сумма");
		СписокНормыЗатрат.УстановитьПараметрыКолонки("ВидЭлемента",,,," Вид элемента",19);
		СписокНормыЗатрат.УстановитьПараметрыКолонки("Элемент",,,," Элемент",28);
		СписокНормыЗатрат.УстановитьПараметрыКолонки("Кво",,,," Кол-во",10);
		СписокНормыЗатрат.УстановитьПараметрыКолонки("Ед",,,," Ед.",6); 
		//СписокНормыЗатрат.УстановитьПараметрыКолонки("Коэффициент",,,," К.",8); 
		СписокНормыЗатрат.УстановитьПараметрыКолонки("Сумма",,,," Сумма",10); 
	КонецЕсли
КонецПроцедуры	//ЗаполнитьНормативныйСостав

// ======================================
Процедура ДобавитьДополнительныеЗакладки()
	Если Выбран() = 1 Тогда
		Если Форма.Закладки.НайтиЗначение("Цены") = 0 Тогда
			Форма.Закладки.ДобавитьЗначение("Цены","Цены");
		КонецЕсли;

		Если Форма.Закладки.НайтиЗначение("ИсключенияТЦ") = 0 Тогда
			Форма.Закладки.ДобавитьЗначение("ИсключенияТЦ","Исключения по ТЦ");
		КонецЕсли;
		
		Если Форма.Закладки.НайтиЗначение("Этикетка") = 0 Тогда
			Форма.Закладки.ДобавитьЗначение("Этикетка","Этикетка");
		КонецЕсли;
		
		Если Форма.Закладки.НайтиЗначение("Сортировка") = 0 Тогда
			Форма.Закладки.ДобавитьЗначение("Сортировка","Сортировка");
		КонецЕсли;
		
		Если Форма.Закладки.НайтиЗначение("Единицы") = 0 Тогда
			Форма.Закладки.ДобавитьЗначение("Единицы","Единицы");
		КонецЕсли;

		Если Форма.Закладки.НайтиЗначение("ПроцСписания") = 0 Тогда
			Форма.Закладки.ДобавитьЗначение("ПроцСписания","Проценты");
		КонецЕсли;		
		Если Форма.Закладки.НайтиЗначение("Категории") = 0 Тогда
			Форма.Закладки.ДобавитьЗначение("Категории","Категории");
		КонецЕсли;
		Если Форма.Закладки.НайтиЗначение("Контрагенты") = 0 Тогда
			Форма.Закладки.ДобавитьЗначение("Контрагенты","Контрагенты");
		КонецЕсли;		
		Если Форма.Закладки.НайтиЗначение("СкладыСписания") = 0 Тогда
			Форма.Закладки.ДобавитьЗначение("СкладыСписания","Склады списания");
		КонецЕсли;
		Если Форма.Закладки.НайтиЗначение("Этапы") = 0 Тогда
			Форма.Закладки.ДобавитьЗначение("Этапы","Этапы пр-ва");
		КонецЕсли;

		НажатаКнопкаЗаписать = 0;
	КонецЕсли;
КонецПроцедуры 

// ===============================
Функция ЕстьДвиженияПоПартиям()
	Если (фЕстьДвижения <> 1) И (Выбран()=1) Тогда
		фЕстьДвижения=0;
		РегПартии=СоздатьОбъект("Регистр.Партии");
		РегПартии.УстановитьЗначениеФильтра("ТМЦ",ТекущийЭлемент(),2);
		РегПартии.ВыбратьДвижения('01.01.2000',,);
		Если РегПартии.ПолучитьДвижение()=1 Тогда
			фЕстьДвижения=1;
		КонецЕсли;
	КонецЕсли;		        
	Если фЕстьДвижения = 1 Тогда
	    Предупреждение("По данному ТМЦ есть движения в регистре ""Партии"". Редактирование запрещено.");
	КонецЕсли;	
	Возврат фЕстьДвижения;
КонецФункции

//======================================================================
Процедура ЗаполнитьСписокМатериаловУпаковки()	
	Если СписокВидовУпаковки.КоличествоСтрок() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокВидовУпаковки.Ссылка.Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	глЗаполнитьСписокМатериаловУпаковки(СписокМатериаловУпаковки, СписокВидовУпаковки.Ссылка, "", РабочаяДата(), 1,,,0);
КонецПроцедуры // ЗаполнитьСписокМатериаловУпаковки()

// ===============================
Функция УстДоступность()
	Если ТМЦСТакимЖеФаршемИ <> ТМЦСТакимЖеФаршем Тогда
		ТМЦСТакимЖеФаршемИ = ТМЦСТакимЖеФаршем
	КонецЕсли;
	Если ОдинаковаяПрРазныеМаркИ <> ОдинаковаяПрРазныеМарк Тогда
		ОдинаковаяПрРазныеМаркИ = ОдинаковаяПрРазныеМарк;
	КонецЕсли;	
	
	Если НажатаКнопкаЗаписать = 1 Тогда
		// после записи нового элемента справочника нужно добавить доп. закладки
		ДобавитьДополнительныеЗакладки();
		
		//Добавляем или удаляем закладку Набор
		Если (ВидТМЦ = Перечисление.ВидыТМЦ.Набор) И (Выбран() = 1) Тогда 
			Позиция = Форма.Закладки.НайтиЗначение("Набор");
			Если Позиция = 0 Тогда
				Форма.Закладки.ДобавитьЗначение("Набор","Набор");
				ЗаполнитьСписокКомплектующих();
			КонецЕсли;
		Иначе
			Позиция = Форма.Закладки.НайтиЗначение("Набор");
			Если Позиция > 0 Тогда
				Форма.Закладки.УдалитьЗначение(Позиция);
				Форма.Закладки.ТекущаяСтрока(1);
				Форма.ИспользоватьСлой("Основной, Общий",2);
			КонецЕсли;
		КонецЕсли;	
		
		//Добавляем или удаляем закладку Продукция
		Если ((ВидТМЦ = Перечисление.ВидыТМЦ.Продукция) или (ВидТМЦ = Перечисление.ВидыТМЦ.Полуфабрикат)
		или (ВидТМЦ = Перечисление.ВидыТМЦ.Услуга)) И (Выбран() = 1) Тогда 
			Позиция = Форма.Закладки.НайтиЗначение("Продукция");
			Если (Позиция = 0) и (НазваниеНабораПрав() <> "Заказ") и (НазваниеНабораПрав() <> "Прочие") 
				и (НазваниеНабораПрав() <> "ПрочиеЗаказ") 
				И (НазваниеНабораПрав() <> "МастерЭкспедиции") 
				и (НазваниеНабораПрав() <> "ПрочиеВыписка") 
				и (НазваниеНабораПрав() <> "ТехнологЭкспедиции") 
				и (НазваниеНабораПрав() <> "Розница") 
				И ((глГруппыДоступаПродукции.РазмерСписка() = 0) ИЛИ (глГруппыДоступаПродукции.Принадлежит(ТекущийЭлемент()) = 1)) Тогда
				Форма.Закладки.ДобавитьЗначение("Продукция","Продукция");
				ЗаполнитьНормативныйСостав();
			КонецЕсли;
		Иначе
			Позиция = Форма.Закладки.НайтиЗначение("Продукция");
			Если Позиция > 0 Тогда
				Форма.Закладки.УдалитьЗначение(Позиция);
				Форма.Закладки.ТекущаяСтрока(1);
				Форма.ИспользоватьСлой("Основной, Общий",2);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

	Если ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда 
		Форма.Транспорт.Доступность(1);                   
		Если УровеньПередела <> 0 Тогда
			УровеньПередела = 0;
		КонецЕсли;
		Форма.УровеньПередела.Доступность(0);
	Иначе
		Форма.Транспорт.Доступность(0);      
		Форма.УровеньПередела.Доступность(1);
	КонецЕсли;
	
	// для наборов и услуг минимильный товарный остаток обнулим и сделаем недоступным
	Если (ВидТМЦ = Перечисление.ВидыТМЦ.Набор) или (ВидТМЦ = Перечисление.ВидыТМЦ.Услуга) Тогда
		Форма.МинимальныйОстаток.Доступность(0);
		Форма.тМинимальныйОстаток.Доступность(0);
		Если МинимальныйОстаток <> 0 Тогда
			МинимальныйОстаток = 0;
		КонецЕсли;
	Иначе
		Форма.МинимальныйОстаток.Доступность(1);
		Форма.тМинимальныйОстаток.Доступность(1);
	КонецЕсли;

	Если СписокЕдиниц.КоличествоСтрок() = 0 Тогда
		Форма.кИзменитьЕдиницу.Доступность(0);
		Форма.кУдалитьЕдиницу.Доступность(0);
	Иначе
		Форма.кИзменитьЕдиницу.Доступность(1);
		Форма.кУдалитьЕдиницу.Доступность(1);
	КонецЕсли;

	Если Файлы.КоличествоСтрок() = 0 Тогда
		Форма.кИзменитьФайл.Доступность(0);
		Форма.кУдалитьФайл.Доступность(0);
		Форма.кОткрытьФайл.Доступность(0);
	Иначе
		Форма.кИзменитьФайл.Доступность(1);
		Форма.кУдалитьФайл.Доступность(1);
		Форма.кОткрытьФайл.Доступность(1);
	КонецЕсли;

	Если СписокКатегорий.РазмерСписка() = 0 Тогда
		Форма.кУдалитьКатегорию.Доступность(0);
	Иначе
		Форма.кУдалитьКатегорию.Доступность(1);
	КонецЕсли;

	
	Если Форма.АктивныйЭлемент() <> "СписокЦен" Тогда //--- УМК Сандомирский В.Ю. (17.02.15) расстормаживаю перемещение по списку
		Если Файлы.ТекущаяСтрока() <> 0 Тогда
			Если Файлы.Ссылка.Картинка = 1 Тогда
			    Путь = СокрЛП(Файлы.Ссылка.Путь);
				Попытка
					сКартинка.Загрузить(Путь);
				Исключение
				КонецПопытки;			
			Иначе
				Файлы.ВыбратьСтроки();
				Пока Файлы.ПолучитьСтроку() = 1 Цикл
					Если Файлы.Ссылка.Картинка = 1 Тогда
					    Путь = СокрЛП(Файлы.Ссылка.Путь);
						Если Путь <> "" Тогда
							сКартинка.Загрузить(Путь);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;	
	
	Если Форма.ТолькоПросмотр() = 1 Тогда
	    Форма.кШтрихКод.Доступность(0);
		Форма.кДобавитьЕдиницу.Доступность(0);
		Форма.кУдалитьЕдиницу.Доступность(0);
		Форма.кИзменитьЕдиницу.Доступность(0);
		Форма.кДобавитьПроцент.Доступность(0);
		Форма.кУдалитьПроцент.Доступность(0);
		Форма.кИзменитьПроцент.Доступность(0);
		Форма.кДобавитьЦену.Доступность(0);
		Форма.кИзменитьЦену.Доступность(0);
		Форма.кУдалитьЦену.Доступность(0);
		Форма.кСформироватьЦену.Доступность(0);
		Форма.кСформироватьНаценку.Доступность(0);
		Форма.кЗаполнитьЦены.Доступность(0);
		Форма.кДобавитьКатегорию.Доступность(0);
		Форма.кУдалитьКатегорию.Доступность(0);
		Форма.кДобавитьКонтрагента.Доступность(0);
		Форма.кУдалитьКонтрагента.Доступность(0);		
		Форма.кДобавить.Доступность(0);
		Форма.кУдалить.Доступность(0);
		Форма.кИзменить.Доступность(0);
		Форма.кНовыйНормыЗатрат.Доступность(0);
		Форма.кОбновитьНормыЗатрат.Доступность(0);
	Иначе
		Если Выбран() = 1 Тогда
			Форма.рЦены.Доступность(1);
			Форма.СписокЦен.Доступность(1);
			Форма.кДобавитьЦену.Доступность(1);
			Форма.кЗаполнитьЦены.Доступность(1);
			Если СписокЦен.КоличествоСтрок() = 0 Тогда
				Форма.кИзменитьЦену.Доступность(0);
				Форма.кУдалитьЦену.Доступность(0);
				Форма.кСформироватьЦену.Доступность(0);
				Форма.кСформироватьНаценку.Доступность(0);
			Иначе
				Форма.кИзменитьЦену.Доступность(1);
				Форма.кУдалитьЦену.Доступность(1);
				Форма.кСформироватьЦену.Доступность(1);
				Форма.кСформироватьНаценку.Доступность(1);
			КонецЕсли;
		Иначе
			Форма.рЦены.Доступность(0);
			Форма.СписокЦен.Доступность(0);
			Форма.кДобавитьЦену.Доступность(0);
			Форма.кИзменитьЦену.Доступность(0);
			Форма.кУдалитьЦену.Доступность(0);
			Форма.кСформироватьЦену.Доступность(0);
			Форма.кСформироватьНаценку.Доступность(0);
			Форма.кЗаполнитьЦены.Доступность(0);
		КонецЕсли;		
		Если СписокКомплектующих.КоличествоСтрок()=0 Тогда
			Форма.кИзменить.Доступность(0);
			Форма.кУдалить.Доступность(0);
		Иначе
			Форма.кИзменить.Доступность(1);
			Форма.кУдалить.Доступность(1);
		КонецЕсли;
	КонецЕсли;
	
	//Если СписокНормыЗатрат.КоличествоСтрок()=0 Тогда	//--- УМК Сандомирский В.Ю. (16.03.15)
	//	Форма.кПечать.Доступность(0);
	//Иначе                            
	//	Форма.кПечать.Доступность(1);
	//КонецЕсли;

	Если СтавкаНДС.Код = "БезНДС" Тогда
		Форма.ЛьготаНДС.Доступность(1);
		Форма.тЛьготаНДС.Доступность(1);
	Иначе
		Форма.ЛьготаНДС.Доступность(0);
		Форма.тЛьготаНДС.Доступность(0);
		Если ПустоеЗначение(ЛьготаНДС) = 0 Тогда
			ЛьготаНДС = ПолучитьПустоеЗначение("Справочник.ШкалаСтавок");
		КонецЕсли;	
	КонецЕсли;	
	Если (НазваниеНабораПрав() <> "Администратор") и (НазваниеНабораПрав() <> "Производство") и (НазваниеНабораПрав() <> "ПроизводствоКасса") Тогда
	    Форма.СхемаРасчетаЗП.Видимость(0);
		Форма.тСхема.Видимость(0);
		Форма.кОткрытьСхему.Видимость(0);
	КонецЕсли;
		
	Если Форма.АктивныйЭлемент() <> "СписокЦен" Тогда //--- УМК Сандомирский В.Ю. (17.02.15) расстормаживаю перемещение по списку	
		ЗаполнитьСписокМатериаловУпаковки();	//--- УМК Сандомирский В.Ю. (27.10.14)
	КонецЕсли;
	
	Если ТекЗакладка = "РазрешенныеВидыУпаковки" Тогда							//--- УМК Сандомирский В.Ю. (14.05.15)
		Если СписокВидовУпаковки.ТекущаяСтрока() > 0 Тогда
			ЗаполнитьСписокМатериаловУпаковки();	
			Если ПустоеЗначение(СписокВидовУпаковки.Ссылка.Путь) <> 1 Тогда
				Попытка
					сКартинкаУп.Загрузить(СокрЛП(СписокВидовУпаковки.Ссылка.Путь));
				Исключение
				КонецПопытки;
			Иначе
				ПустаяКартинка = СоздатьОбъект("Картинка");
				сКартинкаУп.УстановитьКартинку(ПустаяКартинка);
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;											//... УМК Сандомирский В.Ю. (14.05.15)
	
	Форма.кУдалитьСвязаныйЭлемент1.Заголовок("Удалить");
	Поз = СписокВидовУпаковки.ТекущаяСтрока();
	Если Поз <> 0 Тогда
		Форма.кУдалитьСвязаныйЭлемент1.Заголовок(?(СписокВидовУпаковки.ПолучитьЗначение(Поз, "ПометкаУдаления") = 1, "Сн. пометку", "Удалить"));
	КонецЕсли;

	ВидЭ_ = "";
	НаименованиеЭ_ = "";
	УсловияХранения_ = "";
	ОписаниеЭ_ = "";
	УсловияХраненияВП_ = "";
	УсловияХраненияВС_ = "";
	УсловияХраненияВЦ_ = "";
	УсловияХраненияГ_ = "";
	Если Форма.Закладки.ПолучитьЗначение(Форма.Закладки.ТекущаяСтрока()) = "Этикетка" Тогда
		Если СписокВЭ.ТекущаяСтрока() <> 0 Тогда
			СпрЭ = СоздатьОбъект("Справочник.Этикетки");
			СпрЭ.НайтиЭлемент(СписокВЭ.ПолучитьЗначение(СписокВЭ.ТекущаяСтрока(), "Ссылка"));
			УсловияХранения_ = СпрЭ.УсловияХранения;
			ВидЭ_ = СпрЭ.ВидЭ;
			НаименованиеЭ_ = СпрЭ.НаименованиеЭ;
			ОписаниеЭ_ = СпрЭ.ОписаниеЭ;
			УсловияХраненияВП_ = СпрЭ.УсловияХраненияВП;
			УсловияХраненияВС_ = СпрЭ.УсловияХраненияВС;
			УсловияХраненияВЦ_ = СпрЭ.УсловияХраненияВЦ;
			УсловияХраненияГ_ = СпрЭ.УсловияХраненияГ;
		КонецЕсли;
	КонецЕсли;

	Возврат "";
КонецФункции
             
// ===============================
// Название: ЗаполнитьСписокЕдиниц()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Описание:
// заполняет таблицу "СписокЕдиниц" единицами измерения товара
Процедура ЗаполнитьСписокЕдиниц()
	Перем ЕдиницыТовара;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	ЕдиницыТовара = СоздатьОбъект("Справочник.Единицы");
	ЕдиницыТовара.ИспользоватьВладельца(ТекущийЭлемент());
	
	// очищаем все строки
	СписокЕдиниц.УдалитьСтроки();
	
	ЕдиницыТовара.ВыбратьЭлементы();
	Пока ЕдиницыТовара.ПолучитьЭлемент() = 1 Цикл
		Если ЕдиницыТовара.ПометкаУдаления()=1 Тогда
		    // помеченные на удаление не добавляем
			Продолжить;
		КонецЕсли;

		СписокЕдиниц.НоваяСтрока();
		СписокЕдиниц.Ссылка = ЕдиницыТовара.ТекущийЭлемент();
		СписокЕдиниц.Единица = ЕдиницыТовара.Единица;
		СписокЕдиниц.Коэффициент = ЕдиницыТовара.Коэффициент;
		СписокЕдиниц.Штрихкод = ЕдиницыТовара.Штрихкод;
	КонецЦикла;

КонецПроцедуры	// ЗаполнитьСписокЕдиниц
                          
// ===============================
// Название: ЗаполнитьСписокПроцентов()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Описание:
// заполняет таблицу "СписокПроц" единицами измерения товара
Процедура ЗаполнитьСписокПроцентов()
	Перем ПроцТовара;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	ПроцТовара = СоздатьОбъект("Справочник.ПроцентыСписания");
	ПроцТовара.ИспользоватьВладельца(ТекущийЭлемент());
	
	// очищаем все строки
	СписПроц.УдалитьСтроки();
	
	ПроцТовара.ВыбратьЭлементы();
	Пока ПроцТовара.ПолучитьЭлемент() = 1 Цикл
		Если ПроцТовара.ПометкаУдаления()=1 Тогда
		    // помеченные на удаление не добавляем
			Продолжить;
		КонецЕсли;

		СписПроц.НоваяСтрока();
		СписПроц.Ссылка = ПроцТовара.ТекущийЭлемент();
		СписПроц.Склад = ПроцТовара.МестоХранения;
		СписПроц.ПроцСписания = ПроцТовара.ПроцСписания.Получить(ТекущаяДата());
	КонецЦикла;

КонецПроцедуры	// ЗаполнитьСписокЕдиниц

// ===============================
// Название: ЗаполнитьСписокКатегорий()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Описание:
// заполняет таблицу "СписокКатегорий" из справочника "КатегорииТоваров"
// только теми категориями, к которым принадлежит товар.
Процедура ЗаполнитьСписокКатегорий()
	Перем КатегорииТоваров;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	КатегорииТоваров = СоздатьОбъект("Справочник.КатегорииТоваров");
	КатегорииТоваров.ИспользоватьВладельца(ТекущийЭлемент());
	
	// очищаем все строки
	СписокКатегорий.УдалитьВсе();
	
	КатегорииТоваров.ВыбратьЭлементы();
	Пока КатегорииТоваров.ПолучитьЭлемент() = 1 Цикл
	    Если КатегорииТоваров.ПометкаУдаления() = 0 Тогда
			СписокКатегорий.ДобавитьЗначение(КатегорииТоваров.ТекущийЭлемент(),
			                                 КатегорииТоваров.Категория.ПолноеНаименование());
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	// ЗаполнитьСписокКатегорий

// ===============================
// Название: ЗаполнитьСписокКатегорий()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Описание:
// заполняет таблицу "СписокКатегорий" из справочника "КатегорииТоваров"
// только теми категориями, к которым принадлежит товар.
Процедура ЗаполнитьСписокКонтрагентов()
	Перем Контрагенты;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	Контрагенты = СоздатьОбъект("Справочник.КонтрагентыПродукции");
	Контрагенты.ИспользоватьВладельца(ТекущийЭлемент());
	
	// очищаем все строки
	СписокКонтрагентов.УдалитьВсе();
	
	Контрагенты.ВыбратьЭлементы();
	Пока Контрагенты.ПолучитьЭлемент() = 1 Цикл
	    Если Контрагенты.ПометкаУдаления() = 0 Тогда
			СписокКонтрагентов.ДобавитьЗначение(Контрагенты.ТекущийЭлемент(), Контрагенты.Контрагент.Наименование + ?(Контрагенты.Контрагент.ЭтоГруппа() = 1, " / группа", ""));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	// ЗаполнитьСписокКатегорий

// ===============================
// Название: ЗаполнитьСписокЦен()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
Процедура ЗаполнитьСписокЦен()
	Перем ЦеныТовара;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;              
	
	ЦеныТовара = СоздатьОбъект("Справочник.Цены");
	ЦеныТовара.ИспользоватьДату(РабочаяДата());
	ЦеныТовара.ИспользоватьВладельца(ТекущийЭлемент());
	
	// очищаем все строки
	СписокЦен.УдалитьСтроки();
	
	// заполняем таблицу
	ЦеныТовара.ВыбратьЭлементы();
	Пока ЦеныТовара.ПолучитьЭлемент() = 1 Цикл
	    Если ЦеныТовара.ПометкаУдаления() = 0 Тогда
			СписокЦен.НоваяСтрока();
			СписокЦен.Ссылка= ЦеныТовара.ТекущийЭлемент();
			СписокЦен.Валюта = ЦеныТовара.Валюта;
			СписокЦен.Единица = ЦеныТовара.Единица;
			СписокЦен.КатегорияЦены = ЦеныТовара.КатегорияЦены;
	//		СписокЦен.Наценка = ЦеныТовара.Наценка;		//... УМК Сандомирский В.Ю, 01.07.14 г. (закоментил - уходим от наценок)
			СписокЦен.Цена = ЦеныТовара.Цена;
			СписокЦен.СхемаЦенообразования	= ЦеныТовара.СхемаЦенообразования;		// --- УМК Сандомирский В.Ю, (Схема ценообразования 18.03.14)
			Если глСхемаВШаблоне(ЦеныТовара,ШаблонСхемЦенообразования) = 1 Тогда  	// --- УМК Сандомирский В.Ю, В.Ю. 28.05.14 г.
			    СписокЦен.СхемаВШаблоне = "+";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	// ЗаполнитьСписокЦен
                           
// ===============================
Процедура ЗаполнитьСписокЭтикеток()
	Перем Этикетки;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;              
	
	Этикектки = СоздатьОбъект("Справочник.Этикетки");
	Этикектки.ИспользоватьДату(РабочаяДата());
	Этикектки.ИспользоватьВладельца(ТекущийЭлемент());
	
	// очищаем все строки
	СписокВЭ.УдалитьСтроки();
	
	// заполняем таблицу
	Этикектки.ВыбратьЭлементы();
	Пока Этикектки.ПолучитьЭлемент() = 1 Цикл
	    Если Этикектки.ПометкаУдаления() = 0 Тогда
			СписокВЭ.НоваяСтрока();
			СписокВЭ.Ссылка = Этикектки.ТекущийЭлемент();
			СписокВЭ.ВидЭтикетки = Этикектки.ВидВесов;
			СписокВЭ.ПометкаУдаления = Этикектки.ПометкаУдаления();		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСписокИТЦ()
	Перем ИТЦ;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;              
	
	ИТЦ = СоздатьОбъект("Справочник.ИсключенияПоТипамЦен");
	ИТЦ.ИспользоватьДату(РабочаяДата());
	ИТЦ.ИспользоватьВладельца(ТекущийЭлемент());
	
	// очищаем все строки
	СписокИТЦ.УдалитьСтроки();
	
	// заполняем таблицу
	ИТЦ.ВыбратьЭлементы();
	Пока ИТЦ.ПолучитьЭлемент() = 1 Цикл
		СписокИТЦ.НоваяСтрока();
		СписокИТЦ.Ссылка = ИТЦ.ТекущийЭлемент();
		СписокИТЦ.Контрагент = ИТЦ.Контрагент;
		СписокИТЦ.КатегорияЦен = ИТЦ.КатегорияЦен;
		СписокИТЦ.ПометкаУдаления = ИТЦ.ПометкаУдаления();		
	КонецЦикла;
КонецПроцедуры

// ===============================
Процедура ЗаполнитьСписокСортировка()
	Перем Сорт;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;              
	
	Сорт = СоздатьОбъект("Справочник.НомераСтрокС");
	Сорт.ИспользоватьДату(РабочаяДата());
	Сорт.ИспользоватьВладельца(ТекущийЭлемент());
	
	// очищаем все строки
	СписокСортировка.УдалитьСтроки();
	
	// заполняем таблицу
	Сорт.ВыбратьЭлементы();
	Пока Сорт.ПолучитьЭлемент() = 1 Цикл
	    Если Сорт.ПометкаУдаления() = 0 Тогда
			СписокСортировка.НоваяСтрока();
			СписокСортировка.ПометкаУдаления = Сорт.ПометкаУдаления();
			СписокСортировка.Ссылка = Сорт.ТекущийЭлемент();
			СписокСортировка.Фирма = Сорт.Фирма;
			СписокСортировка.Код = Сорт.Код;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// ===============================
Процедура СоздатьБазовуюЕдиницу()
	Перем НоваяБазоваяЕдиница;
	Перем ЕдиницыТовара;
	Перем Базовая;
	Перем ЗаписалиБазовую;
	
	// Устаналиваем в 0 признак записи базовой единицы
	ЗаписалиБазовую = 0;
	
	Если Выбран() = 0 Тогда
		// Единицу измерения можно задавать, если товар был сохранен
		Возврат;
	КонецЕсли;
	
	ЕстьБазовая = Нет;
	
	ЕдиницыТовара = СоздатьОбъект("Справочник.Единицы");
	ЕдиницыТовара.ИспользоватьВладельца(ТекущийЭлемент());
	ЕдиницыТовара.ВыбратьЭлементы();
	Пока ЕдиницыТовара.ПолучитьЭлемент() = 1 Цикл
		Если ЕдиницыТовара.Единица = БазоваяЕдиница Тогда
			// есть базовая, создавать ее не надо
			Базовая = ЕдиницыТовара.ТекущийЭлемент();
		КонецЕсли;
	КонецЦикла;
	
	Если ПустоеЗначение(Базовая) = 1 Тогда
		НоваяБазоваяЕдиница = СоздатьОбъект("Справочник.Единицы");
		НоваяБазоваяЕдиница.ИспользоватьВладельца(ТекущийЭлемент());
		НоваяБазоваяЕдиница.Новый();
		НоваяБазоваяЕдиница.Наименование = БазоваяЕдиница.Наименование;
		НоваяБазоваяЕдиница.Единица = БазоваяЕдиница;
		НоваяБазоваяЕдиница.Вес = Вес;
		НоваяБазоваяЕдиница.Коэффициент = 1;
		НоваяБазоваяЕдиница.Штрихкод = Штрихкод;
		
		Попытка
			НоваяБазоваяЕдиница.Записать();
			//Записали базовую
			ЗаписалиБазовую = 1;
		Исключение
			Предупреждение("Невозможно создать единицу измерения.");
			Возврат;
		КонецПопытки;
	
		// добавим ее в список
		СписокЕдиниц.НоваяСтрока();
		СписокЕдиниц.Ссылка = НоваяБазоваяЕдиница.ТекущийЭлемент();
		СписокЕдиниц.Единица = НоваяБазоваяЕдиница.Единица;
		СписокЕдиниц.Коэффициент = НоваяБазоваяЕдиница.Коэффициент;
		СписокЕдиниц.Штрихкод = НоваяБазоваяЕдиница.Штрихкод;
	
	КонецЕсли;

	// сделаем ее единицей измерения по умолчанию
	Если ПустоеЗначение(ЕдиницаПоУмолчанию) = 1 Тогда
		Если ПустоеЗначение(Базовая) = 1 Тогда
			ЕдиницаПоУмолчанию = НоваяБазоваяЕдиница.ТекущийЭлемент();
		Иначе
			ЕдиницаПоУмолчанию = Базовая;
		КонецЕсли;     
	КонецЕсли;
	
КонецПроцедуры	// СоздатьБазовуюЕдиницу

//******************************************************************************
// ОБРАБОТКА СПИСКА КОМПЛЕКТУЮЩИХ

// ===============================
// Название: ДобавитьКомпл()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Кнопка "Добавить" в слое "Набор".
// Описание:
// Модально открывается форма нового комплекта
Процедура ДобавитьКомпл()
	Перем ФормаЗаписи;
	Если Выбран() = 0 Тогда
		Предупреждение("Элемент сначала следует записать!");
		Возврат;
	КонецЕсли;	
	ОткрытьФормуМодально("Элемент.Комплектация",Контекст,,,ТекущийЭлемент());
КонецПроцедуры	// ДобавитьКомпл

// ===============================
// Название: ИзменитьКомпл()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Кнопка "Изменить" и таблица значений "СписокКомплектующих" в слое "Набор".
// Описание:
// Модально открывается форма текущего в списке комплектующего для редактирования
Процедура ИзменитьКомпл()
	Перем ФормаЗаписи;                                        
	Поз=СписокКомплектующих.ТекущаяСтрока();	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;               	
	Эл=СписокКомплектующих.ПолучитьЗначение(Поз,"Ссылка");
	ОткрытьФормуМодально(Эл,Контекст);
КонецПроцедуры	// ИзменитьКомпл

// ===============================
// Название: УдалитьКомпл()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Кнопка "Удалить" в слое "Набор".
// Описание:
// Удаляет текущее комплектующее в списке 
Процедура УдалитьКомпл()
	Если Вопрос("Удалить комплектующее?",1)=2 Тогда
		Возврат;
	КонецЕсли;
	Поз=СписокКомплектующих.ТекущаяСтрока();
	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;

	Эл=СписокКомплектующих.ПолучитьЗначение(Поз,"Ссылка");
	Спр=СоздатьОбъект("Справочник.Комплектация");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		Спр.Удалить(0);
		СписокКомплектующих.УдалитьСтроку(Поз);
		СписокКомплектующих.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры
                             
//******************************************************************************
// ОБРАБОТКА СПИСКА ФАЙЛОВ

// ===============================
Процедура ДобавитьФайл()
	Перем ФормаЗаписи;
	Если Выбран() = 0 Тогда
		Предупреждение("Элемент сначала следует записать!");
		Возврат;
	КонецЕсли;	
	ОткрытьФормуМодально("Элемент.Файлы",Контекст,,,ТекущийЭлемент());
КонецПроцедуры	// ДобавитьКомпл

// ===============================
// Модально открывается форма текущего в списке файлов для редактирования
Процедура ИзменитьФайл()
	Перем ФормаЗаписи;                                        
	Поз=Файлы.ТекущаяСтрока();	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;               	
	Эл=Файлы.ПолучитьЗначение(Поз,"Ссылка");
	ОткрытьФормуМодально(Эл,Контекст);
КонецПроцедуры	// ИзменитьКомпл

// ===============================
// Удаляет текущий файл в списке 
Процедура УдалитьФайл()
	Если Вопрос("Удалить файл?",1)=2 Тогда
		Возврат;
	КонецЕсли;
	Поз=Файлы.ТекущаяСтрока();
	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;

	Эл=Файлы.ПолучитьЗначение(Поз,"Ссылка");
	Спр=СоздатьОбъект("Справочник.Файлы");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		Спр.Удалить(0);
		Файлы.УдалитьСтроку(Поз);
		Файлы.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьФайл()
	Поз = Файлы.ТекущаяСтрока();
	Если Поз <> 0 Тогда
	    ЗапуститьПриложение(СокрЛП(Файлы.ПолучитьЗначение(Поз, "Ссылка").Путь));
	КонецЕсли;
КонецПроцедуры
//******************************************************************************
// ОБРАБОТКА СПИСКА ЦЕН

// ===============================
Процедура ДобавитьЦену()
	Перем ФормаЗаписи;
	ОткрытьФормуМодально("Элемент.Цены",Контекст,,,ТекущийЭлемент());
КонецПроцедуры

// ===============================
Процедура ИзменитьЦену()
	Перем ФормаЗаписи, Элемент, Позиция;
	
	Позиция  = СписокЦен.ТекущаяСтрока();
	Если Позиция > 0 Тогда
		Элемент= СписокЦен.ПолучитьЗначение(Позиция, "Ссылка");
		ОткрытьФормуМодально(Элемент, Контекст);
	Иначе
		Предупреждение("Не выбрана цена.");
	КонецЕсли;              
КонецПроцедуры

// ===============================
Процедура УдалитьЦену()
	Перем Позиция, Элемент, ВыборкаЦен;
	
	Позиция = СписокЦен.ТекущаяСтрока();
	
	Если Позиция = 0 Тогда
		// не выбрана строка таблицы
		Предупреждение("Не выбрана цена.");
		Возврат;
	КонецЕсли;

	Элемент = СписокЦен.ПолучитьЗначение(Позиция,"Ссылка");

	Если Вопрос("Удалить цену?",1)=2 Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЦен = СоздатьОбъект("Справочник.Цены");
	ВыборкаЦен.ИспользоватьВладельца(ТекущийЭлемент());
	Если ВыборкаЦен.НайтиЭлемент(Элемент)=1 Тогда
		// помечаем на удаление
		ВыборкаЦен.Удалить(0);
		СписокЦен.УдалитьСтроку(Позиция);
		СписокЦен.ТекущаяСтрока(?(Позиция > 1,Позиция - 1, 1));
	КонецЕсли;
КонецПроцедуры

// ===============================
// Название: СформироватьЦену()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Кнопка "Цена",.
// Описание:
// Формирует цену товара на основе "УчетнойЦены" и наценки.
Процедура СформироватьЦены(НаДату="",СНаценкой=0, РасчетПоШаблону=0)
	Перем ЦеныТовара;
	Перем ВычисленнаяЦена;
	Перем Счетчик;
	
	//--- УМК Сандомирский В.Ю,(проверка заполненной базовой цены) 24.03.14
	Если ПустоеЗначение(БазоваяКатегорияЦены) = 0 Тогда
		
		СпрЦеныТовара = СоздатьОбъект("Справочник.Цены");
		СпрЦеныТовара.ИспользоватьВладельца(ТекущийЭлемент());
		Если СпрЦеныТовара.НайтиПоРеквизиту("КатегорияЦены",БазоваяКатегорияЦены,0) = 1 Тогда
			УчетнаяЦена = СпрЦеныТовара.Цена.Получить(РабочаяДата());
			УчетнаяЦена = УчетнаяЦена / ((100 + глПроцентНДС (СтавкаНДС))/100);
		КонецЕсли;
		
	Иначе
		
		Сообщить("Не указана базовая категория цены - расчет не возможен ! ", "!!!");
		Возврат;

	КонецЕсли;
	
	ЦеныТовара = СоздатьОбъект("Справочник.Цены");
	
	Если ПустоеЗначение(НаДату)=1 Тогда
		НаДату = РабочаяДата();
	КонецЕсли;
	ЦеныТовара.ИспользоватьДату(НаДату);
	
	Для Счетчик=1 По СписокЦен.КоличествоСтрок() Цикл
		
		ВычисленнаяЦена = 0;
		
		СхемаВШаблоне = СписокЦен.ПолучитьЗначение(Счетчик, "СхемаВШаблоне");
		
		// проверим существование элемента
		Если ЦеныТовара.НайтиЭлемент(СписокЦен.ПолучитьЗначение(Счетчик, "Ссылка")) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЦеныТовара.КатегорияЦены = БазоваяКатегорияЦены Тогда //--- УМК Сандомирский В.Ю, (Пропускаем базовую цену) 24.03.14
			Продолжить;
		КонецЕсли;
		
		//--- УМК Сандомирский В.Ю, 01.07.14 г. (закоментил - уходим от наценок)
		//Если СНаценкой = 1 Тогда
		////	ЦеныТовара.Наценка = ТорговаяНаценка + ЦеныТовара.КатегорияЦены.ТорговаяНаценка;		//--- УМК Сандомирский В.Ю, 01.07.14 г. (закоментил - уходим от наценок)
		////	СписокЦен.УстановитьЗначение(Счетчик, "Наценка", ЦеныТовара.Наценка);					//--- УМК Сандомирский В.Ю, 01.07.14 г. (закоментил - уходим от наценок)
		//КонецЕсли;			
		//// учетная цена берется за базовую единицу	
		//// при необходимости, пересчитывается в валюту цены
		//
		//ВалютаЦены = СписокЦен.ПолучитьЗначение(Счетчик, "Валюта");
		//Если (ЦеныТовара.Валюта <> ВалютаЦены) и ((ПустоеЗначение(ЦеныТовара.Валюта) = 0) и(ПустоеЗначение(ВалютаЦены) = 0)) тогда
		//	ВычисленнаяЦена = ЦеныТовара.Единица.Коэффициент * глПересчет(УчетнаяЦена,ЦеныТовара.Валюта,ТекущаяДата(),ВалютаЦены,ТекущаяДата()) * (100 + ЦеныТовара.Наценка) / 100 ;
		//Иначе	
		//	ВычисленнаяЦена = ЦеныТовара.Единица.Коэффициент * УчетнаяЦена * (100 + ЦеныТовара.Наценка) / 100 ;
		//КонецЕсли;		
		//ВычисленнаяЦена = глПересчет(ВычисленнаяЦена, Гривня, РабочаяДата(), ЦеныТовара.Валюта, РабочаяДата());
		
		//// Учитываем что в учетной цене хранится значение без НДС
		//ВычисленнаяЦена  = ВычисленнаяЦена * (100 + глПроцентНДС (СтавкаНДС))/100;
		
		//... УМК Сандомирский В.Ю, 01.07.14 г. (закоментил - уходим от наценок)
		
		Если ПустоеЗначение(ЦеныТовара.СхемаЦенообразования) = 0 Тогда	//--- УМК Сандомирский В.Ю, (Схема ценообразования 18.03.14)
			
			ТекУчетнаяЦена = УчетнаяЦена * (100 + глПроцентНДС (СтавкаНДС))/100;
			ВычисленнаяЦена = глАвтоПересчетЦены(ЦеныТовара,ТекУчетнаяЦена);
				
		КонецЕсли;
		
		//Если процедура вызвана как расчет цен по шаблону и схема в шаблоне отсутствует, то необходимо
		//обнулить данную цену.
		Если (РасчетПоШаблону = 1) И (ПустоеЗначение(СхемаВШаблоне) = 1) Тогда
			ВычисленнаяЦена = 0;
		КонецЕсли;
		
		//Если Цена с типом Розничная не равна 0, а вычисленная равна 0
		//то в этом случае цену не обнуляем.
		Если (ЦеныТовара.КатегорияЦены = Константа.КатегорияЦенВРозницеУМК) 
		И (ЦеныТовара.Цена <> 0) И (ВычисленнаяЦена = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ЦеныТовара.Цена = ВычисленнаяЦена;
		
		Попытка
			ЦеныТовара.Записать();
		Исключение
			глКомментарий(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		СписокЦен.УстановитьЗначение(Счетчик, "Цена", ВычисленнаяЦена);
		
	КонецЦикла;
	
КонецПроцедуры

// ===============================
Процедура ЗаполнитьЦены(РасчетПоШаблону = 0)	
	Перем ЦеныТовара;
	Перем КатегорииЦен;
	                       
	
	
	Если ПустоеЗначение(ЕдиницаПоУмолчанию) = 1 Тогда
	 	глКомментарий("Не заполнена единица по умолчанию. Формирование цен невозможно.");
	 	Возврат;
	КонецЕсли;	                    	
	
	ЦеныТовара = СоздатьОбъект("Справочник.Цены");
	Если СписокЦен.КоличествоСтрок() = 0 Тогда
		ДН = Константа.ДатаНачалаРаботы;
	Иначе
		ДН = РабочаяДата();
		Если ВвестиДату(ДН, "Введиту дату, на которую будут установлена новая цена") = 0 Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	//--- Проверяем и если нужно записываем шаблон схем перед заполнением //--- УМК Сандомирский В.Ю, (06.05.14)
	Если ШаблонСхемЦенообразования.Выбран() = 1 Тогда
	
		СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
		Если СпрТМЦ.НайтиЭлемент(ТекущийЭлемент()) = 1 Тогда
						
			Если СпрТМЦ.АвтоИзменениеЦен.Получить(ДН) <>  ШаблонСхемЦенообразования.АвтоИзменениеЦен Тогда
				СпрТМЦ.АвтоИзменениеЦен.Установить(ДН,ШаблонСхемЦенообразования.АвтоИзменениеЦен);
				АвтоИзменениеЦен = ШаблонСхемЦенообразования.АвтоИзменениеЦен;
			КонецЕсли;
			
			Если СпрТМЦ.АвтоУменьшениеЦен.Получить(ДН) <>  ШаблонСхемЦенообразования.АвтоУменьшениеЦен Тогда
				СпрТМЦ.АвтоУменьшениеЦен.Установить(ДН,ШаблонСхемЦенообразования.АвтоУменьшениеЦен);
				АвтоУменьшениеЦен = ШаблонСхемЦенообразования.АвтоУменьшениеЦен;
			КонецЕсли;
					
			Если СпрТМЦ.БазоваяКатегорияЦены.Получить(ДН) <>  ШаблонСхемЦенообразования.БазоваяКатегорияЦены Тогда
				СпрТМЦ.БазоваяКатегорияЦены.Установить(ДН,ШаблонСхемЦенообразования.БазоваяКатегорияЦены);
				БазоваяКатегорияЦены = ШаблонСхемЦенообразования.БазоваяКатегорияЦены;
			КонецЕсли;	
			
		КонецЕсли;		
	
	КонецЕсли; //... УМК Сандомирский В.Ю, (06.05.14)    
	
	ЦеныТовара.ИспользоватьДату(ДН);	
	ЦеныТовара.ИспользоватьВладельца(ТекущийЭлемент());
	
	КатегорииЦен = СоздатьОбъект("Справочник.КатегорииЦен");
	КатегорииЦен.ВыбратьЭлементы();
	Пока КатегорииЦен.ПолучитьЭлемент()=1 Цикл
		
		//--- УМК Сандомирский В.Ю, (категоря цен помечена очищать эти цены из справочника) 02.04.14
		Если (КатегорииЦен.ПометкаУдаления()=1)  Тогда			
		    Если ЦеныТовара.НайтиПоРеквизиту("КатегорияЦены",КатегорииЦен.ТекущийЭлемент(),0)=1 Тогда
				Если ЦеныТовара.ПометкаУдаления() = 0 Тогда
					ЦеныТовара.Удалить(0);
					Сообщить("Тип цен - " + КатегорииЦен.ТекущийЭлемент() + " помечен на удаление - соответсвующая цена очищена","!") ;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//--- УМК Сандомирский В.Ю, (категоря цен)
		
		Если (КатегорииЦен.ПометкаУдаления()=1) ИЛИ (КатегорииЦен.НеРассчитыватьАвтомат = 1) Тогда			
		    Продолжить;
		КонецЕсли;
		Если ЦеныТовара.НайтиПоРеквизиту("КатегорияЦены",КатегорииЦен.ТекущийЭлемент(),0)=0 Тогда
			ЦеныТовара.Новый();
		Иначе
			Если ЦеныТовара.ПометкаУдаления()=1 Тогда
				Если КатегорииЦен.ПометкаУдаления()=1  Тогда	
					глКомментарий("Цена "+ЦеныТовара.КатегорияЦены+ " помечена на удаление и не будет заполнена.",2);
					Продолжить;
				Иначе //--- УМК Сандомирский В.Ю, (убрали пометку удаления с категории , значит зена снова активна)
					ЦеныТовара.СнятьПометкуУдаления();
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		ЦеныТовара.Наименование = КатегорииЦен.Наименование;
		ЦеныТовара.Валюта = Гривня;
		ЦеныТовара.Единица = ЕдиницаПоУмолчанию;
		ЦеныТовара.КатегорияЦены = КатегорииЦен.ТекущийЭлемент();
		
		//ЦеныТовара.Наценка = ТорговаяНаценка + КатегорииЦен.ТорговаяНаценка;
			
		СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");//--- УМК Сандомирский В.Ю, Заполнение схем по шаблону (15.04.14)
		Если СпрТМЦ.НайтиЭлемент(ТекущийЭлемент()) = 1 Тогда
			
			Если ПустоеЗначение(СпрТМЦ.ШаблонСхемЦенообразования) = 0 Тогда 
				НашлиВШаблоне = 0;
				ШаблонСхемЦенообразования.ВыбратьСтроки();
				Пока ШаблонСхемЦенообразования.ПолучитьСтроку() = 1 Цикл
					Если ШаблонСхемЦенообразования.КатегорияЦен =  ЦеныТовара.КатегорияЦены Тогда
						ЦеныТовара.СхемаЦенообразования = ШаблонСхемЦенообразования.СхемаЦенообразования;
						НашлиВШаблоне = 1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;//... УМК Сандомирский В.Ю, Заполнение схем по шаблону (15.04.14)
		
		Если НашлиВШаблоне = 0 Тогда	//--- Сандомирский В.Ю. нет в шаблоне = берем базовую (01.07.14)
			ЦеныТовара.СхемаЦенообразования = КатегорииЦен.БазоваяСхемаЦенообразования; 	
		КонецЕсли;
		
		ЦеныТовара.Записать();
	КонецЦикла;
	ЗаполнитьСписокЦен();
	СформироватьЦены(ДН,,РасчетПоШаблону);
	
КонецПроцедуры

//******************************************************************************
// ОБРАБОТКА СПИСКА КАТЕГОРИЙ

// ===============================
Процедура ДобавитьКатегорию()
	ОткрытьПодбор("Справочник.ВидыКатегорий",,,1);
КонецПроцедуры	// ДобавитьКатегорию

// ===============================
Процедура УдалитьКатегорию()
	Перем КатегорияДляУдаления;
	Перем Позиция;
	
	Позиция = СписокКатегорий.ТекущаяСтрока();
	Если Позиция = 0 Тогда
	    // не выбран элемент
		Возврат;
	КонецЕсли;

	Если Вопрос("Вы действите хотите удалить товар из категории?",4)=7  Тогда
		// Сказали нет
	    Возврат;
	КонецЕсли;

	КатегорияДляУдаления = СоздатьОбъект("Справочник.КатегорииТоваров");
	Если КатегорияДляУдаления.НайтиЭлемент(СписокКатегорий.ПолучитьЗначение(Позиция)) = 0 Тогда
		// не нашли. непонятно, как категория появилась в списке
		Возврат;
	КонецЕсли;
	
	КатегорияДляУдаления.Удалить(0);
	СписокКатегорий.УдалитьЗначение(Позиция);
	
	// если до сих пор не вышли из процедуры,
	// то теперь надо добавить товар к категории
	РазмерСписка = СписокКатегорий.РазмерСписка();
	Если РазмерСписка = 0 Тогда
	    
		// если в списке нет ни одной категории,
		// делаем недоступной кнопку удалить
		Форма.кУдалитьКатегорию.Доступность(0);
	Иначе
		// установим текущий элемент в списке
		Если Позиция > РазмерСписка Тогда
		    Позиция = РазмерСписка;
		КонецЕсли;
		СписокКатегорий.ТекущаяСтрока(Позиция);
		
		Форма.кУдалитьКатегорию.Доступность(1);
	КонецЕсли;
	
КонецПроцедуры	// УдалитьКатегорию

//******************************************************************************
// ОБРАБОТКА СПИСКА Контрагентов

// ===============================
Процедура ДобавитьКонтрагента()
	КФ = 1;
	ОткрытьПодбор("Справочник.Контрагенты",,КФ,1);
КонецПроцедуры	// ДобавитьКатегорию

// ===============================
Процедура УдалитьКонтрагента()
	Перем КонтрагентДляУдаления;
	Перем Позиция;
	
	Позиция = СписокКонтрагентов.ТекущаяСтрока();
	Если Позиция = 0 Тогда
	    // не выбран элемент
		Возврат;
	КонецЕсли;

	Если Вопрос("Вы действите хотите удалить разрешённого контрагента для этого товара?",4)=7  Тогда
		// Сказали нет
	    Возврат;
	КонецЕсли;

	КонтрагентДляУдаления = СоздатьОбъект("Справочник.КонтрагентыПродукции");
	Если КонтрагентДляУдаления.НайтиЭлемент(СписокКонтрагентов.ПолучитьЗначение(Позиция)) = 0 Тогда
		// не нашли. непонятно, как категория появилась в списке
		Возврат;
	КонецЕсли;
	
	КонтрагентДляУдаления.Удалить(0);
	СписокКонтрагентов.УдалитьЗначение(Позиция);
	
	// если до сих пор не вышли из процедуры,
	// то теперь надо добавить товар к категории
	РазмерСписка = СписокКонтрагентов.РазмерСписка();
	Если РазмерСписка = 0 Тогда	    
		// если в списке нет ни одной категории,
		// делаем недоступной кнопку удалить
		Форма.кУдалитьКонтрагента.Доступность(0);
	Иначе
		// установим текущий элемент в списке
		Если Позиция > РазмерСписка Тогда
		    Позиция = РазмерСписка;
		КонецЕсли;
		СписокКонтрагентов.ТекущаяСтрока(Позиция);
		
		Форма.кУдалитьКонтрагента.Доступность(1);
	КонецЕсли;
	
	Если (СписокКонтрагентов.РазмерСписка() = 0) И (НеВыгружатьВЗаказник = 1) Тогда
		Если Вопрос("Снять флажок ""Не выгружать в заказник""?", "Да+Нет") = "Да" Тогда
			НеВыгружатьВЗаказник = 0;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	// УдалитьКатегорию

//******************************************************************************
// ОБРАБОТКА СПИСКА ЕДИНИЦ ИЗМЕРЕНИЯ

// ===============================
Процедура ДобавитьЕдиницу()
	Перем ФормаЗаписи;          
	ОткрытьФормуМодально("Элемент.Единицы",Контекст,,,ТекущийЭлемент());
КонецПроцедуры

// ===============================
Процедура ИзменитьЕдиницу()
	Перем ФормаЗаписи;
	Поз=СписокЕдиниц.ТекущаяСтрока();	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;               	
	Эл=СписокЕдиниц.ПолучитьЗначение(Поз,"Ссылка");
	ОткрытьФормуМодально(Эл,Контекст);
КонецПроцедуры

// ===============================
Процедура УдалитьЕдиницу()
	Перем Поз, Эл, ЦеныТовара;
	Поз=СписокЕдиниц.ТекущаяСтрока();
	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;

	Эл=СписокЕдиниц.ПолучитьЗначение(Поз,"Ссылка");
	Если Эл.Единица = БазоваяЕдиница Тогда
	    // базовую единицу удалять нельзя
		Предупреждение("Базовая единица измерения не удаляется");
		Возврат;
	КонецЕсли;
	
	ЦеныТовара = СоздатьОбъект("Справочник.Цены");
	ЦеныТовара.ИспользоватьВладельца(ТекущийЭлемент());
	ЦеныТовара.ВыбратьЭлементы();
	Пока ЦеныТовара.ПолучитьЭлемент() = 1 Цикл
		Если ЦеныТовара.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		ЕдиницаЦены = ЦеныТовара.Единица.Получить(РабочаяДата());
		Если  ЕдиницаЦены = Эл Тогда
			Предупреждение("Единица "+СокрЛП(Эл.Единица.ПолнНаименование)+" используется в цене "+ЦеныТовара.КатегорияЦены);
			Возврат;
		КонецЕсли;
	КонецЦикла;

	Если Вопрос("Удалить единицу измерения товара?",1)=2 Тогда
		Возврат;
	КонецЕсли;
	Спр=СоздатьОбъект("Справочник.Единицы");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		Спр.Удалить(0);
		СписокЕдиниц.УдалитьСтроку(Поз);
		СписокЕдиниц.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Форма.Обновить();
	КонецЕсли;
	Если ЕдиницаПоУмолчанию = Эл Тогда
	    ЕдиницаПоУмолчанию = ПолучитьПустоеЗначение("Справочник.Единицы");
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
// ОБРАБОТКА СПИСКА ПРОЦЕНТОВ

// ===============================
Процедура ДобавитьПроцент()
	Перем ФормаЗаписи;          
	ОткрытьФормуМодально("Элемент.ПроцентыСписания",Контекст,,,ТекущийЭлемент());
КонецПроцедуры

// ===============================
Процедура ИзменитьПроцент()
	Перем ФормаЗаписи;
	Поз = СписПроц.ТекущаяСтрока();	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;               	
	Эл = СписПроц.ПолучитьЗначение(Поз,"Ссылка");
	ОткрытьФормуМодально(Эл,Контекст);
КонецПроцедуры

// ===============================
Процедура УдалитьПроцент()
	Перем Поз, Эл, ЦеныТовара;
	Поз = СписПроц.ТекущаяСтрока();
	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;

	Эл=СписПроц.ПолучитьЗначение(Поз,"Ссылка");
	
	Если Вопрос("Удалить процент списания?",1)=2 Тогда
		Возврат;
	КонецЕсли;
	Спр=СоздатьОбъект("Справочник.ПроцентыСписания");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		Спр.Удалить(0);
		СписПроц.УдалитьСтроку(Поз);
		СписПроц.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры

// ======================================
Процедура УстСчет()
	Если ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
		Счет = глВосстановитьЗначение(Контекст,"Счет");
		Если ПустоеЗначение(Счет) = 1 Тогда
			Если ИспользоватьСчетаРасходов <> Класс8 Тогда
				Счет = СчетПоКоду("92");       
				глСохранитьЗначение(Контекст,"Счет",Счет);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидТМЦ = Перечисление.ВидыТМЦ.Материал Тогда
		Счет = СчетПоКоду("201");
	ИначеЕсли ВидТМЦ = Перечисление.ВидыТМЦ.Топливо Тогда
		Счет = СчетПоКоду("203");
	ИначеЕсли ВидТМЦ = Перечисление.ВидыТМЦ.Стройматериал Тогда
		Счет = СчетПоКоду("205");
	ИначеЕсли ВидТМЦ = Перечисление.ВидыТМЦ.Запчасти Тогда
		Счет = СчетПоКоду("207");
	ИначеЕсли ВидТМЦ = Перечисление.ВидыТМЦ.Товар Тогда
		Счет = СчетПоКоду("281");
	ИначеЕсли ВидТМЦ = Перечисление.ВидыТМЦ.Тара Тогда
		Счет = СчетПоКоду("2841");
	ИначеЕсли ВидТМЦ = Перечисление.ВидыТМЦ.Продукция Тогда
		Счет = СчетПоКоду("26");
	ИначеЕсли ВидТМЦ = Перечисление.ВидыТМЦ.МБП Тогда
		Счет = СчетПоКоду("22");
	ИначеЕсли ВидТМЦ = Перечисление.ВидыТМЦ.Полуфабрикат Тогда
		Счет = СчетПоКоду("25");
	КонецЕсли;
КонецПроцедуры 

// ===============================
Процедура ДобавитьЭтикетку()
	Перем ФормаЗаписи;
	ОткрытьФормуМодально("Элемент.Этикетки",Контекст,,,ТекущийЭлемент());
	ЗаполнитьСписокЭтикеток();
КонецПроцедуры

// ===============================
Процедура ИзменитьЭтикетку()
	Перем ФормаЗаписи, Элемент, Позиция;
	
	Позиция  = СписокВЭ.ТекущаяСтрока();
	Если Позиция > 0 Тогда
		Элемент= СписокВЭ.ПолучитьЗначение(Позиция, "Ссылка");
		ОткрытьФормуМодально(Элемент, Контекст);
	Иначе
		Предупреждение("Не выбран вид этикетки.");
	КонецЕсли;              
КонецПроцедуры

// ===============================
Процедура УдалитьЭтикетку()
	Перем Позиция, Элемент, ВыборкаЦен;
	
	Позиция = СписокВЭ.ТекущаяСтрока();
	
	Если Позиция = 0 Тогда
		// не выбрана строка таблицы
		Предупреждение("Не выбрана этикетка.");
		Возврат;
	КонецЕсли;

	Элемент = СписокВЭ.ПолучитьЗначение(Позиция,"Ссылка");

	Если Вопрос(?(Элемент.ПометкаУдаления() = 1, "Снять пометку удаления для этикетки?", "Удалить этикетку?"),1)=2 Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЭ = СоздатьОбъект("Справочник.Этикетки");
	ВыборкаЭ.ИспользоватьВладельца(ТекущийЭлемент());
	Если ВыборкаЭ.НайтиЭлемент(Элемент)=1 Тогда
		// помечаем на удаление
		Если ВыборкаЭ.ПометкаУдаления() = 0 Тогда
			ВыборкаЭ.Удалить(0);
		Иначе
			ВыборкаЭ.СнятьПометкуУдаления();
		КонецЕсли;
		СписокВЭ.УстановитьЗначение(Позиция, "ПометкаУдаления", ВыборкаЭ.ПометкаУдаления());
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьИТЦ()
	Перем ФормаЗаписи;
	ОткрытьФормуМодально("Элемент.ИсключенияПоТипамЦен",Контекст,,,ТекущийЭлемент());
	ЗаполнитьСписокИТЦ();
КонецПроцедуры

// ===============================
Процедура ИзменитьИТЦ()
	Перем ФормаЗаписи, Элемент, Позиция;
	
	Позиция  = СписокИТЦ.ТекущаяСтрока();
	Если Позиция > 0 Тогда
		Элемент= СписокИТЦ.ПолучитьЗначение(Позиция, "Ссылка");
		ОткрытьФормуМодально(Элемент, Контекст);
	Иначе
		Предупреждение("Не выбрано исключение типа цены.");
	КонецЕсли;              
КонецПроцедуры

// ===============================
Процедура УдалитьИТЦ()
	Перем Позиция, Элемент, ВыборкаЦен;
	
	Позиция = СписокИТЦ.ТекущаяСтрока();
	
	Если Позиция = 0 Тогда
		// не выбрана строка таблицы
		Предупреждение("Не выбрана этикетка.");
		Возврат;
	КонецЕсли;

	Элемент = СписокИТЦ.ПолучитьЗначение(Позиция,"Ссылка");

	Если Вопрос(?(Элемент.ПометкаУдаления() = 1, "Снять пометку удаления для исключения типа цены?", "Удалить исключение типа цены?"),1)=2 Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЭ = СоздатьОбъект("Справочник.ИсключенияПоТипамЦен");
	ВыборкаЭ.ИспользоватьВладельца(ТекущийЭлемент());
	Если ВыборкаЭ.НайтиЭлемент(Элемент)=1 Тогда
		// помечаем на удаление
		Если ВыборкаЭ.ПометкаУдаления() = 0 Тогда
			ВыборкаЭ.Удалить(0);
		Иначе
			ВыборкаЭ.СнятьПометкуУдаления();
		КонецЕсли;
		СписокИТЦ.УстановитьЗначение(Позиция, "ПометкаУдаления", ВыборкаЭ.ПометкаУдаления());
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура ДобавитьСортировку()
	Перем ФормаЗаписи;
	ОткрытьФормуМодально("Элемент.НомераСтрокС",Контекст,,,ТекущийЭлемент());
	ЗаполнитьСписокСортировка();
КонецПроцедуры

// ===============================
Процедура ИзменитьСортировку()
	Перем ФормаЗаписи, Элемент, Позиция;
	
	Позиция  = СписокСортировка.ТекущаяСтрока();
	Если Позиция > 0 Тогда
		Элемент= СписокСортировка.ПолучитьЗначение(Позиция, "Ссылка");
		ОткрытьФормуМодально(Элемент, Контекст);
	Иначе
		Предупреждение("Не выбрана сортировка");
	КонецЕсли;              
КонецПроцедуры

// ===============================
Процедура УдалитьСортировку()
	Перем Позиция, Элемент, ВыборкаЦен;
	
	Позиция = СписокСортировка.ТекущаяСтрока();
	
	Если Позиция = 0 Тогда
		// не выбрана строка таблицы
		Предупреждение("Не выбрана сортировка.");
		Возврат;
	КонецЕсли;

	Элемент = СписокСортировка.ПолучитьЗначение(Позиция,"Ссылка");

	Если Вопрос(?(Элемент.ПометкаУдаления() = 1, "Снять пометку удаления для номера сортировки?", "Удалить номер сортировки?"),1)=2 Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЭ = СоздатьОбъект("Справочник.НомераСтрокС");
	ВыборкаЭ.ИспользоватьВладельца(ТекущийЭлемент());
	Если ВыборкаЭ.НайтиЭлемент(Элемент)=1 Тогда
		// помечаем на удаление
		Если ВыборкаЭ.ПометкаУдаления() = 0 Тогда
			ВыборкаЭ.Удалить(0);
		Иначе
			ВыборкаЭ.СнятьПометкуУдаления();
		КонецЕсли;
		СписокСортировка.УстановитьЗначение(Позиция, "ПометкаУдаления", ВыборкаЭ.ПометкаУдаления());
	КонецЕсли;	
КонецПроцедуры

// ===============================
Процедура ИзмВидТМЦ()
	УстСчет();
	Если (ВидТМЦ = Перечисление.ВидыТМЦ.Продукция) Или (ВидТМЦ = Перечисление.ВидыТМЦ.Полуфабрикат) Тогда
		Если ГрафикФормированияПартий.Выбран() = 0 Тогда
			ГрафикФормированияПартий = глВосстановитьЗначение(,"БазГрафикФормированияПартий");
		КонецЕсли;
		Если ГрафикФормированияПартий.Выбран() = 0 Тогда
			// тогда присваивается любой первый график
			Спр = СоздатьОбъект("Справочник.ГрафикиФормированияПартий");
			Спр.ВыбратьЭлементы();
			Пока Спр.ПолучитьЭлемент() =1 Цикл
				Если Спр.ЭтоГруппа() = 1 Тогда
					Продолжить
				КонецЕсли;
				ГрафикФормированияПартий = Спр.ТекущийЭлемент();
				Прервать
			КонецЦикла;
			Если ПустоеЗначение(ГрафикФормированияПартий) = 1 Тогда
				//Справочник пуст, поэтому создается новый график
				Спр.Новый();
				Спр.Наименование = "Ежемесячно";
				Спр.ЧастотаФормированияПартий = Перечисление.СпособыФормированияПартий.Ежемесячно;
				Спр.Записать();
				ГрафикФормированияПартий = Спр.ТекущийЭлемент();
			КонецЕсли;
			глКомментарий("Не заполнена константа ""График формирования партий по умолчанию"","
			              "поэтому реквизиту ""График формирования партий"" было присвоено значение """
						  + ГрафикФормированияПартий + """.", 0, , "!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  

// ===============================
Процедура ИзмБазоваяЕдиница()
	Если БазоваяЕдиница.Выбран() = 0 Тогда
		глКомментарий("Нельзя обнулять базовую единицу!",0);
		БазоваяЕдиница = СтарБазоваяЕдиница;
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;	
КонецПроцедуры

// ===============================
Процедура ИзмВидЗатрат()
	Если ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
	    Возврат;
	КонецЕсли;
	Если ВидЗатрат.Выбран() = 0 Тогда
		глКомментарий("Нельзя обнулять вид затрат!",0);
		ВидЗатрат = СтарВидЗатрат;
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;	                 
	Если ВидЗатрат.СтатьяКалькуляции.Выбран() = 0 Тогда
		глКомментарий("Нельзя выбирать вид затрат с незаполненной статьей калькуляции!",0);
		ВидЗатрат = СтарВидЗатрат;
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	СтарВидЗатрат = ВидЗатрат;
КонецПроцедуры

// ======================================
Процедура ИзмСчет()
	Если Счет.Выбран() = 1 Тогда
	    Если (((Счет = СчетПоКоду("289")) или (Счет = СчетПоКоду("2092"))) и (ВидТМЦ <> Перечисление.ВидыТМЦ.Услуга)) Тогда
	    	Предупреждение("Счета 2092 или 289 можно выбирать только для Услуг!");
			УстСчет();
			Возврат;
		ИначеЕсли (ВидТМЦ = Перечисление.ВидыТМЦ.Услуга)  Тогда
		    глСохранитьЗначение(Контекст,"Счет",Счет);
		КонецЕсли;
		//Доделать когда уточнится ТЗ
//		Если (Счет = СчетПоКоду("289")) или (Счет = СчетПоКоду("2092")) Тогда
//		    тз = СоздатьОбъект("ТаблицаЗначений");
//			сп = СоздатьОбъект("СписокЗначений");
//			НайтиСсылки(ТекущийЭлемент(),тз);
//			Если тз.КоличествоСтрок() >0  Тогда
//				тз.Выгрузить(сп);       
//				тз.ВыбратьСтроки();
//				Пока тз.ПолучитьСтроку() = 1 Цикл
//					Сообщить(тз.Получи
//				КонецЦикла;
//
//				Сообщить("Есть ссылки");
//				Сообщить(сп.ВстрокуСразделителями());
//			КонецЕсли;
//		КонецЕсли;                                    
	КонецЕсли;
КонецПроцедуры       

// ===============================
// Название: ПоказатьИсторию()
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Кнопка "История",.
// Описание:
// Открывается форма обработки для редактирования периодических реквизитов
Процедура ПоказатьИсторию()
	Если Выбран()=0 Тогда
	     Предупреждение("Историю периодических реквизитов можно" + РазделительСтрок +
		                          "смотреть только для сохраненного элемента");
		Возврат;
	КонецЕсли;

	глРедактироватьИсториюЗначений(Контекст,
	"",
	"История периодических реквизитов ("+ТекущийЭлемент()+")",1);
КонецПроцедуры // ПоказатьИсторию

// ===============================
Процедура ПриОткрытии()
	Если Константа.ЗапретитьРедактированиеСправочников = Да Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	Если НазваниеНабораПрав() = "УдаленныйДоступ" Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	ИспользоватьДату(РабочаяДата());
	СохранениеПериодическихРеквизитов(2, "*");
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной","Основные");	
	Форма.Закладки.ДобавитьЗначение("ПараметрыУчета","Параметры учета");	
	
	ДобавитьДополнительныеЗакладки();
	
	Если ПустоеЗначение(Форма.Параметр) = 1 Тогда //--- УМК Сандомирский В.Ю. (09.09.14)
		Форма.ИспользоватьСлой("Основной, Общий",2);
	ИначеЕсли Форма.Параметр = "РазрешенныеВидыУпаковки" Тогда //--- тут указан слой 
		Форма.ИспользоватьСлой("РазрешенныеВидыУпаковки, Общий",2);	
	КонецЕсли;
		
	// заполняем таблицу "СписокЕдиниц" единицами измерения товара
	ЗаполнитьСписокЕдиниц();
	ЗаполнитьСписокСвязаныхЭлементов(); 	//--- УМК Сандомирский В.Ю, (для связанные элементы ценообразования ) 22.04.14 
	ЗаполнитьСписокПроцентов();
	ЗаполнитьСписокКатегорий();
	ЗаполнитьСписокКонтрагентов();
	ЗаполнитьСписокЦен();
	ЗаполнитьФайлы();
	ЗаполнитьСписокВидовУпаковки();		//--- УМК Сандомирский В.Ю. (09.09.14)
	ЗаполнитьСписокСкладовСписания();
	ЗаполнитьСписокЭтапов();
	ЗаполнитьСписокИТЦ();
	ЗаполнитьСписокЭтикеток();
	ЗаполнитьСписокСортировка();
	
	Если ВидТМЦ = Перечисление.ВидыТМЦ.Набор Тогда
		Форма.Закладки.ДобавитьЗначение("Набор","Набор");		
		ЗаполнитьСписокКомплектующих();
	КонецЕсли;
	Если (ВидТМЦ = Перечисление.ВидыТМЦ.Продукция) или (ВидТМЦ = Перечисление.ВидыТМЦ.Полуфабрикат)
	или (ВидТМЦ = Перечисление.ВидыТМЦ.Услуга) Тогда
		Если (НазваниеНабораПрав() <> "Заказ") и (НазваниеНабораПрав() <> "Прочие") и (НазваниеНабораПрав() <> "ПрочиеЗаказ") И (НазваниеНабораПрав() <> "МастерЭкспедиции") и (НазваниеНабораПрав() <> "ПрочиеВыписка") 
			И (НазваниеНабораПрав() <> "ТехнологЭкспедиции")
			И ((глГруппыДоступаПродукции.РазмерСписка() = 0) ИЛИ (глГруппыДоступаПродукции.Принадлежит(ТекущийЭлемент()) = 1)) Тогда
			Форма.Закладки.ДобавитьЗначение("Продукция","Продукция");		
		КонецЕсли;
		// заполняем таблицу "СписокНормыЗатрат" из документа НормыЗатрат
		ЗаполнитьНормативныйСостав();
	КонецЕсли;
	Форма.Закладки.ДобавитьЗначение("Файлы","Файлы");
	
	Форма.Закладки.ДобавитьЗначение("СвязанныеТМЦЦенообразования","Связаные ТМЦ"); 	//--- УМК Сандомирский В.Ю, (для связанные элементы ценообразования ) 22.04.14
	Форма.Закладки.ДобавитьЗначение("РазрешенныеВидыУпаковки","Виды упаковки"); 	//--- УМК Сандомирский В.Ю, (09.09.14)
	
	Форма.Закладки.ДобавитьЗначение("Прайс","Прайс"); 	//--- УМК Сандомирский В.Ю, (21.10.14)
	
	СтарБазоваяЕдиница = БазоваяЕдиница;
	СтарВидЗатрат = ВидЗатрат;
	
	Коды = Константа.КодыУсловийХранения;
	
	Поз = Найти(Коды, ";");
	Форма.тОбщие.Заголовок(Форма.тОбщие.Заголовок() + " (" + Лев(Коды, Поз - 1) + "):");
	Коды = Сред(Коды, Поз + 1);
	Поз = Найти(Коды, ";");
	Форма.тВакЦелый.Заголовок(Форма.тВакЦелый.Заголовок() + " (" + Лев(Коды, Поз - 1) + "):");
	Коды = Сред(Коды, Поз + 1);
	Поз = Найти(Коды, ";");
	Форма.тВакПорц.Заголовок(Форма.тВакПорц.Заголовок() + " (" + Лев(Коды, Поз - 1) + "):");
	Коды = Сред(Коды, Поз + 1);
	Поз = Найти(Коды, ";");
	Форма.тВакСерв.Заголовок(Форма.тВакСерв.Заголовок() + " (" + Лев(Коды, Поз - 1) + "):");
	Форма.тГаз.Заголовок(Форма.тГаз.Заголовок() + " (" + СокрЛП(Сред(Коды, Поз + 1)) + "):");
	
	СпрПрайс 		= СоздатьОбъект("Справочник.УМК_ПрайсЛист");		//--- УМК Сандомирский В.Ю. (21.10.14)
	СпрСтрокиПрайс 	= СоздатьОбъект("Справочник.УМК_СтрокиПрайсЛиста");	//--- УМК Сандомирский В.Ю. (21.10.14)
	
	Для инд = 1 По 7 Цикл 										//--- УМК Сандомирский В.Ю. (21.10.14)
		Чис = Число(Сред(БлокироватьВыписку, Инд, 1));
		Если Инд = 1 Тогда
		    ф1 = Чис;
		ИначеЕсли Инд = 2 Тогда
		    ф2 = Чис;
		ИначеЕсли Инд = 3 Тогда
		    ф3 = Чис;
		ИначеЕсли Инд = 4 Тогда
		    ф4 = Чис;
		ИначеЕсли Инд = 5 Тогда
		    ф5 = Чис;
		ИначеЕсли Инд = 6 Тогда
		    ф6 = Чис;
		ИначеЕсли Инд = 7 Тогда
		    ф7 = Чис;
		КонецЕсли;
	КонецЦикла;							//... УМК Сандомирский В.Ю. (21.10.14)
	Если ТМЦСТакимЖеФаршемИ <> ТМЦСТакимЖеФаршем Тогда
		ТМЦСТакимЖеФаршемИ = ТМЦСТакимЖеФаршем
	КонецЕсли;
	Если ОдинаковаяПрРазныеМаркИ <> ОдинаковаяПрРазныеМарк Тогда
		ОдинаковаяПрРазныеМаркИ = ОдинаковаяПрРазныеМарк;
	КонецЕсли;	
		
КонецПроцедуры

// ===============================
Процедура ПриВыбореЗакладки(Ном,Значен);
	Форма.ИспользоватьСлой(Значен+", Общий",2); 
	
	//--- УМК Сандомирский В.Ю. Прячем элементы
	Если Значен = "Продукция" Тогда	
		Форма.ГрафикФормированияПартий.Видимость(0);
		Форма.тГрафикФормированияПартий.Видимость(0);
		Форма.ВидНачисления.Видимость(0);
		Форма.тВидНачисления.Видимость(0);		
	КонецЕсли;
	//... УМК Сандомирский В.Ю. Прячем элементы
	
	ТекЗакладка = Значен;		//--- УМК Сандомирский В.Ю. (14.05.15) 	
КонецПроцедуры  

// ===============================
Процедура ВводНового(ПризнакКопирования, Элем)	                        
	ПерваяЗапись = 1;
	КодС = Код;	
	КодРРО = 0;
	ТМЦСТакимЖеФаршем = "";
	ТМЦСТакимЖеФаршемИ = "";
	ОдинаковаяПрРазныеМарк = "";
	ОдинаковаяПрРазныеМаркИ = "";
	БазаДляНормы = Перечисление.БазаДляНормы.Фарш;
	
	Если ПризнакКопирования = 0 Тогда             
		БазоваяЕдиница=глВосстановитьЗначение(,"БазЕдиница");
		ЕдиницаИзмерения = Перечисление.ЕдиницыВремени.День;
		ВидТМЦ=Перечисление.ВидыТМЦ.Товар;
		ИзмВидТМЦ();
		ТипТовара=Перечисление.ТипыТоваров.Штучный;
		СтавкаНДС = глВосстановитьЗначение(,"БазНДС");
		ВидДеятельности = глВосстановитьЗначение(,"БазВидДеятельности");
		ВидЗатрат = Константа.БазВидЗатратТМЦ;
	Иначе
		ВведенКопированием = 1;
		ОбъектКопирования = Элем;
		ПоследнийПоставщик = "";
		// очистим единицу по умолчанию
		ЕдиницаПоУмолчанию = ПолучитьПустоеЗначение("Справочник.Единицы");
		// при копировании нужно очистить реквизиты ШтрихКод и НормыЗатрат
		ШтрихКод = 0;
		НормыЗатрат = 0;
		ТМЦСписанияПриПродаже = "";
		ВидЭ = "";
		КодЭ = "";
		НаименованиеЭ = "";
		ОписаниеЭ = "";
		УсловияХранения = "";
		УсловияХраненияВП = "";
		УсловияХраненияВС = "";
		УсловияХраненияВЦ = "";
		УсловияХраненияГ = "";
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура ДобавитьПозициюВСписок(ВхСпр, Элемент, ИмяАтр, Спис)
	КатегорияТоваровДляПоиска = СоздатьОбъект("Справочник." + ВхСпр);
	КатегорияТоваровДляПоиска.ИспользоватьВладельца(ТекущийЭлемент());
	
	КатегорияТоваровДляПоиска.ВыбратьЭлементыПоРеквизиту(ИмяАтр, Элемент, 1, 0);
	Пока КатегорияТоваровДляПоиска.ПолучитьЭлемент()=1 Цикл
	    Если КатегорияТоваровДляПоиска.ПолучитьАтрибут(ИмяАтр) = Элемент Тогда
			Если  КатегорияТоваровДляПоиска.ПометкаУдаления()=0 Тогда
				// товар уже принадлежит категории
				// ничего не делать
				Возврат;
			Иначе
				// снимем пометку удаления 
				Попытка
					КатегорияТоваровДляПоиска.СнятьПометкуУдаления();
				Исключение
					Предупреждение(ОписаниеОшибки());
					Возврат;
				КонецПопытки;
				
				КатегорииТоваров = КатегорияТоваровДляПоиска.ТекущийЭлемент();
				Прервать;
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;
	
	Если ПустоеЗначение(КатегорииТоваров)=1 Тогда
		// если не нашли категорию с пометкой удаления,
		// то создаем новый элемент
		КатегорииТоваров = СоздатьОбъект("Справочник." + ВхСпр);
		КатегорииТоваров.ИспользоватьВладельца(ТекущийЭлемент());
		КатегорииТоваров.Новый();
		КатегорииТоваров.УстановитьАтрибут(ИмяАтр, Элемент);
		Если ВхСпр = "КонтрагентыПродукции" Тогда
			КатегорииТоваров.Группа = КатегорииТоваров.Контрагент.ЭтоГруппа();
		КонецЕсли;
		
		Попытка
			КатегорииТоваров.Записать();
		Исключение
			Предупреждение(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;

	// добавляем в список категорий
	Спис.ДобавитьЗначение(КатегорииТоваров.ТекущийЭлемент(),
	                                 КатегорииТоваров.ПолучитьАтрибут(ИмяАтр).Наименование + ?(КатегорииТоваров.ПолучитьАтрибут(ИмяАтр).ЭтоГруппа() = 1, " / группа", ""));
	Спис.ТекущаяСтрока(СписокКатегорий.РазмерСписка());								 

	Форма.кУдалитьКатегорию.Доступность(1);	
КонецПроцедуры // 

// ===============================
Процедура ОбработкаПодбора(Элемент, КонтекстФормы)	// Предопределенная процедура
	Перем КатегорииТоваров, КатегорияТоваровДляПоиска;
	
	Если Элемент.Вид() = "ВидыКатегорий" Тогда
		ДобавитьПозициюВСписок("КатегорииТоваров", Элемент, "Категория", СписокКатегорий);
	Иначе
		ДобавитьПозициюВСписок("КонтрагентыПродукции", Элемент, "Контрагент", СписокКонтрагентов);
		Если (СписокКонтрагентов.РазмерСписка() > 0) И (НеВыгружатьВЗаказник = 0) Тогда
			Если Вопрос("Установить флажок ""Не выгружать в заказник""?", "Да+Нет") = "Да" Тогда
				НеВыгружатьВЗаказник = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	// ОбработкаПодбора 

Функция ПроверитьКолвоСимв(ОписаниеЭ)
    Если СокрЛП(ОписаниеЭ) <> "" Тогда
		Текст = СоздатьОбъект("Текст");
		Текст.ДобавитьСтроку(ОписаниеЭ);
		Для Инд = 1 По Текст.КоличествоСтрок() Цикл
			Если СтрДлина(Текст.ПолучитьСтроку(Инд)) > 53 Тогда
			    Сообщить("Длина строки: " + РазделительСтрок + 
					Текст.ПолучитьСтроку(Инд) + РазделительСтрок +
					"превышает 53 символа (" + Прав(Текст.ПолучитьСтроку(Инд),СтрДлина(Текст.ПолучитьСтроку(Инд))-53)+")");
					
				//глВсеВыбрано = 0;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;  
КонецФункции  

Функция ПроверитьКолвоСтрок(Условие,НаимУсловия)
    Если СокрЛП(ОписаниеЭ) <> "" Тогда
		Текст = СоздатьОбъект("Текст");
		Текст.ДобавитьСтроку(ОписаниеЭ);
		Текст.ДобавитьСтроку(Условие);
		Сообщить(НаимУсловия+" строк "+Текст.КоличествоСтрок());
	КонецЕсли;  
КонецФункции

Процедура ПроверитьУникальностьРеквизита(Рекв, ТекстОшибки)
	Если ПустоеЗначение(ПолучитьАтрибут(Рекв)) = 0 Тогда		
		СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
		СпрТМЦ.ВыбратьЭлементыПоРеквизиту(Рекв, ПолучитьАтрибут(Рекв), 0, 0);
		Пока СпрТМЦ.ПолучитьЭлемент() = 1 Цикл
			Если СпрТМЦ.ТекущийЭлемент() <> ТекущийЭлемент() Тогда
				Сообщить("Такой " + ТекстОшибки + " уже есть у продукции: " + Строка(СпрТМЦ.ТекущийЭлемент()) + " код ТМЦ: " + СпрТМЦ.Код, "!!!");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура ПриЗаписи()
	
	Если глПользователь.ЗапретРедактироватьСпрТМЦ =  1 Тогда
		Предупреждение("Пользователю запрещено редактировать справочник.");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	глВсеВыбрано = 1;
	
	глВыбранЛи(Наименование, "Наименование");
	глВыбранЛи(ПолнНаименование, "Полное наименование");
	глВыбранЛи(ВидТМЦ, "Вид товара");
	глВыбранЛи(СтавкаНДС, "Ставка НДС");
	глВыбранЛи(БазоваяЕдиница, "Базовая единица измерения");
	
	глВыбранЛи(Счет, "Счет учета");
		
	Если (ВидТМЦ = Перечисление.ВидыТМЦ.Продукция) Или (ВидТМЦ = Перечисление.ВидыТМЦ.Полуфабрикат) Тогда
		глВыбранЛи(ГрафикФормированияПартий, "График формирования партий");
	КонецЕсли;

	Если ПроверкаУникальностиШтрихкода() = 0 Тогда
		Сообщить("Штрихкод не уникален");
		глВсеВыбрано = 0;
	КонецЕсли;
	ПроверитьУникальностьРеквизита("КодЭ", "код этикетки");
	Если Родитель.Выбран() = 1 Тогда
		Если (Родитель.МинКодРРО <> 0) И (Родитель.МаксКодРРО <> 0) Тогда
			Если (КодРРО = 0) Тогда
				глПрисвоитьКодИзДиапазона(Родитель, Контекст, "КодРРО", "МинКодРРО", "МаксКодРРО", 0, "Код РРО");
			Иначе
				ПроверитьУникальностьРеквизита("КодРРО", "код РРО");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(ЕдиницаИзмерения) = 1 Тогда
		ЕдиницаИзмерения = Перечисление.ЕдиницыВремени.День;
	КонецЕсли;

	Если (ПустоеЗначение(ТМЦСТакимЖеФаршем) = 0) И (ТМЦСТакимЖеФаршем = ТекущийЭлемент()) Тогда
		Сообщить("В качестве ТМЦ с таким же фаршем нельзя указывать это же ТМЦ");
		глВсеВыбрано = 0;
	КонецЕсли;
	
	Если глВсеВыбрано = 1 Тогда
		Если ПустоеЗначение(ЕдиницаПоУмолчанию) = 1 Тогда
			Если Выбран() = 1 Тогда
				СоздатьБазовуюЕдиницу();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если глВсеВыбрано = 0 Тогда
		Сообщить("Элемент справочника не записан!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;     

	Если глЗаписьПериодическихРеквизитов(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	// Если записываем, новый элемент, то для того чтобы создать базовую единицу
	// и заполнить единицу по умолчанию, сначала его запишем програмно.
	
	//--- УМК Сандомирский В.Ю, Закоментил 24.04.14
	//глОтправитьУведомлениеЭП("Справочник.ТМЦ", "Номенклатура: уведомление об изменении", ?(ПерваяЗапись = 1, "Добавлен новый", "Изменен") + " элемент справочника ТМЦ: " + Строка(Код) + ", " + Наименование + " пользователь: " + Строка(глПользователь));	
	
	Если ПерваяЗапись = 1 Тогда
		Если ВведенКопированием = 0 Тогда
			// Устанавливаем УровеньПередела по умолчанию
			Если ВидТМЦ = Перечисление.ВидыТМЦ.Полуфабрикат Тогда
				УровеньПередела = 1;
			ИначеЕсли (ВидТМЦ = Перечисление.ВидыТМЦ.Продукция) или (ВидТМЦ = Перечисление.ВидыТМЦ.Услуга) Тогда
				УровеньПередела = 0;
			КонецЕсли;	
		КонецЕсли;
		Записать();
		СоздатьБазовуюЕдиницу();
		ПерваяЗапись= 0;
	КонецЕсли;

	// установим штрихкод в базовой единице
	Записать();
	БазоваяДляПоиска = СоздатьОбъект("Справочник.Единицы");
	Базовая = глВернутьБазовуюЕдиницуТовара(ТекущийЭлемент());
	Если ПустоеЗначение(Базовая) = 0 Тогда
		// базовая уже создана
		БазоваяДляПоиска.НайтиЭлемент(Базовая);
		БазоваяДляПоиска.Штрихкод = Штрихкод;
		Попытка
			БазоваяДляПоиска.Записать();
		Исключение
			Предупреждение(ОписаниеОшибки());
		КонецПопытки;
		ЗаполнитьСписокЕдиниц();
		// попытаемся изменить значение в списке
		Позиция = 0;
		СписокЕдиниц.НайтиЗначение(Базовая,Позиция,"Ссылка");
		Если Позиция > 0 Тогда
			СписокЕдиниц.УстановитьЗначение(Позиция,"Штрихкод",Штрихкод);
		КонецЕсли;
	КонецЕсли;
                                    
	// проверим наличие базовой единицы в списке единиц
	Позиция = 0;         

	Если ПометкаУдаления() = 0 Тогда
		Базовая = глВернутьБазовуюЕдиницуТовара(ТекущийЭлемент());	
		СписокЕдиниц.НайтиЗначение(Базовая,Позиция,"Ссылка");
		Если (Позиция = 0)  Тогда
			// для новой или восстановленной единицы измерения
			СписокЕдиниц.НоваяСтрока();
			СписокЕдиниц.Ссылка = Базовая;
			СписокЕдиниц.Единица = Базовая.Единица;
			СписокЕдиниц.Коэффициент = Базовая.Коэффициент;
			СписокЕдиниц.ШтрихКод = Базовая.ШтрихКод;
			СписокЕдиниц.ТекущаяСтрока(СписокЕдиниц.КоличествоСтрок());
		КонецЕсли;
	КонецЕсли;
	
	Если ВведенКопированием = 1 Тогда
		// Добавлена возможность копирования подчиненных справочников при вводе копированием
		Если Вопрос("Копировать подчиненные справочники?","Да+Нет",0)="Да"  Тогда
			НачатьТранзакцию();
			СпрКомпл=СоздатьОбъект("Справочник.Комплектация");
			СпрКомпл2=СоздатьОбъект("Справочник.Комплектация");
			СпрЕд=СоздатьОбъект("Справочник.Единицы");
			СпрЕд2=СоздатьОбъект("Справочник.Единицы");
			СпрКат=СоздатьОбъект("Справочник.КатегорииТоваров");
			СпрКат2=СоздатьОбъект("Справочник.КатегорииТоваров");
			СпрКонтр=СоздатьОбъект("Справочник.КонтрагентыПродукции");
			СпрКонтр2=СоздатьОбъект("Справочник.КонтрагентыПродукции");
			СпрЦ = СоздатьОбъект("Справочник.Цены");
			СпрЦ2 = СоздатьОбъект("Справочник.Цены");
			
			
			//Копируем раскладки, аналоги, пропорции разделки
			СпрКомпл.ИспользоватьВладельца(ОбъектКопирования);
			СпрКомпл2.ИспользоватьВладельца(ТекущийЭлемент());
			СпрКомпл.ВыбратьЭлементы();
			Пока СпрКомпл.ПолучитьЭлемент() = 1 Цикл
				Если СпрКомпл.ПометкаУдаления() = 1 Тогда
					Продолжить;
				КонецЕсли;
				Если СпрКомпл.ЭтоГруппа()=0 Тогда
					СпрКомпл2.Новый();
					СпрКомпл2.Товар=СпрКомпл.Товар;
					СпрКомпл2.Наименование=СпрКомпл.Наименование;
					СпрКомпл2.Кво=СпрКомпл.Кво;
					СпрКомпл2.УстановитьНовыйКод();
					СпрКомпл2.Записать();
				КонецЕсли;	
			КонецЦикла;
			
			//Копируем единицы измерения
			СпрЕд.ИспользоватьВладельца(ОбъектКопирования);
			СпрЕд2.ИспользоватьВладельца(ТекущийЭлемент());
			СпрЕд.ВыбратьЭлементы();
			Пока СпрЕд.ПолучитьЭлемент()=1 Цикл
				Если СпрЕд.ПометкаУдаления() = 1 Тогда
					Продолжить;
				КонецЕсли;
				Если СпрЕд.Единица = БазоваяЕдиница Тогда
					Продолжить;
				КонецЕсли;
				СпрЕд2.Новый();
				СпрЕд2.Вес=СпрЕд.Вес;
				СпрЕд2.Коэффициент=СпрЕд.Коэффициент;
				СпрЕд2.Наименование=СпрЕд.Наименование;
				СпрЕд2.Единица=СпрЕд.Единица;
				СпрЕд2.Записать();
				//переопределим единицу по-умолчанию
				Если ОбъектКопирования.ЕдиницаПоУмолчанию = СпрЕд.ТекущийЭлемент() Тогда
					 ЕдиницаПоУмолчанию = СпрЕд2.ТекущийЭлемент();
				КонецЕсли;
			КонецЦикла;	
			
			//Копируем категории
			СпрКат.ИспользоватьВладельца(ОбъектКопирования);
			СпрКат2.ИспользоватьВладельца(ТекущийЭлемент());
			СпрКат.ВыбратьЭлементы();
			Пока СпрКат.ПолучитьЭлемент()=1 Цикл
				Если СпрКат.ПометкаУдаления() = 1 Тогда
					Продолжить;
				КонецЕсли;
				СпрКат2.Новый();
				СпрКат2.Наименование=СпрКат.Наименование;
				СпрКат2.Категория=СпрКат.Категория;
				СпрКат2.Записать();
			КонецЦикла;

			//Копируем категории
			СпрКонтр.ИспользоватьВладельца(ОбъектКопирования);
			СпрКонтр2.ИспользоватьВладельца(ТекущийЭлемент());
			СпрКонтр.ВыбратьЭлементы();
			Пока СпрКонтр.ПолучитьЭлемент()=1 Цикл
				Если СпрКонтр.ПометкаУдаления() = 1 Тогда
					Продолжить;
				КонецЕсли;
				СпрКонтр2.Новый();
				СпрКонтр2.Контрагент=СпрКонтр.Контрагент;
				СпрКонтр2.Группа = СпрКонтр.Контрагент.ЭтоГруппа();
				СпрКонтр2.Записать();
			КонецЦикла;

			СпрЦ.ИспользоватьДату(РабочаяДата(), 1);
			СпрЦ2.ИспользоватьДату(РабочаяДата(), 1);
			
			СпрЦ.ИспользоватьВладельца(ОбъектКопирования);			
			СпрЦ.ВыбратьЭлементы();						
			Пока СпрЦ.ПолучитьЭлемент() = 1 Цикл
				Если (СпрЦ.ПометкаУдаления() = 0) И (ПустоеЗначение(СпрЦ.КатегорияЦены) = 0) Тогда
					СпрЦ2.ИспользоватьВладельца(ТекущийЭлемент());
					СпрЦ2.Новый();
					СпрЦ2.Наименование = Строка(СпрЦ.КатегорияЦены);
					СпрЦ2.Валюта = СпрЦ.Валюта;
					СпрЦ2.Единица = СпрЦ.Единица;
					СпрЦ2.КатегорияЦены = СпрЦ.КатегорияЦены;
					СпрЦ2.Наценка = СпрЦ.Наценка;
					//СпрЦ2.Цена = СпрЦ.Цена;
					СпрЦ2.СхемаЦенообразования = СпрЦ.СхемаЦенообразования;
					СпрЦ2.Владелец = ТекущийЭлемент();
					СпрЦ2.Записать();
				КонецЕсли;
			КонецЦикла;
			
			КопироватьСкладыСписания(ОбъектКопирования);
			ЗафиксироватьТранзакцию();
			ВведенКопированием = 0;
			ЗаполнитьСписокКатегорий();
			ЗаполнитьСписокКомплектующих();
			ЗаполнитьСписокСкладовСписания();
			ЗаполнитьСписокКонтрагентов();
			ЗаполнитьСписокЦен();
		Иначе
			ЕдиницаПоУмолчанию = Базовая;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокЕдиниц();
	ЗаполнитьСписокСвязаныхЭлементов();
	
	СпрСтрокаОтгрузочного = СоздатьОбъект("Справочник.УМК_СтрокиОтгрузочного");			// --- УМК Сандомирский В.Ю. (16.03.15)
	Если СпрСтрокаОтгрузочного.НайтиПоРеквизиту("ТМЦ",ТекущийЭлемент(),1) = 1 Тогда
		СпрСтрокаОтгрузочного.Новый = фНовый;
		СпрСтрокаОтгрузочного.Записать();
	КонецЕсли; // ... УМК Сандомирский В.Ю. (16.03.15)
	Если (ПустоеЗначение(ВидУпаковкиПоУмолчанию) = 0) И (ТекущийЭлемент().Выбран() = 1) Тогда
		СпрРВУ = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
		СпрРВУ.ИспользоватьВладельца(ТекущийЭлемент());
		Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", ВидУпаковкиПоУмолчанию, 0) = 1 Тогда
			Если СпрРВУ.ПометкаУдаления() = 1 Тогда
				Сообщить("Вид упаковки по умолчанию помечен на удаление в разрешенных видах упаковки");
				СтатусВозврата(0);
			КонецЕсли;
		Иначе
			Сообщить("Вид упаковки по умолчанию не найден в разрешенных видах упаковки");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

// ======================================
Процедура кЗаписать()
	НажатаКнопкаЗаписать = 1;
	СтрокаДействийФормы = "Записать";
КонецПроцедуры 

// ===============================
Процедура ПриЗакрытии()      
КонецПроцедуры          

// ===============================
Процедура ПриНачалеВыбораЗначения(Рекв,ФлагСтандОбр)
	Перем Параметр;
	
	Если Рекв = "СтавкаНДС" Тогда
	    глВыбратьНДС(Контекст,Рекв);
		ФлагСтандОбр = 0;
	
	ИначеЕсли Рекв = "ЕдиницаПоУмолчанию" Тогда
		// нужно открыть справочник единиц измерения для выбора 
		// только для текущего товара
		Параметр = ТекущийЭлемент();
		ОткрытьПодбор("Справочник.Единицы","ДляВыбора",Параметр,0,ЕдиницаПоУмолчанию);
		ФлагСтандОбр = 0;
	                      
	ИначеЕсли Рекв = "БазоваяЕдиница" Тогда
		Если ЕстьДвиженияПоПартиям() = 1 Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;	
		СтарБазоваяЕдиница = БазоваяЕдиница;
	ИначеЕсли Рекв = "ВидТМЦ" Тогда
		Если ЕстьДвиженияПоПартиям() = 1 Тогда
			СтатусВозврата(0);							
			Возврат;
		КонецЕсли;	
		ФлагСтандОбр = 0;
		Если СписокКомплектующих.КоличествоСтрок()>0 Тогда
			Предупреждение("Изменить вид ТМЦ на отличный от вида ""Набор"" можно только при пустом списке комплектующих!");
			Возврат
		КонецЕсли;	
		СпВидТМЦ = СоздатьОбъект("СписокЗначений");
		СпВидТМЦ.ДобавитьЗначение(Перечисление.ВидыТМЦ.Товар,"Товар");
		СпВидТМЦ.ДобавитьЗначение(Перечисление.ВидыТМЦ.Услуга,"Услуга");
		СпВидТМЦ.ДобавитьЗначение(Перечисление.ВидыТМЦ.Тара,"Тара");
		СпВидТМЦ.ДобавитьЗначение(Перечисление.ВидыТМЦ.Продукция,"Продукция");
		СпВидТМЦ.ДобавитьЗначение(Перечисление.ВидыТМЦ.Материал,"Материал");
		СпВидТМЦ.ДобавитьЗначение(Перечисление.ВидыТМЦ.СтройМатериал,"Стройматериал");
		СпВидТМЦ.ДобавитьЗначение(Перечисление.ВидыТМЦ.Топливо,"Топливо");
		СпВидТМЦ.ДобавитьЗначение(Перечисление.ВидыТМЦ.Запчасти,"Запчасти");
		СпВидТМЦ.ДобавитьЗначение(Перечисление.ВидыТМЦ.МБП,"МБП");
		СпВидТМЦ.ДобавитьЗначение(Перечисление.ВидыТМЦ.Полуфабрикат,"Полуфабрикат");
		СпВидТМЦ.ДобавитьЗначение(Перечисление.ВидыТМЦ.Набор,"Набор");
		
		
		Пер = СоздатьОбъект("Периодический");
		Пер.ИспользоватьОбъект("НормыЗатрат",ТекущийЭлемент());
		Пер.ВыбратьЗначения();
		Если Пер.ПолучитьЗначение() = 1 Тогда
			Пер = 0;
			Предупреждение("Нельзя изменить вид ТМЦ на отличный от вида ""Продукция"" при заполненном реквизите ""Нормы затрат""!");
			Возврат;
		КонецЕсли;
		Пер = 0;
		Если ГрафикФормированияПартий.Выбран() = 1 Тогда
			ГрафикФормированияПартий = "";
		КонецЕсли;	
	    
		Если СпВидТМЦ.ВыбратьЗначение(ВидТМЦ,,,,2) = 1 Тогда
			ИзмВидТМЦ();
		КонецЕсли;
	ИначеЕсли Рекв = "ЛьготаНДС" Тогда
	    ВыбратьЛьготу();
		ФлагСтандОбр = 0;
	ИначеЕсли Рекв = "НГруппа" Тогда	    
		ФлагСтандОбр = 0;
		СпрКат = СоздатьОбъект("Справочник.ВидыКатегорий");
		СпрКат.НайтиПоНаименованию("Группы номенклатуры");
		СпрКат.ИспользоватьРодителя(СпрКат.ТекущийЭлемент());
		СписКат = СоздатьОбъект("СписокЗначений");
		СпрКат.ВыбратьЭлементы();
		Пока СпрКат.ПолучитьЭлемент() = 1 Цикл
			Если СпрКат.ПометкаУдаления() = 0 Тогда
			    СписКат.ДобавитьЗначение(СпрКат.ТекущийЭлемент());
			КонецЕсли;			
		КонецЦикла;
		
		Если СписКат.ВыбратьЗначение(НГруппа, ,,,2) = 0 Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли (Рекв = "ВидУпаковкиПоУмолчанию") ИЛИ (Рекв = "УпаковкаЗамены") Тогда //--- УМК Сандомирский В.Ю, (12.11.14)
		ФлагСтандОбр = 0;
		
		ТекРазрешенныеВидыУпаковки 	= СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
		СпВидыУпаковкиЛокальный 	= СоздатьОбъект("СписокЗначений");
		ТекРазрешенныеВидыУпаковки.ИспользоватьВладельца(ТекущийЭлемент());
		ТекРазрешенныеВидыУпаковки.ВыбратьЭлементы();
		Пока ТекРазрешенныеВидыУпаковки.ПолучитьЭлемент() = 1 Цикл
			Если ТекРазрешенныеВидыУпаковки.ПометкаУдаления() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			//Если ТекРазрешенныеВидыУпаковки.ВидУпаковки.Активна <> Перечисление.ДаНет.Да Тогда //--- пропускаем не активные
			//	Продолжить;
			//КонецЕсли;
			
			СпВидыУпаковкиЛокальный.ДобавитьЗначение(ТекРазрешенныеВидыУпаковки.ТекущийЭлемент().ВидУпаковки);	// --- из подчиненного справочника	 
		КонецЦикла;
				
		СтрВидУпаковки = "";
		Если СпВидыУпаковкиЛокальный.ВыбратьЗначение(СтрВидУпаковки,,,,2) = 1 Тогда
			Если Рекв = "ВидУпаковкиПоУмолчанию" Тогда
		    	ВидУпаковкиПоУмолчанию = СтрВидУпаковки;
			Иначе
				УпаковкаЗамены = СтрВидУпаковки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры    

//================================
Процедура Печать()  
	глРасшифровка = СоздатьОбъект("СписокЗначений");
	глФлагРасшифровки = 1;
	глОбновить = 0;
	глРасшифровка.Установить("Объект", "НормативныйСостав");
	глРасшифровка.Установить("ДатаОтчета", ТекущиеНормыЗатрат.ДатаДок);
	глРасшифровка.Установить("ВыбПродукция", ТекущиеНормыЗатрат.Продукция);

	ОткрытьФорму("Отчет.НормативныйСостав#");
	глФлагРасшифровки = 0;
	глРасшифровка = 0;
	глОбновить = 0;
КонецПроцедуры    

//================================
Процедура НовыйНормыЗатрат()
	Если Выбран() = 1 Тогда
		ОткрытьФорму("Документ.НормыЗатрат",ТекущийЭлемент());
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьНормы()
	Если ТекущийЭлемент().Выбран() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КФормы = ТекущийЭлемент();
	ОткрытьФорму("Журнал.ПолныйЖурнал.ДляПросмотраНорм", КФормы);	
КонецПроцедуры

Процедура ОткрытьСхему()
	ОткрытьФорму(СхемаРасчетаЗП);
КонецПроцедуры


Процедура ЭтикеткаИнфо()
	Если Модифицированность() = 1 Тогда
		Предупреждение("Нужно сохранить элемент");
		Возврат;
	КонецЕсли;
	
	Парам = ТекущийЭлемент();
	ОткрытьФорму("Отчет.Этикетка", Парам);
КонецПроцедуры

Процедура Наклейка()
	Если Модифицированность() = 1 Тогда
		Предупреждение("Нужно сохранить элемент");
		Возврат;
	КонецЕсли;
	
	Парам = ТекущийЭлемент();
	Парам = СоздатьОбъект("СписокЗначений");
	Парам.ДобавитьЗначение(ТекущийЭлемент(), "ТМЦ");
	Парам.ДобавитьЗначение(2, "Признак");
	ОткрытьФорму("Отчет.Этикетка", Парам);
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю, (шаблон схем ценообразования) 16.04.14 г.
Процедура ВыбратьШаблонСхем() 
	СтарыйШаблон = ШаблонСхемЦенообразования;
	
	ДокШаблон = СоздатьОбъект("Документ.УМК_ШаблонСхемЦенообразования");
	
	Если ДокШаблон.Выбрать("","")=1 Тогда
		
	    ШаблонСхемЦенообразования = ДокШаблон.ТекущийДокумент();
		
	КонецЕсли;
КонецПроцедуры //глУстФирма


//--- УМК Сандомирский В.Ю, (для связанные элементы ценообразования ) 22.04.14

//======================================================================
Процедура ДобавитьСвязаныйЭлемент()
	Перем ФормаЗаписи;
	Если Выбран() = 0 Тогда
		Предупреждение("Элемент сначала следует записать!");
		Возврат;
	КонецЕсли;	
	ОткрытьФормуМодально("Элемент.СвязаныеЭлементыЦенообразования",Контекст,,,ТекущийЭлемент());
	ЗаполнитьСписокСвязаныхЭлементов();
КонецПроцедуры // ДобавитьСвязаныйЭлемент

// ===============================
Процедура ИзменитьСвязаныйЭлемент()
	Перем ФормаЗаписи;
	Поз=СписокСвязаныхЭлементов.ТекущаяСтрока();	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;               	
	Эл=СписокСвязаныхЭлементов.ПолучитьЗначение(Поз,"Ссылка");
	ОткрытьФормуМодально(Эл,Контекст);
	ЗаполнитьСписокСвязаныхЭлементов();
КонецПроцедуры // ИзменитьСвязаныйЭлемент

//======================================================================
Процедура УдалитьСвязаныйЭлемент()
	
	Перем Поз;
	
	Поз=СписокСвязаныхЭлементов.ТекущаяСтрока();
	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;
	
	Эл=СписокСвязаныхЭлементов.ПолучитьЗначение(Поз,"Ссылка");

	Если Вопрос("Удалить связанный элемент товара?",1)=2 Тогда
		Возврат;
	КонецЕсли;
	Спр=СоздатьОбъект("Справочник.СвязаныеЭлементыЦенообразования");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		Спр.Удалить(0);
		СписокСвязаныхЭлементов.УдалитьСтроку(Поз);
		СписокСвязаныхЭлементов.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры // УдалитьСвязаныйЭлемент


//--- УМК Сандомирский В.Ю. (09.09.14) РАЗРЕШЕННЫЕ ВИДЫ УПАКОВКИ 

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура ЗаполнитьСписокВидовУпаковки()
	Перем РазрешенныйВидУпаковки;
	Перем Индекс;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	РазрешенныйВидУпаковки = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
	СпрЦ = СоздатьОбъект("Справочник.УМК_ЦеныУпаковки");
	РазрешенныйВидУпаковки.ИспользоватьВладельца(ТекущийЭлемент());
	РазрешенныйВидУпаковки.ПорядокКодов();
	РазрешенныйВидУпаковки.ВыбратьЭлементы();
	Индекс = 0; 
	СписокВидовУпаковки.УдалитьСтроки();
	Пока РазрешенныйВидУпаковки.ПолучитьЭлемент()=1 Цикл
		//Если РазрешенныйВидУпаковки.ПометкаУдаления()=1 Тогда
		//    Продолжить;
		//КонецЕсли;

	    Индекс = Индекс + 1;
		СписокВидовУпаковки.НоваяСтрока(Индекс);
		СписокВидовУпаковки.Ссылка 		= РазрешенныйВидУпаковки.ТекущийЭлемент();
		СписокВидовУпаковки.ВидУпаковки	= РазрешенныйВидУпаковки.ВидУпаковки;
		
		СписокВидовУпаковки.НеВыгружатьВЗаказник = РазрешенныйВидУпаковки.НеВыгружатьВЗаказник;		//--- УМК Сандомирский В.Ю, (06.04.15)
		Если РазрешенныйВидУпаковки.НеВыгружатьВЗаказник = 1 Тогда									//--- УМК Сандомирский В.Ю, (06.04.15)
			СписокВидовУпаковки.FormEx_ПланРаскраски = "(BRUSH["+глПолучитьЦвет(243,188,240)+"])";
		КонецЕсли;																					//... УМК Сандомирский В.Ю, (06.04.15)
		
		СписокВидовУпаковки.Цена		= РазрешенныйВидУпаковки.Цена.Получить(РабочаяДата());
		СписокВидовУпаковки.Себестоимость = РазрешенныйВидУпаковки.Себестоимость.Получить(РабочаяДата());
		СписокВидовУпаковки.КодPLU		= РазрешенныйВидУпаковки.КодPLU;
		СписокВидовУпаковки.КодЭтикетки	= РазрешенныйВидУпаковки.КодЭтикетки;
		СписокВидовУпаковки.КоэфУвВеса	= РазрешенныйВидУпаковки.КоэфУвВеса;
		СписокВидовУпаковки.СкидкаНаВес	= РазрешенныйВидУпаковки.СкидкаНаВес;
		СписокВидовУпаковки.ВесУпаковки = РазрешенныйВидУпаковки.ВесУпаковки.Получить(РабочаяДата());	//--- УМК Сандомирский В.Ю, (18.11.14)
		СписокВидовУпаковки.ЕдиницаИзмерения = РазрешенныйВидУпаковки.ЕдиницаИзмерения;
		СписокВидовУпаковки.СрокГодности = РазрешенныйВидУпаковки.СрокГодности;
		СписокВидовУпаковки.Примечание  = РазрешенныйВидУпаковки.Примечание;
		СписокВидовУпаковки.ДопустимоеОтклонение = РазрешенныйВидУпаковки.ДопустимоеОтклонение;
		СписокВидовУпаковки.ДляПечати   = РазрешенныйВидУпаковки.ДляПечати.Получить(РабочаяДата());		//--- УМК Сандомирский В.Ю, (06.11.14)		
		СписокВидовУпаковки.Основной    = ?(РазрешенныйВидУпаковки.Основной = 1, 5, 0);
		СписокВидовУпаковки.ПометкаУдаления = РазрешенныйВидУпаковки.ПометкаУдаления();		
		СпрЦ.ИспользоватьВладельца(РазрешенныйВидУпаковки.ТекущийЭлемент());
		СпрЦ.ВыбратьЭлементы();
		Пока СпрЦ.ПолучитьЭлемент() = 1 Цикл
			Если СпрЦ.ПометкаУдаления() = 0 Тогда
				СписокВидовУпаковки.ЕстьИскл = 5;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	// ЗаполнитьСписокВидовУпаковки

Процедура СнятьПометку(ИмяСпр, ВладелецУпаковка)
	Спр = СоздатьОбъект("Справочник." + ИмяСпр);
	Спр.ИспользоватьВладельца(ВладелецУпаковка);
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.ПометкаУдаления() = 1 Тогда
			Спр.СнятьПометкуУдаления();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура ДобавитьВидУпаковки()
	Перем ФормаЗаписи;
	Если Выбран() = 0 Тогда
		Предупреждение("Элемент сначала следует записать!");
		Возврат;
	КонецЕсли;	
	ОткрытьФормуМодально("Элемент.УМК_РазрешенныеВидыУпаковкиТМЦ",Контекст,,,ТекущийЭлемент());
	ЗаполнитьСписокВидовУпаковки();
КонецПроцедуры // Добавить

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура ИзменитьВидУпаковки()
	Перем ФормаЗаписи;
	Поз=СписокВидовУпаковки.ТекущаяСтрока();	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;               	
	Эл=СписокВидовУпаковки.ПолучитьЗначение(Поз,"Ссылка");
	ОткрытьФормуМодально(Эл,Контекст);
	ЗаполнитьСписокВидовУпаковки();
КонецПроцедуры // Изменить

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура УдалитьВидУпаковки()	
	Перем Поз;
	
	Поз=СписокВидовУпаковки.ТекущаяСтрока();	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;
	
	Эл = СписокВидовУпаковки.ПолучитьЗначение(Поз,"Ссылка");
	Пометка = СписокВидовУпаковки.ПолучитьЗначение(Поз,"ПометкаУдаления");
	ТекстВопроса = ?(Пометка = 1, "Снять пометку удаления для вида упаковки", "Удалить вид упаковки") + "?";
	Если Вопрос(ТекстВопроса, 1) = 2 Тогда
		Возврат;
	КонецЕсли;
	
	Спр=СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		Если Пометка = 1 Тогда
			Если Эл.КодPLU <> 0 Тогда
				Если глПроверитьВозможностьУдаленияРВУ(Эл) = 1 Тогда
					НачатьТранзакцию();
					Спр.СнятьПометкуУдаления();					
					// снимем пометку удалени у подчинённых элементов
					СнятьПометку("УМК_НормыСписанияМатериаловУпаковок", Спр.ТекущийЭлемент());
					СнятьПометку("УМК_ЦеныУпаковки", Спр.ТекущийЭлемент());
					СнятьПометку("ЗаменыТМЦУпаковки", Спр.ТекущийЭлемент());
					ЗафиксироватьТранзакцию();
				Иначе
					Возврат;
				КонецЕсли;
			Иначе
				Предупреждение("Не забудьте присвоить новый код в весах");
			КонецЕсли;
		Иначе
			Если ВидУпаковкиПоУмолчанию = Спр.ВидУпаковки Тогда
				Предупреждение("Этот вид упаковки задан как вид упаковки по умолчанию для продукции. Не забудьте заменить вид упаковки в продукции");
			КонецЕсли;
			Спр.Удалить(0);
		КонецЕсли;
		СписокВидовУпаковки.УстановитьЗначение(Поз, "ПометкаУдаления", 1 - Пометка);
		//СписокВидовУпаковки.УдалитьСтроку(Поз);
		//СписокВидовУпаковки.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Форма.Обновить();
	КонецЕсли;
	
	//СпрН = СоздатьОбъект("Справочник.УМК_НормыСписанияМатериаловУпаковок");
	//СпрН.ИспользоватьВладельца(Эл);
	//СпрН.ВыбратьЭлементы();
	//Пока СпрН.ПолучитьЭлемент() = 1 Цикл
	//	СпрН.СнятьПометкуУдаления();
	//КонецЦикла;
	
	
	//Найти упаковку в спецификациях
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Спецификация = Справочник.Контрагенты.Спецификация;
	|Группировка Спецификация;
	|Условие(ПустоеЗначение(Спецификация) = 0);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл

		ТекСпецификация = Запрос.Спецификация.ТекущийДокумент();
		
		//Найдем упаковку в спецификациях
		
		Запрос2 = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(ВидыУпаковки)
		|ОбрабатыватьДокументы все;
		|ВУ = Документ.УМК_Спецификация.ВидУпаковки;
		|ТМЦ = Документ.УМК_Спецификация.ТМЦ;
		|НомерДок = Документ.УМК_Спецификация.НомерДок;
		|ДатаДок = Документ.УМК_Спецификация.ДатаДок;
		|Группировка ВУ;
		|Условие(НомерДок = ТекСпецификация.НомерДок);
		|Условие(ДатаДок = ТекСпецификация.ДатаДок);
		|Условие(ВУ = Эл.ВидУпаковки);
		|Условие(ТМЦ = Эл.Владелец);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос2.Выполнить(ТекстЗапроса) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока Запрос2.Группировка(1) = 1 Цикл
			Если Запрос2.ВУ.ЭтоГруппа() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Сообщить("Упаковка "+ Строка(Запрос2.ВУ) +" присутствует в документе -" + Строка(ТекСпецификация));
			
		КонецЦикла
		
	КонецЦикла;
   
   //По упаковке в спецификации	

	
КонецПроцедуры // Удалить

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура ИзменениеПорядка(Направление)
	
	ТекСтрока = СписокВидовУпаковки.ТекущаяСтрока();
	СписокВидовУпаковки.СдвинутьСтроку(Направление,ТекСтрока);
	
	ТекСтрока = ТекСтрока + Направление;
	Если ТекСтрока > СписокВидовУпаковки.КоличествоСтрок() Тогда
		ТекСтрока = СписокВидовУпаковки.КоличествоСтрок(); 
	КонецЕсли; 
	
	СписокВидовУпаковки.ТекущаяСтрока(ТекСтрока);
	
	//--- Сдвигаем номерацию на 100
	ТЗ_Элементы = СоздатьОбъект("ТаблицаЗначений");
	ТЗ_Элементы.НоваяКолонка("Ссылка");
	СпрРазрешенныеВидыУпаковки	= СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
	СпрРазрешенныеВидыУпаковки.ИспользоватьВладельца(ТекущийЭлемент());
	СпрРазрешенныеВидыУпаковки.ВыбратьЭлементы();
	Пока СпрРазрешенныеВидыУпаковки.ПолучитьЭлемент() = 1 Цикл
		ТЗ_Элементы.НоваяСтрока();
		ТЗ_Элементы.Ссылка = СпрРазрешенныеВидыУпаковки.ТекущийЭлемент();
	КонецЦикла;
	
	ТЗ_Элементы.ВыбратьСтроки();
	Пока ТЗ_Элементы.ПолучитьСтроку() = 1 Цикл
		СпрРазрешенныеВидыУпаковки.НайтиЭлемент(ТЗ_Элементы.Ссылка);
		СпрРазрешенныеВидыУпаковки.Код = Число(СпрРазрешенныеВидыУпаковки.Код) + 100;
		СпрРазрешенныеВидыУпаковки.Записать();
	КонецЦикла;
	//--- Сдвигаем номерацию на 100
	
	ТекКод = 0;
	СписокВидовУпаковки.ВыбратьСтроки();
	Пока СписокВидовУпаковки.ПолучитьСтроку() = 1 Цикл
		ТекКод = ТекКод + 1;
		СпрРазрешенныеВидыУпаковки.НайтиЭлемент(СписокВидовУпаковки.Ссылка);
		СпрРазрешенныеВидыУпаковки.Код = ТекКод;
		СпрРазрешенныеВидыУпаковки.Записать();
	КонецЦикла;
	
КонецПроцедуры // ИзменениеПорядка(1)

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура ЗаполнитьВидыУпаковкиИзГруппировки()	
	Если Выбран() <> 1 Тогда
		Сообщить("Запишите текущий элемент !","!");
		Возврат;
	КонецЕсли;
	
	Записать();
	
	//--- задаем дату получения и записи периодических реквизитов
	ДатаПерЗначения = ПолучитьПустоеЗначение("Дата");
	Если ВвестиЗначение(ДатаПерЗначения,"Дата значений периодических реквизитов","Дата") = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДатаПерЗначения = '  .  .  ' Тогда
		Сообщить("Не задана дата периодических реквизитов - заполение не выполнено");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ГруппировкаРазрешенныхВидовУпаковки) <> 1 Тогда
		
		ВидУпаковкиПоУмолчанию 	= ГруппировкаРазрешенныхВидовУпаковки.ВидУпаковкиПоУмолчанию;		//--- УМК Сандомирский В.Ю. (10.11.14)
		НетБезУпаковки			= ГруппировкаРазрешенныхВидовУпаковки.НетБезУпаковки;				//--- УМК Сандомирский В.Ю. (10.11.14)
		
		ТекРазрешенныеВидыУпаковки = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковки");
		ТекРазрешенныеВидыУпаковкиТМЦ = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
		

		ТекРазрешенныеВидыУпаковкиТМЦ.ИспользоватьВладельца(ТекущийЭлемент());
		
		ТекРазрешенныеВидыУпаковкиТМЦ.ВыбратьЭлементы();
		Пока ТекРазрешенныеВидыУпаковкиТМЦ.ПолучитьЭлемент() = 1 Цикл
			ТекРазрешенныеВидыУпаковкиТМЦ.Удалить(0);
		КонецЦикла;
		
		ТекРазрешенныеВидыУпаковки.ИспользоватьВладельца(ГруппировкаРазрешенныхВидовУпаковки);
		ТекРазрешенныеВидыУпаковки.ПорядокКодов();
		ТекРазрешенныеВидыУпаковки.ВыбратьЭлементы();
		Пока ТекРазрешенныеВидыУпаковки.ПолучитьЭлемент() = 1 Цикл			
			Если ТекРазрешенныеВидыУпаковки.ПометкаУдаления() = 1 Тогда
				Продолжить;
			КонецЕсли;
						
			Если ТекРазрешенныеВидыУпаковкиТМЦ.НайтиПоРеквизиту("ВидУпаковки",ТекРазрешенныеВидыУпаковки.ВидУпаковки,0) <> 1 Тогда
				ТекРазрешенныеВидыУпаковкиТМЦ.ИспользоватьДату(ДатаПерЗначения,1);
				ТекРазрешенныеВидыУпаковкиТМЦ.Новый();
				ТекРазрешенныеВидыУпаковкиТМЦ.ВидУпаковки 			= ТекРазрешенныеВидыУпаковки.ВидУпаковки;
				ТекРазрешенныеВидыУпаковкиТМЦ.Основной				= ТекРазрешенныеВидыУпаковки.Основной;
				ТекРазрешенныеВидыУпаковкиТМЦ.НеВыгружатьВЗаказник 	= ТекРазрешенныеВидыУпаковки.НеВыгружатьВЗаказник; //--- УМК Сандомирский В.Ю. (07.04.15)
				ТекРазрешенныеВидыУпаковкиТМЦ.Цена		  			= ТекРазрешенныеВидыУпаковки.Цена.Получить(ДатаПерЗначения); 
				ТекРазрешенныеВидыУпаковкиТМЦ.КоэфУвВеса			= ТекРазрешенныеВидыУпаковки.КоэфУвВеса;
				ТекРазрешенныеВидыУпаковкиТМЦ.СкидкаНаВес			= ТекРазрешенныеВидыУпаковки.СкидкаНаВес;
				ТекРазрешенныеВидыУпаковкиТМЦ.ВесУпаковки			= ТекРазрешенныеВидыУпаковки.ВесУпаковки.Получить(ДатаПерЗначения);//--- УМК Сандомирский В.Ю. (18.11.14)
				ТекРазрешенныеВидыУпаковкиТМЦ.Примечание			= ТекРазрешенныеВидыУпаковки.Примечание;	
				ТекРазрешенныеВидыУпаковкиТМЦ.ДляПечати				= ТекРазрешенныеВидыУпаковки.ДляПечати;  //--- УМК Сандомирский В.Ю. (06.11.14)
				ТекРазрешенныеВидыУпаковкиТМЦ.Записать();
			Иначе
				Если ТекРазрешенныеВидыУпаковкиТМЦ.ПометкаУдаления() = 1 Тогда
					ТекРазрешенныеВидыУпаковкиТМЦ.СнятьПометкуУдаления();				
				КонецЕсли;
				ТекРазрешенныеВидыУпаковкиТМЦ.ИспользоватьДату(ДатаПерЗначения,1);
				ТекРазрешенныеВидыУпаковкиТМЦ.НеВыгружатьВЗаказник 	= ТекРазрешенныеВидыУпаковки.НеВыгружатьВЗаказник; //--- УМК Сандомирский В.Ю. (07.04.15)
				ТекРазрешенныеВидыУпаковкиТМЦ.Цена		  			= ТекРазрешенныеВидыУпаковки.Цена.Получить(ДатаПерЗначения);
				ТекРазрешенныеВидыУпаковкиТМЦ.Основной				= ТекРазрешенныеВидыУпаковки.Основной;
				ТекРазрешенныеВидыУпаковкиТМЦ.КоэфУвВеса			= ТекРазрешенныеВидыУпаковки.КоэфУвВеса;
				ТекРазрешенныеВидыУпаковкиТМЦ.СкидкаНаВес			= ТекРазрешенныеВидыУпаковки.СкидкаНаВес;
				ТекРазрешенныеВидыУпаковкиТМЦ.ВесУпаковки			= ТекРазрешенныеВидыУпаковки.ВесУпаковки.Получить(ДатаПерЗначения);//--- УМК Сандомирский В.Ю. (18.11.14)
				ТекРазрешенныеВидыУпаковкиТМЦ.Примечание			= ТекРазрешенныеВидыУпаковки.Примечание;
				ТекРазрешенныеВидыУпаковкиТМЦ.ДляПечати				= ТекРазрешенныеВидыУпаковки.ДляПечати;  //--- УМК Сандомирский В.Ю. (06.11.14)
				ТекРазрешенныеВидыУпаковкиТМЦ.Записать();
			КонецЕсли;
				
			//--- УМК Сандомирский В.Ю. (09.10.14) Заполнить материалы упаковки 
			Спр_УМК_НормыСписанияМатериаловУпаковокГрупп = СоздатьОбъект("Справочник.УМК_НормыСписанияМатериаловУпаковокГрупп");
			Спр_УМК_НормыСписанияМатериаловУпаковок = СоздатьОбъект("Справочник.УМК_НормыСписанияМатериаловУпаковок");
			
			Спр_УМК_НормыСписанияМатериаловУпаковок.ИспользоватьВладельца(ТекРазрешенныеВидыУпаковкиТМЦ.ТекущийЭлемент());
			
			Спр_УМК_НормыСписанияМатериаловУпаковокГрупп.ИспользоватьВладельца(ТекРазрешенныеВидыУпаковки.ТекущийЭлемент());
			Спр_УМК_НормыСписанияМатериаловУпаковокГрупп.ВыбратьЭлементы();
			Пока Спр_УМК_НормыСписанияМатериаловУпаковокГрупп.ПолучитьЭлемент() = 1 Цикл
				
				Если Спр_УМК_НормыСписанияМатериаловУпаковокГрупп.ПометкаУдаления() = 1 Тогда
					Продолжить;					
				КонецЕсли;	
				
				Если Спр_УМК_НормыСписанияМатериаловУпаковок.НайтиПоКоду(Спр_УМК_НормыСписанияМатериаловУпаковокГрупп.Код,1) <> 1 Тогда
					Спр_УМК_НормыСписанияМатериаловУпаковок.Новый();
				Иначе
					Если Спр_УМК_НормыСписанияМатериаловУпаковок.ПометкаУдаления() = 1 Тогда
						Спр_УМК_НормыСписанияМатериаловУпаковок.СнятьПометкуУдаления();
					КонецЕсли;			
				КонецЕсли;
				
				Спр_УМК_НормыСписанияМатериаловУпаковок.ИспользоватьДату(ДатаПерЗначения,1);
				Спр_УМК_НормыСписанияМатериаловУпаковок.Материал 		= Спр_УМК_НормыСписанияМатериаловУпаковокГрупп.Материал.Получить(ДатаПерЗначения);
				Спр_УМК_НормыСписанияМатериаловУпаковок.НормаСписания	= Спр_УМК_НормыСписанияМатериаловУпаковокГрупп.НормаСписания.Получить(ДатаПерЗначения);
				Спр_УМК_НормыСписанияМатериаловУпаковок.Записать();					
			КонецЦикла;					
		КонецЦикла;
		
		//--- Сдвигаем номерацию на 100
		ТЗ_Элементы = СоздатьОбъект("ТаблицаЗначений");
		ТЗ_Элементы.НоваяКолонка("Ссылка");
		СпрРазрешенныеВидыУпаковки	= СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
		СпрРазрешенныеВидыУпаковки.ИспользоватьВладельца(ТекущийЭлемент());
		СпрРазрешенныеВидыУпаковки.ВыбратьЭлементы();
		Пока СпрРазрешенныеВидыУпаковки.ПолучитьЭлемент() = 1 Цикл
			ТЗ_Элементы.НоваяСтрока();
			ТЗ_Элементы.Ссылка = СпрРазрешенныеВидыУпаковки.ТекущийЭлемент();
		КонецЦикла;
		ТЗ_Элементы.ВыбратьСтроки();
		Пока ТЗ_Элементы.ПолучитьСтроку() = 1 Цикл
			СпрРазрешенныеВидыУпаковки.НайтиЭлемент(ТЗ_Элементы.Ссылка);
			СпрРазрешенныеВидыУпаковки.Код = Число(СпрРазрешенныеВидыУпаковки.Код) + 100;
			СпрРазрешенныеВидыУпаковки.Записать();
		КонецЦикла;
		
		//--- перенумероввываем
		ТекКод = 0;
		ТекРазрешенныеВидыУпаковки.ИспользоватьВладельца(ГруппировкаРазрешенныхВидовУпаковки);
		ТекРазрешенныеВидыУпаковки.ПорядокКодов();
		ТекРазрешенныеВидыУпаковки.ВыбратьЭлементы();
		Пока ТекРазрешенныеВидыУпаковки.ПолучитьЭлемент() = 1 Цикл			
			Если ТекРазрешенныеВидыУпаковкиТМЦ.НайтиПоРеквизиту("ВидУпаковки",ТекРазрешенныеВидыУпаковки.ВидУпаковки,0) = 1 Тогда			
				ТекКод = ТекКод + 1;
				ТекРазрешенныеВидыУпаковкиТМЦ.Код = ТекКод;
				ТекРазрешенныеВидыУпаковкиТМЦ.Записать();				
			КонецЕсли;			
		КонецЦикла;			
		ЗаполнитьСписокВидовУпаковки();			
	КонецЕсли;	
КонецПроцедуры // ЗаполнитьВидыУпаковкиИзГруппировки

//--- УМК Сандомирский В.Ю. (09.09.14) РАЗРЕШЕННЫЕ ВИДЫ УПАКОВКИ 

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура ЗаполнитьСписокСкладовСписания()
	Перем РазрешенныйВидУпаковки;
	Перем Индекс;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	СкладСпис = СоздатьОбъект("Справочник.СкладыСписанияДляПродукцииИМатериалов");
	СкладСпис.ИспользоватьВладельца(ТекущийЭлемент());
	СкладСпис.ВыбратьЭлементы();
	Индекс = 0; 
	СписокСкладовСписания.УдалитьСтроки();
	Пока СкладСпис.ПолучитьЭлемент()=1 Цикл
		Если СкладСпис.ПометкаУдаления()=1 Тогда
		    Продолжить;
		КонецЕсли;

	    Индекс = Индекс + 1;
		СписокСкладовСписания.НоваяСтрока(Индекс);
		СписокСкладовСписания.Ссылка 		= СкладСпис.ТекущийЭлемент();
		СписокСкладовСписания.Материал = СкладСпис.Материал;
		СписокСкладовСписания.Склад = СкладСпис.СкладСписания;
	КонецЦикла;	
КонецПроцедуры	// ЗаполнитьСписокВидовУпаковки

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура ДобавитьСкладСписания()
	Перем ФормаЗаписи;
	Если Выбран() = 0 Тогда
		Предупреждение("Элемент сначала следует записать!");
		Возврат;
	КонецЕсли;	
	ОткрытьФормуМодально("Элемент.СкладыСписанияДляПродукцииИМатериалов",Контекст,,,ТекущийЭлемент());
	ЗаполнитьСписокСкладовСписания();
КонецПроцедуры // Добавить

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура ИзменитьСкладСписания()
	Перем ФормаЗаписи;
	Поз=СписокСкладовСписания.ТекущаяСтрока();	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;               	
	Эл=СписокСкладовСписания.ПолучитьЗначение(Поз,"Ссылка");
	ОткрытьФормуМодально(Эл,Контекст);
	ЗаполнитьСписокСкладовСписания();
КонецПроцедуры // Изменить

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура УдалитьСкладСписания()	
	Перем Поз;
	
	Поз=СписокСкладовСписания.ТекущаяСтрока();	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;
	
	Эл=СписокСкладовСписания.ПолучитьЗначение(Поз,"Ссылка");

	Если Вопрос("Удалить склад списания?",1)=2 Тогда
		Возврат;
	КонецЕсли;
	Спр=СоздатьОбъект("Справочник.СкладыСписанияДляПродукцииИМатериалов");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		Спр.Удалить(0);
		СписокСкладовСписания.УдалитьСтроку(Поз);
		СписокСкладовСписания.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры // Удалить

Процедура ЗаполнитьСписокЭтапов()
	Перем РазрешенныйВидУпаковки;
	Перем Индекс;
	
	Если Выбран()=0 Тогда
	    Возврат;
	КонецЕсли;

	СкладСпис = СоздатьОбъект("Справочник.ЭтапыПроизводства");
	СкладСпис.ИспользоватьВладельца(ТекущийЭлемент());
	СкладСпис.ВыбратьЭлементы();
	Индекс = 0; 
	СписокЭтапов.УдалитьСтроки();
	Пока СкладСпис.ПолучитьЭлемент()=1 Цикл
		Если СкладСпис.ПометкаУдаления()=1 Тогда
		    Продолжить;
		КонецЕсли;

	    Индекс = Индекс + 1;
		СписокЭтапов.НоваяСтрока(Индекс);
		СписокЭтапов.ДнейОтНачала = СкладСпис.ДнейОтНачала;
		СписокЭтапов.КвоНорм = СкладСпис.КвоНорм;
		СписокЭтапов.Этап = СкладСпис.НомерЭтапа;
		СписокЭтапов.Продукция = СкладСпис.Продукция;
		СписокЭтапов.Ссылка 		= СкладСпис.ТекущийЭлемент();
	КонецЦикла;	
КонецПроцедуры	// ЗаполнитьСписокВидовУпаковки

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура ДобавитьЭтап()
	Перем ФормаЗаписи;
	Если Выбран() = 0 Тогда
		Предупреждение("Элемент сначала следует записать!");
		Возврат;
	КонецЕсли;	
	ОткрытьФормуМодально("Элемент.ЭтапыПроизводства",Контекст,,,ТекущийЭлемент());
	ЗаполнитьСписокЭтапов();
КонецПроцедуры // Добавить

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура ИзменитьЭтап()
	Перем ФормаЗаписи;
	Поз=СписокЭтапов.ТекущаяСтрока();	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;               	
	Эл=СписокЭтапов.ПолучитьЗначение(Поз,"Ссылка");
	ОткрытьФормуМодально(Эл,Контекст);
	ЗаполнитьСписокЭтапов();
КонецПроцедуры // Изменить

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
Процедура УдалитьЭтап()
	Перем Поз;
	
	Поз=СписокЭтапов.ТекущаяСтрока();	
	Если Поз = 0 Тогда
	    // не выбрана строка таблицы
		Возврат;
	КонецЕсли;
	
	Эл=СписокЭтапов.ПолучитьЗначение(Поз,"Ссылка");

	Если Вопрос("Удалить этап?",1)=2 Тогда
		Возврат;
	КонецЕсли;
	Спр=СоздатьОбъект("Справочник.ЭтапыПроизводства");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		Спр.Удалить(0);
		СписокЭтапов.УдалитьСтроку(Поз);
		СписокЭтапов.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры // Удалить

//====================================================================== //--- Сандомирский В.Ю. (23.09.14) (шаблон схем ценообразования редактировать) 
Процедура РедактироватьШаблон() 
	Если ПустоеЗначение(ШаблонСхемЦенообразования) <>  1 Тогда
		ДокШаблон = СоздатьОбъект("Документ.УМК_ШаблонСхемЦенообразования");
		ДокШаблон.НайтиДокумент(ШаблонСхемЦенообразования);
		ОткрытьФорму(ДокШаблон.ТекущийДокумент());
	КонецЕсли; 
	
	//ДокШаблон = СоздатьОбъект("Документ.УМК_ШаблонСхемЦенообразования");
КонецПроцедуры //глУстФирма

//====================================================================== //--- УМК Сандомирский В.Ю. (21.10.14)
Функция ВернутьПрайс()	
	СпрСтрокиПрайс.ВыбратьЭлементыПоРеквизиту("ТМЦ", ТекущийЭлемент(), 0, 0);
	Пока СпрСтрокиПрайс.ПолучитьЭлемент() = 1 Цикл
		Если СпрСтрокиПрайс.ПометкаУдаления() = 0 Тогда
			Если СпрСтрокиПрайс.Владелец.ДляВакуума = 0 Тогда
				Гатунок 			= СпрСтрокиПрайс.Гатунок;
				Оболочка			= СпрСтрокиПрайс.Оболочка;
				СрокХранения		= СпрСтрокиПрайс.СрокХранения;
				НаименованиеПрайса 	= СпрСтрокиПрайс.НаименованиеДляПечати;
				
				Возврат "Присутсвует в прайсе";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецФункции // 

//====================================================================== //--- УМК Сандомирский В.Ю. (21.10.14)
Процедура РедактироватьСтрокуПрайса()
	Если ПустоеЗначение(СпрСтрокиПрайс.ТекущийЭлемент()) <> 1 Тогда
		ОткрытьФормуМодально(СпрСтрокиПрайс.ТекущийЭлемент());
	КонецЕсли;
	Форма.Обновить();
КонецПроцедуры // РедактироватьСтрокуПрайса(

//====================================================================== //--- УМК Сандомирский В.Ю. (23.04.15)
Процедура ИзмКН(Чис)
	ДОплаты = "";
	Для Инд = 1 По 7 Цикл
		ДОплаты = ДОплаты + Шаблон("[ф" + Строка(Инд) + "]");
	КонецЦикла;
	БлокироватьВыписку = ДОплаты;
КонецПроцедуры

//======================================================================
Процедура КопироватьИзДрПродукции()	
	СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
	Если СпрТМЦ.Выбрать("Выберите продукцию", "ФормаСписка") = 1 Тогда
		Если Вопрос("Скопировать?", "Да+Нет") = "Да" Тогда
			КопироватьСкладыСписания(СпрТМЦ.ТекущийЭлемент(), 1);
			ЗаполнитьСписокСкладовСписания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // 

//======================================================================
Процедура ЗаполнитьВУИзТМЦ(СписУп = "")
	Если ТекущийЭлемент().Выбран() = 1 Тогда
		Если Вопрос("Скопировать разрешённые в/у?", "Да+Нет") = "Да" Тогда
			Если ТипЗначенияСтр(СписУп) <> "СписокЗначений" Тогда
				СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
				Если СпрТМЦ.Выбрать("Выберите ТМЦ для копировния", "ДляВыбора") = 0 Тогда
					Возврат;
				КонецЕсли;				
			КонецЕсли;
			
			ДУст = РабочаяДата();
			Если ВвестиДату(ДУст, "Введите дату установки периодических реквизитов") = 0 Тогда
				Возврат;
			КонецЕсли;
			НачатьТранзакцию();
			СпрРВУ = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрМат = СоздатьОбъект("Справочник.УМК_НормыСписанияМатериаловУпаковок");
			СпрРВУ.ИспользоватьВладельца(ТекущийЭлемент());
			
			СпрРВУС = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрМатС = СоздатьОбъект("Справочник.УМК_НормыСписанияМатериаловУпаковок");			

			Если ТипЗначенияСтр(СписУп) <> "СписокЗначений" Тогда
				СпрРВУС.ИспользоватьВладельца(СпрТМЦ.ТекущийЭлемент());
				// удаляем все виды упаковок, которых нет в выбранном ТМЦ				
			Иначе
				СпрРВУС.ИспользоватьВладельца(СписУп.ПолучитьЗначение(1).Владелец);
			КонецЕсли;
			
			СписЗанятыхКодовПЛУ = СоздатьОбъект("СписокЗначений");
			СпрРВУ.ВыбратьЭлементы();
			Пока СпрРВУ.ПолучитьЭлемент() = 1 Цикл
				Если СпрРВУ.КодPLU <> 0 Тогда
					СписЗанятыхКодовПЛУ.ДобавитьЗначение(СпрРВУ.КодPLU);
				КонецЕсли;
				
				Если ТипЗначенияСтр(СписУп) <> "СписокЗначений" Тогда
					Найдено = СпрРВУС.НайтиПоРеквизиту("ВидУпаковки", СпрРВУ.ВидУпаковки, 0); 
					Если Найдено = 0 Тогда
						СпрРВУ.Удалить(0);
					ИначеЕсли СпрРВУС.ПометкаУдаления() = 1 Тогда
						СпрРВУ.Удалить(0);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;			
			
			// записываем новые виды упаоквки
			СпрРВУС.ВыбратьЭлементы();
			Пока СпрРВУС.ПолучитьЭлемент() = 1 Цикл
				Если ТипЗначенияСтр(СписУп) = "СписокЗначений" Тогда
					Если СписУп.НайтиЗначение(СпрРВУС.ТекущийЭлемент()) = 0 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если СпрРВУС.ПометкаУдаления() = 0 Тогда							
					Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", СпрРВУС.ВидУпаковки, 0) = 1 Тогда
						Если СпрРВУ.ПометкаУдаления() = 1 Тогда
							СпрРВУ.СнятьПометкуУдаления();
						КонецЕсли;
					Иначе
						СпрРВУ.Новый();
						Если СпрРВУС.КодPLU <> 0 Тогда
							Для ИндПЛУ = 1 По 9 Цикл
								Если СписЗанятыхКодовПЛУ.НайтиЗначение(ИндПЛУ) = 0 Тогда
									СпрРВУ.КодPLU = ИндПЛУ;
									СписЗанятыхКодовПЛУ.ДобавитьЗначение(ИндПЛУ);
									Прервать;
								КонецЕсли;
							КонецЦикла;							
						КонецЕсли;						
					КонецЕсли;
					
					Для Инд = 1 По Метаданные.Справочник("УМК_РазрешенныеВидыУпаковкиТМЦ").Реквизит() Цикл
						Рекв = Метаданные.Справочник("УМК_РазрешенныеВидыУпаковкиТМЦ").Реквизит(Инд);
						Если Рекв.Периодический = 0 Тогда
							Если Рекв.Идентификатор <> "КодPLU" Тогда
								СпрРВУ.УстановитьАтрибут(Рекв.Идентификатор, СпрРВУС.ПолучитьАтрибут(Рекв.Идентификатор));
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					СпрРВУ.Записать();
						
					СпрРВУ.Цена.Установить(ДУст, СпрРВУС.Цена.Получить(ДУст));
					СпрРВУ.Себестоимость.Установить(ДУст, СпрРВУС.Себестоимость.Получить(ДУст));
					СпрРВУ.ФормаУпаковки.Установить(ДУст, СпрРВУС.ФормаУпаковки.Получить(ДУст));
					СпрРВУ.ДляПечати.Установить(ДУст, СпрРВУС.ДляПечати.Получить(ДУст));
					
					ВесУпаковки = СпрРВУС.ВесУпаковки.Получить(ДУст);
					СпрРВУ.ВесУпаковки.Установить(ДУст, ВесУпаковки);
					
					Если ВесУпаковки = 0 Тогда
						Сообщить("Вес упаковки " + Строка(СпрРВУ.ВидУпаковки) + " равен 0, установите вес.", "!!");
					КонецЕсли;
					

					// копируем материалы. Вначале помечаем на удаление все материалы, которые уже есть. 
					// затем 
					ТЗМат = СоздатьОбъект("ТаблицаЗначений");
					ТЗМат.НоваяКолонка("Мат", "Справочник.УМК_НормыСписанияМатериаловУпаковок");
					ТЗМат.НоваяКолонка("ГлМатериал", "Справочник.ТМЦ");
					
					СпрМат.ИспользоватьВладельца(СпрРВУ.ТекущийЭлемент());
					СпрМат.ВыбратьЭлементы();
					Пока СпрМат.ПолучитьЭлемент() = 1 Цикл
						СпрМат.Удалить(0);
						ТЗМат.НоваяСтрока();
						ТЗМат.Мат = СпрМат.ТекущийЭлемент();
						ТЗМат.ГлМатериал = СпрМат.Материал.Получить(ДУст);
					КонецЦикла;
					
					ТЗСоотв = СоздатьОбъект("ТаблицаЗначений");
					ТЗСоотв.НоваяКолонка("Мат", "Справочник.УМК_НормыСписанияМатериаловУпаковок");
					ТЗСоотв.НоваяКолонка("МатС", "Справочник.УМК_НормыСписанияМатериаловУпаковок");						
					СпрМатС.ИспользоватьВладельца(СпрРВУС.ТекущийЭлемент());
					СпрМатС.ВыбратьЭлементы();
					Пока СпрМатС.ПолучитьЭлемент() = 1 Цикл
						Если СпрМатС.ПометкаУдаления() = 0 Тогда
							ТЗСоотв.НоваяСтрока();
							ТЗСоотв.МатС = СпрМатС.ТекущийЭлемент();
							Стр = 0;
							Если ТЗМат.НайтиЗначение(СпрМатС.Материал.Получить(ДУст), Стр, "ГлМатериал") = 1 Тогда
								ТЗСоотв.Мат = ТЗМат.ПолучитьЗначение(Стр, "Мат");
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					ТЗСоотв.ВыбратьСтроки();
					Пока ТЗСоотв.ПолучитьСтроку() = 1 Цикл
						Если ПустоеЗначение(ТЗСоотв.Мат) = 1 Тогда
							// возьмём первый попавшийся незанятый материал
							СпрМат.ВыбратьЭлементы();
							Пока СпрМат.ПолучитьЭлемент() = 1 Цикл									
								Стр = 0;
								Если ТЗСоотв.НайтиЗначение(СпрМат.ТекущийЭлемент(), Стр, "Мат") = 0 Тогда
									ТЗСоотв.Мат = СпрМат.ТекущийЭлемент();
									Прервать;
								КонецЕсли;
							КонецЦикла;							
						КонецЕсли;
						
						Если ПустоеЗначение(ТЗСоотв.Мат) = 1 Тогда
							СпрМат.Новый();
							СпрМат.Владелец = СпрРВУ.ТекущийЭлемент();
							СпрМат.Наименование = СпрМатС.Наименование;
							СпрМат.Записать();
						Иначе
							СпрМат.НайтиЭлемент(ТЗСоотв.Мат);
							Если СпрМат.ПометкаУдаления() = 1 Тогда
								СпрМат.СнятьПометкуУдаления();
							КонецЕсли;
						КонецЕсли;
						
						Для Инд = 1 По Метаданные.Справочник("УМК_НормыСписанияМатериаловУпаковок").Реквизит() Цикл
							Рекв = Метаданные.Справочник("УМК_НормыСписанияМатериаловУпаковок").Реквизит(Инд);
							Если Рекв.Периодический = 1 Тогда
								Значение = ТЗСоотв.МатС.ПолучитьАтрибут(Рекв.Идентификатор).Получить(ДУст); 
								Если СпрМат.ПолучитьАтрибут(Рекв.Идентификатор).Получить(ДУст) <> Значение Тогда
									СпрМат.ПолучитьАтрибут(Рекв.Идентификатор).Установить(ДУст, Значение);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						ТЗСоотв.Мат = СпрМат.ТекущийЭлемент();
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			ЗаполнитьСписокВидовУпаковки();				

		КонецЕсли;
	Иначе
		Предупреждение("Вначале запишите этот элемент справочника");
	КонецЕсли;
КонецПроцедуры // ЗаполнитьВУИзТМЦ()

//======================================================================
Процедура КопироватьКонтрагентов()
	Если ТекущийЭлемент().Выбран() = 0 Тогда
		Предупреждение("Вначале запишите элемент");
		Возврат;
	КонецЕсли;
	
	СпрН = СоздатьОбъект("Справочник.ТМЦ");
	Если СпрН.Выбрать("Выберите ТМЦ из которого будем копировать", "ДляВыбора") = 1 Тогда
		СпрК = СоздатьОбъект("Справочник.КонтрагентыПродукции");
		СпрК.ИспользоватьВладельца(СпрН.ТекущийЭлемент());
		СпрКЗ = СоздатьОбъект("Справочник.КонтрагентыПродукции");
		СпрКЗ.ИспользоватьВладельца(ТекущийЭлемент());
		Если Вопрос("Скопировать контрагентов?", "Да+Нет") = "Да" Тогда
			СпрК.ВыбратьЭлементы();
			Пока СпрК.ПолучитьЭлемент() = 1 Цикл
				Если СпрК.ПометкаУдаления() = 0 Тогда
					Если СпрКЗ.НайтиПоРеквизиту("Контрагент", СпрК.Контрагент, 0) = 0 Тогда
						СпрКЗ.Новый();
						СпрКЗ.Контрагент = СпрК.Контрагент;
						СпрКЗ.Группа = СпрК.Контрагент.ЭтоГруппа();
						СпрКЗ.Записать();
					Иначе
						Если СпрКЗ.ПометкаУдаления() = 1 Тогда
							СпрКЗ.СнятьПометкуУдаления();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗаполнитьСписокКонтрагентов();
		
		Если (СписокКонтрагентов.РазмерСписка() > 0) И (НеВыгружатьВЗаказник = 0) Тогда
			Если Вопрос("Установить флажок ""Не выгружать в заказник""?", "Да+Нет") = "Да" Тогда
				НеВыгружатьВЗаказник = 1;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры // 

//======================================================================
Процедура ПрисвоитьКодЭ()
	Если Вопрос("Присвоить новый код этикетки?", "Да+Нет") = "Да" Тогда
		глПрисвоитьКодИзДиапазона(Родитель, Контекст, "КодЭ", "МинНомерЭтикетки", "МаксНомерЭтикетки", 1, "Код этикетки");		
	КонецЕсли;
КонецПроцедуры // ПрисвоитьКодЭ

//======================================================================
Процедура ДобавитьИзДругого()
	Парам = ТекущийЭлемент();
	ОткрытьФормуМодально("Обработка.ВыборВидовУпаковкиДляКопирования", Парам);
	
	Если ТипЗначенияСтр(Парам) = "СписокЗначений" Тогда
		Если Парам.РазмерСписка() > 0 Тогда
			ЗаполнитьВУИзТМЦ(Парам);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // гл

//======================================================================
Процедура ПрисвоитьКодРРО()
	Если Вопрос("Присвоить новый код РРО?", "Да+Нет") = "Да" Тогда
		глПрисвоитьКодИзДиапазона(Родитель, Контекст, "КодРРО", "МинКодРРО", "МаксКодРРО", 1, "Код РРО");
	КонецЕсли;
КонецПроцедуры // ПрисвоитьКодЭ

//======================================================================
Процедура НайтиКодУКТВЕД()
	
	Если ПустоеЗначение(ПоискУКТЗЕД)=1 Тогда
		Возврат;
	КонецЕсли;
	ПоискУКТЗЕД = СокрЛП(СтрЗаменить(ПоискУКТЗЕД," ", ""));
	СпрУКТВЕД = СоздатьОбъект("Справочник.КлассификаторУКТВЭД");
	Если СпрУКТВЕД.НайтиПоКоду(ПоискУКТЗЕД) = 1 Тогда
		КлассификаторУКТВЭД = СпрУКТВЕД.ТекущийЭлемент();
	Иначе
		Если Вопрос("Создать УКТЗЕД с кодом " + ПоискУКТЗЕД + "?","Да+Нет",0) = "Да" Тогда
			СпрУКТВЕД.Новый();
			СпрУКТВЕД.Код = ПоискУКТЗЕД;
			СпрУКТВЕД.ВыводитьПриПечатиЧека = 1;
			СпрУКТВЕД.Записать();
			КлассификаторУКТВЭД = СпрУКТВЕД.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю. (09.09.14)
СписокВидовУпаковки.НоваяКолонка("FormEx_ПланРаскраски");										//--- УМК Сандомирский В.Ю, (06.04.15)
СписокВидовУпаковки.НоваяКолонка("Ссылка","Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ",,,,0);
СписокВидовУпаковки.НоваяКолонка("ПометкаУдаления","Число", 1, 0, "", 3);
СписокВидовУпаковки.НоваяКолонка("ВидУпаковки","Справочник.ВидыУпаковки",,,"Вид упаковки",20);
СписокВидовУпаковки.НоваяКолонка("КодPLU","Число", 1,,"PLU", 2);
СписокВидовУпаковки.НоваяКолонка("КодЭтикетки","Число", 1,,"Э.", 2);
СписокВидовУпаковки.НоваяКолонка("НеВыгружатьВЗаказник","Число",1,1,"Индивидуальная упаковка",4);				//--- УМК Сандомирский В.Ю, (06.04.15)
СписокВидовУпаковки.НоваяКолонка("Основной","Число",1,1,"Осн.",3);				//--- УМК Сандомирский В.Ю, (06.04.15)
СписокВидовУпаковки.НоваяКолонка("Цена","Число",12,2,"Цена",8);
СписокВидовУпаковки.НоваяКолонка("Себестоимость","Число",12,2,"С/с",8);
СписокВидовУпаковки.НоваяКолонка("КоэфУвВеса","Число",5,2,"Коэф. увеличения веса");
СписокВидовУпаковки.НоваяКолонка("СкидкаНаВес","Число",5,2,"Скидка на вес");
СписокВидовУпаковки.НоваяКолонка("ВесУпаковки","Число",5,2,"Вес упаковки");		//--- УМК Сандомирский В.Ю, (18.11.14)
СписокВидовУпаковки.НоваяКолонка("ДляПечати","Строка",20,,"Для печати",10);  	//--- УМК Сандомирский В.Ю, (06.11.14)
СписокВидовУпаковки.НоваяКолонка("ЕстьИскл","Число",1,,"Иск. Ц", 3);  	//--- УМК Сандомирский В.Ю, (06.11.14)
СписокВидовУпаковки.НоваяКолонка("СрокГодности","Число",3,,"Срок г.", 4);
СписокВидовУпаковки.НоваяКолонка("ЕдиницаИзмерения","Перечисление.ЕдиницыВремени",,,"Ед. срока", 4);
СписокВидовУпаковки.НоваяКолонка("ДопустимоеОтклонение","Строка",,,"Допуст. откл.", 7);
СписокВидовУпаковки.НоваяКолонка("Примечание","Строка",200,,"Примечание",20);
СписокВидовУпаковки.ВыводитьПиктограммы("НеВыгружатьВЗаказник"); 				//--- УМК Сандомирский В.Ю, (06.04.15)
СписокВидовУпаковки.ВыводитьПиктограммы("ПометкаУдаления"); 				//--- УМК Сандомирский В.Ю, (06.04.15)
СписокВидовУпаковки.ВыводитьПиктограммы("Основной"); 				//--- УМК Сандомирский В.Ю, (06.04.15)
СписокВидовУпаковки.ВыводитьПиктограммы("ЕстьИскл"); 				//--- УМК Сандомирский В.Ю, (06.04.15)
СписокВидовУпаковки.ВидимостьКолонки("Ссылка",0);
СписокВидовУпаковки.ВидимостьКолонки("FormEx_ПланРаскраски",0);					//--- УМК Сандомирский В.Ю, (06.04.15) 

// ===============================
СписокСвязаныхЭлементов.НоваяКолонка("Ссылка","Справочник.СвязаныеЭлементыЦенообразования",,,,0);
СписокСвязаныхЭлементов.НоваяКолонка("СвязаныйТМЦ","Справочник.ТМЦ",,,"ТМЦ",20);
СписокСвязаныхЭлементов.НоваяКолонка("Коэффициент","Число",10,5,"Коэффициент",10);

СписокСвязаныхЭлементов.ВидимостьКолонки("Ссылка",0);

глПолучитьТаблицуМатериаловДляФормы(СписокМатериаловУпаковки, "", 1);

//======================================================================

//... УМК Сандомирский В.Ю, (для связанные элементы ценообразования ) 22.04.14


// ===============================
СписокЕдиниц.НоваяКолонка("Ссылка","Справочник.Единицы",,,,0);
СписокЕдиниц.НоваяКолонка("Единица","Справочник.КлассификаторЕдИзм",,,"Наименование",15);
СписокЕдиниц.НоваяКолонка("Коэффициент","Число",10,3,"Коэффициент",7);
СписокЕдиниц.НоваяКолонка("Штрихкод","Число",13,,"Штрихкод");

СписокЕдиниц.ВидимостьКолонки("Ссылка",0);

// ===============================
СписокКомплектующих.НоваяКолонка("Ссылка","Справочник.Комплектующие",,,,0);
СписокКомплектующих.НоваяКолонка("Товар","Справочник.ТМЦ",,,"Товар",15);
СписокКомплектующих.НоваяКолонка("Количество","Число",14,3,"Количество",8);

СписокКомплектующих.ВидимостьКолонки("Ссылка",0);

// ===============================
СписокЦен.НоваяКолонка("Ссылка","Справочник.Цены");
СписокЦен.НоваяКолонка("КатегорияЦены","Справочник.КатегорияЦен",,,"Тип цены",18);
//СписокЦен.НоваяКолонка("Наценка","Число",6,2,"Наценка",7);									//--- УМК Сандомирский В.Ю, 01.07.14 г. (закоментил - уходим от наценок)
СписокЦен.НоваяКолонка("Цена","Число",15,2,"Цена",8);
СписокЦен.НоваяКолонка("Валюта","Справочник.Валюта",,,"Валюта",5);
СписокЦен.НоваяКолонка("Единица","Справочник.Единицы",,,"Единица",5);
СписокЦен.НоваяКолонка("СхемаВШаблоне","Строка",3,,"ш",3);										//--- УМК Сандомирский В.Ю, 28.05.14 г.
СписокЦен.НоваяКолонка("СхемаЦенообразования","Справочник.СхемыЦенообразования",,,"Схема",20); 	//--- УМК Сандомирский В.Ю, (пересчет по схемам от базового типа цены) 24.03.14 г.

СписокЦен.ВидимостьКолонки("Ссылка",0);

СписПроц.НоваяКолонка("Ссылка","Справочник.ПроцентыСписания");
СписПроц.НоваяКолонка("Склад","Справочник.МестаХранения",,,"Склад",18);
СписПроц.НоваяКолонка("ПроцСписания","Число",5,2,"% списания",5);
СписПроц.ВидимостьКолонки("Ссылка",0);

СписокСкладовСписания.НоваяКолонка("Ссылка","Справочник.СкладыСписанияДляПродукцииИМатериалов");
СписокСкладовСписания.НоваяКолонка("Материал","Справочник.ТМЦ",,,"Материал",18);
СписокСкладовСписания.НоваяКолонка("Склад","Справочник.МестаХранения",,,"Склад спис.",18);
СписокСкладовСписания.ВидимостьКолонки("Ссылка",0);

СписокЭтапов.НоваяКолонка("Ссылка","Справочник.ЭтапыПроизводства");
СписокЭтапов.НоваяКолонка("Этап","Число",,,"Этап",5);
СписокЭтапов.НоваяКолонка("ДнейОтНачала","Число",,,"Дней",5);
СписокЭтапов.НоваяКолонка("КвоНорм","Число",,,"К-во норм",5);
СписокЭтапов.НоваяКолонка("Продукция","Справочник.ТМЦ",,,"Продукция",20);
СписокЭтапов.ВидимостьКолонки("Ссылка",0);

СписокВЭ.НоваяКолонка("Ссылка","Справочник.Этикетки");
СписокВЭ.НоваяКолонка("ПометкаУдаления","Число", 1, 0, "", 3);
СписокВЭ.НоваяКолонка("ВидЭтикетки","Справочник.ВидыВесов",,,"Вид весов",5);
СписокВЭ.ВыводитьПиктограммы("ПометкаУдаления"); 				//--- УМК Сандомирский В.Ю, (06.04.15)

СписокВЭ.ВидимостьКолонки("Ссылка",0);

СписокИТЦ.НоваяКолонка("Ссылка","Справочник.ИсключенияПоТипамЦен");
СписокИТЦ.НоваяКолонка("ПометкаУдаления","Число", 1, 0, "", 3);
СписокИТЦ.НоваяКолонка("Контрагент","Справочник.Контрагенты",,,"Контрагент",15);
СписокИТЦ.НоваяКолонка("КатегорияЦен","Справочник.КатегорииЦен",,,"Кат. цен",10);
СписокИТЦ.ВыводитьПиктограммы("ПометкаУдаления"); 				//--- УМК Сандомирский В.Ю, (06.04.15)
СписокИТЦ.ВидимостьКолонки("Ссылка",0);

СписокСортировка.НоваяКолонка("Ссылка","Справочник.НомераСтрокС");
СписокСортировка.НоваяКолонка("ПометкаУдаления","Число", 1, 0, "", 3);
СписокСортировка.НоваяКолонка("Код","Число",,,"Код",5);
СписокСортировка.НоваяКолонка("Фирма","Справочник.Фирмы",,,"Фирма",20);
СписокСортировка.ВыводитьПиктограммы("ПометкаУдаления"); 				//--- УМК Сандомирский В.Ю, (06.04.15)

СписокСортировка.ВидимостьКолонки("Ссылка",0);


// ===============================
Файлы.НоваяКолонка("Ссылка","Справочник.Файлы",,,,0);
Файлы.НоваяКолонка("Категория","Справочник.ВидыКатегорий",,,"Кат.",10);
Файлы.НоваяКолонка("Описание","Строка",,,"Описание",30);

Файлы.ВидимостьКолонки("Ссылка",0);

СчетчикЕдиниц = 0;
ПерваяЗапись = 0;
НажатаКнопкаЗаписать = 0;
ВведенКопированием = 0;
ПолучитьТекущиеНормыЗатрат();
ИспользоватьДату(РабочаяДата());