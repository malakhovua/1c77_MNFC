// ------------------------------------------
// 			Общие переменные
// ------------------------------------------
Перем глКонтрольОстатков Экспорт;
Перем глСвертка Экспорт; //--- УМК Сандомирский В.Ю. (13.03.15) во время свертки не выполнять некоторые действия типа при удалении
Перем глПоказыватьОстатки Экспорт;
Перем глДатаПереходаНСТМЦСп Экспорт;
Перем глОтменяемыйДок Экспорт;
//Перем Сервис Экспорт;
 
Перем глВыборИзЗаказа Экспорт; 			//--- УМК Сандомирский В.Ю. (08.05.15)  // 1 - из заказа , 2 - из задания на производство

Перем глВыборИзТабеля Экспорт; //--- УМК Сандомирский В.Ю, (06.08.14)
Перем глСписокИсключенийРассылки Экспорт; //--- УМК Сандомирский В.Ю, (22.08.14)

Перем НетУп Экспорт;
Перем глСписокОшибокОкругления Экспорт;
Перем глПользователь Экспорт;
Перем глЧислоСтрок Экспорт;
Перем глВсеВыбрано Экспорт;
Перем глБИ Экспорт;
Перем глЗначениеОтбора Экспорт;   

Перем глОбщиеУстановки Экспорт;
Перем глРасшифровка Экспорт, глФлагРасшифровки Экспорт;
Перем глТаблица Экспорт, глОбновить Экспорт;

Перем ДлинаКодаТМЦ;
// синонимы
Перем Гривня Экспорт;
Перем Да Экспорт, Нет Экспорт;
Перем ОсновныеСредства Экспорт, НМА Экспорт;
Перем Класс8 Экспорт, Класс9 Экспорт, Класс89 Экспорт;
Перем Оптовый Экспорт, Розничный Экспорт, Склады Экспорт, МОЛы Экспорт;
Перем ОсновнаяЗП Экспорт;  
Перем ПогашениеЗайма Экспорт;  //--- УМК Сандомирский В.Ю, (17.07.14)
Перем АвансоваяВыплата Экспорт;  //--- УМК Сандомирский В.Ю, (04.12.14)

Перем ИспользоватьСчетаРасходов Экспорт;  
// синонимы стандартных ставок НДС
Перем БезНДС Экспорт, ЛьготнаяСтавкаНДС Экспорт;
Перем ОсновнаяСтавкаНДС Экспорт, неНДС Экспорт;

// правовая поддержка
Перем глКомпонентаПравовойПоддержки Экспорт, глВидимостьПравовойПоддержки Экспорт;
Перем глПартионныйУчетПоСкладам Экспорт;

// для расчета курсовых разниц и переоценки валютных счетов
Перем глТаблицаСчетов Экспорт;
Перем глСчетаОстатковВВалюте Экспорт;
Перем глСчетаЗадолженностейВВалюте Экспорт, глНеМонетарныеСчета Экспорт;
Перем глСчетаУчетаТоваров Экспорт;
Перем глСчетаУчетаЗапасов Экспорт;
Перем глСчетаУчетаПродукции Экспорт;

// для связи с регистрами взаиморасчетов
Перем глСчетаПоставщиковПокупателей Экспорт;

// ===============================
// таблица операции
Перем глТбОперация Экспорт;
Перем глТекущийДокумент;

//=====================================
// глобальные установки форматирования значений
Перем глФорматКоличестваВОтчетах Экспорт;   
Перем глФорматКоличестваВформах Экспорт;
Перем глДлинаСуммы Экспорт;		// длина поля Суммы или цены
Перем глТочностьСуммы Экспорт;  // точность
Перем глФорматСуммы Экспорт;	// формат отображения суммовых характеристик.          

Перем глТочностьСуммВДок Экспорт;
Перем глТочностьЦенВДок Экспорт;

// ===============================
// Действия по кнопке в документах
Перем ДвиженияДокумента Экспорт;
Перем СтруктураПодчиненности Экспорт;
Перем ОбновлениеЦен Экспорт;
Перем ВводНаОсновании Экспорт;
Перем ОткрытьВЖурнале Экспорт;
Перем Подчиненные Экспорт;
Перем ТоварныйСостав Экспорт; 
Перем Экспорт_dbf Экспорт;

// ===============================
// работа с торговым оборудованием
// сканер ШК
Перем РаботаСоСканеромШтрихКода Экспорт;
Перем СканерШтрихКода Экспорт;
Перем ШтрихКодИмеетПрефикс Экспорт;
// кассовые аппараты           
Перем глСписокФискальныхРегистраторов Экспорт;
Перем глСписокЭККА_OFFLine Экспорт;
Перем глСписокЭККА_Автономно Экспорт;
Перем глПереченьДрайверов Экспорт;

// ===============================
// идентификаторы опций печати 
Перем ПарСтрСпр Экспорт, ПарСтрДок Экспорт, ПарСтрОтчДлинн Экспорт, ПарСтрОтчШирок Экспорт;

// ===============================
// идентификаторы кодов операций регистра Партии
Перем Закупка Экспорт; 
Перем ПриходованиеАкциз Экспорт;
Перем ПриходованиеПошлина Экспорт;
Перем ПриходованиеПеревозка Экспорт;
Перем ПриходованиеУслугиТаможни Экспорт;
Перем ВыпускПродукции Экспорт;
Перем ВводОстатков Экспорт;
Перем ВводОстатковДавальческихЗапасов Экспорт;
Перем ВводОстатковТарыВозвратной Экспорт;
Перем ВводОстатковТарыЗалоговой Экспорт;
Перем Продажа Экспорт;
Перем РозничнаяПродажа Экспорт;
Перем ВозвратПоставщику Экспорт;
Перем ВозвратРозничный Экспорт;     
Перем ПродажаОтсутствующих Экспорт;
Перем ВозвратОтПокупателя Экспорт;
Перем ПеремещениеВРозницу Экспорт;
Перем ПеремещениеИзРозницы Экспорт;
Перем ПеремещениеМеждуСкладами Экспорт;
Перем ПереоценкаНаСкладеДооценка Экспорт;
Перем ПереоценкаНаСкладеУценка Экспорт;
Перем ПереоценкаВРознице Экспорт;
Перем СписаниеИзлишков Экспорт;
Перем ОприходованиеИзлишков Экспорт;            
Перем ПередачаТарыВозвратнойПокупателю Экспорт;
Перем ВозвратТарыВозвратнойОтПокупателя Экспорт;
Перем ПолучениеТарыВозвратнойОтПоставщика Экспорт;
Перем ВозвратТарыВозвратнойПоставщику Экспорт;
Перем ПередачаТарыЗалоговойПокупателю Экспорт;
Перем ВозвратТарыЗалоговойОтПокупателя Экспорт;
Перем ПолучениеТарыЗалоговойОтПоставщика Экспорт;
Перем ВозвратТарыЗалоговойПоставщику Экспорт;
Перем СписаниеВПроизводство Экспорт;
Перем ВозвратИзПроизводства Экспорт;
Перем ПолучениеДавальческогоСырья Экспорт;
Перем ВозвратДавальческогоСырья Экспорт;
Перем ОтгрузкаДавальческойПродукции Экспорт;
Перем ВводВЭксплуатациюМБП Экспорт;
Перем ПередачаВДавальческуюПереработку Экспорт;
Перем ВозвратИзДавальческойПереработки Экспорт;
Перем СписаниеСкидокНаВес Экспорт;

// ===============================
// идентификаторы кодов операций только регистра Обороты
Перем ПокупкаУслуги Экспорт;
Перем СторноПокупкаУслуги Экспорт;
Перем ПродажаУслуги Экспорт;
Перем СторноПродажаУслуги Экспорт; 
Перем ДоходОтКурсовойРазницы Экспорт;

// ===============================

// идентификаторы кодов операций регистров ВзаиморасчетыПокупателей и ВзаиморасчетыПоставщиков
Перем ПерезачетВзаиморасчетов Экспорт; //--- УМК Сандомирский В.Ю. (04.12.14)

Перем ВводОстатковОплата Экспорт;
Перем ВводОстатковОтгрузка Экспорт;
Перем АвансоваяОплата Экспорт;
Перем ПостОплата Экспорт;
Перем ВозвратАвансовойОплаты Экспорт;
Перем ВозвратПостОплаты Экспорт;
Перем АвансоваяОтгрузка Экспорт;
Перем ПостОтгрузка Экспорт;
Перем ВозвратАвансовойОтгрузки Экспорт;
Перем ВозвратПостОтгрузки Экспорт;
Перем ПервоеСобытиеБартерПриход Экспорт;
Перем ПервоеСобытиеБартерРасход Экспорт;
Перем ВтороеСобытиеБартерПриход Экспорт;
Перем ВтороеСобытиеБартерРасход Экспорт;
Перем ВозвратПервоеСобытиеБартерПриход Экспорт;
Перем ВозвратПервоеСобытиеБартерРасход Экспорт;
Перем ВозвратВтороеСобытиеБартерПриход Экспорт;
Перем ВозвратВтороеСобытиеБартерРасход Экспорт;
Перем НачислениеАкциза Экспорт;
Перем НачислениеНДСнаИмпорт Экспорт;
Перем НачислениеПошлины Экспорт;
Перем НачислениеТаможенныхУслуг Экспорт;
Перем КурсоваяРазницаДоход Экспорт;
Перем КурсоваяРазницаУбыток Экспорт;     

// Идентификаторы кодов операций регистра ПроизводственныеЗатраты
Перем ОтражениеЗатрат Экспорт;
Перем ПерераспрЗатрат Экспорт;
Перем ФормирСебестоимости Экспорт;
               
// Типы норм в регистре НормативныеЗатраты
Перем НормыНаВыпуск Экспорт;
Перем НормыНаНезаверш Экспорт;
Перем НормыНаНезавершПрош Экспорт;

// Флаги налогового учета
Перем НУ_ВозникновениеНОиВДВР Экспорт;
Перем НУ_СторноНОиВДВР Экспорт;
Перем НУ_ВозникновениеНО Экспорт;
Перем НУ_СторноНО Экспорт;
Перем НУ_ВозникновениеВДВР Экспорт;
Перем НУ_СторноВДВР Экспорт;

// переменные для множественных фильров в отчетах
Перем глУсловие1  Экспорт;
Перем глУсловие2  Экспорт;
Перем глУсловие3  Экспорт;
Перем глУсловие4  Экспорт;
Перем глУсловие5  Экспорт;
Перем глУсловие6  Экспорт;
Перем глУсловие7  Экспорт;
Перем глУсловие8  Экспорт;
Перем глУсловие9  Экспорт;
Перем глУсловие10 Экспорт;
Перем глУсловие11 Экспорт;
Перем глУсловие12 Экспорт;
Перем глУсловие13 Экспорт;
Перем глДатаНачалаРаботыСУпаковкой Экспорт;

Перем глПроверяемыеНаборы Экспорт;

Перем глПравильныйСимволПереноса Экспорт; //--- УМК Сандомирский В.Ю. (13.07.14) символ возврата каретки
Перем ГотоваяПродукция Экспорт;
Перем глКилограмм Экспорт;

// Флаг ускоренного формирования отчетов
Перем глОптимизацияОтчетов Экспорт;
Перем глТМЦДляПозиционированияПриВыбореВНормах Экспорт;
Перем глСпособРедактированияНаименованийПрайса Экспорт;
Перем глСписокПП Экспорт;
Перем глГруппыДоступаПродукции Экспорт;
Перем глГруппыДоступаКонтрагенты Экспорт;
Перем глКэшУдостоверенийКачества Экспорт;
Перем Истина Экспорт;
Перем Ложь Экспорт;
Перем глПрефиксПлановыйВыпуск Экспорт;
Перем глПрямыеЗапросы Экспорт;

Процедура глПриИзмененииТовара(Конт, СчитатьЦену = 0, Знач НеМенятьЦену = 0) Экспорт Далее
Процедура глУстановитьСкладПоТМЦ(ТМЦ, Конт) Экспорт Далее
Функция глПолучитьТМЦПоСпискуКодов(Стр) Экспорт Далее
Функция глПолучитьИсключениеЦеныДляТМЦ(Товар, Контрагент, КатегорияЦен, ВозвращатьКатегория = 1) Экспорт Далее
//======================================================================
Функция глПолучитьВычитатьВес(ТаблТМЦ, ДатаДок) Экспорт Далее
Функция глОкруглить(Числ, ПорядокОкругления, Способ = 3) Экспорт Далее 						//--- УМК Сандомирский В.Ю, (04.04.14)
Функция глРазложитьСтрокуВСписок(ТекСтрока,ТекРазделитель) Экспорт Далее 		//--- УМК Сандомирский В.Ю, (10.07.14)
Функция глПолучитьРазрешенныйВидУпаковки(ТекТМЦ,ТекВидУпаковки) Экспорт Далее	//--- УМК Сандомирский В.Ю, (25.11.14)
Функция глПроверитьДоступКНормам(Продукция) Экспорт Далее
Процедура глЗаполнитьСписокТоваров(СтрФильтр, списТовар, ПоПолномуКоду = 0, ИмяСправочника = "ТМЦ", РазвернутьДоЭлементов = 0) Экспорт Далее
Процедура глУстановитьСкидкуПоАкции(Конт, ЦенаЦены, ТМЦ, ЕстьАкция, КатегорияЦены, ВидСкидки = "", УстановкаСкидокТМЦ = "") Экспорт Далее
Функция глПолучитьНормыДляЗаказа(ТМЦ, ДатаД= '') Экспорт Далее
Процедура глОтправитьУведомлениеЭП(ИмяОбъекта, Тема, ТекстСообщения, Адрес = "", attachment = "") Экспорт Далее
Функция глАдресСтрокой(Знач Адр,Язык="Р") Экспорт Далее
Процедура глУстановитьЗначениеКонстантыОПР(док, ОПР = 0) Экспорт Далее
Процедура ПоказатьТЗ(ТаблицаЗначений, Заголовок = "") Экспорт Далее

// Делает запись в журнале регистрации о событии
// ======================================
// Комменнтарий - коментарий к событию
// КодТипаСобытия   - Необязательный параметр. Число - Код типа события. По умолчанию "Другие события"
// КодСобытия      - Необязательный параметр. Число - Код события. По умолчанию "Дополнительное событие"
// Объект       - Необязательный параметр. Объект события.
// Категория    - необязательный параметр. Число - категория события:
// 	1 - администрирование; 
// 	2 - изменение данных;
// 	3 - информация;
// 	4 - предупреждение;
// 	5 - ошибка.
// Значение по умолчанию определяется из кода события.
Процедура глЗаписьЖурналаРегистрации(Комментарий, КодТипаСобытия = 0, КодСобытия = 0, Объект = "", Категория = 0) Экспорт
	Если КодТипаСобытия = 1 Тогда
		ТипСобытия = "Программное изменение справочников";
		Если КодСобытия = 1 Тогда
			Событие = "Записан новый элемент справочника";
		ИначеЕсли КодСобытия = 2 Тогда
			Событие = "Элемент справочника записан";
		ИначеЕсли КодСобытия = 3 Тогда
			Событие = "Элемент справочника помечен на удаление";
		ИначеЕсли КодСобытия = 4 Тогда
			Событие = "Элемент справочника удален";
		ИначеЕсли КодСобытия = 5 Тогда
			Событие = "С элемента справочника снята пометка на удаление";
		ИначеЕсли КодСобытия = 6 Тогда
			Событие = "Элемент справочника перемещен в другую группу";
		ИначеЕсли КодСобытия = 7 Тогда
			Событие = "Значение реквизита справочника записано";
		ИначеЕсли КодСобытия = 8 Тогда
			Событие = "Значение реквизита справочника удалено";
		Иначе
			Событие = "";
		КонецЕсли;
		КатегорияПоСобытию = 2;
	ИначеЕсли КодТипаСобытия = 2 Тогда
		ТипСобытия = "Программное изменение документов";
		Если КодСобытия = 1 Тогда
			Событие = "Записан новый документ";
		ИначеЕсли КодСобытия = 2 Тогда
			Событие = "Документ записан";
		ИначеЕсли КодСобытия = 3 Тогда
			Событие = "Документ помечен на удаление";
		ИначеЕсли КодСобытия = 4 Тогда
			Событие = "Документ удален";
		ИначеЕсли КодСобытия = 5 Тогда
			Событие = "С документа снята пометка на удаление";
		ИначеЕсли КодСобытия = 6 Тогда
			Событие = "Документ записан и проведен";
		ИначеЕсли КодСобытия = 7 Тогда
			Событие = "Документ сделан непроведенным";
		ИначеЕсли КодСобытия = 8 Тогда
			Событие = "Изменено время документа";
		ИначеЕсли КодСобытия = 9 Тогда
			Событие = "Операция документа изменена";
		ИначеЕсли КодСобытия = 10 Тогда
			Событие = "Проводки выключены";
		ИначеЕсли КодСобытия = 11 Тогда
			Событие = "Проводки включены";
		Иначе
			Событие = "";
		КонецЕсли;
		КатегорияПоСобытию = 2;
	ИначеЕсли КодТипаСобытия = 3 Тогда
		ТипСобытия = "Программное изменение констант";
		Если КодСобытия = 1 Тогда
			Событие = "Значение константы изменено";
		ИначеЕсли КодСобытия = 2 Тогда
			Событие = "Значение константы записано";
		ИначеЕсли КодСобытия = 3 Тогда
			Событие = "Значение константы удалено";
		Иначе
			Событие = "";
		КонецЕсли;
		КатегорияПоСобытию = 2;
	Иначе
		ТипСобытия = "";
		КатегорияПоСобытию = 3;
	КонецЕсли;
	Если Категория = 0 Тогда
		Категория = КатегорияПоСобытию;
	КонецЕсли;
	ЗаписьЖурналаРегистрации(Комментарий, ТипСобытия, Событие, Объект, Категория);
КонецПроцедуры 

Процедура глПоказатьПредупреждение(Текст, Таймаут = 0) Экспорт
	Если глПользователь.НеВыводитьПредупреждения  = 1 Тогда
		Сообщить(Текст);
		// Делает запись в журнале регистрации о событии
		// ======================================
		// Комменнтарий - коментарий к событию
		// КодТипаСобытия   - Необязательный параметр. Число - Код типа события. По умолчанию "Другие события"
		// КодСобытия      - Необязательный параметр. Число - Код события. По умолчанию "Дополнительное событие"
		// Объект       - Необязательный параметр. Объект события.
		// Категория    - необязательный параметр. Число - категория события:
		// 	1 - администрирование; 
		// 	2 - изменение данных;
		// 	3 - информация;
		// 	4 - предупреждение;
		// 	5 - ошибка.
		// Значение по умолчанию определяется из кода события.
		глЗаписьЖурналаРегистрации(Текст, , , "", 5);
	Иначе
		Предупреждение(Текст, Таймаут);
	КонецЕсли;
КонецПроцедуры

//======================================================================
Функция глПолучитьФормуУпаковки(Признак, Товар, ДатаДок) Экспорт
	Если (Признак <> НетУп) И (ПустоеЗначение(Признак) = 0) Тогда
		СпрРВУ = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
		СпрРВУ.ИспользоватьВладельца(Товар);
		Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", Признак, 0) = 1 Тогда
			Возврат СпрРВУ.ФормаУпаковки.Получить(ДатаДок);
		КонецЕсли;
	ИначеЕсли ПустоеЗначение(Признак) = 0 Тогда
		Возврат Признак.ФормаУпаковки;
	КонецЕсли;
	
	Возврат ПолучитьПустоеЗначение("Справочник.ФормыУпаковки");
КонецФункции // глПолучитьФормуУпаковки(Признак, Товар)

Функция глПолучитьВесУп(ТМЦ,Кол, ВУП,ТекДатаДок) Экспорт //--- УМК Сандомирский В.Ю. (06.11.14) 
	
	Если (ПустоеЗначение(Константа.УМК_ДатаНачалаГрупУпаковок) <> 1) 
				И (Константа.УМК_ДатаНачалаГрупУпаковок <= ТекДатаДок)  Тогда //--- УМК Сандомирский В.Ю, (06.11.14)
		
		Если ПустоеЗначение(ВУП) = 0 Тогда
					
			СпрВУП = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрВУП.ИспользоватьВладельца(ТМЦ);
			Если СпрВУП.НайтиПоРеквизиту("ВидУпаковки",ВУП,0) = 1 Тогда		
				Возврат Кол * СпрВУП.КоэфУвВеса / 100;		
			КонецЕсли;		
		Иначе
			Возврат 0;
		КонецЕсли;			
									
	Иначе				
		Если ПустоеЗначение(ВУП) = 0 Тогда
			Возврат Кол * ВУП.КоэфУвВеса / 100;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	
КонецФункции

Функция глПолучитьСкидкуНаВес(ВУП, ТМЦ,ТекДатаДок) Экспорт //--- УМК Сандомирский В.Ю. (06.11.14) 
	
	Если (ПустоеЗначение(Константа.УМК_ДатаНачалаГрупУпаковок) <> 1) 
				И (Константа.УМК_ДатаНачалаГрупУпаковок <= ТекДатаДок)  Тогда //--- УМК Сандомирский В.Ю, (06.11.14)
	
		Если (ПустоеЗначение(ВУП) = 0) И (ВУП.Код <> "0") Тогда			
					
			СпрВУП = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрВУП.ИспользоватьВладельца(ТМЦ);
			Если СпрВУП.НайтиПоРеквизиту("ВидУпаковки",ВУП,0) = 1 Тогда
				
				Возврат СпрВУП.СкидкаНаВес;
				
			КонецЕсли;
		Иначе
			Возврат ТМЦ.сквес;
		КонецЕсли;			
					
	Иначе //--- по старому				
		Если (ПустоеЗначение(ВУП) = 0) И (ВУП.Код <> "0") Тогда
			Возврат ВУП.СкидкаНаВес;
		Иначе
			Возврат ТМЦ.сквес;
		КонецЕсли;
	КонецЕсли;
	
	
КонецФункции

Функция глПолучитьСкладКонтекста(Конт) Экспорт
	Если Конт.Вид() = "Перемещение" Тогда
		Возврат Конт.НовоеМестоХранения;
	ИначеЕсли Конт.Вид() = "ПриходнаяНакладнаяЗапасы" Тогда
		Возврат ?(ПустоеЗначение(Конт.Склад) = 1, Конт.МестоХранения, Конт.Склад);
	Иначе
		Возврат Конт.МестоХранения;
	КонецЕсли;
КонецФункции
// ===============================
// Назначение:
//		Определяет, давальческий заказ или нет
// Аргументы:
//		Зак - заказ, может быть пустым
// Возвращает:
//		1 - давальческий, 0 - недавальческий
Функция глЭтоДавальческийЗаказ(Зак) Экспорт
    Если ПустоеЗначение(Зак) = 1 Тогда
        Возврат 0;
	Иначе
		Если Зак.Вид()="Заказ" Тогда
			Возврат Зак.ПереработкаДавальческогоСырья;
		Иначе
			Возврат 0;
		КонецЕсли;
    КонецЕсли;
КонецФункции //глЭтоДавальческийЗаказ

Процедура глЗаменитьТМЦ(списТМЦ, ДатаДок, ФлагЗамены=1, Перемещение = 0) Экспорт //--- УМК Сандомирский В.Ю, (03.10.14) ФлагЗамены = 1 меняем на ТМЦ списания Флаг = 2 меняем на ТМЦ оприходования	
	Если (ПустоеЗначение(Константа.УМК_ДатаНачалаПартииОстатки) <> 1) //--- УМК Сандомирский В.Ю, (03.10.14)
		И (Константа.УМК_ДатаНачалаПартииОстатки <= ДатаДок)  Тогда 		
		Если ФлагЗамены = 1 Тогда			
			ДобавляемыеТМЦ = СоздатьОбъект("СписокЗначений");
			Для Инд = 1 По списТМЦ.РазмерСписка() Цикл
				ТМЦ = списТМЦ.ПолучитьЗначение(Инд);
				ДляСписания = ТМЦ.ТМЦДляСписания.Получить(ДатаДок);
				Если ПустоеЗначение(ДляСписания) = 0 Тогда
					списТМЦ.УстановитьЗначение(Инд, ДляСписания);
				КонецЕсли;
			КонецЦикла;				
		ИначеЕсли ФлагЗамены=2 Тогда			
			ДобавляемыеТМЦ = СоздатьОбъект("СписокЗначений");
			Для Инд = 1 По списТМЦ.РазмерСписка() Цикл
				ТМЦ = списТМЦ.ПолучитьЗначение(Инд);
				ДляПрихода = ТМЦ.ТМЦДляПрихода.Получить(ДатаДок);
				Если ПустоеЗначение(ДляПрихода) = 0 Тогда
					списТМЦ.УстановитьЗначение(Инд, ДляПрихода);
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
	Иначе	
		ДобавляемыеТМЦ = СоздатьОбъект("СписокЗначений");
		Для Инд = 1 По списТМЦ.РазмерСписка() Цикл
			ТМЦ = списТМЦ.ПолучитьЗначение(Инд);
			ДляСписания = ТМЦ.ТМЦДляСписания.Получить(ДатаДок);
			НеИспользоватьТМЦДляСписанияВПеремещении = ТМЦ.НеИспользоватьТМЦДляСписанияВПеремещении.Получить(ДатаДок); // + umk
			Если ПустоеЗначение(ДляСписания) = 0 Тогда
				Если (Перемещение = 1) И (НеИспользоватьТМЦДляСписанияВПеремещении = 1) Тогда
					Продолжить; // + umk Не выполняем замену ТМЦ если это документ перемещение и у нее установлен соотв. признак 
				КонецЕсли;
				списТМЦ.УстановитьЗначение(Инд, ДляСписания);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//=====================================
Функция глПолучитьЗаказ(Док) Экспорт
    Если ПустоеЗначение(Док) = 1 Тогда
        Возврат ПолучитьПустоеЗначение("Документ");
	Иначе
		Возврат ?(Док.Вид()="Заказ",Док,ПолучитьПустоеЗначение("Документ"));
    КонецЕсли;
КонецФункции //глЭтоЗаказ

//=====================================
Процедура глСформироватьДвиженияДокумента(Док)  Экспорт
	Если ТипЗначенияСтр(Док)="Документ" Тогда
		Докум=Док;
	ИначеЕсли ТипЗначенияСтр(Док)="ГрупповойКонтекст" Тогда
		Если Док.Выбран()=0 Тогда
			глПоказатьПредупреждение("Документ не записан!",20);
			Возврат;
		Иначе
			Докум=Док.ТекущийДокумент();
		КонецЕсли;
	Иначе
		глПоказатьПредупреждение("При вызове проц. глСформироватьДвиженияДокумента в параметре не передан Документ");
		Возврат;
	КонецЕсли;

	ОткрытьФорму("Обработка.ДвиженияДокумента"+"#",Докум);

КонецПроцедуры //глСформироватьДвиженияДокумента

//============================Процедуры=интеграции=с=системами=контрагентов=======================================

//Возвращает Спр. коды номенклатуры контрагента или сам код
//
Функция глНайтиНоменклатуруКонтрагента(фКонтрагент, Номенклатура, ВернутьКод = 1) Экспорт
	
	Значение = "";
	
	СпрНоменклКонтр = СоздатьОбъект("Справочник.КодыНоменклатурыКонтрагентов");
	СпрНоменклКонтр.ВыбратьЭлементы();
	Пока СпрНоменклКонтр.ПолучитьЭлемент() = 1 Цикл
		Если СпрНоменклКонтр.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если (СпрНоменклКонтр.Контрагент = фКонтрагент) И (СпрНоменклКонтр.Номенклатура = Номенклатура) Тогда
		   Значение = СпрНоменклКонтр.ТекущийЭлемент();
		   Если ВернутьКод = 1 Тогда
		   	Значение = СокрЛП(Значение.КодКонтрагента);
		   КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

//Проверяет наличие разных кодов в ключе контрагент-номенклатура.
//
Функция глКодКонтрагентаУникален(ТекущийЭлемент, фКонтрагент, Номенклатура, КодКонтрагента, Выбран) Экспорт
	
	ТабКонтроль = СоздатьОбъект("ТаблицаЗначений");
	ТабКонтроль.НоваяКолонка("Контрагент", "Справочник.Контрагенты");
	ТабКонтроль.НоваяКолонка("Номенклатура","Справочник.ТМЦ");
	ТабКонтроль.НоваяКолонка("КодКонтрагента", "Строка", 25);
	ТабКонтроль.НоваяКолонка("Ресурс", "Число", 10);
	
	//Запрашиваемые параметры
	ТабКонтроль.НоваяСтрока();
	ТабКонтроль.Контрагент = фКонтрагент;
	ТабКонтроль.Номенклатура = Номенклатура;
	ТабКонтроль.КодКонтрагента = КодКонтрагента;
	ТабКонтроль.Ресурс = Выбран; // если справ. записан, то найдется в цикле.	   
	
	СпрНоменклКонтр = СоздатьОбъект("Справочник.КодыНоменклатурыКонтрагентов");
	СпрНоменклКонтр.ВыбратьЭлементы();
	Пока СпрНоменклКонтр.ПолучитьЭлемент() = 1 Цикл
		Если СпрНоменклКонтр.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если (СпрНоменклКонтр.Контрагент = фКонтрагент) И (СпрНоменклКонтр.Номенклатура = Номенклатура) 
		      И (СпрНоменклКонтр.ТекущийЭлемент()<>ТекущийЭлемент)  Тогда
			СпрНоменклКонтрТекЭл = СпрНоменклКонтр.ТекущийЭлемент();
			ТабКонтроль.НоваяСтрока();
			ТабКонтроль.Контрагент = СпрНоменклКонтрТекЭл.Контрагент;
			ТабКонтроль.Номенклатура = СпрНоменклКонтрТекЭл.Номенклатура;
			ТабКонтроль.КодКонтрагента = СпрНоменклКонтрТекЭл.КодКонтрагента;
			ТабКонтроль.Ресурс = 1;	   
		КонецЕсли;
	КонецЦикла;
	
	КоличествоЗаписей = ТабКонтроль.Итог("Ресурс");
	ТабКонтроль.Свернуть("Контрагент,Номенклатура,КодКонтрагента","Ресурс");

	Значение = ?(ТабКонтроль.КоличествоСтрок()>1,0,1); // Значений больше 1-го неуникален
	
	Если (Значение = 1) И (КоличествоЗаписей>1) Тогда
		Сообщить("Для Контрагента: """ + Строка(фКонтрагент) + """ номенклатуры: """ + Строка(Номенклатура) 
		+ """, записи с кодом - """ + СокрЛП(Строка(КодКонтрагента)) + """ уже существуют, в количестве:" + Строка(КоличествоЗаписей) +".");
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

//Экспортные процедуры в формате dbf
Процедура глЭкспортРН_dbf(Конт) Экспорт
	
	Если Конт.Выбран() = 0 Тогда
		Сообщить("Документ не записан. Выгрузка невозможна.");
		Возврат;
	КонецЕсли;
	
	Ошибка = 0;
	База = СоздатьОбъект("XBASE");
    База.КодоваяСтраница(0);
	СписокАдресов_email = СоздатьОбъект("СписокЗначений");
	Контрагент = Конт.Контрагент;
	
	Если ПустоеЗначение(Контрагент.email) = 0 Тогда
		СписокАдресов_email.ДобавитьЗначение(СокрЛП(Контрагент.email))
	КонецЕсли;
	
	Если ПустоеЗначение(Контрагент.email_1) = 0 Тогда
		СписокАдресов_email.ДобавитьЗначение(СокрЛП(Контрагент.email_1));
	КонецЕсли;
	
	Если ПустоеЗначение(Контрагент.email_2) = 0 Тогда
		СписокАдресов_email.ДобавитьЗначение(СокрЛП(Контрагент.email_2));
	КонецЕсли;
	
	Если СписокАдресов_email.РазмерСписка() = 0 Тогда
		Сообщить("Файл документа не может быть отправлен. Не заполнены email контрагента." + Строка(Контрагент), "!");
		Возврат;
	КонецЕсли;
	
	СхемаЭкспорта = Контрагент.СхемаЭкспортаРН;
	Фирма = Конт.Фирма;
	Фирма_ЕДРПОУ = Фирма.ЕДРПОУ;
	Фирма_ПолнНаименование = СокрЛП(Фирма.ПолнНаименование);
	КодТочкиДоставки = СокрЛП(Контрагент.КодТочкиДоставки);
	АдресТочкиДоставки = СокрЛП(Контрагент.АдресТочкиДоставки);
	
	АдресТочкиДоставкиДоговор = ?(ПустоеЗначение(Конт.Договор)=1,"",СокрЛП(глАдресСтрокой(Конт.Договор.Адрес)));
	МаркаАвто = СокрЛП(Конт.УМК_Автомобиль.Наименование);
	ГосНомерАвто = СокрЛП(Конт.УМК_Автомобиль.Код);
	ВодительФИО = СокрЛП(Конт.Водитель.Наименование);
	
	Если ПустоеЗначение(СхемаЭкспорта) = 1 Тогда
		Сообщить("Для контрагента " + Строка(Контрагент) + " не указана схема экспорта РН. Экспорт невозможен.", "!!");
		Возврат;
	КонецЕсли;
	
	Если СхемаЭкспорта = Перечисление.СхемыЭкспортаРН.Схема_1 Тогда
		База.ДобавитьПоле("DATA","D",10,);
		База.ДобавитьПоле("NDOC","S",10,);
		База.ДобавитьПоле("KLCODE","S",10,);
		База.ДобавитьПоле("KLNAME","S",70,);
		База.ДобавитьПоле("TOVID","S",5,);
		База.ДобавитьПоле("TOVDESCR","S",100,);//ПолнНаименование
		База.ДобавитьПоле("KVO","N",15,3);
		База.ДобавитьПоле("PRICE","N",12,2);
		ИмяВремФайла = СокрЛП(Константа.ПутьЭкспортаРН) + "УМ" + Прав(Конт.НомерДок,6)+".dbf";
		Попытка
			База.СоздатьФайл(ИмяВремФайла);
			База.ОчиститьФайл();
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить("Файл не выгружен.","!");
			Возврат;
		КонецПопытки;
		
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку()= 1 Цикл
			
			База.Добавить();
			
			База.УстановитьЗначениеПоля("DATA", Конт.ДатаДок);
			База.УстановитьЗначениеПоля("NDOC", Конт.НомерДок);
			База.УстановитьЗначениеПоля("KLCODE", Фирма_ЕДРПОУ);
			База.УстановитьЗначениеПоля("KLNAME", Фирма_ПолнНаименование);
			База.УстановитьЗначениеПоля("TOVID",Конт.ТМЦ.Код);
			База.УстановитьЗначениеПоля("TOVDESCR", Конт.ТМЦ.ПолнНаименование);
			База.УстановитьЗначениеПоля("KVO", Конт.Кво);
			База.УстановитьЗначениеПоля("PRICE", Конт.ЦенаСНДС);
			
			База.Записать();
			
		КонецЦикла;
		ИмяФайлаОтправки = СокрЛП(Константа.ПутьЭкспортаРН) + 
		СокрЛП(Конт.НомерДок) +"_від_" + Формат(Конт.ДатаДок,"DYYYYMMDD") + ?(ПустоеЗначение(АдресТочкиДоставкиДоговор)=1,"","_адреса_" + АдресТочкиДоставкиДоговор) + ".dbf";
		// конец по схеме 1
	ИначеЕсли СхемаЭкспорта = Перечисление.СхемыЭкспортаРН.Схема_2 Тогда
		
		База.ДобавитьПоле("KOD","C",14,0);      //0 – код товара МО (4 символа)
		База.ДобавитьПоле("KOL","N",15,3);       // 3 количество килограммы (исключения яйца – они в штуках)
		База.ДобавитьПоле("CEN","N",15,4);       //4 – цена с НДС за килограмм
		База.ДобавитьПоле("NAM","C",255,);      // 0 название товара
		База.ДобавитьПоле("KLN","C",12,);       // 0 Ваше ОКПО
		База.ДобавитьПоле("MAG","C",20,);       //0 Код ВЧ
		База.ДобавитьПоле("NAM_TT","C",255,);   //0 Адрес ВЧ
		База.ДобавитьПоле("VODITEL","C",255,);  //0 Водитель ФИО
		База.ДобавитьПоле("AVTO","C",255,);     //0 авто марка
		База.ДобавитьПоле("AVTO_NUM","C",255,); //0 авто номер
		База.ДобавитьПоле("DAT","D",8,);        //0 Дата накладной
		База.ДобавитьПоле("NOM","C",40,);       //0 Номер накладной
		База.ДобавитьПоле("PERIOD","C",4,);     //0 Период МО
		ИмяВремФайла = СокрЛП(Константа.ПутьЭкспортаРН) + "УМ" + Прав(Конт.НомерДок,6)+".dbf";
		Попытка
			База.СоздатьФайл(ИмяВремФайла);
			База.ОчиститьФайл();
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить("Файл не выгружен.","!");
			Возврат;
		КонецПопытки;
		
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку()= 1 Цикл
			
			КодКонтрагента = глНайтиНоменклатуруКонтрагента(Контрагент, Конт.ТМЦ);
			
			Если ПустоеЗначение(КодКонтрагента) = 1 Тогда
				Сообщить("Для ТМЦ """ + Строка(Конт.ТМЦ) + """ контрагента """ + Строка(Контрагент) + """ не задан ""Код контрагента"". Экспорт невозможен.", "!!");
				Возврат;
			КонецЕсли;
			
			База.Добавить();
			Неделя = Строка(НомерНеделиГода(Конт.ДатаДок) - НомерНеделиГода(НачМесяца(Конт.ДатаДок)));
			Месяц = Строка(ДатаМесяц(Конт.ДатаДок));
			ПериодДок = Месяц+"/"+Неделя; 
			База.УстановитьЗначениеПоля("KOD", КодКонтрагента);//0 – код товара МО (4 символа)
			База.УстановитьЗначениеПоля("KOL", Конт.Кво); // 3 количество килограммы (исключения яйца – они в штуках)
			База.УстановитьЗначениеПоля("CEN",Конт.ЦенаСНДС);//4 – цена с НДС за килограмм
			База.УстановитьЗначениеПоля("NAM", Конт.ТМЦ.ПолнНаименование);// 0 название товара
			База.УстановитьЗначениеПоля("KLN", Фирма_ЕДРПОУ);// 0 Ваше ОКПО
			База.УстановитьЗначениеПоля("MAG", КодТочкиДоставки); //0 Код ВЧ
			База.УстановитьЗначениеПоля("NAM_TT", АдресТочкиДоставки);//0 Адрес ВЧ
			База.УстановитьЗначениеПоля("VODITEL", ВодительФИО);//0 Водитель ФИО
			База.УстановитьЗначениеПоля("AVTO", МаркаАвто); //0 авто марка
			База.УстановитьЗначениеПоля("AVTO_NUM", ГосНомерАвто); //0 авто номер
			База.УстановитьЗначениеПоля("DAT", Конт.ДатаДок);//0 Дата накладной
			База.УстановитьЗначениеПоля("NOM", Конт.НомерДок);//0 Номер накладной
			База.УстановитьЗначениеПоля("PERIOD", ПериодДок);//0 Период МО
			
			База.Записать();
			
		КонецЦикла;
		ИмяФайлаОтправки = СокрЛП(Константа.ПутьЭкспортаРН) + "op_"+ Формат(Конт.ДатаДок, "DYYYYMMDD") +"-"+ Формат(Конт.ДатаДок, "DYYYYMMDD") + ".dbf";
	КонецЕсли; // По схеме 2
	
	База.ЗакрытьФайл();
	//копируем фал
	ФС.ПереименоватьФайл(ИмяВремФайла,ИмяФайлаОтправки,1);
	
	//Отправка email
	ДокументПредставл = Строка(Конт.ТекущийДокумент());
	Попытка
		глОтправитьУведомлениеЭП("РН", Фирма_ПолнНаименование + ". " + ДокументПредставл, ДокументПредставл, СписокАдресов_email, ИмяФайлаОтправки);//(ИмяОбъекта, Тема, ТекстСообщения, Адрес = "")
	Исключение
		Ошибка = 1;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если Ошибка = 0 Тогда
		Сообщить("Выгружен файл " +Конт.ТекущийДокумент());
	КонецЕсли;

	Попытка
		ФС.УдалитьФайл(ИмяФайлаОтправки);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Процедура глЭкспорт_dbf(Конт) Экспорт
	
	Если Конт.Вид() = "РасходнаяНакладная" Тогда
	     глЭкспортРН_dbf(Конт)
	КонецЕсли;
	
КонецПроцедуры
//Когнец экспортные процедуры в формате dbf

//============================Конец=Процедуры=интеграции=с=системами контрагентов==================================

// ===============================
// Эта процедура формирует Дерево подчиненных документов
Процедура глСформироватьДеревоДокументов(Док)  Экспорт
	Если ТипЗначенияСтр(Док)="Документ" Тогда
		Докум=Док;
	ИначеЕсли ТипЗначенияСтр(Док)="ГрупповойКонтекст" Тогда
		Если Док.СравнитьТА()=-2 Тогда
			глПоказатьПредупреждение("Документ не записан!");
			Возврат;
		Иначе
			Докум=Док.ТекущийДокумент();
		КонецЕсли;
	Иначе
		// При вызове процедуры ей в параметре не передан Документ
		Возврат;
	КонецЕсли;

	ОткрытьФорму("Обработка.ДеревоДокументов"+"#",Докум);
КонецПроцедуры //глСформироватьДеревоДокументов

// ======================================
Процедура глПечатьЖурналаДокументов(Конт, Наименование) Экспорт
	Перем Отбор, ЗначениеОтбора;
	
	ЕстьОтбор = Конт.ПолучитьОтбор(Отбор, ЗначениеОтбора);
	НачДата = Конт.НачалоИнтервала();
	КонДата = Конт.КонецИнтервала();
	Расшифровка = СоздатьОбъект("СписокЗначений");
 	Расшифровка.Установить("Отчет","ОбработкаДокументов");
 	Расшифровка.Установить("Дата1", НачДата);
	Расшифровка.Установить("Дата2", КонДата);
	Расшифровка.Установить("ВыбКонтрагент", ПолучитьПустоеЗначение("Справочник.Контрагенты"));
	Расшифровка.Установить("ВыбСтрока", "");
	Расшифровка.Установить("ВыбСтрокаКом", "");
	Расшифровка.Установить("Признак", "Все");
	Расшифровка.Установить("ВидОбработки", "Печать");
	Расшифровка.Установить("ДокументВладелец", Конт.ПодчинениеДокументу());
	Если Отбор = "Фирма" Тогда
		Расшифровка.Установить("ВыбФирма", ЗначениеОтбора);
	Иначе
		Расшифровка.Установить("ВыбФирма", ПолучитьПустоеЗначение("Справочник.Фирмы"));
	КонецЕсли;
	ВсеДокументы = СоздатьОбъект("СписокЗначений");
	ВыбранныеДокументы = СоздатьОбъект("СписокЗначений");
	Для Индекс=1 По Метаданные.Документ() Цикл
		Значение = Метаданные.Документ(Индекс).Идентификатор;
		Представление = Метаданные.Документ(Индекс).Представление();
		Комментарий = Метаданные.Документ(Индекс).Комментарий;
		Если ПустаяСтрока(Комментарий) = 0 Тогда
			Представление = Представление + " (" + Комментарий +")";
		КонецЕсли;
		ВсеДокументы.ДобавитьЗначение(Значение, Представление);
	КонецЦикла;
	//Считаем, что отбор возможен только по документу или контрагенту
	Если ЕстьОтбор = 1 Тогда
		Если Метаданные.Документ(Отбор).Выбран() = 1 Тогда
	    	Значение = Метаданные.Документ(Отбор).Идентификатор;
			Представление = Метаданные.Документ(Отбор).Представление();
			Комментарий = Метаданные.Документ(Отбор).Комментарий;
			Если ПустаяСтрока(Комментарий) = 0 Тогда
				Представление = Представление + " (" + Комментарий +")";
			КонецЕсли;
			ВсеДокументы.УдалитьЗначение(ВсеДокументы.НайтиЗначение(Значение));
			ВыбранныеДокументы.ДобавитьЗначение(Значение, Представление);
		Иначе
			Расшифровка.Установить("ВыбКонтрагент", ЗначениеОтбора);
			ВсеДокументы.Выгрузить(ВыбранныеДокументы);
			ВсеДокументы.УдалитьВсе();
		КонецЕсли;                                                   
	Иначе
		Для Индекс = 1 По Метаданные.Документ() Цикл
			Док = Метаданные.Документ(Индекс);
			Если ((Строка(Док.Журнал) = Метаданные.Журнал(Наименование).Представление()) или (Наименование = "ПолныйЖурнал")) Тогда
				Значение = Док.Идентификатор;
				Представление = Док.Представление();
				Комментарий = Док.Комментарий;
				Если ПустаяСтрока(Комментарий) = 0 Тогда
					Представление = Представление + " (" + Комментарий +")";
				КонецЕсли;
				ВсеДокументы.УдалитьЗначение(ВсеДокументы.НайтиЗначение(Значение));
				ВыбранныеДокументы.ДобавитьЗначение(Значение, Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	Расшифровка.Установить("ВыбранныеДокументы", ВыбранныеДокументы);
	Расшифровка.Установить("ВсеДокументы", ВсеДокументы);
	глРасшифровка = Расшифровка;
	глФлагРасшифровки = 1;
	глОбновить = 0;
	ОткрытьФорму("Обработка.ОбработкаДокументов");
	глФлагРасшифровки = 0;
КонецПроцедуры		//ПечатьЖурналаДокументов

// Локально сохраняет значение по ключу
// ===============================
// Конт - или контекст документа, или строка (для совместимости)
// сИдентификатор - идентификатор значения
// Значение - значение для сохранения
Процедура глСохранитьЗначение(Конт="", сИдентификатор="", Значение="") Экспорт
	Если ТипЗначенияСтр(Конт) = "ГрупповойКонтекст" Тогда
		сГруппа = Конт.Вид();
	Иначе
		// строка или что-то другое, преобразуем все к строке
		сГруппа = СокрЛП(Строка(Конт));
	КонецЕсли;
	сКлюч = ?(ПустаяСтрока(сГруппа) = 0, сГруппа+"_", "")+СокрЛП(сИдентификатор);
	СохранитьЗначение(сКлюч, Значение);
КонецПроцедуры //глСохранитьЗначение

// В зависимости от значения глОбщиеУстановки или восстанавливает локально
// сохраненное значение или берет значение константы (реквизита справочника)
// Используется для присвоения значений по умолчанию
// ===============================
// Конт - или контекст документа, или контекст справочника, 
//		  или элемент спправочника Фирмы, или строка (для совместимости)
// сИдентификатор - идентификатор значения
// ЗначПоУмолчанию - значение по умолчанию, если ничего не "восстановили"
Функция глВосстановитьЗначение(Конт="", сИдентификатор="", ЗначПоУмолчанию=0) Экспорт
Перем сГруппа, Фирма, ДатаЗнач;                 

	// для совместимости с "Торговля+Склад"
	Если сИдентификатор = "ОсновнаяФирма" Тогда
		сИдентификатор = "БазФирма";
	КонецЕсли;	

	Если ТипЗначенияСтр(Конт) = "ГрупповойКонтекст" Тогда
		сГруппа = Конт.Вид();
		Попытка
			// Конт - документ
			Фирма = Конт.Фирма;
			ДатаЗнач = Конт.ДатаДок;
		Исключение
			// Конт - справочник
			Фирма = 0;
			ДатаЗнач = РабочаяДата();
		КонецПопытки;
	ИначеЕсли ТипЗначенияСтр(Конт) = "Справочник" Тогда
		// элемент справочника Фирмы
		сГруппа = Конт.Вид();
		Фирма = Конт;
		ДатаЗнач = РабочаяДата();
	Иначе
		// строка или что-то другое, преобразуем все к строке
		сГруппа = СокрЛП(Строка(Конт));
		Фирма = 0;
		ДатаЗнач = РабочаяДата();
	КонецЕсли;
	// Попытаемся взять значение из справочника Фирмы, если в справочнике есть
	// такой реквизит. Если этот реквизит не пустой, его значение будет использовано
	// при глОбщиеУстановки=1
	ЗначениеИзФирмы = ПолучитьПустоеЗначение();
	Если ПустоеЗначение(Фирма) = 0 Тогда
		// из реквизита объекта (справочника)
		Попытка
			// прочитаем реквизит
			Реквизит = Метаданные.Справочник("Фирмы").Реквизит(сИдентификатор);
			Если Реквизит.Выбран() = 1 Тогда
				// есть такой реквизит...
			    Если Реквизит.Периодический = 1 Тогда
					//... периодический
			        ЗначениеИзФирмы = Фирма.ПолучитьАтрибут(сИдентификатор).Получить(ДатаЗнач);
				Иначе
					//... обычный
					ЗначениеИзФирмы = Фирма.ПолучитьАтрибут(сИдентификатор);
			    КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	// сразу попытаемся восстановить значение по ключу
	сКлюч = ?(ПустаяСтрока(сГруппа) = 0, сГруппа+"_", "")+СокрЛП(сИдентификатор);
	Значение = ВосстановитьЗначение(сКлюч);
	Если (глОбщиеУстановки = 2) и (ТипЗначенияСтр(Значение) <> "") Тогда
		// оставляем то, что уже получили
	ИначеЕсли ПустоеЗначение(ЗначениеИзФирмы) = 0 Тогда
		// из реквизита объекта (справочника)
		Значение = ЗначениеИзФирмы;
	ИначеЕсли Метаданные.Константа(сИдентификатор).Выбран() = 1 Тогда
		// берем из константы...
		Если Метаданные.Константа(сИдентификатор).Периодический = 1 Тогда
			// ...периодической
		    Значение = Константа.ПолучитьАтрибут(сИдентификатор).Получить(ДатаЗнач);
		Иначе
			// ...обычной
			Значение = Константа.ПолучитьАтрибут(сИдентификатор);
		КонецЕсли;
	КонецЕсли;
	// если все-таки ничего не получили, то используем значение по умолчанию
	Если ПустоеЗначение(Значение) = 1 Тогда
	    Значение = ЗначПоУмолчанию;
	КонецЕсли;
	Возврат Значение;
КонецФункции //глВосстановитьЗначение

// Выводит ТекстСообщения в окне сообщений
// ======================================
// Детальность - число, определяет, к какому уровню детальности относится сообщение
// глДетальностьКомментариев - содержит максимальный уровень детальности комментприев,
//		которые будут выводиться, все сообщения с большим номером уровня детальности
//		игнорируются
// Возможные значения для Детальность и глДетальностьКомментариев - 0/1/2/3
Процедура глКомментарий(ТекстСообщения, Детальность=3, Конт="", Знач Маркер="") Экспорт     
	
	Если Детальность<=глВосстановитьЗначение(,"ВыдаватьСообщения",0) Тогда
		Если ТекстСообщения = "Начало" Тогда
			Сообщить("________________________________________________________________________________");
			Сообщить("Документ "+Конт.ПредставлениеВида()+" №"+Конт.НомерДок+" от "+Конт.ДатаДок+": проведение документа ("+РабочаяДата()+"/"+ТекущееВремя()+")", "I");

		ИначеЕсли ТекстСообщения = "Окончание" Тогда
			Если СтатусВозврата() <> 0 Тогда
				Сообщить("Документ "+Конт.ПредставлениеВида()+" №"+Конт.НомерДок+" от "+Конт.ДатаДок+" проведен.", "I");
			КонецЕсли;
			
		ИначеЕсли ТекстСообщения = "Ошибка" Тогда
			Сообщить("Документ "+Конт.ПредставлениеВида()+" №"+Конт.НомерДок+" от "+Конт.ДатаДок+" не проводится!","!!!");

		Иначе
			Если ПустоеЗначение(Маркер) = 1 Тогда
				Если Детальность = 0 Тогда
					Маркер = "!!!";
				ИначеЕсли Детальность = 1 Тогда
					Маркер = "!"
				ИначеЕсли Детальность = 2 Тогда
					Маркер = "I"
				Иначе // Детальность = 3
					Маркер = "."
				КонецЕсли;
			КонецЕсли;
			Сообщить(ТекстСообщения, Маркер);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  //глКомментарий

// ===============================
Процедура глНеПроводить(Конт, Сообщение="", НомСтроки=0) Экспорт
	ТекстСообщения = Сообщение;
	Если НомСтроки=0 Тогда
		ТекстСообщения = Сообщение;
	Иначе
		ТекстСообщения = Сообщение + " (Строка " + НомСтроки + ")";
	КонецЕсли; 
	Если ПустаяСтрока(ТекстСообщения)=0 Тогда
		глКомментарий(ТекстСообщения,0);
	КонецЕсли;
	СтатусВозврата(0);
	глКомментарий("Ошибка",0,Конт);
КонецПроцедуры //глНеПроводить

// ===============================
Процедура глОживить(ДобСтрок) Экспорт
	глЧислоСтрок=глЧислоСтрок+ДобСтрок;
	Состояние("В отчет выведено "+глЧислоСтрок+" строк.");
КонецПроцедуры //глОживить

// ===============================
Функция глЕстьРеквизитШапки(ИмяРеквизита, ВидДокумента) Экспорт
	Перем Реквизит;
	Если (ПустоеЗначение(ВидДокумента) = 1) ИЛИ
	     (ПустоеЗначение(ИмяРеквизита) = 1) Тогда
		Возврат Нет;
	КонецЕсли;
	Реквизит=Метаданные.Документ(ВидДокумента).РеквизитШапки(ИмяРеквизита);
	Возврат ?(Реквизит.Выбран()=1, Да, Нет );
КонецФункции //глЕстьРеквизитШапки

// ===============================
Функция глЕстьРеквизитМнЧ(ИмяРеквизита,ВидДокумента) Экспорт
	Перем Реквизит;     
	Если (ПустоеЗначение(ВидДокумента) = 1) ИЛИ
	     (ПустоеЗначение(ИмяРеквизита) = 1) Тогда
		Возврат Нет;
	КонецЕсли;
	Реквизит=Метаданные.Документ(ВидДокумента).РеквизитТабличнойЧасти(ИмяРеквизита);
	Возврат ?(Реквизит.Выбран()=1, Да, Нет );
КонецФункции //глЕстьРеквизитМнЧ

// ===============================
// Добавляет значение в список значений, если его там еще нет
Процедура глДобавитьЗначениеБезПовторения(спЗначений, Значение, Представление="") Экспорт
	Если ТипЗначенияСтр(спЗначений) = "СписокЗначений" Тогда
		Если спЗначений.НайтиЗначение(Значение) = 0 Тогда
		    спЗначений.ДобавитьЗначение(Значение,Представление);
		КонецЕсли;                              
	Иначе
		глКомментарий("Неизвестный объект для функции ""глДобавитьЗначениеБезПовторения""",,,);
	КонецЕсли;
КонецПроцедуры //глДобавитьЗначениеБезПовторения

// ===============================
Процедура глПарсить(Стр,Спис,Разделитель = ";") Экспорт
	Спис.УдалитьВсе();
	СтрПарс = Стр;
	Инд = Найти(СтрПарс,Разделитель);
	Пока Инд<>0 Цикл
		ТекСтр = Сред(СтрПарс,1,Инд-1);
		СтрПарс = Сред(СтрПарс,Инд+1,СтрДлина(СтрПарс)-Инд);
		
		ИндРавно = Найти(ТекСтр,"=");
		Если ИндРавно = 0 Тогда
		    Продолжить;
		КонецЕсли;
		Пар = Сокрлп(Сред(ТекСтр,1,ИндРавно-1));
		Зна = Сокрлп(Сред(ТекСтр,ИндРавно+1,СтрДлина(ТекСтр)-ИндРавно));
		
		Спис.ДобавитьЗначение(Зна,Пар);
		Инд = Найти(СтрПарс,Разделитель);
	КонецЦикла;
КонецПроцедуры //глПарсить

// ===============================
// Используется для получения элемента справочника ШкалаСтавок по коду
// Параметры:
//		Элемент - в этом параметре передается возвращаемое значение
// 		КодЭлемента - код для поиска в справочнике
// 		Сообщение - название того, что ищем в предложном падеже ("о ставке НДС")
// Возвращает:
// 		1 - успешно, 0 - неуспешно
Функция глПолучитьНиО(Элемент,КодЭлемента,Сообщение) Экспорт
	НиО = СоздатьОбъект("Справочник.ШкалаСтавок");
	Если НиО.НайтиПоКоду(КодЭлемента) = 1 Тогда
	    Элемент = НиО.ТекущийЭлемент();
		Возврат 1;
	Иначе
		глКомментарий("Не могу найти сведения "+Сообщение,0,,"!");
		глКомментарий("В справочнике ""Шкала ставок налогов"" не обнаружен элемент с кодом "+Сокрлп(КодЭлемента)+"!",0,,"!");
		Возврат 0;
	КонецЕсли;
КонецФункции //глПолучитьНиО


// ===============================
// Получить данные по значению идентификатора
// Последовательно ищется в спр. ШкалаСтавок, в константах, в спр. Фирмы
Процедура глПолучитьДанные(Список) Экспорт
	ДатаЗначения = Список.Получить("Дата");
	Фирма = Список.Получить("Фирма");
	
	Если ПустоеЗначение(Фирма) = 1 Тогда
		Фирма = Константа.БазФирма;
		Список.Установить("Фирма",Фирма);
	КонецЕсли;	
	
	НиО = СоздатьОбъект("Справочник.ШкалаСтавок");
	
	Для Инд = 1 По Список.РазмерСписка() Цикл
		ИмяПараметра = "";
		Список.ПолучитьЗначение(Инд,ИмяПараметра);
		
		Если (Сокрлп(ИмяПараметра) = "Дата") или (Сокрлп(ИмяПараметра) = "Контекст") 
		или (Сокрлп(ИмяПараметра) = "Фирма") Тогда
			// зарезервированные
		    Продолжить;
		КонецЕсли;
        
		// сначала проверим по справочнику налогов и отчислений
		Если НиО.НайтиПоКоду(ИмяПараметра) = 1 Тогда
			// есть такой налог
		    Список.Установить(ИмяПараметра,НиО.Ставка.Получить(ДатаЗначения));
			Продолжить;
		КонецЕсли;
		
		// по константам - коды организации
		Если Метаданные.Константа(ИмяПараметра).Выбран() = 1 Тогда
		    // есть такая константа
			Если Метаданные.Константа(ИмяПараметра).Периодический = 1 Тогда
			    Список.Установить(ИмяПараметра,Константа.ПолучитьАтрибут(ИмяПараметра).Получить(ДатаЗначения));
			Иначе
				Список.Установить(ИмяПараметра,Константа.ПолучитьАтрибут(ИмяПараметра));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если (ИмяПараметра = "Банк") или (ИмяПараметра = "АдресБанка")
		или (ИмяПараметра = "МФО") или (ИмяПараметра = "РасчСчет") Тогда
			// по реквизитам р/с нашей организации
			Если ПустоеЗначение(Фирма) = 0 Тогда
				Попытка
					Если ИмяПараметра = "РасчСчет" Тогда
			    		Список.Установить(ИмяПараметра,Фирма.РС.НомерСчета);
					ИначеЕсли ИмяПараметра = "Банк" Тогда
			    		Список.Установить(ИмяПараметра,Фирма.РС.Банк.Наименование);
					ИначеЕсли ИмяПараметра = "АдресБанка" Тогда
				    	Список.Установить(ИмяПараметра,Фирма.РС.Банк.Адрес);
					ИначеЕсли ИмяПараметра = "МФО" Тогда
				    	Список.Установить(ИмяПараметра,Фирма.РС.Банк.Код);
					КонецЕсли;
				Исключение КонецПопытки;
				Продолжить;
			Иначе
				глКомментарий("Процедура глПолучитьДанные(): Для параметра "+ИмяПараметра
							 +" невозможно определить значение, так как не задана фирма!",0,,"!");
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// для совместимости рег. отчетов с конфигурацией "Бухгалтерский учет для Украины", ред. 2
		Если (ИмяПараметра = "Адрес") или (ИмяПараметра = "Директор") Тогда
			Если ПустоеЗначение(Фирма) = 1 Тогда
				глКомментарий("Процедура глПолучитьДанные(): Для параметра "+ИмяПараметра
							 +" невозможно определить значение, так как не задана фирма!",0,,"!");
				Продолжить;
			Иначе
				Если ИмяПараметра = "Адрес" Тогда
				    Список.Установить(ИмяПараметра,глАдресСтрокой(Фирма.ЮридическийАдрес.Получить(ДатаЗначения)));
				ИначеЕсли ИмяПараметра = "Директор" Тогда
				    Список.Установить(ИмяПараметра,Фирма.Руководитель.Получить(ДатаЗначения));
				КонецЕсли;
			КонецЕсли;
		    Продолжить;
		КонецЕсли;
		
		Если Метаданные.Справочник("Фирмы").Реквизит(ИмяПараметра).Выбран() = 1 Тогда
		    // есть такой реквизит
			Если ПустоеЗначение(Фирма) = 0 Тогда
				Если Метаданные.Справочник("Фирмы").Реквизит(ИмяПараметра).Периодический = 1 Тогда
				    Список.Установить(ИмяПараметра,Фирма.ПолучитьАтрибут(ИмяПараметра).Получить(ДатаЗначения));
				Иначе
					Список.Установить(ИмяПараметра,Фирма.ПолучитьАтрибут(ИмяПараметра));
				КонецЕсли;
				Продолжить;
			Иначе
				глКомментарий("Процедура глПолучитьДанные(): Для параметра "+ИмяПараметра
							 +" невозможно определить значение, так как в расшифровку не передана фирма!",0,,"!");
				Продолжить;
			КонецЕсли;                               
		КонецЕсли;                                      		
		глКомментарий("Процедура глПолучитьДанные(): Не могу определить ИмяПараметра по имени "+ИмяПараметра,0,,"!");
	КонецЦикла;
КонецПроцедуры //глПолучитьДанные

// ===============================
// Устанавливает номер для документа или справочника
Процедура глУстановитьНомер(Конт,ЭтоДокумент=1,Объект=0) Экспорт       
	ПрефиксНомера = "";
	Если Конт.Фирма.Выбран() = 1 Тогда
	    ПрефиксНомера = СокрЛП(Конт.Фирма.Префикс);
	ИначеЕсли Объект <> 0 Тогда
		Попытка
			ПрефиксНомера = СокрЛП(Объект.Фирма.Префикс);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если ЭтоДокумент = 1 Тогда
		ВидДок = ?(Объект = 0, Конт.Вид(), Объект.Вид());
		ПрефиксНомера = ПрефиксНомера + "-";
		
		Если Объект = 0 Тогда
		    Конт.УстановитьНовыйНомер(ПрефиксНомера);
		Иначе
			Объект.УстановитьНовыйНомер(ПрефиксНомера);
		КонецЕсли;
	Иначе
		ПрефиксНомера = ПрефиксНомера + "-";
		Если Объект = 0 Тогда
		    Конт.УстановитьНовыйКод(ПрефиксНомера);
		Иначе
			Объект.УстановитьНовыйКод(ПрефиксНомера);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //глУстановитьНомер
  
// ===============================
// Устанавливает фирму по умолчанию
Процедура глУстановитьФирму(Конт,ЭтоДокумент=1,УстановитьНовыйНомер=1) Экспорт
	Конт.Фирма = глВосстановитьЗначение(,"БазФирма");
	Если УстановитьНовыйНомер = 1 Тогда
	    глУстановитьНомер(Конт,ЭтоДокумент);
	КонецЕсли;
КонецПроцедуры //глУстановитьФирму
       
// ======================================
// Назначение:
//		Производит выбор фирмы в диалогах документов и, при необходимости, 
//		очищает все реквизиты (типа "Справочник"), связанные со старой фирмой
// Аргументы:
//		Конт 				- контекст формы документа
//		ПроверятьРеквизиты	- выполнять ли проверку реквизитов на соответствие 
// 							выбранной фирме
Процедура глУстФирма(Конт,ПроверятьРеквизиты=1) Экспорт
	СтараяФирма = Конт.Фирма;
	
	спрФирмы = СоздатьОбъект("Справочник.Фирмы");
	Если спрФирмы.Выбрать("","")=1 Тогда
		Если СтараяФирма = спрФирмы.ТекущийЭлемент() Тогда
			// фирма не изменилась, ничего не делаем
			Возврат;
		КонецЕсли;
	    Конт.Фирма = спрФирмы.ТекущийЭлемент();
		//Установим склад
		Если Конт.Вид() = "ПриходнаяНакладнаяЗапасы" Тогда
			Если ПустоеЗначение(Конт.Фирма.ОсновнойСклад) = 0 Тогда
				Конт.МестоХранения = Конт.Фирма.ОсновнойСклад;
				Конт.НеФормироватьДвижения = Конт.МестоХранения.ИспользуетсяВРознице;
			КонецЕсли;
			//Для базовой фирмы формируем движения всегда.
			Если Конт.Фирма = Константа.БазФирма Тогда
				Конт.НеФормироватьДвижения = 0;
				Конт.Форма.НеФормироватьДвижения.Доступность(0);
			Иначе
				Конт.Форма.НеФормироватьДвижения.Доступность(1);
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверятьРеквизиты = 1 Тогда
			// проверяем соответствие реквизитов документа выбранной фирме
			// просмотрим реквизиты табличной части
			Для Инд = 1 По Метаданные.Документ(Конт.Вид()).РеквизитТабличнойЧасти() Цикл
				мдРекв = Метаданные.Документ(Конт.Вид()).РеквизитТабличнойЧасти(Инд);
				// проверим, имеет ли реквизит отношение к фирме
				фИмеетОтношение = 0;
				Если (мдРекв.Тип = "Справочник") и (ПустоеЗначение(мдРекв.Вид) = 0) Тогда


					Если Метаданные.Справочник(мдРекв.Вид).Владелец.Выбран() = 1 Тогда
						Если Метаданные.Справочник(мдРекв.Вид).Владелец.Идентификатор = "Фирмы" Тогда
							// если подчинен фирме, то фирма должна быть владельцем
							фИмеетОтношение = 1;
						КонецЕсли;
					КонецЕсли;
					Если Метаданные.Справочник(мдРекв.Вид).Реквизит("Фирма").Выбран() = 1 Тогда
					    // есть реквизит Фирма в этом справочнике
				        фИмеетОтношение = 2;
					КонецЕсли;
				ИначеЕсли (мдРекв.Тип = "Документ") Тогда
				    // в любом документе есть фирма
			        фИмеетОтношение = 2;
				КонецЕсли;
				
				Если фИмеетОтношение = 0 Тогда
				    Продолжить; // следующий реквизит
				КонецЕсли;
				
				Конт.ВыбратьСтроки();
				Пока Конт.ПолучитьСтроку() = 1 Цикл
					Рекв = Конт.ПолучитьАтрибут(мдРекв.Идентификатор);
					Если ПустоеЗначение(Рекв) = 1 Тогда
					    Продолжить; // реквизит не заполнен
					КонецЕсли;
					
					фНуженВопрос = 0;
					Если фИмеетОтношение = 1 Тогда
						// если подчинен фирме, то фирма должна быть владельцем
					    Если Рекв.Владелец <> Конт.Фирма Тогда
					        фНуженВопрос = 1;
						КонецЕсли;

					ИначеЕсли фИмеетОтношение = 2 Тогда
					    // есть реквизит Фирма в этом справочнике
					    Если Рекв.Фирма <> Конт.Фирма Тогда
					        фНуженВопрос = 1;
						КонецЕсли;
					КонецЕсли;
					
					Если фНуженВопрос = 1 Тогда
					    Если Вопрос("В строках документа "+мдРекв+" не соответствует выбранной фирме. Очистить строки?","Да+Нет") = "Да" Тогда
							// удаляем все строки
					        Конт.УдалитьСтроки();
						Иначе
							Конт.Фирма = СтараяФирма; // фирму не изменяем
							
							//Доступность по реквизиту НеФормироватьДвижения
							Если Конт.Вид() = "ПриходнаяНакладнаяЗапасы" Тогда
								//Для базовой фирмы формируем движения всегда.
								Если Конт.Фирма = Константа.БазФирма Тогда
									Конт.Форма.НеФормироватьДвижения.Доступность(0);
								Иначе
									Конт.Форма.НеФормироватьДвижения.Доступность(1);
								КонецЕсли;
							КонецЕсли;
							
							Возврат;
							
					    КонецЕсли;
					КонецЕсли;
				КонецЦикла; // по строкам
			КонецЦикла; // по реквизитам

			// просмотрим реквизиты шапки
			Для Инд = 1 По Метаданные.Документ(Конт.Вид()).РеквизитШапки() Цикл
				мдРекв = Метаданные.Документ(Конт.Вид()).РеквизитШапки(Инд);
				Если (мдРекв.Тип = "Справочник") и (ПустоеЗначение(мдРекв.Вид) = 0) Тогда
					Рекв = Конт.ПолучитьАтрибут(мдРекв.Идентификатор);
					Если ПустоеЗначение(Рекв) = 1 Тогда
					    Продолжить; // реквизит не заполнен
					КонецЕсли;
					
					// реквизиты шапки просто очищаем
					Если Метаданные.Справочник(мдРекв.Вид).Владелец.Выбран() = 1 Тогда
						Если Метаданные.Справочник(мдРекв.Вид).Владелец.Идентификатор = "Фирмы" Тогда
							// если подчинен фирме, то фирма должна быть владельцем
						    Если Рекв.Владелец <> Конт.Фирма Тогда
						        Конт.УстановитьАтрибут(мдРекв.Идентификатор,0);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если Метаданные.Справочник(мдРекв.Вид).Реквизит("Фирма").Выбран() = 1 Тогда
					    // есть реквизит Фирма в этом справочнике
					    Если Рекв.Фирма <> Конт.Фирма Тогда
					        Конт.УстановитьАтрибут(мдРекв.Идентификатор,0);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли (мдРекв.Тип = "Документ") Тогда
					Рекв = Конт.ПолучитьАтрибут(мдРекв.Идентификатор);
					Если ПустоеЗначение(Рекв) = 1 Тогда
					    Продолжить; // реквизит не заполнен
					КонецЕсли;
				    Если Рекв.Фирма <> Конт.Фирма Тогда
				        Конт.УстановитьАтрибут(мдРекв.Идентификатор,0);
					КонецЕсли;                                         
				ИначеЕсли мдРекв.Идентификатор = "Основание" Тогда
					Рекв = Конт.ПолучитьАтрибут(мдРекв.Идентификатор);
					Если ПустоеЗначение(Рекв) = 1 Тогда
					    Продолжить; // реквизит не заполнен
					ИначеЕсли Вопрос("Очистить текстовое поле ""Основание""?","Да+Нет")="Да" Тогда
				        Конт.УстановитьАтрибут(мдРекв.Идентификатор,"");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; // по реквизитам
		КонецЕсли;
		
		глУстановитьНомер(Конт);

	КонецЕсли;
КонецПроцедуры //глУстФирма

// ===============================
// получаем ФИО сотрудника в краткой или полной форме
Функция глФИО(Сотр,Кратко=0) Экспорт
	С = Сотр;            
	Если ТипЗначенияСтр(Сотр) = "Справочник" Тогда
	    С = Сотр.Наименование;
	КонецЕсли;
	Если (Кратко = 1) И (Найти(С,".") = 0) Тогда
		ФамилияПоз = Найти(С," ");
		Фамилия = Лев(С,ФамилияПоз-1);
		С = Сред(С, СтрДлина(Фамилия)+2);
		Имя = Лев(С,Найти(С," ")-1);
		Отчество = Сред(С, СтрДлина(Имя)+2);
		Имя = Лев(Имя,1) + ". ";
		Отчество = Лев(Отчество,1) + ".";
		ФИО = Фамилия + " " + Имя + Отчество;
		Возврат ФИО
	КонецЕсли;		
	Возврат С
КонецФункции //глФИО

// ===============================
Процедура глВыбранЛи(Что,Стр,НомСтр = 0) Экспорт
	ВСтроке = ?(НомСтр=0,""," в строке "+НомСтр);
	Если ПустоеЗначение(Что)=1 Тогда
	    глКомментарий("Не заполнен реквизит "+Стр+ВСтроке+"!", 0,,"!");
	    глВсеВыбрано = 0;
	КонецЕсли;
КонецПроцедуры //глВыбранЛи

// ------------------- Языковая поддержка -------------------

// ===============================
Функция глУкр(НаимРус) Экспорт
	Перем НаимУкр;
	Спр = СоздатьОбъект("Справочник.Словарь");
	НаимУкр = ?(Спр.НайтиПоНаименованию(Строка(НаимРус),0,1) = 1, Спр.Перевод, НаимРус);
	Спр = 0;
	Возврат СокрЛП(НаимУкр);
КонецФункции //глУкр
                
// ===============================
// Возвращает язык вывода печ. формы
Функция глЯзык(Форма="") Экспорт
	Перем Язык;
	Язык = ?(Константа.ФормыНаУкраинском = Да, "у", "");
	Форма = СокрЛП(Форма) + Язык;
	Возврат Язык;
КонецФункции //глЯзык

// ===============================
Процедура глУстПропись(Вал,Язык = "") Экспорт
	Язык = Нрег(Язык);
	ФайлПрописиУкр = СокрЛП(?(ТипЗначенияСтр(Вал)="Справочник",Вал.ФайлПрописиУкр,"uahukr.spl"));
	ФайлПрописиРус = СокрЛП(?(ТипЗначенияСтр(Вал)="Справочник",Вал.ФайлПрописиРус,"uah.spl"));
	Если Язык = "" Тогда
	    // из константы
	    Если Константа.ФормыНаУкраинском = Нет Тогда
			Пропись(ФайлПрописиРус);
		Иначе
			Пропись(ФайлПрописиУкр);
		КонецЕсли;
	ИначеЕсли (Язык = "р") или (Язык = "русский") Тогда
		Пропись(СокрЛП(ФайлПрописиРус));
	ИначеЕсли (Язык = "у") или (Язык = "украинский") Тогда
		Пропись(СокрЛП(ФайлПрописиУкр));
	КонецЕсли;
КонецПроцедуры //глУстПропись
                    
// Формирует адрес в строку
// ===============================
Функция глАдресСтрокой(Знач Адр,Язык="Р") Экспорт
	сАдрСтр = "";
	// индекс
	Поз = Найти(Адр, ",");
	Индекс = Лев(Адр,Поз-1);
	Если ПустаяСтрока(Индекс) = 0 Тогда
	    сАдрСтр = сАдрСтр + Индекс + ", ";
	КонецЕсли;
	Адр = Сред(Адр,Поз+1);
	// регион
	Поз = Найти(Адр, ",");
	Регион = Лев(Адр,Поз-1);
	Если ПустаяСтрока(Регион) = 0 Тогда
	    сАдрСтр = сАдрСтр + Регион + ", ";
	КонецЕсли;
	Адр = Сред(Адр,Поз+1);
	// район
	Поз = Найти(Адр, ",");
	Район = Лев(Адр,Поз-1);
	Если ПустаяСтрока(Район) = 0 Тогда
	    сАдрСтр = сАдрСтр + Район + " р-н, ";
	КонецЕсли;
	Адр = Сред(Адр,Поз+1);
	// нас. пункт
	Поз = Найти(Адр, ",");
	НасПункт = Лев(Адр,Поз-1);
	Если ПустаяСтрока(НасПункт) = 0 Тогда
	    сАдрСтр = сАдрСтр + НасПункт + ", ";
	КонецЕсли;
	Адр = Сред(Адр,Поз+1);
	// улица
	Поз = Найти(Адр, ",");
	Улица = Лев(Адр,Поз-1);
	Если ПустаяСтрока(Улица) = 0 Тогда
	    сАдрСтр = сАдрСтр + Улица + ", ";
	КонецЕсли;
	Адр = Сред(Адр,Поз+1);
	// дом
	Поз = Найти(Адр, ",");
	Дом = Лев(Адр,Поз-1);
	Если ПустаяСтрока(Дом) = 0 Тогда
	    сАдрСтр = сАдрСтр + Дом + ", ";
	КонецЕсли;
	Адр = Сред(Адр,Поз+1);
	// корпус
	Поз = Найти(Адр, ",");
	Корпус = Лев(Адр,Поз-1);
	Если ПустаяСтрока(Корпус) = 0 Тогда
	    сАдрСтр = сАдрСтр + "корп. " + Корпус + ", ";
	КонецЕсли;
	Адр = Сред(Адр,Поз+1);
	// квартира
	Поз = Найти(Адр, ",");
	Квартира = Лев(Адр,Поз-1);
	Если ПустаяСтрока(Квартира) = 0 Тогда
	    сАдрСтр = сАдрСтр + "кв. " + Квартира;
	КонецЕсли;
	Адр = Сред(Адр,Поз+1);
	
	// особые отметки	
	ОсобыеОтметки = СокрЛП(Адр);
	Если ПустаяСтрока(ОсобыеОтметки) = 0 Тогда
	    сАдрСтр = сАдрСтр + " / " + ОсобыеОтметки;
	КонецЕсли;
	
	сАдрСтр = СокрЛП(сАдрСтр);
	Дл = СтрДлина(сАдрСтр);
	Если Сред(сАдрСтр,Дл,1) = "," Тогда
	    сАдрСтр = Сред(сАдрСтр,1,Дл-1);
	КонецЕсли;
	Возврат сАдрСтр;
КонецФункции //глАдресСтрокой   
              
// ===============================
// Возвращает табельный номер сотрудника без префикса фирмы
// Сотр - или сотрудник, или его код
Функция глТабельныйНомер(Сотр) Экспорт
Перем Код, ТабНом;
	Если ТипЗначенияСтр(Сотр) = "Справочник" Тогда
		Код = Сотр.Код;
	Иначе
		// строка или что-то другое, преобразуем все к строке
		Код = СокрЛП(Строка(Сотр));
	КонецЕсли;
	// отбросим префикс фирмы
	ТабНом = Сред(Код,Найти(Код,"-")+1);
    // преобразуем в число (уберутся лидирующие нули)
	Возврат Число(ТабНом);
КонецФункции

// ===============================
// Формирует номер документа без префикса фирмы. 
// Необходима для печати налоговых документов
Функция глНомерБезПрефикса(Номер) Экспорт
	
	Инд = Найти(Номер,"-");
	Если Инд > 0 Тогда
		Возврат Строка(Число(Сред(Номер,Инд+1)));
	КонецЕсли;
	
	Возврат Номер;
КонецФункции

// ------------------- Работа с периодическими реквизитами -------------------
// ===============================
// Редактирование истории значений периодических реквизитов
// Конт - текущий контекст формы
// Реквизиты - список реквизитов и их взаимосвязь для редактирования. если
//             передана пустая строка то редактируются все периодические реквизиты
//             данного справочника. реквизиты перечисляются через запятую.
// <Реквизиты> = <Реквизит>{,<Реквизит>}
// <Реквизит> = <ИдентификаторРеквизита> [<Ширина>][(<НастройкаКолонки>{,<НастройкаКолонки>})]
// <НастройкаКолонки> = <Счет>|<Владелец>|<Форма>|<ВидРедактирования>
// <ИдентификаторРеквизита> - Идентификатор реквизита который будет редактироваться в данной колонке
// <Ширина> - число, которое задает ширину колонки
// <Счет> = <НомерСубконто> <РеквизитСчета>
// <НомерСубконто> - число задающее номер субконто счета
// <РеквизитСчета> - идентификатор реквизита счета субконтом, которого является редактируемый реквизит
// <Владелец> - идентификатор реквизита владельца редактируемого реквизита
// <Форма> = ФОРМА(<ИдентификаторФормы>)
// <ИдентификаторФормы> - идентификатор формы которая будет вызываться для редактирования реквизита
// <ВидРедактирования> = Флажок | ПолеСоСписком(Строка{,Строка}) // только для реквизитов типа число
//             Пример:
//					"СчетЗатрат 10, Субконто1 20(1 СчетЗатрат, Форма(РедСубконтоСотрудника)), Субконто2 20(2 СчетЗатрат, Субконто1, Форма(РедСубконтоСотрудника)), Субконто3 20(3 СчетЗатрат, Субконто2, Форма(РедСубконтоСотрудника)), СтатьяОтчисленийНаСоцНужды 20(1 СчетЗатрат, Форма(РедСтатьяОтчисленийСотрудника))"
//             будет редактироваться 5 реквизитов, причем тип реквизита Субконто1 определяется 1 видом
//             субконто реквизита СчетЗатрат, для Субконто2 тип определяется 2 видом субконто, владелец задается
//             реквизитом Субконто1 и т.д. Ширина колонки Счет равна 10 символов, а остальных колонок 20 символов.
//			   форма редактирования для реквизита СчетЗатрат берется по умолчанию, для реквизитов Субконто форма РедСубконтоСотрудника,
//			   для реквизита СтатьяОтчисленийНаСоцНужды форма РедСтатьяОтчисленийСотрудника.
//             Пример:
//				     "ТипСотрудника 40(ПолеСоСписком(Основное место работы,Внешнее совместительство,Работа по договору подряда))"
//             редактируется один реквизит ТипСотрудника, ширина 40 символов. редактируется полем со списком, в котром 3 значения:
//             1 - Основное место работы
//			   2 - Внешнее совместительство
//             3 - Работа по договору подряда
// Заголовок - заголовок окна истории значений реквизитов
// ФормаВызова - вид формы, из которой вызвана процедура глРедактироватьИсториюЗначений
// ФормаВызова = 0 - вызов процедуры из формы элемента справочника
// ФормаВызова = 1 - вызов процедуры из формы списка справочника
// ФормаВызова = 2 - вызов процедуры из другой формы
// Просмотр - режим открытия формы
// Просмотр = 0 - кнопки редактирования доступны
// Просмотр = 1 - кнопки редактирования не доступны
Процедура глРедактироватьИсториюЗначений(Конт, Реквизиты = "", Заголовок = " ", Просмотр = 0, ФормаВызова = 0) Экспорт
	Перем Спр;

	Если ПустоеЗначение(Конт.ТекущийЭлемент()) = 1 Тогда
		Возврат;
	КонецЕсли;      
	Если ФормаВызова = 1 Тогда
		Спр = СоздатьОбъект("Справочник."+Конт.Вид());
		Спр.НайтиЭлемент(Конт.ТекущийЭлемент());

		//Попытаться заблокировать элемент справочника
		Если Спр.Блокировка(1) = 0 Тогда
			//Кто-то это уже сделал до нас
			глПоказатьПредупреждение("Элемент справочника заблокирован!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СЗ = СоздатьОбъект("СписокЗначений");
	СЗ.ДобавитьЗначение(Конт, "Контекст");
	СЗ.ДобавитьЗначение(Реквизиты, "Реквизиты");
	СЗ.ДобавитьЗначение(Заголовок, "Заголовок");
	Если Конт.Форма.ТолькоПросмотр() = 1 Тогда
		Просмотр = 1;
	КонецЕсли;
	СЗ.ДобавитьЗначение(Просмотр, "Просмотр");
	ОткрытьФормуМодально("Отчет.СписокПериодическихРеквизитов", СЗ);

	Если ФормаВызова = 1 Тогда //Разблокировать элемент справочника
		Спр.Блокировка(0);
	КонецЕсли;
КонецПроцедуры //глРедактироватьИсториюЗначений

// ===============================
Функция глЗаписьПериодическихРеквизитов(Конт, ДатаУ = '01.01.0001') Экспорт
	Если ДатаУ <> '01.01.0001'  Тогда
		Конт.ИспользоватьДату(ДатаУ);
	ИначеЕсли Конт.Выбран()=0 Тогда
		Конт.ИспользоватьДату(Константа.ДатаНачалаРаботы);
	КонецЕсли;
	Если ПустоеЗначение(Конт.СохранениеПериодическихРеквизитов(5)) = 1 Тогда
		Возврат 1;
	КонецЕсли;
	Параметр = Конт;
	ОткрытьФормуМодально("Обработка.ЗаписьПериодическихРеквизитов", Параметр);
	Возврат Параметр;
КонецФункции //глЗаписьПериодическихРеквизитов
                            
//====================================================================== //--- УМК Сандомирский В.Ю. (04.07.15)
Процедура ПроцедураОбработкиОжидания()
	ЗаголовокСистемы(" рабочая дата: " + РабочаяДата());	
КонецПроцедуры // ОбновлениеЗаказника

Процедура глИмпортДекларируемыхЦен(Конт, V7, ПоказатьПредупреждение = 0) Экспорт
	Конт.УдалитьСтроки();		
//	СпрТМЦВнеш = V7.CreateObject("Справочник.ТМЦ");
	Запрос = V7.NewObject("Запрос");
	СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
	СтНДС = 1 + Константа.БазНДС.Ставка.Получить(Конт.ДатаДок);
		
	Состояние("Импортирую цены");	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ном.umk_ПечататьВДекларацию КАК ПечататьВДекларацию,
	|	Ном.НаименованиеПолное,
	|	ДопР.ЕстьКодС,
	|	ЕСТЬNULL(ДопР.КодСинхронизации, """") КодС,
	|	ДопР.БлокироватьВыписку,
	|	ЦеныПрод.Цена КАК Цена_Прод,
	|	ЦеныПродВУП.Цена КАК Цена_ПродВУП
	|ИЗ
	|	Справочник.Номенклатура КАК Ном
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДок, ТипЦен = &НужныйТипЦен) КАК ЦеныПрод
	|		ПО Ном.Ссылка = ЦеныПрод.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДок, ТипЦен = &НужныйТипЦенУп) КАК ЦеныПродВУП
	|		ПО Ном.Ссылка = ЦеныПродВУП.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.umk_ДопРеквизитыНоменклатуры.СрезПоследних(&ДатаДок, ) КАК ДопР
	|		ПО Ном.Ссылка = ДопР.Номенклатура
	|ГДЕ
	|	ЕСТЬNULL(ДопР.КодСинхронизации, """") <> """"";
	
	Запрос.УстановитьПараметр("ДатаДок", Конт.ДатаДок);
	Запрос.УстановитьПараметр("НужныйТипЦен", V7.Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000006"));
	Запрос.УстановитьПараметр("НужныйТипЦенУп", V7.Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000005"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() = -1 Цикл
		СпрТМЦ.ВыбратьЭлементыПоРеквизиту("КодС", ВыборкаДетальныеЗаписи.КодС, 0, 0);
		Пока СпрТМЦ.ПолучитьЭлемент() = 1 Цикл
			Конт.НоваяСтрока();					
			Конт.ТМЦ 						= СпрТМЦ.ТекущийЭлемент();
			Конт.ЕстьКодС_Новый				= ?(ВыборкаДетальныеЗаписи.ЕстьКодС = -1, 1, 0); //--- сделал периодическим УМК Сандомирский В.Ю. (09.06.15)
			Конт.ЕстьКодС_Старый				= СпрТМЦ.ЕстьКодС.Получить(Конт.ДатаДок);
			Конт.ПечататьВДекларацию_Новый 	= ?(ВыборкаДетальныеЗаписи.ПечататьВДекларацию = -1, 1, 0);
			Конт.ПечататьВДекларацию_Старый 	= СпрТМЦ.ПечататьВДекларацию.Получить(Конт.ДатаДок);
			Конт.ЦенаСтарая					= СпрТМЦ.Цена_Прод.Получить(Конт.ДатаДок);
			Конт.ЦенаСтараяУп				= СпрТМЦ.Цена_ПродУп.Получить(Конт.ДатаДок);
			Конт.ЦенаНовая 					= Окр(ВыборкаДетальныеЗаписи.Цена_Прод * СтНДС, 2);
			Конт.ЦенаНоваяУп					= Окр(ВыборкаДетальныеЗаписи.Цена_ПродВУП * СтНДС, 2);
			Конт.БлокироватьВыписку_Старый	= СпрТМЦ.БлокироватьВыписку.Получить(Конт.ДатаДок);
			Конт.БлокироватьВыписку_Новый	= ВыборкаДетальныеЗаписи.БлокироватьВыписку;
			Конт.СтароеНаименованиеФ1	= СокрЛП(СпрТМЦ.НаименованиеФ1.Получить(Конт.ДатаДок));
			Конт.НовоеНаименованиеФ1 = СокрЛП(ВыборкаДетальныеЗаписи.НаименованиеПолное);
		КонецЦикла;		
	КонецЦикла;
	
	СписДобавленных = СоздатьОбъект("СписокЗначений");
	Конт.ВыгрузитьТабличнуюЧасть(СписДобавленных, "ТМЦ");
	СпрТМЦ.ВыбратьЭлементы(0);
	Пока СпрТМЦ.ПолучитьЭлемент() = 1 Цикл
		Если СпрТМЦ.ЭтоГруппа() = 0 Тогда
			Если СписДобавленных.НайтиЗначение(СпрТМЦ.ТекущийЭлемент()) = 0 Тогда
				Если СпрТМЦ.ЕстьКодС.Получить(Конт.ДатаДок) = 1 Тогда
					Конт.НоваяСтрока();					
					Конт.ТМЦ 						= СпрТМЦ.ТекущийЭлемент();
					Конт.ЕстьКодС_Новый				= 0;
					Конт.ЕстьКодС_Старый				= СпрТМЦ.ЕстьКодС.Получить(Конт.ДатаДок);
					Конт.ПечататьВДекларацию_Новый 	= 0;
					Конт.ПечататьВДекларацию_Старый 	= СпрТМЦ.ПечататьВДекларацию.Получить(Конт.ДатаДок);
					Конт.ЦенаСтарая					= СпрТМЦ.Цена_Прод.Получить(Конт.ДатаДок);
					Конт.ЦенаСтараяУп				= СпрТМЦ.Цена_ПродУп.Получить(Конт.ДатаДок);
					Конт.ЦенаНовая 					= 0;
					Конт.ЦенаНоваяУп				= 0;
					Конт.БлокироватьВыписку_Старый	= СпрТМЦ.БлокироватьВыписку.Получить(Конт.ДатаДок);
					Конт.БлокироватьВыписку_Новый	= Конт.БлокироватьВыписку_Старый;
					Конт.СтароеНаименованиеФ1	= СокрЛП(СпрТМЦ.НаименованиеФ1.Получить(Конт.ДатаДок));
					Конт.НовоеНаименованиеФ1 = Конт.СтароеНаименованиеФ1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ПоказатьПредупреждение = 1 Тогда
		глПоказатьПредупреждение("Импорт завершен",20);	
	Иначе
		ТЗ = СоздатьОбъект("ТаблицаЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(ТЗ);
		
		Инд = 1;
		Пока Инд <= ТЗ.КоличествоСтрок() Цикл
			ТЗ.ПолучитьСтрокуПоНомеру(Инд);
			Если (ТЗ.ЕстьКодС_Новый = ТЗ.ЕстьКодС_Старый)
			И (ТЗ.ПечататьВДекларацию_Новый = ТЗ.ПечататьВДекларацию_Старый)
			И (ТЗ.ЦенаСтарая = ТЗ.ЦенаНовая)
			И (ТЗ.ЦенаСтараяУп = ТЗ.ЦенаНоваяУп)
			И (ТЗ.БлокироватьВыписку_Старый = ТЗ.БлокироватьВыписку_Новый)
			И (ТЗ.СтароеНаименованиеФ1 = ТЗ.НовоеНаименованиеФ1) Тогда
				ТЗ.УдалитьСтроку(Инд);
			Иначе 
				Инд = Инд + 1;
			КонецЕсли
		КонецЦикла;
		
		Конт.ЗагрузитьТабличнуюЧасть(ТЗ);
	КонецЕсли;
КонецПроцедуры

Процедура глИмпортУК(Конт, V7) Экспорт
	Конт.УдалитьСтроки();		

	Запрос = V7.NewObject("Запрос");
	СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
	СтНДС = 1 + Константа.БазНДС.Ставка.Получить(Конт.ДатаДок);
		
	Состояние("Импортирую цены");	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Хранилище,
	|	ХранилищеДополнительнойИнформации.Ссылка,
	|	ХранилищеДополнительнойИнформации.Объект.Дата КАК ОбъектДата
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект ССЫЛКА Документ.umk_УдостоверениеКачества
	|	И (НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления)
	|	И ХранилищеДополнительнойИнформации.Объект.Проведен
	|	И ХранилищеДополнительнойИнформации.Объект.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)";
    //|
	//|УПОРЯДОЧИТЬ ПО
	//|	ОбъектДата УБЫВ";
	
	Запрос.УстановитьПараметр("Дата", Конт.ДатаДок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() = -1 Цикл
		Данные = Выборка.Хранилище.Получить();
		Попытка
			Данные.Записать(КаталогВременныхФайлов() + "\ТаблицаУК.mxl");
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Таб = V7.NewObject("ТабличныйДокумент");
		Таб.Прочитать(КаталогВременныхФайлов() + "\ТаблицаУК.mxl");
		Для Инд = 1 По Таб.ВысотаТаблицы Цикл
			Расш = СокрЛП(Таб.Область(Инд, 2).Расшифровка); 
			Если Расш <> "" Тогда
				СпрТМЦ.ВыбратьЭлементыПоРеквизиту("КодС", Расш, 0, 0);
				Пока СпрТМЦ.ПолучитьЭлемент() = 1 Цикл
					Конт.НоваяСтрока();					
					Конт.ТМЦ = СпрТМЦ.ТекущийЭлемент();
					Конт.ДатаУК = Дата(Таб.Область(Инд, 9).Текст);
				КонецЦикла;		
			КонецЕсли;
		КонецЦикла;
		
		V7.УдалитьФайлы(КаталогВременныхФайлов() + "\ТаблицаУК.mxl");		
	КонецЦикла;
КонецПроцедуры 


//======================================================================
Функция ПодключитьОЛЕ(фПодключились)
	V7 = СоздатьОбъект("V83.Application");
	Попытка
		V7.Connect(Константа.ПутьФ1_8);
		фПодключились = 1;
		Возврат V7;
	Исключение
		Возврат "";
	КонецПопытки;
КонецФункции //     

//+umk
Функция глПодключитьComV8(фПодключено, ПутьКБазе) Экспорт 
	ComConnector = СоздатьОбъект("V83.ComConnector");
	Попытка
		V8 = ComConnector.Connect(ПутьКБазе);
	    фПодключено = 1;
	    Возврат V8;
	Исключение
		Возврат "";
	КонецПопытки;
КонецФункции 
//-umk

Процедура глИмпортироватьДокументыУКПриСтарте(V7) Экспорт
	Выборка = V7.Документы.umk_УдостоверениеКачества.Выбрать(ТекущаяДата());
	Пока Выборка.Следующий() = -1 Цикл
		Если Выборка.Проведен = -1 Тогда
			ДокУК = СоздатьОбъект("Документ.УдостоверениеКачества");
			ДокУК.УстановитьФильтр(1, 0);
			ДокУК.ВыбратьДокументы(Выборка.Дата, Выборка.Дата);
			ДокУК.ПолучитьДокумент();
			Если ДокУК.Выбран() = 0 Тогда
				ДокУК.Новый();
				ДокУК.Автор = глПользователь;
				ДокУК.Фирма = Константа.БазФирма;
				ДокУК.ДатаДок = Выборка.Дата;
				глУстановитьНомер(ДокУК);
			КонецЕсли;
			
			глИмпортУК(ДокУК, V7);
			ДокУК.Примечание = "Создан автоматически";
			ДокУК.Записать();
			ДокУК.Провести();
			Сообщить(ДокУК);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//======================================================================
Процедура СинхронизироватьДекларируемыеЦены() Экспорт
	
	фПодключились = 0;
	
	НуженИмпортДЦ = 1; НуженИмортУК = 0;
	ДокУДЦ = СоздатьОбъект("Документ.УМК_УстановкаДекларируемыхЦенТМЦ");
	ДокУДЦ.УстановитьФильтр(1,0);
	ДокУДЦ.ВыбратьДокументы(ТекущаяДата(), ТекущаяДата());
	Если ДокУДЦ.ПолучитьДокумент() = 1 Тогда
		НуженИмпортДЦ = 0;
	КонецЕсли;
	
	Если НуженИмпортДЦ = 1 Тогда
		Сообщить("Начата процедура импорта декларируемых цен. Ожидайте");
		//V7 = ПодключитьОЛЕ(фПодключились);//17.02.21 убрал Малахов
		V7 = глПодключитьComV8(фПодключились,Константа.ПутьФ1_8);
		ДокУДЦ.Новый();
		ДокУДЦ.Автор = глПользователь;
		ДокУДЦ.Фирма = Константа.БазФирма;
		ДокУДЦ.ДатаДок = ТекущаяДата();
		глУстановитьНомер(ДокУДЦ);
		ДокУДЦ.Примечание = "Создан автоматически";
		глИмпортДекларируемыхЦен(ДокУДЦ, V7, 0);
		ДокУДЦ.Записать();
		ДокУДЦ.Провести();
	КонецЕсли;
	
	Если Константа.ДатаПоследнегоИмпортаУК < ТекущаяДата() Тогда			
		Ч = 0; М = 0; С = 0;
		ТекущееВремя(Ч,М,С);
		ТекВремя = Ч * 3600 + М * 60 + С;
		СпрВЗ = СоздатьОбъект("Справочник.УМК_ВремяЗаписиДокуметов");
		СпрВЗ.ВыбратьЭлементы();
		Пока СпрВЗ.ПолучитьЭлемент() = 1 Цикл
			Если (СпрВЗ.ВидДокумента = "Удостоверение качества") И (СпрВЗ.фДействует.Получить(ТекущаяДата()) = 1) И (СпрВЗ.ПометкаУдаления() = 0) Тогда
				Если ТекВремя > Число(СпрВЗ.Время_1.Получить(ТекущаяДата())) * 3600 Тогда
					Сообщить("Начата процедура импорта удостоверений качества. Ожидайте");
					НачатьТранзакцию();
					Константа.ДатаПоследнегоИмпортаУК = ТекущаяДата();
					
					Если фПодключились = 0 Тогда
						//V7 = ПодключитьОЛЕ(фПодключились);
						V7 = глПодключитьComV8(фПодключились,Константа.ПутьФ1_8);
					КонецЕсли;
					
					глИмпортироватьДокументыУКПриСтарте(V7);
					ЗафиксироватьТранзакцию();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;
	
	Если фПодключились = 1 Тогда
		//V7.ЗавершитьРаботуСистемы();//17.02.21 убрал Малахов
		глПоказатьПредупреждение("Формирование документа завершено",5);
	КонецЕсли;		
	
КонецПроцедуры // гл


// ------------------- Предопределенные процедуры -------------------          
// ===============================
Процедура ПриНачалеРаботыСистемы()  Экспорт
Перем ЭтоПервыйЗапуск;
	//--- УМК Сандомирский В.Ю. (22.08.14) внешние компоненты теперь тут
	
    ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+ "Компоненты\" +"1cpp.dll");
	ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+ "Компоненты\" +"1sqlite.dll");
	ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+ "Компоненты\" + "formex.dll");//--- УМК Сандомирский В.Ю, (15.10.14) Вылетает 1С ка без сообщений об ошибках (решил закоментить все неиспользуемые библиотеки)		
//	Сервис = СоздатьОбъект("Сервис");
	//Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+ "Компоненты\" + "VkLoader.dll") = 1 Тогда 
		
		//--- УМК Сандомирский В.Ю, (15.10.14) Вылетает 1С ка без сообщений об ошибках (решил закоментить все неиспользуемые библиотеки)
	   
		//ЗагрузчикВК=СоздатьОбъект("ЗагрузчикВК");
	    //КаталогДЛЛ=КаталогПрограммы()+ "Компоненты\";
	    //ИмяБиблиотеки="1CPP.dll";
	    //Если ФС.СуществуетФайл(КаталогДЛЛ+ИмяБиблиотеки)=1 Тогда
	    //    Результат = ЗагрузчикВК.ЗагрузитьВК(КаталогДЛЛ+ИмяБиблиотеки, "Addin.1C++=fde5ae76-00b3-4bdb-921b-d5937997b1b7"); //КаталогДЛЛ+
	    //    Если Результат.КодОшибки<>0 Тогда
	    //        Сообщить("Описание ошибки ("+ИмяБиблиотеки+"): "+Результат.КодОшибки+"
	    //        |"+Результат.Результат,"!");
	    //    КонецЕсли;
		//КонецЕсли;    
		
		//ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+ "Компоненты\" + "formex.dll");
		
		//Если НазваниеНабораПрав() = "Администратор" Тогда
		//	ЗагрузитьВнешнююКомпоненту("qryConsole.dll");
		//	Консоль = СоздатьОбъект("AddIn.qryConsole");
		//КонецЕсли;

		//ИмяБиблиотеки="formex.dll";
	    //Если ФС.СуществуетФайл(КаталогДЛЛ+ИмяБиблиотеки)=1 Тогда
	    //    Результат = ЗагрузчикВК.ЗагрузитьВК(КаталогДЛЛ+ИмяБиблиотеки, "AddIn.FormEx=5142b2ce-c533-473f-8bb4-4385c47732c5"); // ("formex.dll", "AddIn.FormEx=5142b2ce-c533-473f-8bb4-4385c47732c5")
	    //    Если Результат.КодОшибки<>0 Тогда
	    //        Сообщить("Описание ошибки ("+ИмяБиблиотеки+"): "+Результат.КодОшибки+"
	    //        |"+Результат.Результат,"!");
	    //    КонецЕсли;
	    //КонецЕсли;    
	     
	//Иначе
	
	    //Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+ "Компоненты\" + "1CPP.dll") <> 1 Тогда
	    //    Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+ "Компоненты\" + "1CPP.dll") <> 1 Тогда
	    //        Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+ "Компоненты\" + "1CPP.dll") <> 1 Тогда
	    //            глПоказатьПредупреждение("Компонента 1CPP.dll не найдена!");
	    //        КонецЕсли;    
	    //    КонецЕсли;
		//КонецЕсли; 
		
	//	Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+ "Компоненты\" + "formex.dll") <> 1 Тогда
	//        Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+ "Компоненты\" + "formex.dll") <> 1 Тогда
	//            Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+ "Компоненты\" + "formex.dll") <> 1 Тогда
	//                глПоказатьПредупреждение("Компонента formex.dll не найдена!");
	//            КонецЕсли;    
	//        КонецЕсли;
	//	КонецЕсли; 
	//		
	//КонецЕсли;

	//... УМК Сандомирский В.Ю. (22.08.14) внешние компоненты теперь тут
	
	// определение пользователя
	Спр = СоздатьОбъект("Справочник.Пользователи");
	ИмяПольз = ИмяПользователя();                       
	Если Спр.НайтиПоКоду(ИмяПольз, 0) = 0 Тогда
	    // пользователя нет в справочнике пользователей, добавим его туда
		Спр.Новый();
		Спр.Код = ИмяПольз;
		Спр.Наименование = ?(ИмяПольз = "", "<Автор не определен>", ИмяПольз);
		Спр.Записать();
	КонецЕсли;
	глПользователь = Спр.ТекущийЭлемент();
	
	//Подключение торгового оборудования
	глСписокФискальныхРегистраторов = СоздатьОбъект("СписокЗначений");	
	глСписокЭККА_OFFLine = СоздатьОбъект("СписокЗначений");  	
	глСписокЭККА_Автономно = СоздатьОбъект("СписокЗначений");	
	глПереченьДрайверов = СоздатьОбъект("СписокЗначений");	                         
	            
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("Подключить","Парам");
	глРасшифровка = Расшифровка;
	
	//ОткрытьФорму("Обработка.ПодключениеТорговогоОборудования"+"#"); //--- УМК Сандомирский В.Ю, Закоментил 30.05.14
	
	// авто старт обработки "Первый запуск"
	// значения константы ПоказыватьПомощникПриСтарте :
	// 0 - первый запуск конфигурации
	// 1 - показывать мастер при старте
	// 2 - не показывать мастер при старте
	Если Константа.ПоказыватьПомощникПриСтарте = 0 Тогда
		ЭтоПервыйЗапуск = 1;		
		ОткрытьФормуМодально("Обработка.ПервыйЗапуск",1);
		ОткрытьФормуМодально("Обработка.ПереносКорректныхПроводок", 1);
		Константа.ПоказыватьПомощникПриСтарте = 1;
	КонецЕсли;
	
	// если текущий релиз информационной базы меньше релиза конфигурации,
	// тогда выполним обновление
	стрРелизКонфигурации = Лев(Метаданные.Константа("НомерРелиза").Комментарий,8);
	РелизКонфигурации = Число(СтрЗаменить(стрРелизКонфигурации, ".",""));
	стрТекущийРелиз = Константа.НомерРелиза;
	ТекущийРелиз = Число(СтрЗаменить(стрТекущийРелиз, ".",""));
	
	
	//Если ТекущийРелиз < РелизКонфигурации Тогда   //--- УМК Сандомирский В.Ю. (01.09.2014) (обновление релиза не требуется)
	//	// вызываем обновление релиза  
	//	ОткрытьФормуМодально("Обработка.ОбновлениеРелиза");
	//КонецЕсли;

	// авто старт помощника настройки конфигурации
	// значения константы ПоказыватьПомощникПриСтарте :
	// 0 - первый запуск конфигурации
	// 1 - показывать помощник при старте
	// 2 - не показывать помощник при старте
	Если Константа.ПоказыватьПомощникПриСтарте <= 1 Тогда     
		ОткрытьФормуМодально("Обработка.НастройкаПараметровУчета");
	КонецЕсли;
	
	// установка глобальных переменных, которые хранят ссылки на объекты метаданных
	
	// ===============================
	// Стандартные валюты
	Гривня = Константа.БазоваяВалюта; 
	
	// ===============================
	// стандартные значения ставок НДС
	Спр = СоздатьОбъект("Справочник.ШкалаСтавок");
	Если Спр.НайтиПоКоду("НДС20") = 1 Тогда
		ОсновнаяСтавкаНДС = Спр.ТекущийЭлемент();
	Иначе
		глКомментарий("В справочнике ""Шкала ставок налогов и отчислений"" не указана ставка НДС 20%",1,,"!!");
	КонецЕсли;
	Если Спр.НайтиПоКоду("НДС0") = 1 Тогда
		ЛьготнаяСтавкаНДС  = Спр.ТекущийЭлемент();
	Иначе
		глКомментарий("В справочнике ""Шкала ставок налогов и отчислений"" не указана ставка НДС 0%",1,,"!!");
	КонецЕсли;
	Если Спр.НайтиПоКоду("БезНДС") = 1 Тогда
		безНДС =Спр.ТекущийЭлемент();
	Иначе
		глКомментарий("В справочнике ""Шкала ставок налогов и отчислений"" не указана ставка НДС - без НДС",1,,"!!");
	КонецЕсли;
	Если Спр.НайтиПоКоду("НеНДС") = 1 Тогда
		неНДС =Спр.ТекущийЭлемент();
	Иначе
		глКомментарий("В справочнике ""Шкала ставок налогов и отчислений"" не указана ставка НДС - не облагается НДС",1,,"!!");
	КонецЕсли;
	Спр = 0;       
	
	ПервыйЗапускНаРабочемМесте = глВосстановитьЗначение(,"ПервыйЗапускНаРабочемМесте");
	Если ПустоеЗначение(ПервыйЗапускНаРабочемМесте) = 1 Тогда
		СохранитьЗначение("ПоказПутеводителяПриЗапуске", 1);	
		СохранитьЗначение("ПервыйЗапускНаРабочемМесте", 1);	
	КонецЕсли;

	//Если глВосстановитьЗначение(,"ПоказПутеводителяПриЗапуске") = 1 Тогда //--- УМК Сандомирский В.Ю. (01.09.2014)
        //ОткрытьФорму("Обработка.Путеводитель");
	//КонецЕсли;
	
	// проверить бух. итоги
	Если РабочаяДата() > КонецРассчитанногоПериодаБИ() Тогда
		глКомментарий("На текущую дату бухгалтерские итоги не рассчитаны! "+
		               "Это может привести к некоректной работе системы."+РазделительСтрок+
					   "Установите расчет бухгалтерских итогов в "+
					   """Операции - Управление бухгалтерскими итогами"".",1,,"!!");
	КонецЕсли;
	// Проверить ТА
	Если ЭтоПервыйЗапуск = 0 Тогда
		// не первый запуск
		//Автоматическое открытие периода
		ДатаТА=ПолучитьДатуТА();
		Если (РабочаяДата()>ДатаТА)И
				((ДатаМесяц(ДатаТА)<>ДатаМесяц(РабочаяДата()))ИЛИ(ДатаГод(ДатаТА)<>ДатаГод(РабочаяДата()))) Тогда
			Если МонопольныйРежим()=0 Тогда
				Ответ=Вопрос("Не открыт период!"+РазделительСтрок+
					  "Для открытия периода запустите программу в монопольном режиме!"+РазделительСтрок+
				      "Завершить работу программы?","Да+Нет");
				Если Ответ="Да" Тогда
					СтатусВозврата(0);
					Возврат;
				КонецЕсли;	   
			Иначе	// монопольный режим
				Ответ=Вопрос("Не открыт период!"+РазделительСтрок+
				       "Выполнить открытие периода?","Да+Нет");
				Если Ответ="Да" Тогда
					УстановитьТАНа(РабочаяДата());
				КонецЕсли;	   
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
    ЗаголовокСистемы(" рабочая дата: " + РабочаяДата());
    ОбработкаОжидания("ПроцедураОбработкиОжидания",600);
	
	Если (глПользователь <> Константа.ПользовательОбменаУНФ) И (Константа.ИмортироватьДЦ = Да) Тогда
		СинхронизироватьДекларируемыеЦены();
	КонецЕсли;
	
	глСписокПП = глПолучитьТМЦПоСпискуКодов(СокрЛП(Константа.КодыПП));
	
	//глЗаполнитьСписокТоваров(глПользователь.ГруппаДоступаПродукции, глГруппыДоступаПродукции,,, глПользователь.НакладыватьФильтрыПриОткрытии);
	//глЗаполнитьСписокТоваров(глПользователь.ГруппаДоступаКонтрагенты, глГруппыДоступаКонтрагенты, , "Контрагенты", глПользователь.НакладыватьФильтрыПриОткрытии);
	глЗаполнитьСписокТоваров(глПользователь.ГруппаДоступаПродукции, глГруппыДоступаПродукции,,, 0);
	глЗаполнитьСписокТоваров(глПользователь.ГруппаДоступаКонтрагенты, глГруппыДоступаКонтрагенты, , "Контрагенты", 0);	
	//ФС.УстТекКаталог(КаталогПользователя());
	//ОткрытьФорму("Отчет", 1, "D:\ТемпОбработка.ert");
	
	Если глПользователь.ЗапросОткрытияФайлаПриСтарте = 1 Тогда
		Фл = "";
		ФС.ВыбратьФайл(0, Фл, КаталогПользователя(), "Тестовый выбор файла", "Текстовые файлы (*.txt) | *.*", "*.txt");
	КонецЕсли;
	
	Если (ПустоеЗначение(Константа.ДатаНачалаУчетаВыпускаПродукцииПоФакту) = 0) И (РабочаяДата() > Константа.ДатаНачалаУчетаВыпускаПродукцииПоФакту) Тогда 
		глПрефиксПлановыйВыпуск = "Плановый"        
	Иначе
		глПрефиксПлановыйВыпуск = "";
	КонецЕсли;

КонецПроцедуры //ПриНачалеРаботыСистемы

// ===============================
Процедура ПриЗавершенииРаботыСистемы()
	Если Вопрос("Завершить работу?", "Да+Нет") = "Нет" Тогда
	    СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("Отключить","Парам");
	глРасшифровка = Расшифровка;   
	//ОткрытьФорму("Обработка.ПодключениеТорговогоОборудования#");
КонецПроцедуры //ПриЗавершенииРаботыСистемы

// ======================================
Процедура ПриУдаленииДокумента(УдаляемыйДок,Режим)	
	Если глСвертка = "Истина" Тогда //--- УМК Сандомирский В.Ю. (13.03.15) в время свертки ниче не делаем , прсто помечаем
		Возврат;
	КонецЕсли;
	
	Если УдаляемыйДок.Вид() = "ПланПродаж" Тогда
		глУстановитьЗначениеКонстантыОПР(УдаляемыйДок);
	КонецЕсли;
	
	Если УдаляемыйДок.Вид() = "РасходныйКассовый" Тогда //--- УМК Сандомирский В.Ю. (19.09.14) уаляем связанный документ
		Если ПустоеЗначение(УдаляемыйДок.ДооценкаПартии) <> 1 Тогда
			ДокДооценкаПартии = СоздатьОбъект("Документ.УМК_ДооценкаПартии");
			ДокДооценкаПартии.НайтиДокумент(УдаляемыйДок.ДооценкаПартии);
			ДокДооценкаПартии.Удалить(0);
		КонецЕсли;		
	КонецЕсли;	

	Если УдаляемыйДок.Вид() = "УМК_ШаблонСхемЦенообразования" Тогда //--- УМК Сандомирский В.Ю. (05.09.14) можно удалять 
		Возврат;		    
	КонецЕсли;
	
	Если Режим = 1 Тогда
		// непосредственное удаление 
		Возврат;
	КонецЕсли;
	
	Если УдаляемыйДок.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
		Если УдаляемыйДок.Вид() <> "СхемаРасчетаЗП" Тогда
		    СтатусВозврата(0);
			глПоказатьПредупреждение("Запрещено удалять документы (операции),"+РазделительСтрок+"введенные по "+Формат(Константа.ДатаЗапретаРедактирования,"ДДДММММГГГГ")+" !");
			Возврат;		    
		КонецЕсли;
	КонецЕсли;
	Если УдаляемыйДок.Вид() = "ПриходныйКассовый" Тогда
		Если (НазваниеНабораПрав() = "Заказ") Тогда
			Если (УдаляемыйДок.РСчет.ДоступЗаказ = 0) Тогда
				глПоказатьПредупреждение("Вы не имеете права удалять чужие кассовые ордера", 20);
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;	
			Если УдаляемыйДок.ДатаДок <> ТекущаяДата() Тогда
				глПоказатьПредупреждение("Вы не можете удалять ордера прошлых дат", 20);
				СтатусВозврата(0);
				Возврат;			    
			КонецЕсли;
		КонецЕсли;	    
		
		Если ((НазваниеНабораПрав() = "ПроизводствоКасса") ИЛИ (НазваниеНабораПрав() = "ПроизводствоСбыт")) Тогда //--- УМК Сандомирский В.Ю. (24.07.14) доступ к кассе "ПроизводствоКасса"
			Если (УдаляемыйДок.РСчет.ДоступПроизводствоКасса = 0) Тогда
				глПоказатьПредупреждение("Вы не имеете права удалять чужие кассовые ордера", 20);
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;	
			Если УдаляемыйДок.ДатаДок <> ТекущаяДата() Тогда
				глПоказатьПредупреждение("Вы не можете удалять ордера прошлых дат", 20);
				СтатусВозврата(0);
				Возврат;			    
			КонецЕсли;
		КонецЕсли;	    	
		
		
	ИначеЕсли (УдаляемыйДок.Вид() = "Перемещение") ИЛИ (УдаляемыйДок.Вид() = "ВыпускПродукции") Тогда
		Если (УдаляемыйДок.Вид() = "Перемещение") Тогда
			Если (НазваниеНабораПрав() = "Заказ") Тогда
				Если (УдаляемыйДок.ВидТМЦ = 2) или ((УдаляемыйДок.МестоХранения.ДляГП = 0) и (УдаляемыйДок.НовоеМестоХранения.ДляГП = 0)) Тогда
					Сообщить("Вам запрещено Удалять перемешения, в которых ни один из складов не является складом готовой продукции");
			        СтатусВозврата(0);
					Возврат;
				КонецЕсли;
			ИначеЕсли НазваниеНабораПрав() = "ВесовщикСыр" Тогда
				Если (УдаляемыйДок.МестоХранения <> глПользователь.МестоХранения) И (УдаляемыйДок.НовоеМестоХранения <> глПользователь.МестоХранения) Тогда
					Сообщить("Вам запрещено удалять перемещения на / с чужие склады");
					СтатусВозврата(0);
					Возврат;
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли;
		Док = СоздатьОбъект("Документ");
		Док.ВыбратьПодчиненныеДокументы(,,УдаляемыйДок);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Вид() = "СписаниеТМЦ" Тогда
				Если УдаляемыйДок.ПометкаУдаления() = 1 Тогда
//				    Док.СнятьПометкуУдаления();
				Иначе
					Док.Удалить(0);
				КонецЕсли;			    
			КонецЕсли;
		КонецЦикла;		
	ИначеЕсли (УдаляемыйДок.Вид() = "Заказ") Тогда
		Док = СоздатьОбъект("Документ");
		Док.ВыбратьПодчиненныеДокументы(,,УдаляемыйДок);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если УдаляемыйДок.ПометкаУдаления() = 1 Тогда
			    Док.СнятьПометкуУдаления();
			Иначе
				Док.Удалить(0);
			КонецЕсли;
		КонецЦикла;
		Если УдаляемыйДок.ПометкаУдаления() = 1 Тогда
			Сообщить("После отмены удаления заказа подчинённые документы нужно перепровести вручную!!");
		КонецЕсли;
	ИначеЕсли (УдаляемыйДок.Вид() = "СписаниеТМЦ") и (НазваниеНабораПрав() = "Заказ") Тогда
		Если (УдаляемыйДок.МестоХранения.ДляГП = 0) Тогда
			Сообщить("Вам запрещено Удалять списания, в которых склад не является складом готовой продукции");
	        СтатусВозврата(0);
		КонецЕсли;
	ИначеЕсли (УдаляемыйДок.Вид() = "РасходнаяНакладная") и (НазваниеНабораПрав() = "Заказ") Тогда
		Если (УдаляемыйДок.ДатаДок < ТекущаяДата()) Тогда
			Сообщить("Вам разрешено удалять только РН, введенные текущей датой");
	        СтатусВозврата(0);
		Иначе
			СтатусВозврата(0);
			НачатьТранзакцию();
			УдаляемыйДок.ВыбратьСтроки();
			Пока УдаляемыйДок.ПолучитьСтроку() = 1 Цикл
				Если УдаляемыйДок.СоздатьПеремещение = Да Тогда
					Док = СоздатьОбъект("Документ");
					Док.ВыбратьПодчиненныеДокументы(,, УдаляемыйДок);
					Пока Док.ПолучитьДокумент() = 1 Цикл
						Если (Док.Вид() = "Перемещение") И (Док.Проведен() = 1) Тогда
							Док.Удалить(0);
						КонецЕсли;
					КонецЦикла;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			ЗафиксироватьТранзакцию();
			СтатусВозврата(1);
		КонецЕсли;
	КонецЕсли;	
	
	Док = 0;
КонецПроцедуры //ПриУдаленииДокумента

//======================================================================
Функция глПроверитьВозможностьУдаленияРВУ(УдалЭлем) Экспорт
	Спр = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
	Спр1 = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
	Спр1.НайтиЭлемент(УдалЭлем);
	Спр.ИспользоватьВладельца(УдалЭлем.Владелец);
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если (Спр.ПометкаУдаления() = 0) И (Спр.КодPLU = УдалЭлем.КодPLU) И (Спр.ТекущийЭлемент() <> Спр1.ТекущийЭлемент()) Тогда
			глПоказатьПредупреждение("Такой код упаковки же используется в: " + Строка(Спр.ВидУпаковки));
			Возврат 0;
		КонецЕсли;
	КонецЦикла;

	Возврат 1;	
КонецФункции

//======================================================================
Процедура ПриУдаленииЭлемента(УдалЭлем, Режим)
	Если УдалЭлем.Вид() = "УМК_РазрешенныеВидыУпаковкиТМЦ" Тогда
		Если УдалЭлем.ПометкаУдаления() = 0 Тогда
			Если УдалЭлем.Владелец.ВидУпаковкиПоУмолчанию = УдалЭлем.ВидУпаковки Тогда
				глПоказатьПредупреждение("Этот вид упаковки задан как вид упаковки по умолчанию для продукции. Не забудьте заменить вид упаковки в продукции");
			КонецЕсли;
		ИначеЕсли (УдалЭлем.ПометкаУдаления() = 1) Тогда
			Если (УдалЭлем.КодPLU <> 0) Тогда
				СтатусВозврата(глПроверитьВозможностьУдаленияРВУ(УдалЭлем));
			Иначе
				глПоказатьПредупреждение("Не забудьте присвоить новый код в весах");
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	Если УдалЭлем.Вид() = "КодыНоменклатурыКонтрагентов" Тогда
		Если УдалЭлем.ПометкаУдаления() = 1 Тогда // Снисаем пометку
			Статус = глКодКонтрагентаУникален(УдалЭлем.ТекущийЭлемент(), УдалЭлем.Контрагент, УдалЭлем.Номенклатура, УдалЭлем.КодКонтрагента, УдалЭлем.Выбран());
			Если Статус = 0 Тогда
				Сообщить("Значения для ключа ""Контрагент-Номенклатура"" не уникалено. Пометка удаления не снята.","!!");
				СтатусВозврата(Статус);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Если УдалЭлем.Вид() = "УМК_РазрешенныеВидыУпаковкиТМЦ" Тогда
	//	Если УдалЭлем.ПометкаУдаления() = 0 Тогда
	//		Спр = СоздатьОбъект("Справочник.УМК_НормыСписанияМатериаловУпаковок");
	//		Спр.ИспользоватьВладельца(УдалЭлем);
	//		Спр.ВыбратьЭлементы();
	//		Пока Спр.ПолучитьЭлемент() = 1 Цикл
	//			Спр.СнятьПометкуУдаления();
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры // 

// ======================================
Процедура ПриОтменеПроведенияДокумента(Док)
	Если Док.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
	    СтатусВозврата(0);
		глПоказатьПредупреждение("Запрещено удалять проведение документов (операций),"+РазделительСтрок+"введенных по "+Формат(Константа.ДатаЗапретаРедактирования,"ДДДММММГГГГ")+" !");
		Возврат;
	КонецЕсли;
	
	Если Док.Вид() = "ПланПродаж" Тогда
		глУстановитьЗначениеКонстантыОПР(док);
	КонецЕсли;
	
КонецПроцедуры

// ===============================
Процедура глОбработкаЯчейкиТаблицы(Расшифровка, СтандартнаяОбработка, Таблица, Адрес) Экспорт
	Перем Отчет, Конт;
	
	СсылкаИнвентаризация = "";
	Если ТипЗначенияСтр(Расшифровка) = "СписокЗначений" Тогда
		Если ПустоеЗначение(Расшифровка.Получить("Формирование Инвентаризация")) = 0 Тогда
			СсылкаИнвентаризация = Расшифровка.Получить("СсылкаИнвентаризация");
			Расшифровка = "Формирование Инвентаризация"; 
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗначенияСтр(Расшифровка) <> "СписокЗначений" Тогда
		СтандартнаяОбработка = 1;
		Если Расшифровка = "Нужно ввести кво" Тогда		    
			//--- найдем "Цэ" в адресе
			ПозицияЦэ = Найти(Адрес,"C");
			ТекТМЦ = Таблица.Область(Лев(Адрес,ПозицияЦэ)+ "2").Расшифровка();
			Если ТипЗначенияСтр(ТекТМЦ) = "СписокЗначений" Тогда
				Знч  = ""; Поз = ""; Пред = "";
				Если ТекТМЦ.ВыбратьЗначение(Знч, "Выберите ТМЦ для заказа ", Поз, , 0) = 1 Тогда			
					Таблица.Область(Лев(Адрес,ПозицияЦэ)+ "3").Расшифровка(ТекТМЦ.ПолучитьЗначение(Поз, Пред));	
				КонецЕсли;
			Иначе
				Таблица.Область(Лев(Адрес,ПозицияЦэ)+ "3").Расшифровка(ТекТМЦ);			
			КонецЕсли;
				
			Зн = Таблица.Область(Адрес).Текст;
			Если ВвестиЧисло(Зн, "Введите количество", 15, 3) = 1 Тогда
				Таблица.Область(Адрес).Текст = Зн;
			КонецЕсли;
			СтандартнаяОбработка = 0;
		ИначеЕсли Расшифровка = "Нужно ввести кво вак" Тогда
			СтандартнаяОбработка = 0;
			
			Зн = Таблица.Область(Адрес).Текст;
			Если Зн <> " " Тогда
				Кол = Найти(Адрес, "C");
				Стр = Сред(Адрес, 2, Кол-2);
				Таблица.Область(Число(Стр), 1).ЦветФона(255, 255, 0);
				Таблица.Показать();
				
				Если ВвестиЧисло(Зн, "Введите количество", 15, 3) = 1 Тогда
					Таблица.Область(Адрес).Текст = Зн;
				КонецЕсли;
				
				Таблица.Область(Число(Стр), 1).ЦветФона(255, 255, 255);
				Таблица.Показать();
			КонецЕсли;
			Возврат;			
		ИначеЕсли (Расшифровка = "Формирование заказа") ИЛИ (Расшифровка = "Формирование заказа П") Тогда
			КФормы = "";
			ТЗТМЦ = СоздатьОбъект("ТаблицаЗначений");
			ТЗТМЦ.НоваяКолонка("ТМЦ", "Справочник.ТМЦ");
			ТЗТМЦ.НоваяКолонка("Кво", "Число");
			Для Инд = 4 По Таблица.ВысотаТаблицы() - 0 Цикл
				Зн = Таблица.Область(Инд, 4).Текст;
				Если Число(Зн) <> 0 Тогда
					ТЗТМЦ.НоваяСтрока();
					ТЗТМЦ.ТМЦ = Таблица.Область(Инд, 3).Расшифровка();	
					ТЗТМЦ.Кво = Зн;
				КонецЕсли;
			КонецЦикла;
			
			ОткрытьФорму("Документ.ЗаказПоставщику" + ?(Расшифровка = "Формирование заказа П", "П",""), ТЗТМЦ);
			СтандартнаяОбработка = 0;
			
		ИначеЕсли (Расшифровка = "Формирование Перемещение") ИЛИ (Расшифровка = "Формирование Инвентаризация") Тогда
			КФормы = "";
			ТЗТМЦ = СоздатьОбъект("ТаблицаЗначений");
			ТЗТМЦ.НоваяКолонка("ТМЦ", "Справочник.ТМЦ");
			ТЗТМЦ.НоваяКолонка("Кво", "Число");
			КолТМЦ = ?(Расшифровка = "Формирование Перемещение", 3, 2);
			Для Инд = 5 По Таблица.ВысотаТаблицы() Цикл
				Если Расшифровка = "Формирование Перемещение" Тогда
					Зн = Таблица.Область(Инд, 4).Текст;
					Если Число(Зн) <> 0 Тогда
						ТЗТМЦ.НоваяСтрока();
						ТЗТМЦ.ТМЦ = Таблица.Область(Инд, КолТМЦ).Расшифровка();	
						ТЗТМЦ.Кво = Зн;
					КонецЕсли;
				Иначе
					ТЗТМЦ.НоваяСтрока();
					ТЗТМЦ.ТМЦ = Таблица.Область(Инд, КолТМЦ).Расшифровка();						
				КонецЕсли;
			КонецЦикла;

			СпрМХ = "";
			Если Расшифровка = "Формирование Перемещение" Тогда
				СкладОткуда = Таблица.Область(2, 1, 2, 1).Расшифровка();
				Если ПустоеЗначение(СкладОткуда) = 1 Тогда
					СпрМХ = СоздатьОбъект("Справочник.МестаХранения");
					Если СпрМХ.Выбрать("Выберите склад Откуда", "ФормаСписка") = 1 Тогда
						СкладОткуда = СпрМХ.ТекущийЭлемент();
					КонецЕсли;
				КонецЕсли;
				Спис = СоздатьОбъект("СписокЗначений");
				Спис.Установить("Таблица", ТЗТМЦ);
				Спис.Установить("СкладОткуда", СкладОткуда);
				ОткрытьФорму("Документ." + СтрЗаменить(Расшифровка, "Формирование ", ""), Спис);
			ИначеЕсли Расшифровка = "Формирование Инвентаризация" Тогда
				Спис = СоздатьОбъект("СписокЗначений");
				Спис.Установить("ТЗТМЦ", ТЗТМЦ);
				Спис.Установить("СсылкаИнвентаризация", СсылкаИнвентаризация);
				Спис.Установить("Расшифровка", Таблица.Область("D2").Расшифровка());
				
				ОткрытьФорму("Документ." + СтрЗаменить(Расшифровка, "Формирование ", ""), Спис);
			Иначе
				ОткрытьФорму("Документ." + СтрЗаменить(Расшифровка, "Формирование ", ""), ТЗТМЦ);
			КонецЕсли;
			
			СтандартнаяОбработка = 0;
		ИначеЕсли Лев(Расшифровка, 31) = "Формирование Инвентаризация вак" Тогда
			КФормы = "";
			ТЗТМЦ = СоздатьОбъект("ТаблицаЗначений");
			ТЗТМЦ.НоваяКолонка("ТМЦ", "Справочник.ТМЦ");
			ТЗТМЦ.НоваяКолонка("ВидУпаковки", "Справочник.ВидыУпаковки");
			ТЗТМЦ.НоваяКолонка("Кво", "Число");
			ТЗТМЦ.НоваяКолонка("Кол", "Число");
			СтрВУ = 0;
			Для Инд = 2 По Таблица.ВысотаТаблицы() Цикл
				ТМЦ = "";
				Элт = Таблица.Область(Инд, 1).Расшифровка();
				Если ТипЗначенияСтр(Элт) = "Справочник" Тогда
					Если Элт.Вид() = "УМК_СтрокиПрайсЛиста" Тогда
						ТМЦ = Элт.ТМЦ;
					ИначеЕсли Элт.Вид() = "УМК_ПрайсЛист" Тогда
						СтрВУ = Инд;
					КонецЕсли;
				КонецЕсли;
				
				Если ПустоеЗначение(ТМЦ) = 0 Тогда
					Для Кол = 3 По Таблица.ШиринаТаблицы() Цикл
						Зн = Число(Таблица.Область(Инд, Кол).Текст);
						Если Зн <> 0 Тогда
							ТЗТМЦ.НоваяСтрока();
							ТЗТМЦ.ТМЦ = ТМЦ;
							ТЗТМЦ.Кво = Зн;
							ТЗТМЦ.ВидУпаковки = Таблица.Область(СтрВУ, Кол).Расшифровка();
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			//ТЗТМЦ.ВыбратьСтроку();
			ТЗТМЦ.Свернуть("ТМЦ,ВидУпаковки,Кво", "Кол");
			СПМеню = СоздатьОбъект("СписокЗначений");
//			СПМеню.ДобавитьЗначение("КвоПоФакту", "К-во по факту");
			СПМеню.ДобавитьЗначение("КвоПоФакту1", "К-во по факту 1");
			СПМеню.ДобавитьЗначение("КвоПоФакту2", "К-во по факту 2");
			СПМеню.ДобавитьЗначение("КвоПоФакту3", "К-во по факту 3");
			Зн = "КвоПоФакту";
			Если СПМеню.ВыбратьЗначение(Зн, "Какое количество заполнять?") = 1 Тогда
				СпЗН = СоздатьОбъект("СписокЗначений");
				СпЗН.Установить("ТЗТМЦ", ТЗТМЦ);
				СпЗН.Установить("ИмяАтрибута", Зн);
				Если Расшифровка = "Формирование Инвентаризация вак запись" Тогда
					ДокИ = СоздатьОбъект("Документ.Инвентаризация");
					Если ДокИ.Выбрать("Выберите инвентаризацию", "ФормаСписка") = 1 Тогда
						ОткрытьФорму(ДокИ.ТекущийДокумент(), СпЗН);
					КонецЕсли;
				Иначе
					ОткрытьФорму("Документ.Инвентаризация", СпЗН);
				КонецЕсли;
			КонецЕсли;
			
			СтандартнаяОбработка = 0;
		ИначеЕсли (Расшифровка = "Формирование ориентировочного заказа") ИЛИ (Расшифровка = "Формирование ориентировочного заказа БЗ") Тогда //--- УМК Сандомирский В.Ю. (22.06.15) из отчета "УМК_АнализРезервовПоПериодам" создаем Документ.УМК_ОриентировочныйЗаказ		
			КФормы = "";
			ТЗТМЦ = СоздатьОбъект("ТаблицаЗначений");
			ТЗТМЦ.НоваяКолонка("ТМЦ", "Справочник.ТМЦ");
			ТЗТМЦ.НоваяКолонка("ВидУпаковки", "Справочник.ВидыУпаковки");
			ТЗТМЦ.НоваяКолонка("Кво", "Число");
			ТЗТМЦ.НоваяКолонка("ТЗРез", "ТаблицаЗначений");
			
			ПоследнийСтолбец = Таблица.ШиринаТаблицы();
			ТМЦСтолбец       = 3;
			РСтолбец = 9;
			ВУПСтолбец = 1;
			ТекВУП = "";
				
			Для Инд = 1 По Таблица.ВысотаТаблицы() - 0 Цикл
				Зн = Таблица.Область(Инд, ПоследнийСтолбец).Текст;
				
				Если СокрЛП(Таблица.Область(Инд, 1).Текст) = "Контрагенты" Тогда
					Прервать;
				КонецЕсли;
				Если ПустоеЗначение(Таблица.Область(Инд, ВУПСтолбец).Текст) = 0 Тогда
					ТекВУП = Таблица.Область(Инд, ВУПСтолбец).Расшифровка();
				КонецЕсли;
				
				Если Число(Зн) <> 0 Тогда
					ТЗТМЦ.НоваяСтрока();
					ТЗТМЦ.ТМЦ = Таблица.Область(Инд, ТМЦСтолбец).Расшифровка();	
					ТЗТМЦ.ВидУпаковки = ТекВУП;
					ТЗТМЦ.Кво = Зн;
					ТЗТМЦ.ТЗРез = СоздатьОбъект("ТаблицаЗначений");
					Если (ТипЗначенияСтр(Таблица.Область(Инд, РСтолбец).Расшифровка()) = "ТаблицаЗначений") И (Прав(Расшифровка, 2) <> "БЗ") Тогда
						ТЗТМЦ.ТЗРез.Загрузить(Таблица.Область(Инд, РСтолбец).Расшифровка());
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ОткрытьФорму("Документ.УМК_ОриентировочныйЗаказ", ТЗТМЦ);
			СтандартнаяОбработка = 0;							
		КонецЕсли;	//... УМК Сандомирский В.Ю. (22.06.15)		
		Возврат;		
	КонецЕсли;
	
	// расшифровка для расчетных отчетов
	Меню = СоздатьОбъект("СписокЗначений");

	Объект = Расшифровка.Получить("Отчет");
	Если ПустоеЗначение(Объект) = 1 Тогда
		Объект = Расшифровка.Получить("Объект");
	КонецЕсли;
	
	Если Расшифровка.РазмерСписка() > 0 Тогда
		Файл = Расшифровка.ПолучитьЗначение(1);
		Если Файл = "ФайлДляОткрытия" Тогда
			ИмяФайла = "";
			СтандартнаяОбработка = 0;
		    Если Расшифровка.РазмерСписка() = 1 Тогда
		        Расшифровка.ПолучитьЗначение(1, ИмяФайла);
			Иначе
				Поз = 0;
				Если Расшифровка.ВыбратьЗначение(Файл, , Поз,,1) = 0 Тогда
					Возврат;
				КонецЕсли;
				Расшифровка.ПолучитьЗначение(Поз, ИмяФайла);
			КонецЕсли;
			
			ЗапуститьПриложение(СокрЛП(ИмяФайла));
			Возврат;
		КонецЕсли;	    
	КонецЕсли;
	
	Если (ТипЗначенияСтр(Объект) = "Документ") И (ПустоеЗначение(Объект) = 0) Тогда
		// на документ
		Меню.ДобавитьЗначение("Документ");
		Меню.ДобавитьЗначение("Журнал");
		Если Меню.ВыбратьЗначение(Отчет, "",,, 1) = 1 Тогда
			Если Отчет = "Документ" Тогда
				Стр = Расшифровка.Получить("СтрокаДокумента");

				ОткрытьФорму(Объект, Конт);
				Конт.АктивизироватьСтроку(Стр);
			Иначе    
				ОткрытьФорму("Журнал.ПолныйЖурнал", Конт);
				Конт.АктивизироватьОбъект(Объект);
			КонецЕсли;;
		КонецЕсли;
	ИначеЕсли (ТипЗначенияСтр(Объект) = "Справочник") И (ПустоеЗначение(Объект) = 0) Тогда
		// на справочник
		ОткрытьФорму(Объект, Конт);
	ИначеЕсли (ТипЗначенияСтр(Объект) = "СписокЗначений") И (ПустоеЗначение(Объект) = 0) Тогда
		// список - показать
		Объект.ВыбратьЗначение("", "",,, 0);
	ИначеЕсли (ТипЗначенияСтр(Объект) = "Строка") И (ПустоеЗначение(Объект) = 0) Тогда
		// на отчет
		Если Расшифровка.Получить("Меню") = 1 Тогда
			Меню = СоздатьОбъект("СписокЗначений");
			Если Меню.ВыбратьЗначение(Отчет, "",,, 1) = 0 Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Отчет = Объект;
		КонецЕсли;
		глРасшифровка = Расшифровка;
		глФлагРасшифровки = 1;
		глОбновить = Число(Расшифровка.Получить("Обновить"));
		Если глОбновить <> 0 Тогда
			глТаблица = Таблица;
		КонецЕсли;
		Если Найти(Отчет, ".ert") > 0 Тогда
			ОткрытьФорму("Отчет#", , Отчет);
		Иначе
			Если Лев(Отчет, 10) = "Обработка." Тогда
				Отчет = Сред(Отчет, 11);
				ОткрытьФорму("Обработка."+Отчет+"#");
			Иначе
				ОткрытьФорму("Отчет."+Отчет+"#");				
			КонецЕсли;			
		КонецЕсли;
		глФлагРасшифровки = 0;
		глРасшифровка = 0;
		глОбновить = 0;
		Возврат;
	ИначеЕсли ПустоеЗначение(Объект) = 1 Тогда
		Если Расшифровка.Получить("СписаниеПоДок") = Да Тогда
			глФлагРасшифровки = 1;
			глРасшифровка = Расшифровка;
			ОткрытьФорму("Отчет.ОтчетПоСписанию#");
			глФлагРасшифровки = 0;
			глРасшифровка = 0;
		ИначеЕсли Расшифровка.Получить("СписаниеПоДокКросс") = Да Тогда
			глФлагРасшифровки = 1;
			глРасшифровка = Расшифровка;
			ОткрытьФорму("Отчет.КроссТаблица#");
			глФлагРасшифровки = 0;
			глРасшифровка = 0;			
		Иначе
			Док = Расшифровка.Получить("Док");
			Тов = Расшифровка.Получить("Товар");
			Если ПустоеЗначение(Док) = 0 Тогда
				КФормы = "";
			    ОткрытьФорму(Док, Тов);
			Иначе
				Если Расшифровка.РазмерСписка() = 1 Тогда
					ОткрытьФорму(Расшифровка.ПолучитьЗначение(1));
				Иначе
					Зн = "";
					Если Расшифровка.ВыбратьЗначение(Зн,,,,1) = 1 Тогда
						ОткрытьФорму(Зн);
					КонецЕсли;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Меню = 0;
	
	 // расшифровка для бухгалтерских отчетов
	Док = Расшифровка.Получить("Документ");
	Если ТипЗначения(Док) <> 0 Тогда
		ОткрытьФорму("Операция",, Док, Расшифровка.Получить("НомерПроводки"),
 					Расшифровка.Получить("НомерКорреспонденции"),-1);
	Иначе
		// если в списке Расшифровка присутствует значение "ДокументЖурнала", и оно непусто
		// то запускаем полный журнал документа с позиционированием на "ДокументЖурнала"
		ДокументЖурнала=Расшифровка.Получить("ДокументЖурнала");
		Если ПустоеЗначение(ДокументЖурнала)=0 Тогда
			КонтЖурн=ДокументЖурнала;
			Если ОткрытьФорму("Журнал.ПолныйЖурнал.ФормаСписка",КонтЖурн)=0 Тогда
				Возврат;
			КонецЕсли;
			СтандартнаяОбработка = 0;
			Возврат;
		ИначеЕсли Расшифровка.Получить("Меню") = 1 Тогда
			Меню = СоздатьОбъект("СписокЗначений");
			Меню.ДобавитьЗначение("КарточкаСчета", "Карточка счета");
			Если Расшифровка.Получить("Счет").КоличествоСубконто() > 0 Тогда
				Меню.ДобавитьЗначение("ОборотноСальдоваяВедомостьПоСчету", "Ведомость по счету");
			КонецЕсли;
			Меню.ДобавитьЗначение("АнализСчета", "Анализ счета");
			Меню.ДобавитьЗначение("ОтчетПоПроводкам", "Отчет по проводкам");
			Меню.ДобавитьЗначение("ГлавнаяКнига", "Обороты счета (Гл. книга)");
			Меню.ДобавитьЗначение("ЖурналОрдерПоСубконто", "Журнал-ордер по субконто");
			Если Меню.ВыбратьЗначение(Отчет, "",,, 1) = 0 Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Отчет = Расшифровка.Получить("Отчет");
		КонецЕсли;

		глРасшифровка = Расшифровка;
		глФлагРасшифровки = 1;
		глОбновить = Число(Расшифровка.Получить("Обновить"));
		Если глОбновить <> 0 Тогда
			глТаблица = Таблица;
		КонецЕсли;
		
		Если Отчет = "ОборотноСальдоваяВедомостьПоСчету" Тогда
			Счет = Расшифровка.Получить("Счет");
			Если Счет.КоличествоСубконто() = 0 Тогда
				Расшифровка.Установить("ДанныеПоСубсчетам", Счет.ЭтоГруппа());
			КонецЕсли;
		КонецЕсли;                                                  
		
		Если ПустаяСтрока(Отчет) = 0 Тогда
			Если Найти(Отчет, ".ert") > 0 Тогда
				ОткрытьФорму("Отчет#", , Отчет);
			Иначе
				ОткрытьФорму("Отчет."+Отчет+"#");
			КонецЕсли;
		КонецЕсли;
		глФлагРасшифровки = 0;
		глРасшифровка = 0;
		глОбновить = 0;
	КонецЕсли;
КонецПроцедуры //ОбработкаЯчейкиТаблицы

Процедура ОбработкаЯчейкиТаблицы(Расшифровка, СтандартнаяОбработка, Таблица, Адрес) Экспорт //--- УМК Сандомирский В.Ю. (11.09.14) иногда требуется обработать ячейку в отчете и иметь возможность использовать стандартные кнопки "Обновить", "Настройка"
	глОбработкаЯчейкиТаблицы(Расшифровка, СтандартнаяОбработка, Таблица, Адрес);	
КонецПроцедуры

// ===============================
Процедура ПриЗаписиКонстанты(ИмяКонстанты,Значение)  
	Если ВРег(ИмяКонстанты) = "ИСПОЛЬЗОВАТЬСЧЕТАРАСХОДОВ" Тогда
		// Заносим новое значение в переменную-синоним
		ИспользоватьСчетаРасходов = Значение;
	ИначеЕсли (ВРег(ИмяКонстанты) = "НОМЕРРЕЛИЗА") или (ВРег(ИмяКонстанты)="БАЗОВАЯВАЛЮТА") Тогда
		// Их менять вручную нельзя
	    глПоказатьПредупреждение("Константа """+СокрЛП(ИмяКонстанты)+""" является служебной и
						|не может быть изменена вручную.");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

КонецПроцедуры //ПриЗаписиКонстанты

// ------------------- Расшифровка отчетов -------------------
//=====================================
Функция глРасшифровкаОбновить(Расшифровка, Обновить)  Экспорт
	Расшифровка.Установить("Обновить", Обновить);
	Возврат Расшифровка;
КонецФункции //глРасшифровкаОбновить

//=====================================
Функция глРасшифровкаУстановить(Расшифровка, Параметр, Значение) Экспорт
	Расшифровка.Установить(Параметр, Значение);
	Возврат Расшифровка;
КонецФункции

// ===============================
Функция глКурсДляВалюты(Валюта,ДатаКурса) Экспорт
	Если Валюта=Гривня Тогда
		// Для базовой валюты курс всегда равен 1 
		Возврат 1;
	Иначе    // для других валют записываем их собственный курс
		Возврат Валюта.Курс.Получить(ДатаКурса);
	КонецЕсли;
КонецФункции

// ===============================
Функция глКратностьДляВалюты(Валюта,ДатаКурса) Экспорт
	Если Валюта=Гривня Тогда
		// Для базовой валюты курс всегда равен 1
		Возврат 1;
	Иначе    // для других валют записываем их кратность
		Возврат Валюта.Кратность.Получить(ДатаКурса);
	КонецЕсли;
КонецФункции

// ===============================
Функция глПересчетТорг(Цена,ВалютаНач,ПоКурсуВалютыНач,ВалютаКон,ПоКурсуВалютыКон,ДатаКурса) Экспорт  
	// Эта функция пересчитывает Цену из ВалютаНач и возвращает значение Цена в ВалютаКон
	// в параметрах ПоКурсуВалютыНач и ПоКурсуВалютыНач могут передаваться
	// либо сами курсы либо даты
	
	// ДатаКурса используется для опреления кратности, если курс задан числом
	
	Если ВалютаНач=ВалютаКон Тогда
		// если ВалютаНач совпадает с ВалютаКон, то не пересчитываем
		Возврат Цена;
	КонецЕсли;

	ТипЗнНач=ТипЗначенияСтр(ПоКурсуВалютыНач);
	Если ТипЗнНач="Число" Тогда
		КурсВалютыНач=ПоКурсуВалютыНач;
		КратностьВалютыНач = глКратностьДляВалюты(ВалютаНач,ДатаКурса);
	ИначеЕсли ТипЗнНач="Дата" Тогда
		КурсВалютыНач=глКурсДляВалюты(ВалютаНач,ПоКурсуВалютыНач);
		КратностьВалютыНач = глКратностьДляВалюты(ВалютаНач,ПоКурсуВалютыНач);
	Иначе
		глКомментарий("Неверный тип параметра при пересчете валюты!",0);
		Возврат Цена;
	КонецЕсли;

	ТипЗнКон=ТипЗначенияСтр(ПоКурсуВалютыКон);
	Если ТипЗнКон="Число" Тогда
		КурсВалютыКон=ПоКурсуВалютыКон;
		КратностьВалютыКон = глКратностьДляВалюты(ВалютаКон,ДатаКурса);
	ИначеЕсли ТипЗнКон="Дата" Тогда
		КурсВалютыКон=глКурсДляВалюты(ВалютаКон,ПоКурсуВалютыКон);
		КратностьВалютыКон = глКратностьДляВалюты(ВалютаКон,ПоКурсуВалютыКон);
	Иначе
		глКомментарий("Неверный тип параметра при пересчете валюты!",0);
		Возврат Цена;
	КонецЕсли;

	Если (КурсВалютыНач=0) ИЛИ (КурсВалютыКон=0)Тогда
     	//   глКомментарий("При пересчете валюты обнаружен нулевой курс валюты " //--- УМК Сандомирский В.Ю. (15.06.15) четта меня напрягает это сообщениев самых непредсказуемых местах
		//	+?(КурсВалютыНач=0,ВалютаНач,ВалютаКон),0);
		Возврат Цена;
	КонецЕсли;
              
	Если КратностьВалютыНач = 0 Тогда
	    КратностьВалютыНач = 1;
	КонецЕсли;

	Если КратностьВалютыКон = 0 Тогда
	    КратностьВалютыКон = 1;
	КонецЕсли;
	
	Если  ВалютаНач=Гривня  Тогда
		// если ВалютаНач не совпадает с ВалютаКон, а товар гривневый
		// цена пересчитывается из гривень
		Результат = Цена/(КурсВалютыКон/КратностьВалютыКон);  
	ИначеЕсли  ВалютаКон=Гривня  Тогда
		// цена пересчитывается в гривня
		Результат = Цена*(КурсВалютыНач/КратностьВалютыНач);
	Иначе
		// если валюта товара не совпадает с валютой накладной, и не гривня
		Результат = Цена*(КурсВалютыНач/КратностьВалютыНач)/(КурсВалютыКон/КратностьВалютыКон);
	КонецЕсли;        
	Возврат Результат;
КонецФункции //глПересчетТорг


// ===========================
// Используется 5 форм:
// глПересчет(Сумма,ВалН,ВалК,КурсН,КурсК,Дата)
// глПересчет(Сумма,ВалН,ВалК,КурсН,Дата)
// глПересчет(Сумма,ВалН,ВалК,Дата,КурсК)
// глПересчет(Сумма,ВалН,ВалК,Дата)
// глПересчет(Сумма,ВалН,КурсН,ВалК,КурсК,Дата)
Функция глПересчет(Сумма,Пар2,Пар3,Пар4,Пар5=0,Пар6=0) Экспорт     
	Перем КурсН, КурсК, Дт;
	Перем КратН, КратК;
	
	Если (ТипЗначения(Пар3)=1) или (ТипЗначения(Пар3)=3) Тогда // форма 5
		Возврат глПересчетТорг(Сумма,Пар2,Пар3,Пар4,Пар5,Пар6);
	Иначе
		Если (ТипЗначения(Пар4)=3) и (Пар5=0) и (Пар6=0) Тогда // форма 4
			Возврат глПересчетТорг(Сумма,Пар2,Пар4,Пар3,Пар4,Пар4);
		ИначеЕсли ПустоеЗначение(Пар6) = 1 Тогда
	        Если (ТипЗначения(Пар4)=1) и (ТипЗначения(Пар5)=3) Тогда // форма 2
				Возврат глПересчетТорг(Сумма,Пар2,Пар4,Пар3,Пар5,Пар5);
			ИначеЕсли (ТипЗначения(Пар4)=3) и (ТипЗначения(Пар5)=1) Тогда // форма 3
				Возврат глПересчетТорг(Сумма,Пар2,Пар4,Пар3,Пар5,Пар4);
	        КонецЕсли
		ИначеЕсли (ТипЗначения(Пар4)=1) и (ТипЗначения(Пар5)=1) и (ТипЗначения(Пар6)=3) Тогда // форма 1
			Возврат глПересчетТорг(Сумма,Пар2,Пар4,Пар3,Пар5,Пар6);
	    КонецЕсли;
	КонецЕсли;
	глКомментарий("Неверные параметры в функции Пересчет!",0,,"!");
	Возврат Сумма;
КонецФункции //глПересчет

// ===============================
// проверка корректности заданного периода
// если БухПроверка = 1, делается проверка на выход за пределы 
//    рассчитанного периода бухгалтерских итогов (только для бухгалтерских отчетов),
//    для всех остальных случаев БухПроверка = 0
Функция глПроверкаИнтервалаОтчета(ДатаНачала,ДатаКонец,БухПроверка=1) Экспорт
	Если ПустоеЗначение(ДатаНачала)=1 Тогда
		глПоказатьПредупреждение("Необходимо задать дату начала отчета!");
		Возврат 0;
	КонецЕсли;
	Если ПустоеЗначение(ДатаКонец)=1 Тогда
		глПоказатьПредупреждение("Необходимо задать дату конца отчета!");
		Возврат 0;
	КонецЕсли;
	Если ДатаКонец<ДатаНачала  Тогда
		глПоказатьПредупреждение("Дата начала отчета должна быть не позже даты конца отчета!");
		Возврат 0;
	КонецЕсли;
	Если БухПроверка = 1 Тогда
		Если ДатаКонец > КонецРассчитанногоПериодаБИ() Тогда
			глПоказатьПредупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
			               "Расчет итогов выполняется в режиме"+РазделительСтрок+
						   """Операции - Управление бухгалтерскими итогами"".");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции //глПроверкаИнтервалаОтчета

// ===============================
Функция глПолучитьМетодРасчетаСебестоимости(Товар,ДатаДок) Экспорт
	Если ПустоеЗначение(Товар) = 1 Тогда
	    глКомментарий("Недостаточно параметров в функции глПолучитьМетодРасчетаСебестоимости()!",,,"!");
		Возврат "";
	КонецЕсли;	
	
	Если глСчетаУчетаТоваров.Принадлежит(Число(Товар.Счет.Код))=1 Тогда
		Возврат Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаДок);
	ИначеЕсли глСчетаУчетаЗапасов.Принадлежит(Число(Товар.Счет.Код))=1 Тогда
		Возврат Константа.МетодРасчетаСебестоимостиПроизводственныхЗапасов.Получить(ДатаДок);
	ИначеЕсли (глСчетаУчетаПродукции.Принадлежит(Число(Товар.Счет.Код))=1) Тогда
		Возврат Константа.МетодРасчетаСебестоимостиПродукции.Получить(ДатаДок);
	КонецЕсли;	
	
КонецФункции //глПолучитьМетодРасчетаСебестоимости

// ===============================
Функция глПроцентНДС(Ставка, Знач ДатаСтавки ="" ) Экспорт          
	Если ПустоеЗначение(ДатаСтавки) = 1 Тогда
		ДатаСтавки = ТекущаяДата();
	КонецЕсли;
	Если ТипЗначения(Ставка) = 11 Тогда
		ЗначениеСтавки = Ставка.Ставка.Получить(ДатаСтавки);	
		Возврат ЗначениеСтавки*100;
	ИначеЕсли ТипЗначения(Ставка) = 1 Тогда
		Возврат Ставка*100;
	КонецЕсли;	
КонецФункции

// ===============================
Функция глСоздатьТбСуммыПогашения() Экспорт
	тбСуммыПогашения = СоздатьОбъект("ТаблицаЗначений");
	тбСуммыПогашения.НоваяКолонка("СтавкаНДС");
	тбСуммыПогашения.НоваяКолонка("СуммаСНДС","Число",16,3);
	тбСуммыПогашения.НоваяКолонка("СуммаНДС","Число",16,3);
	тбСуммыПогашения.НоваяКолонка("НеВключаетсяВВДВР","Число",1,0);
	Возврат тбСуммыПогашения;
КонецФункции

// ===============================
// Возвращает таблицу сумм, которые нужно погасить по накладной в разрезе ставок НДС.
Функция глПолучитьСуммыДляПогашения(Конт, Фирма, ВалютаПогашения) Экспорт
	Перем Товар;
	
	тбСуммыПогашения = СоздатьОбъект("ТаблицаЗначений");
	
	Если глЕстьРеквизитМнЧ("СуммаСНДС",Конт.Вид()) = Да Тогда
		
		тбСуммыПогашения.НоваяКолонка("Товар");
		тбСуммыПогашения.НоваяКолонка("СуммаСНДС","Число",16,3);
		тбСуммыПогашения.НоваяКолонка("СуммаНДС","Число",16,3);
		тбСуммыПогашения.НоваяКолонка("СтавкаНДС");
		тбСуммыПогашения.НоваяКолонка("ЗнакОплаты", "Число");
		тбСуммыПогашения.НоваяКолонка("НеВключаетсяВВДВР","Число",1,0);
		                           
		СуммаСкидки = 0;
		ВсегоСуммаСНДС = 0;
		Если глЕстьРеквизитШапки("Скидка",Конт.Вид()) = Да Тогда
			// в розничных документах скидка указана в шапке
			СуммаСкидки = Конт.Скидка;
			ВсегоСуммаСНДС = Конт.Итог("СуммаСНДС");
		КонецЕсли;
		
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку()=1 Цикл
			
			Если глЕстьРеквизитМнЧ("ТМЦ", Конт.Вид())= Да Тогда
				Товар = Конт.ТМЦ;
			ИначеЕсли глЕстьРеквизитМнЧ("Услуга", Конт.Вид())= Да Тогда
				Товар = Конт.Услуга;
			ИначеЕсли глЕстьРеквизитМнЧ("НеоборотныйАктив", Конт.Вид())= Да Тогда
				Товар = Конт.НеоборотныйАктив;
			КонецЕсли;	
			
			// залоговую тару не учитываем
			Если (глЕстьРеквизитШапки("ВидТары",Конт.Вид()) = Да)
			И (Товар.Вид() = "ТМЦ") Тогда
				Если (Конт.ВидТары = Перечисление.ВидыТары.Залоговая)
				И (Товар.ВидТМЦ = Перечисление.ВидыТМЦ.Тара) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			
			тбСуммыПогашения.НоваяСтрока();
			тбСуммыПогашения.Товар = Товар;
			Если ВсегоСуммаСНДС <> 0 Тогда
				// розничный документ со скидкой
				Если Конт.КоличествоСтрок() = Конт.НомерСтроки Тогда
					// остаток запишем в последнюю строку
					тбСуммыПогашения.СуммаСНДС = Конт.СуммаСНДС - СуммаСкидки;	
				Иначе	                                          
					СуммаСкидкиДляСтроки = Окр(?(ВсегоСуммаСНДС = 0,0,Конт.Скидка*(Конт.СуммаСНДС/ВсегоСуммаСНДС)),2);
					тбСуммыПогашения.СуммаСНДС = Конт.СуммаСНДС - СуммаСкидкиДляСтроки;
					СуммаСкидки = СуммаСкидки - СуммаСкидкиДляСтроки;
				КонецЕсли;
			ИначеЕсли Конт.Вид() = "ПереоценкаРозницы" Тогда				
				тбСуммыПогашения.СуммаСНДС = Конт.НоваяСумма - Конт.СуммаСНДС;
			Иначе
				тбСуммыПогашения.СуммаСНДС = Конт.СуммаСНДС;
			КонецЕсли;
			
			Если глЕстьРеквизитШапки("ВидНДС", Конт.Вид())= Да Тогда
				СтавкаНДС = Конт.ВидНДС;          
			КонецЕсли;
			
			Если (СтавкаНДС = ОсновнаяСтавкаНДС) или (ПустоеЗначение(СтавкаНДС)=1) Тогда
				Если тбСуммыПогашения.Товар.Вид() = "ТМЦ" Тогда
					СтавкаНДС = тбСуммыПогашения.Товар.СтавкаНДС;      
				КонецЕсли;	              
			КонецЕсли;
			
			Если Конт.Вид() = "ПереоценкаРозницы" Тогда
				СтавкаНДС = Конт.ВидНДС;
			КонецЕсли;
			
			тбСуммыПогашения.СтавкаНДС = СтавкаНДС;
			
			Если Конт.Вид() = "ПереоценкаРозницы" Тогда
				тбСуммыПогашения.СуммаНДС = тбСуммыПогашения.СуммаСНДС - тбСуммыПогашения.СуммаСНДС / (1 + СтавкаНДС.Ставка.Получить(Конт.ДатаДок));
			ИначеЕсли глЕстьРеквизитМнЧ("НДС", Конт.Вид())= Да Тогда
			    тбСуммыПогашения.СуммаНДС = Конт.НДС;
			ИначеЕсли глЕстьРеквизитМнЧ("СуммаБезНДС", Конт.Вид())= Да Тогда
				тбСуммыПогашения.СуммаНДС = Конт.СуммаСНДС - Конт.СуммаБезНДС;
			ИначеЕсли ВсегоСуммаСНДС <> 0 Тогда
				// розничный документ со скидкой
				тбСуммыПогашения.СуммаНДС = тбСуммыПогашения.СуммаСНДС * глПроцентНДС(СтавкаНДС,Конт.ДатаДок) / (100 + глПроцентНДС(СтавкаНДС,Конт.ДатаДок));
			Иначе
				тбСуммыПогашения.СуммаНДС = Конт.СуммаСНДС * глПроцентНДС(СтавкаНДС,Конт.ДатаДок) / (100 + глПроцентНДС(СтавкаНДС,Конт.ДатаДок));
			КонецЕсли;

			Если тбСуммыПогашения.Товар.Вид() = "ТМЦ" Тогда
				Если тбСуммыПогашения.Товар.ВидТМЦ = Перечисление.ВидыТМЦ.Тара Тогда
					Если глЕстьРеквизитШапки("ВидТары", Конт.Вид())= Да Тогда
						Если Конт.ВидТары = Перечисление.ВидыТары.Возвратная Тогда
							// если НДС уже включился в сумму с НДС, его надо убрать
							тбСуммыПогашения.СуммаСНДС = Конт.СуммаСНДС - тбСуммыПогашения.СуммаНДС;
							// и обнулить
							тбСуммыПогашения.СуммаНДС = 0;
							тбСуммыПогашения.НеВключаетсяВВДВР = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;         
			КонецЕсли;         			
		КонецЦикла;
		тбСуммыПогашения.Свернуть("СтавкаНДС,НеВключаетсяВВДВР,ЗнакОплаты","СуммаСНДС,СуммаНДС");
		Если Конт.Вид() = "ПереоценкаРозницы" Тогда
			тбСуммыПогашения.ВыбратьСтроки();
			Пока тбСуммыПогашения.ПолучитьСтроку() = 1 Цикл
				Если тбСуммыПогашения.СуммаСНДС < 0 Тогда
					тбСуммыПогашения.СуммаСНДС = -тбСуммыПогашения.СуммаСНДС;
					тбСуммыПогашения.СуммаНДС = -тбСуммыПогашения.СуммаНДС;
					тбСуммыПогашения.ЗнакОплаты = 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// округлим суммы для правильного проведения по регситрам сумм по первому и второму событию
		тбСуммыПогашения.УстановитьПараметрыКолонки("СуммаСНДС","Число",16,2);
		тбСуммыПогашения.УстановитьПараметрыКолонки("СуммаНДС","Число",16,2);
	КонецЕсли;
	                               
	Возврат тбСуммыПогашения;
КонецФункции

// ===============================
// Возвращает таблицу сумм, которые нужно погасить по накладной в разрезе ставок НДС.
Процедура глОпределитьБазыРаспределения(Конт, БазаСНДС, БазаНДС) Экспорт
    
	ВидДок = Конт.Вид();
	Если глЕстьРеквизитШапки("ВидТары",ВидДок) = Да Тогда
		Если Конт.ВидТары <> Перечисление.ВидыТары.Залоговая Тогда
			// в табличной части нет залоговой тары
			БазаСНДС = Конт.Итог("СуммаСНДС");
			БазаНДС  = Конт.Итог("НДС");
			Возврат;
		КонецЕсли;
	КонецЕсли;	

	Если глЕстьРеквизитМнЧ("ТМЦ", ВидДок)= Да Тогда
		ИмяРеквизита = "ТМЦ";
	ИначеЕсли глЕстьРеквизитМнЧ("Услуга", ВидДок)= Да Тогда
		ИмяРеквизита = "Услуга";
	ИначеЕсли глЕстьРеквизитМнЧ("НеоборотныйАктив", ВидДок)= Да Тогда
		ИмяРеквизита = "НеоборотныйАктив";
	КонецЕсли;	
	БазаСНДС = 0; БазаНДС  = 0;
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку()=1 Цикл
		Товар = Конт.ПолучитьАтрибут(ИмяРеквизита);
		Если глЕстьРеквизитШапки("ВидТары",ВидДок) = Да Тогда
			Попытка
				Если Товар.ВидТМЦ = Перечисление.ВидыТМЦ.Тара Тогда
					// это залоговая тара, пропускаем
					Продолжить;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		БазаСНДС = БазаСНДС + Конт.СуммаСНДС;
		Если глЕстьРеквизитМнЧ("НДС", ВидДок) = Да Тогда
			// для документов, у которых есть реквизит "НДС", берем НДС непосредственно из документа
			НДС = Конт.НДС;
		Иначе
			// для документов, у которых нет реквизита "НДС", рассчитываем НДС на основании суммы с НДС
			НДС = Конт.СуммаСНДС * (1 - 100 / (100 + глПроцентНДС(Товар.СтавкаНДС,Конт.ДатаДок)));
		КонецЕсли;
		БазаНДС = БазаНДС + НДС; 
	КонецЦикла;
	Если глЕстьРеквизитШапки("Скидка", ВидДок) = Да Тогда
	    БазаНДС  = ?(БазаНДС = 0, 0, БазаНДС * (1 - Конт.Скидка / БазаСНДС));
		БазаСНДС = ?(БазаСНДС = 0, 0, БазаСНДС - Конт.Скидка);
	КонецЕсли;
КонецПроцедуры

// ===============================
// Назначение:
//		Проверяет ВидТМЦ и счет учета товара, т.е. можно ли добавлять товар в документ
//		(проводить документ с таким товаром)
// Аргументы:
//		Конт		- контекст документа
//		Товар		- проверяемый товар
//		РеквТовар	- название реквизита, в котором хранится товар
//		НомСтр		- номер строки табличной части, в которой производжится проверка
//		Проведение	- =1 если вызов производится из модуля проведения документа, иначе =0
//					  если Проведение=1, сообщения об ошибках выдаются с помощью
//					  глКомментарий(), иначе - с помощью глПоказатьПредупреждение()
// Возвращает:
//		Да	- проверка произведена успешно, товар можно добавлять (проводить)
//		Нет - ВидТМЦ или счет учета - некорректны
Функция глПроверкаТовараВДокументе(Конт,Товар,НомСтр=0,Проведение=0) Экспорт
	НеправильныйВидТМЦ = 0;
	НеправильныйСчет = 0;
	Результат = Да;
	ДопТекст = "";

	Если  (Товар.Вид() = "ТМЦ") Тогда                
		// со склада с суммовым учетом можно продавать только ТоварыВАссортименте
		Если Найти("ВозвратРозница,ОтчетКА,РасходнаяРозничная,РасходнаяНакладная",Конт.Вид()) > 0  Тогда
			Если ПустоеЗначение(Конт.МестоХранения) = 0 Тогда
				Если (Конт.МестоХранения.ВидСклада = Розничный) И (Конт.МестоХранения.СуммовойУчет=1) Тогда
					Если Товар <> Константа.ТоварыВАссортименте Тогда
						// Выведем сообщения об ошибках и завершим работу функции
					    Если Проведение = 1 Тогда
							глКомментарий("ТМЦ "+Товар+" нельзя продавать с розничного склада с признаком ведения суммового учета."+?(НомСтр=0,""," Строка "+НомСтр),0);
						Иначе
							глКомментарий("ТМЦ "+Товар+" нельзя продавать с розничного склада с признаком ведения суммового учета."+?(НомСтр=0,""," Строка "+НомСтр),0);
						КонецЕсли;
						Возврат Нет;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		//в складских документах не должно быть услуг
		Если Найти("ВыпускПродукции,ОприходованиеИзлишков,СписаниеТМЦ,СписаниеТМЦВПроизводство,ВозвратТМЦИзПроизводства,Инвентаризация,Перемещение,ПереоценкаТМЦ,ВводОстатковТМЦ",Конт.Вид()) > 0 Тогда
			Если Товар.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
				// Выведем сообщения об ошибках и завершим работу функции
			    Если Проведение = 1 Тогда
					глКомментарий("Нельзя проводить документ """+Конт.ПредставлениеВида()+
					""" с услугами."+?(НомСтр=0,""," Строка "+НомСтр),0);
				Иначе
					глПоказатьПредупреждение("В документ """+Конт.ПредставлениеВида()+
					""" нельзя добавлять услуги."+?(НомСтр=0,""," Строка "+НомСтр));
				КонецЕсли;
				Возврат Нет;
			КонецЕсли;                          
		ИначеЕсли Конт.Вид() = "Заказ" Тогда
			Если (Товар.ВидТМЦ <> Перечисление.ВидыТМЦ.Продукция) и (Товар.ВидТМЦ <> Перечисление.ВидыТМЦ.Полуфабрикат)
			и (Товар.ВидТМЦ <> Перечисление.ВидыТМЦ.Услуга) Тогда
				Если Проведение = 1 Тогда
					глКомментарий("Нельзя проводить документ """+Конт.ПредставлениеВида()+
					""" с видом ТМЦ, отличным от продукции, полуфабриката и услуги."+?(НомСтр=0,""," Строка "+НомСтр),0);
				Иначе
					глКомментарий("Можно добавлять ТМЦ с видом продукция, полуфабрикат или услуга!"+
					?(НомСтр=0,""," Строка "+НомСтр), 0,,"!");
					Продукция = 0;
				КонецЕсли;	
			    Возврат Нет;
			КонецЕсли;   
		//В документах по услугам должны быть только услуги. 
	    ИначеЕсли Найти("УслугиСтороннихОрганизаций,УслугиСтороннихОрганизацийПроизвХарактера",Конт.Вид()) > 0 Тогда
			Если Товар.ВидТМЦ <> Перечисление.ВидыТМЦ.Услуга Тогда
				// Выведем сообщения об ошибках и завершим работу функции
			    Если Проведение = 1 Тогда
					глКомментарий("Нельзя проводить документ """+Конт.ПредставлениеВида()+
					""" с видом ТМЦ, отличным от услуги."+?(НомСтр=0,""," Строка "+НомСтр),0);
				Иначе
					глПоказатьПредупреждение("В документ """+Конт.ПредставлениеВида()+
					""" можно добавлять услуги."+?(НомСтр=0,""," Строка "+НомСтр));
				КонецЕсли;
				Возврат Нет;
			КонецЕсли;
		ИначеЕсли Конт.Вид() = "ОказаниеУслуг" Тогда             
			Если глЭтоДавальческийЗаказ(Конт.Договор) = 1 Тогда
				Если (Товар.ВидТМЦ <> Перечисление.ВидыТМЦ.Полуфабрикат) и (Товар.ВидТМЦ <> Перечисление.ВидыТМЦ.Продукция) Тогда
					// Выведем сообщения об ошибках и завершим работу функции
					Если Проведение = 1 Тогда
						глКомментарий("Нельзя проводить документ """+Конт.ПредставлениеВида()+
						""" по давальческому заказу с видом ТМЦ, отличным от полуфабриката или продукции."+?(НомСтр=0,""," Строка "+НомСтр),0);
					Иначе
						глПоказатьПредупреждение("В документ """+Конт.ПредставлениеВида()+
						""" по давальческому заказу можно добавлять полуфабрикат или продукцию."+?(НомСтр=0,""," Строка "+НомСтр));
					КонецЕсли;
					Возврат Нет;
				КонецЕсли;
			Иначе
				Если Товар.ВидТМЦ <> Перечисление.ВидыТМЦ.Услуга Тогда
					// Выведем сообщения об ошибках и завершим работу функции
					Если Проведение = 1 Тогда
						глКомментарий("Нельзя проводить документ """+Конт.ПредставлениеВида()+
						""" с видом ТМЦ, отличным от услуги."+?(НомСтр=0,""," Строка "+НомСтр),0);
					Иначе
						глПоказатьПредупреждение("В документ """+Конт.ПредставлениеВида()+
						""" можно добавлять услуги."+?(НомСтр=0,""," Строка "+НомСтр));
					КонецЕсли;
					Возврат Нет;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;                          
	КонецЕсли;			
	
	Возврат Результат;
КонецФункции // глПроверкаТовараВДокументе()

// ======================================
Функция глИдентификаторКонфигурации() Экспорт Далее          

// ======================================
// Формирует список параметров для определения закладки правовой системы и вызывает
// внешнюю обработку (ExtForms\1CrtInfU.ert), которая запускает правовую систему 
// Параметры:
// ТипОбъекта: тип объекта метаданных ("Справочник","Документ","Отчет" и пр.)
// Контекст: контекст
// ВидОбъекта: вид объекта (для журналов документов и отчетов; например, "ВалютныеОперации","КассоваяКнига" и пр.)
//
// Примеры вызова процедуры (запуск из кнопки):
// Справочник (форма списка): глПравоваяПоддержка("Справочник",Контекст)
// Документ:                  глПравоваяПоддержка("Документ",Контекст)
// Журнал документов:         глПравоваяПоддержка("Журнал",Контекст,"НАиМБП")
// ПланСчетов:                глПравоваяПоддержка("ПланСчетов",Контекст)
// Отчет:                     глПравоваяПоддержка("Отчет",Контекст,"КассоваяКнига")
// Журнал расчетов:           глПравоваяПоддержка("ЖурналРасчетов",Контекст)
// Внешний отчет:             глПравоваяПоддержка("ВнешнийОтчет",Контекст)
Процедура глПравоваяПоддержка(ТипОбъекта = "",Конт = "",ВидОбъекта = "") Экспорт
	спПараметры = СоздатьОбъект("СписокЗначений");
	спПараметры.ДобавитьЗначение(глИдентификаторКонфигурации(),"Конфигурация");
	спПараметры.ДобавитьЗначение(ТипОбъекта,"Тип");
	спПараметры.ДобавитьЗначение(Конт,"Контекст");
	спПараметры.ДобавитьЗначение(ВидОбъекта,"Вид");
	Если (ТипОбъекта = "Справочник") ИЛИ (ТипОбъекта = "Документ") Тогда
		спПараметры.Установить("Вид",Конт.Вид());
	КонецЕсли;
		
	ИмяВнешнегоОтчета = "";
	Если (ПустаяСтрока(глКомпонентаПравовойПоддержки.ПутьБД) = 0) 
	И (ФС.СуществуетФайл(глКомпонентаПравовойПоддержки.ПутьБД+"1CRtInfU.ert") = 1) Тогда
		// сначала проверим, есть ли файл внешнего отчета на диске ИТС
		ИмяВнешнегоОтчета = глКомпонентаПравовойПоддержки.ПутьБД+"1CRtInfU.ert";
	ИначеЕсли ФС.СуществуетФайл(КаталогИБ()+"ExtForms\1CRtInfU.ert") = 1 Тогда
		// ...если нет, тогда из каталога ExtForms инф. базы
		ИмяВнешнегоОтчета = КаталогИБ()+"ExtForms\1CRtInfU.ert";
	ИначеЕсли ФС.СуществуетФайл(КаталогИБ()+"1CRtInfU.ert") = 1 Тогда
		// ...если нет, тогда из каталога информационной базы
		ИмяВнешнегоОтчета = КаталогИБ()+"1CRtInfU.ert";
	КонецЕсли;

	Если ИмяВнешнегоОтчета = "" Тогда
		глПоказатьПредупреждение("Не найден файл 1CRtInfU.ert");
	Иначе
		ОткрытьФорму("Отчет",спПараметры,ИмяВнешнегоОтчета);
	КонецЕсли;
КонецПроцедуры

// ===============================
// добавляем проводку или корреспонденцию в таблицу проводок
Процедура глТаблОперации(Конт,СчД,СчК,Сумма,Сод,Кво,Знач СубД1,Знач СубД2,Знач СубД3,Знач СубК1,Знач СубК2,Знач СубК3,Вал,ВалСумма,НомерЖурнала,ПризнакПроводки,ПризнакГлавнойПроводки=0)
	
	Если глТекущийДокумент <> Конт Тогда
		глТекущийДокумент = Конт;
		глТбОперация.УдалитьСтроки();
	КонецЕсли;
	
	Если (Окр(Сумма,2)=0) и (Окр(ВалСумма,2)=0) и (Окр(Кво,3)=0) Тогда
	    Возврат;
	КонецЕсли;
	СчетД = ?(ТипЗначения(СчД)=2,СчетПоКоду(СчД),СчД);
	СчетК = ?(ТипЗначения(СчК)=2,СчетПоКоду(СчК),СчК);
	
	Если (ПустоеЗначение(СчетД) = 1)
	И (ПустоеЗначение(СчетК) = 1) Тогда
		глКомментарий("Не определен счет дебета и счет кредита в проводке """+Сод+""" по 
		|"+СубД1+", "+СубД2+", "+СубД3+".",1);
		Возврат;
	КонецЕсли;	

	Если ПустоеЗначение(СчетД) = 0 Тогда
		 Если СчетД.КоличествоСубконто()<1 Тогда
			СубД1 = 0;
		 КонецЕсли;	
		 Если СчетД.КоличествоСубконто()<2 Тогда
			СубД2 = 0;
		 КонецЕсли;	
		 Если СчетД.КоличествоСубконто()<3 Тогда
			СубД3 = 0;
		 КонецЕсли;	
	КонецЕсли;	
	Если ПустоеЗначение(СчетК) = 0 Тогда
		 Если СчетК.КоличествоСубконто()<1 Тогда
			СубК1 = 0;
		 КонецЕсли;	
		 Если СчетК.КоличествоСубконто()<2 Тогда
			СубК2 = 0;
		 КонецЕсли;	
		 Если СчетК.КоличествоСубконто()<3 Тогда
			СубК3 = 0;
		 КонецЕсли;	
	КонецЕсли;	

	глТбОперация.НоваяСтрока();

	// заполним дебетовую часть
	глТбОперация.ДебетСчет = СчетД;
	// субконто
	Если СубД1<>0 Тогда
		глТбОперация.ДебетСубконто1 = СубД1;
	КонецЕсли;         
   	Если СубД2<>0 Тогда
		глТбОперация.ДебетСубконто2 = СубД2;
	КонецЕсли;   
   	Если СубД3<>0 Тогда
		глТбОперация.ДебетСубконто3 = СубД3;
	КонецЕсли;                     
	
	глТбОперация.Сумма = Сумма;
	
   	глТбОперация.Комментарий = Сод;
   	глТбОперация.НомерЖурнала = НомерЖурнала;
	Если (ПустоеЗначение(СчетД)=0)
	И (ПустоеЗначение(СчетК)=0) Тогда
		// это не сложная проводка, уберем все что касается сложной проводки
	   	глТбОперация.ПризнакПроводки = 0;
		глТбОперация.ПризнакГлавнойПроводки = 0;   	
	Иначе
	   	глТбОперация.ПризнакПроводки = ПризнакПроводки;
		глТбОперация.ПризнакГлавнойПроводки = ПризнакГлавнойПроводки;   	
	КонецЕсли;	
   	глТбОперация.Валюта = Вал;
	глТбОперация.ВалСумма = ВалСумма;                                                     
	глТбОперация.Количество = Кво;
   	// заполним кредитовую часть
	глТбОперация.КредитСчет = СчетК;
	// субконто
   	Если СубК1<>0 Тогда
		глТбОперация.КредитСубконто1 = СубК1;
	КонецЕсли;
    Если СубК2<>0 Тогда
		глТбОперация.КредитСубконто2 = СубК2;
	КонецЕсли;                                     
	Если СубК3<>0 Тогда
		глТбОперация.КредитСубконто3 = СубК3;
	КонецЕсли;                                     
	
КонецПроцедуры

// ===============================
// добавляем проводку или корреспонденцию
Процедура глПров(Конт,СчД,СчК,Сумма,Сод,Кво,СубД1,СубД2,СубД3,СубК1,СубК2,СубК3,Вал,ВалСумма,НомерЖурнала,Режим)
	СчетД = ?(ТипЗначения(СчД)=2,СчетПоКоду(СчД),СчД);
	СчетК = ?(ТипЗначения(СчК)=2,СчетПоКоду(СчК),СчК);

	Если (Окр(Сумма,2)=0) и (Окр(ВалСумма,2)=0) Тогда
		Если Окр(Кво,3)=0 Тогда
		    Возврат;
		ИначеЕсли (?(ПустоеЗначение(СчетД)=1,1,СчетД.Количественный)=0) 
		И (?(ПустоеЗначение(СчетК)=1,1,СчетК.Количественный)=0) Тогда 		
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Режим = "Проводка" Тогда
	    Конт.Операция.НоваяПроводка();
	Иначе                             
		Конт.Операция.НоваяКорреспонденция();
	КонецЕсли;

	// заполним дебетовую часть
	Конт.Операция.Дебет.Счет = СчетД;
	// субконто
	Если СубД1<>0 Тогда
		Конт.Операция.Дебет.Субконто(1,СубД1);
	КонецЕсли;
   	Если СубД2<>0 Тогда
		Конт.Операция.Дебет.Субконто(2,СубД2);
	КонецЕсли;
   	Если СубД3<>0 Тогда
		Конт.Операция.Дебет.Субконто(3,СубД3);
	КонецЕсли;
	Конт.Операция.Сумма = Сумма;
   	Конт.Операция.Комментарий = Сод;
   	Конт.Операция.НомерЖурнала = НомерЖурнала;
   	Конт.Операция.НашаФирма = Конт.Фирма;
   	
   	фНужнаСложнаяПроводка = 0;

   	Конт.Операция.Валюта = Вал;
	Конт.Операция.ВалСумма = ВалСумма;                                                     
   		
   	Если СокрЛП(СчетД)="" Тогда
   	    Если СчетК.Количественный=1 Тогда
   	        Конт.Операция.Количество = Кво;
   	    КонецЕсли;
   	ИначеЕсли СокрЛП(СчетК)="" Тогда
  	    Если СчетД.Количественный=1 Тогда
   	        Конт.Операция.Количество = Кво;
   	    КонецЕсли;
   	Иначе // выбраны оба счета
   	    Если (СчетД.Количественный=1) или (СчетК.Количественный=1) Тогда
   	        Конт.Операция.Количество = Кво;
   	    КонецЕсли;
   	КонецЕсли;

   	// заполним кредитовую часть
	Конт.Операция.Кредит.Счет = СчетК;
	// субконто
   	Если СубК1<>0 Тогда
		Конт.Операция.Кредит.Субконто(1,СубК1);
	КонецЕсли;
    Если СубК2<>0 Тогда
		Конт.Операция.Кредит.Субконто(2,СубК2);
	КонецЕсли;                                     
	Если СубК3<>0 Тогда
		Конт.Операция.Кредит.Субконто(3,СубК3);
	КонецЕсли;                                     
КонецПроцедуры //глПров

// ===============================
Процедура глПроводка(Конт,СчД,СчК,Сумма,Сод,Кво,СубД1,СубД2,СубД3,СубК1,СубК2,СубК3,Вал,ВалСумма,НомерЖурнала,ЗаписыватьВТаблицу=0,ПризнакПроводки=0,ПризнакГлавнойПроводки=0) Экспорт
	Если ЗаписыватьВТаблицу = 1 Тогда
		глТаблОперации(Конт,СчД,СчК,Сумма,Сод,Кво,СубД1,СубД2,СубД3,СубК1,СубК2,СубК3,Вал,ВалСумма,НомерЖурнала,ПризнакПроводки,ПризнакГлавнойПроводки);
	Иначе
		глПров(Конт,СчД,СчК,Сумма,Сод,Кво,СубД1,СубД2,СубД3,СубК1,СубК2,СубК3,Вал,ВалСумма,НомерЖурнала,"Проводка");
	КонецЕсли;	
КонецПроцедуры //глПроводка

// ===============================
Процедура глКорреспонденция(Конт,СчД,СчК,Сумма,Сод,Кво,СубД1,СубД2,СубД3,СубК1,СубК2,СубК3,Вал,ВалСумма,НомерЖурнала,ЗаписыватьВТаблицу=0,ПризнакПроводки=0) Экспорт
	Если ЗаписыватьВТаблицу = 1 Тогда
		глТаблОперации(Конт,СчД,СчК,Сумма,Сод,Кво,СубД1,СубД2,СубД3,СубК1,СубК2,СубК3,Вал,ВалСумма,НомерЖурнала,ПризнакПроводки);
	ИначеЕсли ЗаписыватьВТаблицу = 0 Тогда
		глПров(Конт,СчД,СчК,Сумма,Сод,Кво,СубД1,СубД2,СубД3,СубК1,СубК2,СубК3,Вал,ВалСумма,НомерЖурнала,"Корреспонденция");
	КонецЕсли;	
КонецПроцедуры //глКорреспонденция
                                         
// ===============================
Процедура глПроводкаПоЗатратам(Конт,СчетЗатрат,СчК,Сумма,Сод,Кво,СубД1,СубД2,СубД3,СубК1,СубК2,СубК3,Вал,ВалСумма,НомерЖурнала,ЗаписыватьВТаблицу=0,ПризнакПроводки=0) Экспорт
Перем сСчетЗатрат,сСчК;
Перем счЗатрат8класс;

	Если ТипЗначенияСтр(СчетЗатрат) = "Строка" Тогда
	    сСчетЗатрат = СчетЗатрат;
	ИначеЕсли ТипЗначенияСтр(СчетЗатрат) = "Счет" Тогда
		сСчетЗатрат = СчетЗатрат.Код;
	КонецЕсли;
	
	счЗатрат8класс = 0;
	Если // затраты относятся на 9-й класс и используются оба класса счетов
		((Лев(сСчетЗатрат,1)="9") и (ИспользоватьСчетаРасходов = Класс89)) 
		или // затраты относятся на счета прозводственных затрат и ведется 8-й класс счетов 
		(((Лев(сСчетЗатрат,2)="23") или (Сред(сСчетЗатрат,1,2)="24")) и 
		((ИспользоватьСчетаРасходов = Класс8) или (ИспользоватьСчетаРасходов = Класс89)))
		Тогда // нужно сделать проводку через 8-й класс счетов
			
		счЗатрат8класс = СубД3.Счет;
		Если (счЗатрат8класс.Код = "85") и (ИспользоватьСчетаРасходов = Класс89) Тогда
			// если это не 85-ый счет
			счЗатрат8класс = 0;
		КонецЕсли;
		
		Если ТипЗначенияСтр(СчК) = "Строка" Тогда
		    сСчК = СчК;
		ИначеЕсли ТипЗначенияСтр(СчК) = "Счет" Тогда
			сСчК = СчК.Код;
		КонецЕсли;
		
        Если (Лев(сСчК,2)="25") или (Лев(сСчК,2)="26") или (сСчК="232") Тогда
			// и если это не списание на затраты полуфабрикатов, подукции ( в т.ч. давальческих )
        	счЗатрат8класс = 0;
        КонецЕсли;
	КонецЕсли;
	
	Если (ПустоеЗначение(счЗатрат8класс)=0) И (Лев(сСчетЗатрат,2)<>"39") Тогда
		// нужно сделать проводки через счет 8-ого класса, указанный для вида затрат
		глПроводка(Конт,СчетЗатрат,счЗатрат8класс,Сумма,Сод,Кво,СубД1,СубД2,СубД3,СубД1,СубД2,СубД3,,,НомерЖурнала,ЗаписыватьВТаблицу,ПризнакПроводки);
		глПроводка(Конт,счЗатрат8класс,СчК,Сумма,Сод,Кво,СубД1,СубД2,СубД3,СубК1,СубК2,СубК3,Вал,ВалСумма,НомерЖурнала,ЗаписыватьВТаблицу,ПризнакПроводки);
	Иначе
		Если ПустоеЗначение(СчетЗатрат) = 1 Тогда
			Сч = СубД3.Счет;
		Иначе
			Сч = сСчетЗатрат;
			Если Лев(сСчетЗатрат,1)="8" Тогда
				Если Сч <> СубД3.Счет.Код Тогда
					глКомментарий("Вид затрат " +СокрЛП(СубД3) +" обычно относится на счет затрат " + СокрЛП(СубД3.Счет.Код) +". Сейчас сформирована проводка на счет затрат " + СокрЛП(Сч) + ", проверьте правильность указания счетов и видов затрат!",2,,"I");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		глПроводка(Конт,Сч,СчК,Сумма,Сод,Кво,СубД1,СубД2,СубД3,СубК1,СубК2,СубК3,Вал,ВалСумма,НомерЖурнала,ЗаписыватьВТаблицу,ПризнакПроводки);
	КонецЕсли;
КонецПроцедуры //глПроводкаПоЗатратам

// ===============================
Процедура глЗаписатьПроводкиВОперацию(Конт) Экспорт	                                                               
	
	глТбОперация.Свернуть("ПризнакПроводки,ПризнакГлавнойПроводки,ДебетСчет,КредитСчет,ДебетСубконто1,КредитСубконто1,
	|ДебетСубконто2,КредитСубконто2,ДебетСубконто3,КредитСубконто3,Валюта,НомерЖурнала,Комментарий","Сумма,Количество,ВалСумма");
	
	глТбОперация.Сортировать("ПризнакПроводки,-ПризнакГлавнойПроводки");
       
	// земеним сложные проводки в которых в деб. и кред. только один счет (могли такие получиться)
	// на полноценную простую проводку
	текПризнакПроводки = "";
	текКредитСчет = "";
	текДебетСчет = "";
	текСумма = 0;
	предНомерСтроки = 0; // номер строки, в которой находится первая часть сложной проводки

	// свернем сложные проводки у которых только один счет дебета и кредита
	глТбОперация.ВыбратьСтроки();
	Пока глТбОперация.ПолучитьСтроку() = 1 Цикл
		// строки без признака проводки не обрабатываем
		Если ПустоеЗначение(глТбОперация.ПризнакПроводки) = 1 Тогда
			Продолжить;
		КонецЕсли;		                                     
		// простые проводки не обрабатываем
		Если (ПустоеЗначение(глТбОперация.ДебетСчет)=0)
		И (ПустоеЗначение(глТбОперация.КредитСчет)=0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустоеЗначение(предНомерСтроки) = 0 Тогда
			// начинаем обработку, только если нашли первую корресп. сложной проводки
			Если (текПризнакПроводки = глТбОперация.ПризнакПроводки)
			И ((текСумма=глТбОперация.Сумма) И ((ПустоеЗначение(текСумма)=0) ИЛИ (ПустоеЗначение(глТбОперация.Сумма)=0)))
			И (текКредитСчет <> глТбОперация.КредитСчет)
			И (текДебетСчет <> глТбОперация.ДебетСчет) Тогда
				// нашли проводку с нужным признаком и нужной суммой. Делаем простую проводку.
				Если ПустоеЗначение(глТбОперация.ДебетСчет) = 1 Тогда
					глТбОперация.УстановитьЗначение(предНомерСтроки,"КредитСчет",	  глТбОперация.КредитСчет);
					глТбОперация.УстановитьЗначение(предНомерСтроки,"КредитСубконто1",глТбОперация.КредитСубконто1);
					глТбОперация.УстановитьЗначение(предНомерСтроки,"КредитСубконто2",глТбОперация.КредитСубконто2);
					глТбОперация.УстановитьЗначение(предНомерСтроки,"КредитСубконто3",глТбОперация.КредитСубконто3);
					// в предыдущей строке может не быть некоторых значенией
					// переносим валюту в предыдущую строку
					Если ПустоеЗначение(глТбОперация.Валюта) = 0 Тогда  
						глТбОперация.УстановитьЗначение(предНомерСтроки,"Валюта",глТбОперация.Валюта);
					КонецЕсли;	
					// переносим валютную сумму в предыдущую строку
					Если ПустоеЗначение(глТбОперация.ВалСумма) = 0 Тогда
						глТбОперация.УстановитьЗначение(предНомерСтроки,"ВалСумма",глТбОперация.ВалСумма);
					КонецЕсли;	           
					// переносим количество в предыдущую строку
					Если ПустоеЗначение(глТбОперация.Количество) = 0 Тогда
						глТбОперация.УстановитьЗначение(предНомерСтроки,"Количество",глТбОперация.Количество);
					КонецЕсли;	             
				ИначеЕсли ПустоеЗначение(глТбОперация.КредитСчет) = 1 Тогда
					глТбОперация.УстановитьЗначение(предНомерСтроки,"ДебетСчет",	 глТбОперация.ДебетСчет);
					глТбОперация.УстановитьЗначение(предНомерСтроки,"ДебетСубконто1",глТбОперация.ДебетСубконто1);
					глТбОперация.УстановитьЗначение(предНомерСтроки,"ДебетСубконто2",глТбОперация.ДебетСубконто2);
					глТбОперация.УстановитьЗначение(предНомерСтроки,"ДебетСубконто3",глТбОперация.ДебетСубконто3);
					// в предыдущей строке может не быть некоторых значенией
					// переносим валюту в предыдущую строку
					Если ПустоеЗначение(глТбОперация.Валюта) = 0 Тогда  
						глТбОперация.УстановитьЗначение(предНомерСтроки,"Валюта",глТбОперация.Валюта);
					КонецЕсли;	
					// переносим валютную сумму в предыдущую строку
					Если ПустоеЗначение(глТбОперация.ВалСумма) = 0 Тогда
						глТбОперация.УстановитьЗначение(предНомерСтроки,"ВалСумма",глТбОперация.ВалСумма);
					КонецЕсли;	           
					// переносим количество в предыдущую строку
					Если ПустоеЗначение(глТбОперация.Количество) = 0 Тогда
						глТбОперация.УстановитьЗначение(предНомерСтроки,"Количество",глТбОперация.Количество);
					КонецЕсли;	             
				КонецЕсли;                   
				// все необходимое перенесли в предыдущую строку,
				// текущую можем очистить
				глТбОперация.ПризнакПроводки = ПолучитьПустоеЗначение();
				глТбОперация.ДебетСчет		 = ПолучитьПустоеЗначение();
				глТбОперация.ДебетСубконто1	 = ПолучитьПустоеЗначение();	
				глТбОперация.ДебетСубконто2	 = ПолучитьПустоеЗначение();	
				глТбОперация.ДебетСубконто3	 = ПолучитьПустоеЗначение();
				глТбОперация.КредитСчет		 = ПолучитьПустоеЗначение();
				глТбОперация.КредитСубконто1 = ПолучитьПустоеЗначение();
				глТбОперация.КредитСубконто2 = ПолучитьПустоеЗначение();
				глТбОперация.КредитСубконто3 = ПолучитьПустоеЗначение();
				глТбОперация.Сумма			 = ПолучитьПустоеЗначение();
				глТбОперация.Количество		 = ПолучитьПустоеЗначение();
				глТбОперация.Валюта			 = ПолучитьПустоеЗначение();
				глТбОперация.ВалСумма		 = ПолучитьПустоеЗначение();
				глТбОперация.НомерЖурнала	 = ПолучитьПустоеЗначение();
				глТбОперация.Комментарий	 = ПолучитьПустоеЗначение();
				// опять ищем первую корресп. сложной проводки
				предНомерСтроки = 0;
			КонецЕсли;				
		КонецЕсли;	
		// нашли начало сложной проводки
		текКредитСчет		 = глТбОперация.КредитСчет;
		текДебетСчет		 = глТбОперация.ДебетСчет;
		текПризнакПроводки	 = глТбОперация.ПризнакПроводки;
		текСумма			 = глТбОперация.Сумма;
		предНомерСтроки		 = глТбОперация.НомерСтроки;
	КонецЦикла;
	
	текНомерСтроки = 1;
	// теперь уберем пустые строки
	Пока 1=1 Цикл
		
		Если текНомерСтроки > глТбОперация.КоличествоСтрок() Тогда
			Прервать;
		КонецЕсли;	
		
		глТбОперация.ПолучитьСтрокуПоНомеру(текНомерСтроки);   
		
		Если (ПустоеЗначение(глТбОперация.ДебетСчет) = 1)
		И (ПустоеЗначение(глТбОперация.КредитСчет) = 1) Тогда
			глТбОперация.УдалитьСтроку();                                
			Продолжить;
		КонецЕсли;   
		
		текНомерСтроки = текНомерСтроки + 1;
	КонецЦикла;	
	
	глТбОперация.Сортировать("ПризнакПроводки,-ПризнакГлавнойПроводки,ДебетСчет,КредитСчет");
	
	ПризнакПроводки = "";
	глТбОперация.ВыбратьСтроки();	
	Пока глТбОперация.ПолучитьСтроку() = 1 Цикл
		Если (((ПризнакПроводки <> глТбОперация.ПризнакПроводки)
		И (ПустоеЗначение(глТбОперация.ПризнакПроводки)=0)) 
		ИЛИ (ПустоеЗначение(глТбОперация.ПризнакПроводки)=1)) Тогда
			глПроводка(Конт,глТбОперация.ДебетСчет,глТбОперация.КредитСчет
			,глТбОперация.Сумма,глТбОперация.Комментарий,глТбОперация.Количество
			,глТбОперация.ДебетСубконто1,глТбОперация.ДебетСубконто2,глТбОперация.ДебетСубконто3
			,глТбОперация.КредитСубконто1,глТбОперация.КредитСубконто2,глТбОперация.КредитСубконто3
			,глТбОперация.Валюта,глТбОперация.ВалСумма
			,глТбОперация.НомерЖурнала,0,0);
			ПризнакПроводки = глТбОперация.ПризнакПроводки;
			Продолжить;
		КонецЕсли;	
		Если ((ПустоеЗначение(глТбОперация.ДебетСчет) = 1) 
		ИЛИ (ПустоеЗначение(глТбОперация.КредитСчет) = 1)) Тогда
			глКорреспонденция(Конт,глТбОперация.ДебетСчет,глТбОперация.КредитСчет
			,глТбОперация.Сумма,глТбОперация.Комментарий,глТбОперация.Количество
			,глТбОперация.ДебетСубконто1,глТбОперация.ДебетСубконто2,глТбОперация.ДебетСубконто3
			,глТбОперация.КредитСубконто1,глТбОперация.КредитСубконто2,глТбОперация.КредитСубконто3
			,глТбОперация.Валюта,глТбОперация.ВалСумма
			,глТбОперация.НомерЖурнала,0,0);
		Иначе
			глПроводка(Конт,глТбОперация.ДебетСчет,глТбОперация.КредитСчет
			,глТбОперация.Сумма,глТбОперация.Комментарий,глТбОперация.Количество
			,глТбОперация.ДебетСубконто1,глТбОперация.ДебетСубконто2,глТбОперация.ДебетСубконто3
			,глТбОперация.КредитСубконто1,глТбОперация.КредитСубконто2,глТбОперация.КредитСубконто3
			,глТбОперация.Валюта,глТбОперация.ВалСумма
			,глТбОперация.НомерЖурнала,0,0);
		КонецЕсли;	
	КонецЦикла;	     
	
	глТбОперация.УдалитьСтроки();
КонецПроцедуры //глЗаписатьПроводкиВОперацию

// ===============================
Функция глСчетРеализации(Товар, ВРознице = 0) Экспорт
	ВидТовара = Товар.ВидТМЦ;
	Если ВидТовара = Перечисление.ВидыТМЦ.Продукция Тогда 
		Возврат ?(ИспользоватьСчетаРасходов=Класс8,"791","901");
	ИначеЕсли ВидТовара = Перечисление.ВидыТМЦ.Товар Тогда 
		Возврат ?(ИспользоватьСчетаРасходов=Класс8,"791","902");
	ИначеЕсли ВидТовара = Перечисление.ВидыТМЦ.Услуга Тогда 
		Возврат ?(ИспользоватьСчетаРасходов=Класс8,"791","903");
	ИначеЕсли ВидТовара = Перечисление.ВидыТМЦ.Полуфабрикат Тогда 
		Возврат ?(ИспользоватьСчетаРасходов=Класс8,"791",?(ВРознице = 1,"901","943"));
	Иначе
		Возврат ?(ИспользоватьСчетаРасходов=Класс8,"84",?(ВРознице = 1,"902","943"));
	КонецЕсли;           
КонецФункции
                           
// ===============================
Процедура глПроверитьТипПодразделения(Под, ТекстПод = "подразделения", НомСтр = 0) Экспорт
	Если ПустоеЗначение(Под) = 1 Тогда
	    Возврат;
	КонецЕсли;  
	
	ВСтроке = ?(НомСтр=0,""," в строке "+НомСтр);
	Если  (Под.ТипПодразделения <> Перечисление.ТипыПодразделений.Производственное) 
		И (Под.ТипПодразделения <> Перечисление.ТипыПодразделений.Обслуживающее) Тогда
		глКомментарий("Тип "+ТекстПод + ВСтроке + " должен быть ""производственное"" или ""обслуживающее""!",1,,"!");
	КонецЕсли;
КонецПроцедуры //глПроверитьСчетЗатрат

// ===============================
// Функция проверяет, соответствует ли указанный счет затрат выбранным в константе установкам
// Сч - счет или код счета
// Предупреждать - 1 - выдавать ли предупреждение пользователю, 2 - выдавать сообщение
// Разрешать231 - устанавливает возможность выбора 231-го счета в конктретном документе
// Реквизит - название реквизита
// ВСтроке - номер строки

Функция глПроверитьСчетЗатрат(Знач СчетЗатрат, Предупреждать=1, Разрешать231 = 1, Реквизит = "", ВСтроке = 0) Экспорт
Перем сСчетЗатрат;
	Если ТипЗначенияСтр(СчетЗатрат) = "Строка" Тогда
	    сСчетЗатрат = СчетЗатрат;
		СчетЗатрат = СчетПоКоду(сСчетЗатрат);
	ИначеЕсли ТипЗначенияСтр(СчетЗатрат) = "Счет" Тогда
		сСчетЗатрат = СчетЗатрат.Код;
	КонецЕсли;  
	
	фОшибка = 0;
	Если (сСчетЗатрат = "231") Тогда
		Если (Разрешать231 = 0) Тогда
	        ТекстПредупреждения = "Нельзя использовать счет 231 в качестве счета затрат!";
			фОшибка = 1;
		Иначе
			// разрешаем выбирать 231 без проверки на значение константы ИспользоватьСчетаРасходов
		КонецЕсли;
	ИначеЕсли (сСчетЗатрат = "24") Или (сСчетЗатрат = "39") Тогда
	    // счета 24 и 39 можно выбирать при любом значении константы ИспользоватьСчетаРасходов
	ИначеЕсли СчетЗатрат.ВидСубконто(3) <> ВидыСубконто.ВидыЗатрат Тогда
	    ТекстПредупреждения = "По счету затрат должен вестись аналитический учет по видам затрат (субконто 3)!";
	    фОшибка = 1; 
	Иначе
		ТекстПредупреждения = "Выбранный счет затрат не соответствует установленному значению в константе ""Использовать счета расходов""!";
		Если (ИспользоватьСчетаРасходов = Класс8) и (Лев(сСчетЗатрат,1)<>"8") Тогда
			фОшибка = 1
	    ИначеЕсли (ИспользоватьСчетаРасходов = Класс9) и (Лев(сСчетЗатрат,1) <> "9") Тогда
			фОшибка = 1
		ИначеЕсли (ИспользоватьСчетаРасходов = Класс89) и (Лев(сСчетЗатрат,1) <> "9") Тогда
			фОшибка = 1
		КонецЕсли; 
	КонецЕсли;
	Если фОшибка = 1 Тогда
		Если Предупреждать=1 Тогда
			глПоказатьПредупреждение(ТекстПредупреждения);
		КонецЕсли;
		Если Предупреждать=2 Тогда
			Если ПустоеЗначение(Реквизит)=0 Тогда
				глКомментарий("Реквизит "+Реквизит+?(ВСтроке=0,""," в строке "+ВСтроке)+" установлен неверно!",0,,"!");
			КонецЕсли;
			глКомментарий(ТекстПредупреждения,0,,"!");
			Если (ИспользоватьСчетаРасходов = Класс89) и (Лев(сСчетЗатрат,1) = "8") Тогда
				глКомментарий("Счет затрат 8-го класса нужно указывать в справочнике ""Виды затрат"".",2,,"I");
			КонецЕсли; 
		КонецЕсли;			
		Возврат 0;
	КонецЕсли;
	Возврат 1;
КонецФункции //глПроверитьСчетЗатрат

// ===============================
Функция глПроверитьАналитикуПоЗатратам(Под, ВиД, Зак, Про,ТекстПод = " реквизит ""Подразделение""", ТекстВиД = " реквизит ""Вид деятельности""",
	ТекстЗак=" реквизит ""Заказ""" ,ТекстПро = " реквизит ""Продукция""",НомСтр = 0,фПодВШапке = 0) Экспорт
	ВСтроке = ?(НомСтр=0,""," в строке "+НомСтр);
	//Подразделение - всегда в шапке документа, ВидДеятельности, Заказ, Продукция - могут быть в 
	//табличной части документа, по этому добавляем к сообщениям для них строку Встроке
	Если ПустоеЗначение(Про) = 0 Тогда    
		ВидПродукции = Про.ВидТМЦ;
		Если (ВидПродукции <> Перечисление.ВидыТМЦ.Продукция) и (ВидПродукции <> Перечисление.ВидыТМЦ.Полуфабрикат)
		и (ВидПродукции <> Перечисление.ВидыТМЦ.Услуга) Тогда
		    глКомментарий("Неверно заполнен" + ТекстПро + ВСтроке+". Разрешается выбирать ТМЦ с видом Продукция, Полуфабрикат или Услуга!",0);
		    Возврат 0;
		КонецЕсли;
		Если ПустоеЗначение(Под) = 1 Тогда
			глКомментарий("Не заполнен"+ТекстПод+?(фПодВШапке = 1,"",ВСтроке)+"!",0);
			глКомментарий("Неправильно отражены затраты! Если заполнен"+ТекстПро+", то обязательно должен быть заполнен"+ТекстПод+"!",3);
			Возврат 0;
		ИначеЕсли ПустоеЗначение(ВиД) = 1 Тогда
			глКомментарий("Не заполнен"+ТекстВиД+ВСтроке+"!",0);
			глКомментарий("Неправильно отражены затраты! Если заполнен"+ТекстПро+", то обязательно должен быть заполнен"+ТекстВиД+"!",3);
			Возврат 0;
		ИначеЕсли (ПустоеЗначение(Зак) = 1) и (ВиД.ПозаказноеПроизводство = Да) Тогда
			глКомментарий("Не заполнен"+ТекстЗак+ВСтроке+"!",0);
			глКомментарий("Неправильно отражены затраты! Если заполнен"+ТекстПро+", то при позаказном производстве (вид деятельности "+ВиД+") обязательно должен быть заполнен"+ТекстЗак+"!",3);
			Возврат 0;
		ИначеЕсли (ПустоеЗначение(Зак) = 0) и (ВиД.ПозаказноеПроизводство = Нет) Тогда
			глКомментарий("Заполнен"+ТекстЗак+ВСтроке+"!",0);
			глКомментарий("Неправильно отражены затраты! При массовом производстве (вид деятельности "+ВиД+") не должен быть заполнен"+ТекстЗак+"!",3);
			Возврат 0;
		КонецЕсли;	
	ИначеЕсли ПустоеЗначение(Зак) = 0 Тогда
		Если ПустоеЗначение(Под) = 1 Тогда
			глКомментарий("Не заполнен"+ТекстПод+?(фПодВШапке = 1,"",ВСтроке)+"!",0);
			глКомментарий("Неправильно отражены затраты! Если заполнен"+ТекстЗак+", то обязательно должен быть заполнен"+ТекстПод+"!",3);
			Возврат 0;
		ИначеЕсли ПустоеЗначение(ВиД) = 1 Тогда
			глКомментарий("Не заполнен"+ТекстВиД+ВСтроке+"!",0);
			глКомментарий("Неправильно отражены затраты! Если заполнен"+ТекстЗак+", то обязательно должен быть заполнен"+ТекстВиД+"!",3);
			Возврат 0;
		ИначеЕсли ВиД.ПозаказноеПроизводство = Нет Тогда
			глКомментарий("Заполнен"+ТекстЗак+ВСтроке+"!",0);
			глКомментарий("Неправильно отражены затраты! При массовом производстве (вид деятельности "+ВиД+") не должен быть заполнен"+ТекстЗак+"!",3);
			Возврат 0;
		КонецЕсли;
	ИначеЕсли ПустоеЗначение(ВиД) = 0 Тогда
		Если ПустоеЗначение(Под) = 1 Тогда
			глКомментарий("Не заполнен"+ТекстПод+?(фПодВШапке = 1,"",ВСтроке)+"!",0);
			глКомментарий("Неправильно отражены затраты! Если заполнен"+ТекстВиД+", то обязательно должен быть заполнен"+ТекстПод+"!",3);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции //глПроверитьАналитикуПоЗатратам

// ===============================
Функция глФРМВал(Сум, Вал, СВалютой = 0) Экспорт
	Стр=СокрЛ(Формат(Сум,"Ч018.2.'"));
	Если ((Свалютой=1) ИЛИ (СВалютой = Да)) И (ПустаяСтрока(Стр)=0) Тогда
		Возврат Стр+" "+СокрП(Вал.Кратко);
	Иначе
		Возврат Стр;
	КонецЕсли;
КонецФункции //глФРМВал
                                                                                   
// ===============================
// курс строкой
Функция глКурсВалютыСтр(Вал,Дт) Экспорт 
	Если ПустоеЗначение(Вал) = 0 Тогда
    	Возврат "грн за "+Вал.Кратность.Получить(Дт)+" "+ Вал.Кратко;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции //глКурсВалютыСтр

// ===============================
// ТаблицаСчетов: таблица значений: Счет, Субконто1, Субконто2, Субконто3, 
//									Валюта, ОперационнаяКР, ВидДеятельности
// ОперационнаяКР: признак операционной/неоперационной курсовой разницы, 1=Да 0=Нет
Функция глПереоценкаСчетов(Конт, ТаблицаСчетов, НомерЖурнала="БК") Экспорт
	
	//--- УМК Сандомирский В.Ю, (коменчу всю процедуру дабы небыло проводок по ВЛ и ВД\ВР)
	
	
//	Перем Ит;
//	Перем СчетЗатратОперКР,	ВидЗатратОперКР, СчетЗатратНеоперКР, ВидЗатратНеоперКР;
//	Перем СчетДоходовОперКР, СчетДоходовНеоперКР;
//	Перем ОстатокГрн, ОстатокВал, НовыйОстатокГрн, Разница;
//	Перем Курс, Кратность;
//	Перем СубконтоВалРасх, СубконтоВалДох;
//	
//	Если ТаблицаСчетов.КоличествоСтрок() = 0 Тогда
//		Возврат 1;
//	КонецЕсли;
//	
//	// определим счета доходов
//	СчетДоходовОперКР = СчетПоКоду("71.4");
//	СчетДоходовНеоперКР = СчетПоКоду("74.4");
//	// определим счета расходов
//	Если ИспользоватьСчетаРасходов = Класс8 Тогда
//		СчетЗатратОперКР = СчетПоКоду("84");
//		СчетЗатратНеоперКР = СчетПоКоду("85");
//	ИначеЕсли ИспользоватьСчетаРасходов = Класс9 Тогда
//		СчетЗатратОперКР = СчетПоКоду("94.5");
//		СчетЗатратНеоперКР = СчетПоКоду("97.4");
//	Иначе
//		СчетЗатратОперКР = СчетПоКоду("84");
//		СчетЗатратНеоперКР = СчетПоКоду("97.4");
//	КонецЕсли;
//	
//	// определим виды затрат (из констант) по счетам расходов
//	ВидЗатратОперКР = Константа.ВидЗатратОперКР;
//	ВидЗатратНеоперКР = Константа.ВидЗатратНеоперКР;
//	Если (ПустоеЗначение(ВидЗатратНеоперКР) = 1) или (ПустоеЗначение(ВидЗатратОперКР) = 1) Тогда
//		Если ПустоеЗначение(ВидЗатратОперКР) = 1 Тогда
//			глКомментарий("Не заполнена константа ""Вид затрат по операционной курсовой разнице""!",0,,"!!!");
//		КонецЕсли;
//		Если ПустоеЗначение(ВидЗатратНеоперКР) = 1 Тогда
//			глКомментарий("Не заполнена константа ""Вид затрат по неоперационной курсовой разнице""!",0,,"!!!");
//		КонецЕсли;
//		глКомментарий("Невозможно выполнить переоценку!",0,,"!!!");
//		Возврат 0;
//	КонецЕсли;
//
//	// С 01.01.2003 налоговый учет балансовой стоимости валюты ведется по 
//	// правилам бухгалтерского Стандарта 21.
//	// В момент переоценки любого валютного счета (кассы) переоценим и 
//	// налоговую балансовую стоимость валюты на счете ВЛ
//	Если Конт.ДатаДок >= '01.01.2003' Тогда
//		спВалютныеСчета = СоздатьОбъект("СписокЗначений");
//		
//		ТаблицаСчетов.ВыбратьСтроки();
//		Пока ТаблицаСчетов.ПолучитьСтроку() = 1 Цикл
//			стрСчет = Лев(ТаблицаСчетов.Счет.Код,2);
//			Если (стрСчет = "30") или (стрСчет = "31") Тогда
//				// запоминаем все кассы и валютные счета
//				спВалютныеСчета.ДобавитьЗначение(ТаблицаСчетов.Субконто1,ЗначениеВСтрокуВнутр(ТаблицаСчетов.Валюта));
//			КонецЕсли;
//		КонецЦикла;
//		
//		// добавляем в таблицу со счетом ВЛ
//		Для Инд = 1 По спВалютныеСчета.РазмерСписка() Цикл
//			ТаблицаСчетов.НоваяСтрока();
//			ТаблицаСчетов.Счет = СчетПоКоду("ВЛ");
//			
//			стрВалюта = "";
//			ТаблицаСчетов.Субконто1 = спВалютныеСчета.ПолучитьЗначение(Инд,стрВалюта);
//			ТаблицаСчетов.Валюта = ЗначениеИзСтрокиВнутр(стрВалюта);
//		КонецЦикла;
//		спВалютныеСчета = 0;
//	КонецЕсли;
//	
//	// определим аналитику для налогового учета
//	СубконтоВалРасх = Константа.ВаловыйРасходВалюта;
//	СубконтоВалДох = Константа.ВаловыйДоходВалюта;
//	
//	// "Визначення курсових різниць за монетарними статтями в іноземній валюті 
//	// проводиться на дату здійснення розрахунків та на дату балансу..."
//	// (П.8 Стандарта 21 НСБУ "Вплив змін валютних курсів")
//	
//	ТаблицаСчетов.Свернуть("Счет, Субконто1, Субконто2, Субконто3, Валюта, ОперационнаяКР, ВидДеятельности",);
//
//	// определим остатки на начало документа по немонетарным счетам
//	Ит = СоздатьОбъект("БухгалтерскиеИтоги");
//	Ит.ИспользоватьРазделительУчета(Конт.Фирма);                                       
//	спОстаткиНемонетарныхСчетов = СоздатьОбъект("СписокЗначений");
//	ТаблицаСчетов.ВыбратьСтроки();
//	Пока ТаблицаСчетов.ПолучитьСтроку() = 1 Цикл
//		Счет = ТаблицаСчетов.Счет;
//		// обрабатываем немонетарные счета
//		Если глНемонетарныеСчета.Принадлежит(Число(СтрЗаменить(Счет.Код,".",""))) = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//
//		Субконто1 = ТаблицаСчетов.Субконто1;
//		Субконто2 = ТаблицаСчетов.Субконто2;
//		Субконто3 = ТаблицаСчетов.Субконто3;
//		Валюта = ТаблицаСчетов.Валюта;
//		
//		// рассчитаем итоги запросом
//		Если ПустоеЗначение(Субконто1) = 0 Тогда
//			Ит.ИспользоватьСубконто(Счет.ВидСубконто(1),Субконто1,2);
//		КонецЕсли;
//		Если ПустоеЗначение(Субконто2) = 0 Тогда
//			Ит.ИспользоватьСубконто(Счет.ВидСубконто(2),Субконто2,2);
//		КонецЕсли;
//		Если ПустоеЗначение(Субконто3) = 0 Тогда
//			Ит.ИспользоватьСубконто(Счет.ВидСубконто(3),Субконто3,2);
//		КонецЕсли;
//		Ит.ВыполнитьЗапрос(,Конт.ТекущийДокумент(),Счет,,Валюта);
//		
//		// определим остатки по бухг. учету
//		ТекНомер = ТаблицаСчетов.ТекущаяСтрока();
//		спОстаткиНемонетарныхСчетов.ДобавитьЗначение(Ит.СКД("С") - Ит.СКК("С"),"Грн"+ТекНомер);
//		спОстаткиНемонетарныхСчетов.ДобавитьЗначение(Ит.СКД("В") - Ит.СКК("В"),"Вал"+ТекНомер);
//	КонецЦикла;
//
//	// запишем уже сделанные документом проводки, чтобы иметь актуальное состояние бух. итогов
//	Конт.Операция.ЗаписатьПроводки();
//
//	Ит = СоздатьОбъект("БухгалтерскиеИтоги");
//	Ит.ИспользоватьРазделительУчета(Конт.Фирма);
//	
//	ТаблицаСчетов.ВыбратьСтроки();
//	Пока ТаблицаСчетов.ПолучитьСтроку() = 1 Цикл
//		Счет = ТаблицаСчетов.Счет;
//		Субконто1 = ТаблицаСчетов.Субконто1;
//		Субконто2 = ТаблицаСчетов.Субконто2;
//		Субконто3 = ТаблицаСчетов.Субконто3;
//		Валюта = ТаблицаСчетов.Валюта;
//		
//		// проверки на допустимость счета
//		Если (глСчетаОстатковВВалюте.Принадлежит(Число(СтрЗаменить(Счет.Код,".",""))) = 0) 
//		И (глСчетаЗадолженностейВВалюте.Принадлежит(Число(СтрЗаменить(Счет.Код,".",""))) = 0) 
//		И (Счет.Код <> "ВЛ") Тогда
//			глКомментарий("Счет не является счетом остатков или задолженностей в валюте. Переоценка счета "+Счет+" не выполнена.", 0,,"I");
//			Продолжить;
//		КонецЕсли;
//		
//		// рассчитаем итоги запросом
//		Если ПустоеЗначение(Субконто1) = 0 Тогда
//			Ит.ИспользоватьСубконто(Счет.ВидСубконто(1),Субконто1,2);
//		КонецЕсли;
//		Если ПустоеЗначение(Субконто2) = 0 Тогда
//			Ит.ИспользоватьСубконто(Счет.ВидСубконто(2),Субконто2,2);
//		КонецЕсли;
//		Если ПустоеЗначение(Субконто3) = 0 Тогда
//			Ит.ИспользоватьСубконто(Счет.ВидСубконто(3),Субконто3,2);
//		КонецЕсли;
//		Ит.ВыполнитьЗапрос(,Конт.ТекущийДокумент(),Счет,,ТаблицаСчетов.Валюта);
//		
//		// определим курс и кратность валюты
//		Курс = Валюта.Курс.Получить(Конт.ДатаДок);
//		Кратность = Валюта.Кратность.Получить(Конт.ДатаДок);
//		Кратность = ?(Кратность=0,1,Кратность);
//		
//		// определим курсовую разницу по бухг. учету
//		ОстатокГрн = Ит.СКД("С") - Ит.СКК("С");
//		ОстатокВал = Ит.СКД("В") - Ит.СКК("В");
//		Если (глНемонетарныеСчета.Принадлежит(Число(СтрЗаменить(Счет.Код,".",""))) = 0) Тогда
//			НовыйОстатокГрн = Окр(ОстатокВал*Курс/Кратность,2);
//			Разница = НовыйОстатокГрн - ОстатокГрн;                                   
//		Иначе                
//			ТекНомер = ТаблицаСчетов.ТекущаяСтрока();
//			СтарОстатокГрн = спОстаткиНемонетарныхСчетов.Получить("Грн"+ТекНомер);
//			СтарОстатокВал = спОстаткиНемонетарныхСчетов.Получить("Вал"+ТекНомер);
//			Разница = ?(СтарОстатокВал = 0,0,ОстатокВал/СтарОстатокВал*СтарОстатокГрн) - ОстатокГрн;
//		КонецЕсли;
//		
//		Если Разница <> 0 Тогда
//			Если Счет.Код = "ВЛ" Тогда
//				// налоговый учет
//				// переоценка забалансового счета "ВЛ"
//				глПроводка(Конт,"ВЛ",,Разница,"Переоценка валюты",, Субконто1,,,
//				,,, Валюта,,НомерЖурнала);
//				Если Разница > 0 Тогда 
//					// доход от курсовой разницы
//					глПроводка(Конт,"ВД","ВД",Разница,"Переоценка: доход: "+Субконто1,, ,,СубконтоВалДох,
//					,,СубконтоВалДох, ,,НомерЖурнала);
//				Иначе
//					// расход от курсовой разницы
//					глПроводка(Конт,"ВР","ВР",-Разница,"Переоценка: расход: "+Субконто1,, ,,СубконтоВалРасх,
//					,,СубконтоВалРасх, ,,НомерЖурнала);
//				КонецЕсли;
//			Иначе
//				// бухгалтерский учет
//				Если Разница > 0 Тогда
//					// доход от курсовой разницы
//					Если Счет.Забалансовый = 0 Тогда
//						// сделаем проводку по бухг. учету
//						СчетДоходов = ?(ТаблицаСчетов.ОперационнаяКР = 0, СчетДоходовНеоперКР, СчетДоходовОперКР);
//						глПроводка(Конт,Счет,СчетДоходов,Разница,"Переоценка валюты: доход",, Субконто1, Субконто2, Субконто3,
//						ТаблицаСчетов.ВидДеятельности,,, Валюта,,НомерЖурнала);
//					Иначе
//						// проводка по забаланс. счету
//						глПроводка(Конт,Счет,,Разница,"Переоценка валюты: доход",, Субконто1, Субконто2, Субконто3,
//						,,, Валюта,,НомерЖурнала);
//					КонецЕсли;
//				Иначе
//					// расход от курсовой разницы
//					Если Счет.Забалансовый = 0 Тогда
//						// определим счет и вид затрат (операционные/неоперационные)
//						СчетЗатрат = ?(ТаблицаСчетов.ОперационнаяКР = 0, СчетЗатратНеоперКР, СчетЗатратОперКР);
//						ВидЗатрат = ?(ТаблицаСчетов.ОперационнаяКР = 0, ВидЗатратНеоперКР, ВидЗатратОперКР);
//						
//						глПроводка(Конт,СчетЗатрат,Счет,-Разница,"Переоценка валюты: убыток",, ТаблицаСчетов.ВидДеятельности, ,ВидЗатрат,
//						Субконто1, Субконто2, Субконто3, Валюта,,НомерЖурнала);
//						
//						//Закрываем на 9 класс
//						Если (ИспользоватьСчетаРасходов = Класс89) И (Лев(СчетЗатрат,2)="84") Тогда
//							глПроводка(Конт,"945",СчетЗатрат,-Разница,"Переоценка валюты: убыток",, ТаблицаСчетов.ВидДеятельности,, ВидЗатрат,
//							ТаблицаСчетов.ВидДеятельности, ,ВидЗатрат,,,НомерЖурнала);
//						КонецЕсли;
//						
//					Иначе
//						глПроводка(Конт,,Счет,-Разница,"Переоценка валюты: убыток",, ,,,
//						Субконто1, Субконто2, Субконто3, Валюта,,НомерЖурнала);
//					КонецЕсли;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
	
	//... УМК Сандомирский В.Ю, (коменчу всю процедуру дабы небыло проводок по ВЛ и ВД\ВР)

	Возврат 1;
КонецФункции //глПереоценкаСчетов

// ===============================
// Параметры: контекст документа, элемент справочника ТМЦ,
// элемент перечисления Единицы (если опущен, то берем из ТМЦ.БазЕдиница)
Процедура глУстановкаБазЕд(Конт,Тов,УстЕд = 0, УстановитьБазовуюЕслиНет = 0, ИмяЕд = "Ед", ИмяКоэф = "Коэффициент") Экспорт
	ЕдИзм = СоздатьОбъект("Справочник.Единицы");
	Если ПустоеЗначение(Тов) = 1 Тогда
		Если ПустоеЗначение(Константа.СлужебныйТМЦ) = 0 Тогда
			Тов = Константа.СлужебныйТМЦ;
		Иначе
			глПоказатьПредупреждение("Не заполнено значение константы ""Служебный ТМЦ"", установка единицы измерения не выполнена!");  
			Возврат;
		КонецЕсли;
	КонецЕсли;
	НовЕд = ?(УстЕд = 0, Тов.БазоваяЕдиница, УстЕд);
	ЕдИзм.ИспользоватьВладельца(Тов);
	ЕдИзм.ВыбратьЭлементы();
	Пока ЕдИзм.ПолучитьЭлемент()>0 Цикл
		Если ЕдИзм.Единица=НовЕд Тогда
   		 	Конт.УстановитьАтрибут(ИмяЕд, ЕдИзм.ТекущийЭлемент());
			Конт.УстановитьАтрибут(ИмяКоэф, ЕдИзм.Коэффициент);
		    Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если УстановитьБазовуюЕслиНет = 1 Тогда
		Конт.УстановитьАтрибут(ИмяЕд, Тов.ЕдиницаПоУмолчанию);
		Конт.УстановитьАтрибут(ИмяКоэф, Тов.ЕдиницаПоУмолчанию.Коэффициент);
	Иначе
		// еще нет такой единицы
		ЕдИзм.Новый();
		ЕдИзм.Единица = НовЕд;
		ЕдИзм.Коэффициент = 1;
		ЕдИзм.Наименование = Строка(НовЕд);
		ЕдИзм.Записать();
	
   	 	Конт.УстановитьАтрибут(ИмяЕд, ЕдИзм.ТекущийЭлемент());
		Конт.УстановитьАтрибут(ИмяКоэф, 1);
	КонецЕсли
КонецПроцедуры //глУстановкаБазЕд

//Устаноавливае историю опр на основанииее проведения документа ПланПродаж
//док - ПланПродаж
Процедура глУстановитьЗначениеКонстантыОПР(док, ОПР = 0)Экспорт
	
	НачалоПериода = док.ПлановыйПериодС;
	ОкончаниеПериода = док.ПлановыйПериодПо;
	
	Пока НачалоПериода <= ОкончаниеПериода Цикл
		Константа.ЗначениеОПРВПериоде.Установить(НачалоПериода, ОПР);
		НачалоПериода = НачалоПериода + 1;
	КонецЦикла;
	
КонецПроцедуры

//Возвращает первую единицу измерения соответствующую Ед. по умолчанию из классификатора
///
Функция глЕдиницаПоУмолчанию(Номенклатура) Экспорт
	
	ЕдИзм = СоздатьОбъект("Справочник.Единицы");
	ЕдИзм.ИспользоватьВладельца(Номенклатура);
	
	ЕдИзм.ВыбратьЭлементы();
	
	Пока ЕдИзм.ПолучитьЭлемент()>0 Цикл
		Если ЕдИзм.Единица = Номенклатура.БазоваяЕдиница Тогда
			Возврат ЕдИзм.ТекущийЭлемент(); 
		КонецЕсли;
	КонецЦикла;
   	
	Возврат "";
	
КонецФункции
 
//Возвращает УМК_РазрешенныеВидыУпаковкиТМЦ соответствующий виду упаковки
///
Функция глРВУ_ПоВидуУаковки(Номенклатура, ВидУпаковки) Экспорт
	
	Если  ВидУпаковки<> Перечисление.ВидыУпаковки.нет Тогда
		СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
		СпрРВУ.ИспользоватьВладельца(Номенклатура);
		Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", ВидУпаковки, 0) = 1 Тогда
			Возврат СпрРВУ.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";

КонецФункции
         

// ===============================
// выбираем НДС не из всего справочника, а из маленького списка
// ИмяРекв - имя реквизита вида НДС, по умолчанию ВидНДС
Процедура глВыбратьНДС(Конт,ИмяРекв = "ВидНДС",РазрешитьВыбиратьНеНДС=0) Экспорт
Перем Выб;
	Спис = СоздатьОбъект("СписокЗначений");
	Спис.ДобавитьЗначение(ОсновнаяСтавкаНДС);
	Спис.ДобавитьЗначение(ЛьготнаяСтавкаНДС);
	Спис.ДобавитьЗначение(БезНДС); 
	Если РазрешитьВыбиратьНеНДС = 1 Тогда
		Спис.ДобавитьЗначение(НеНДС);
	КонецЕсли;		
	
	Выб = ПолучитьПустоеЗначение("Справочник.ШкалаСтавок");
	Выб = Конт.ПолучитьАтрибут(ИмяРекв);
	Если Спис.ВыбратьЗначение(Выб,,,,2) = 1 Тогда
		Если ИмяРекв = "ВидНДС" Тогда
		    Конт.ВидНДС = Выб;
		Иначе
			Конт.УстановитьАтрибут(ИмяРекв,Выб);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //глВыбратьНДС

// ===============================
// Определяет, является ли указанный счет счетом взаиморасчетов
// Счет - счет для проверки
// Возврат: 1 - нужно, 0 - нельзя
Функция глПроверитьСчетВзаиморасчетов(Счет) Экспорт
    Возврат глСчетаПоставщиковПокупателей.Принадлежит(Число(Счет.Код));
КонецФункции //
	
// ===============================
// Определяет, нужно ли по указанному счету выделять авансы
// Счет - счет для проверки
// Возврат: 1 - нужно, 0 - нельзя
Функция глВыделятьЛиАвансыПоСчету(Счет) Экспорт
	Если (Константа.ВыделятьАвансы = Да) И (глПроверитьСчетВзаиморасчетов(Счет)=1) Тогда
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции //глВыделятьЛиАвансыПоСчету
                  
// Если по текущему движению регистра взаиморасчетов необходимо сделать проводки
// по НДС или по ВД/ВР функция возвращает - 1
// в противном случае - 0
// Параметры:  текРегистр - регистр взаиморасчетов, движение по которому проверяем
//			   ВидПроводки - тип проводок . 
// 			   Возможные значения: "НДС" - проводки по НДС.
// 								   "ВД/ВР" - проводки по ВД/ВР
// ===========================
Функция глДелатьПроводкиПоНалогам(текРегистр,ВидПроводки) Экспорт
        
	Если ВидПроводки = "ВД/ВР" Тогда
		// проводки по ВД/ВР
		Если ((Найти(НУ_ВозникновениеНОиВДВР+НУ_СторноНОиВДВР+НУ_ВозникновениеВДВР+НУ_СторноВДВР,текРегистр.Флаг_НУ) <> 0) 
			И (ПустоеЗначение(текРегистр.Флаг_НУ)=0)) Тогда  
				Возврат 1;
		КонецЕсли;		
			
	ИначеЕсли ВидПроводки = "НДС" Тогда
		// НДС	
		Если Найти(АвансоваяОтгрузка+ВозвратПостОтгрузки+АвансоваяОплата+ВозвратПостОплаты
				+ПервоеСобытиеБартерПриход+ПервоеСобытиеБартерРасход
				+ВозвратПервоеСобытиеБартерРасход+ВозвратПервоеСобытиеБартерПриход,текРегистр.КодОперации) <> 0 Тогда
			// первое событие 	
			Если ((Найти(НУ_ВозникновениеНОиВДВР+НУ_СторноНОиВДВР+НУ_ВозникновениеНО+НУ_СторноНО,текРегистр.Флаг_НУ) <> 0)
			И (ПустоеЗначение(текРегистр.Флаг_НУ)=0)) Тогда
				Возврат 1
			КонецЕсли;	
				
		ИначеЕсли Найти(ПостОтгрузка+ВозвратАвансовойОтгрузки
				+ВтороеСобытиеБартерПриход+ВтороеСобытиеБартерРасход
				+ВозвратВтороеСобытиеБартерРасход+ВозвратВтороеСобытиеБартерПриход,текРегистр.КодОперации) <> 0 Тогда
			// второе событие
			// для второго события флаг может быть произвольным
			Возврат 1;                                                                                                   
		КонецЕсли;
	КонецЕсли;	
	Возврат 0;	
КонецФункции

// ===============================
// возвращает счет учета ТМЦ
// Параметры: ВидТМЦ - текстовый идентификатор, по которому определяется счет учета.
// Может принимать значения: ""
Функция ГлПолучитьСчетУчетаТМЦ(ВидТМЦ,ТМЦ=0) Экспорт
	Если СокрЛП(ВидТМЦ) = "Дав" Тогда
		 // попробуем определить что ЭТО
		Если ПустоеЗначение(ТМЦ) = 1 Тогда
			// если ничего не передано будем считать ЭТО материалом
			Возврат СчетПоКоду("022");
		ИначеЕсли ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Продукция Тогда
			Возврат СчетПоКоду("0236");
		ИначеЕсли ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Полуфабрикат Тогда
			Возврат СчетПоКоду("0235");
		Иначе
			// если не полуфабрикат и не продукция, то ЭТО материал
			Возврат СчетПоКоду("022");
		КонецЕсли;
	ИначеЕсли СокрЛП(ВидТМЦ) = "ДавМатериалы" Тогда
		Возврат СчетПоКоду("022");
	ИначеЕсли СокрЛП(ВидТМЦ) = "ДавПродукция" Тогда
		Если ПустоеЗначение(ТМЦ) = 0 Тогда
			Если ТМЦ.Счет = СчетПоКоду("25") Тогда
				Возврат СчетПоКоду("0235");
			Иначе
				Возврат СчетПоКоду("0236");
			КонецЕсли;
		Иначе
			Возврат СчетПоКоду("0236");
		КонецЕсли;	    
	ИначеЕсли СокрЛП(ВидТМЦ) = "ТараЗалоговая" Тогда
		Если ПустоеЗначение(ТМЦ) = 0 Тогда
			Возврат СчетПоКоду("2843");
		Иначе	
			Возврат СчетПоКоду("0232");
		КонецЕсли;	
	ИначеЕсли СокрЛП(ВидТМЦ) = "ТараВозвратная" Тогда
		Если ПустоеЗначение(ТМЦ) = 0 Тогда
			Возврат ТМЦ.Счет;
		Иначе
			Возврат СчетПоКоду("2842");		
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции
        
// ===============================
Функция глЭтоСчетТЗР(Счет) Экспорт
	Если (Счет.Код = "2092") или (Счет.Код = "289") Тогда
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции //

// ===============================
// Назначение:
// Проверяет, можно ли данную партию списывать по данному заказу
// Режимы:
// 		0	- 	списание в производство
//		1 	-	списание при продаже
// ===============================
Функция глПартияСоответствуетЗаказу(Партия,Заказ,Режим=0) Экспорт
	фСоответствует = 0;
	
	// является ли партия внешним заказом
	фВнешнийЗаказ = 0;
	Если ПустоеЗначение(Партия)=0 Тогда
		Если Партия.Вид()="Заказ" Тогда
			Если ПустоеЗначение(Партия.Контрагент)=0 Тогда
				фВнешнийЗаказ = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Режим = 0 Тогда
		// списание в производство - 
		// списывать можно все партии "без заказа" (или выпущенные по внутренним заказам)
		// и партии, выпущенные по данному заказу
			
		Если фВнешнийЗаказ = 0 Тогда
		    фСоответствует = 1;
		Иначе
			Если Заказ = Партия Тогда
				фСоответствует = 1;
			Иначе
				фСоответствует = 0;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Режим = 1 Тогда
	    // продажа -
		// если указан заказ, то списываем только партии по этому заказу
		// если заказ не указан, то списываем партии "без заказа"
		фСписаниеПоЗаказу = 0;
		Если ПустоеЗначение(Заказ)=0 Тогда
			Если Заказ.Вид()="Заказ" Тогда
			    фСписаниеПоЗаказу = 1;
			КонецЕсли;
		КонецЕсли;
		Если фСписаниеПоЗаказу = 1 Тогда
			Если Заказ = Партия Тогда
				фСоответствует = 1;
			Иначе
				фСоответствует = 0;
			КонецЕсли;
		Иначе
			Если фВнешнийЗаказ = 0 Тогда
				фСоответствует = 1;
			Иначе
				Если фВнешнийЗаказ = 0 Тогда
					фСоответствует = 1;
				Иначе
					фСоответствует = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат фСоответствует;
КонецФункции //глПартияСоответствуетЗаказу

// ===============================
// Назначение:
//		Получает нормы продукции, актуальные на заданную дату (или заказ)
//		в пересчете на указанные количество и единицу измерения
// Аргументы:
// Продукция  -  продукция для которой получаем нормы затрат
// Единица    -  нормы затрат будут пересчитаны в этих единицах, если Единица не задана, 
//               то считаем ее базовой,коэффициент пересчета берем 1
// Количество -  нормы затрат будут пересчитаны на это количество продукции
// НаДату     -  дата,на которую получаем значение реквизита НормыЗатрат справочника ТМЦ
// ПоЗаказу   -  если задан и выбраны НормыЗатрат, то НормыЗатрат получаем из него, иначе из справочника ТМЦ
// тбНормы    -  таблица значений, в котрую заносятся полученные нормы затрат
Функция глПолучитьНормы(Продукция,Единица = 0,Количество,НаДату,ПоЗаказу=0,тбНормы,ТолькоПроверить = 0,НомКво = "", ИспАльтТМЦ = 0, Нормы = "", СПримечанием = 0) Экспорт
	докНормы = 0;

	Если ПустоеЗначение(Нормы) = 0 Тогда
	    докНормы = Нормы;
	ИначеЕсли ПустоеЗначение(ПоЗаказу) = 1 Тогда
		//получаем нормы из справочника ТМЦ
	    докНормы = Продукция.НормыЗатрат.Получить(НаДату);
	Иначе
		// находим нормы в заказе
		ПоЗаказу.ВыбратьСтроки();
		Пока ПоЗаказу.ПолучитьСтроку() = 1 Цикл
			Если ПоЗаказу.Продукция = Продукция  Тогда
				Если ПоЗаказу.НормыЗатрат.Выбран() = 1 Тогда
			    	докНормы = ПоЗаказу.НормыЗатрат;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;  
		//Не нашли в заказе, берем из справочника ТМЦ
		Если ПустоеЗначение(докНормы) = 1 Тогда           
	    	докНормы = Продукция.НормыЗатрат.Получить(НаДату);
		КонецЕсли;
	КонецЕсли;    
	
	Если ПустоеЗначение(докНормы) = 1 Тогда
		Если Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Услуга Тогда
			глКомментарий("Для продукции "+Продукция+" на "+НаДату+" не заданы нормы затрат!",0);
		КонецЕсли;
		Возврат 0;
	ИначеЕсли ТолькоПроверить = 1 Тогда
		Возврат 1;
	КонецЕсли;
	
	тбНормы = СоздатьОбъект("ТаблицаЗначений");
	тбНормы.НоваяКолонка("ВидЭлемента","Перечисление.ВидыЭлементовСоставаПродукции");
	тбНормы.НоваяКолонка("СтатьяКалькуляции","Справочник.СтатьиКалькуляции");
	тбНормы.НоваяКолонка("Материал","Справочник.ТМЦ");
	тбНормы.НоваяКолонка("Примечание","Строка");
	тбНормы.НоваяКолонка("Кво","Число",10,3);
	тбНормы.НоваяКолонка("Цена","Число",15,2);
	тбНормы.НоваяКолонка("Способ","Перечисление.СпособПодстановкиЦеныВСписание");	
	тбНормы.НоваяКолонка("Сумма","Число",16,2);       
//	тбНормы.НоваяКолонка("НеПересчитыватьКво", "Перечисление.ДаНет");
	
	// единица (количество) продукции, на которую заданы нормы и 
	// на которую нам нужно их получить, могут быть разные
	Если докНормы.КоэффициентПродукции * докНормы.КвоПродукции = 0 Тогда
	    глКомментарий("Для норм затрат "+докНормы+" не заданы количество или коэффициент продукции!",0);
		Возврат 0;
	Иначе
		//если Единица не задана, то считаем ее базовой, коэффициент пересчета берем 1
		Коэф = ?(Единица=0,1,Единица.Коэффициент) * Количество / (докНормы.КоэффициентПродукции * докНормы.КвоПродукции);
	КонецЕсли;
	
	докНормы.ВыбратьСтроки();
	Пока докНормы.ПолучитьСтроку() = 1 Цикл
		тбНормы.НоваяСтрока();
		ПересчКво = докНормы.ПолучитьАтрибут("Кво"+НомКво);
		тбНормы.ВидЭлемента = ДокНормы.ВидЭлемента;
		Если СПримечанием = 1 Тогда
			тбНормы.Примечание = докНормы.ПримечаниеСтр;
		КонецЕсли;
		Если (докНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.Материал) 
		или (докНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.Полуфабрикат) 
		или (докНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.ВозвратныйОтход) Тогда
		    // пересчитаем количество в базовую единицу
			ПересчКво = ПересчКво * докНормы.Коэффициент;

			ВидЗатрат = докНормы.Элемент.ВидЗатрат;             
			СтатьяКалькуляции = ВидЗатрат.СтатьяКалькуляции;
			
			Если ПустоеЗначение(ВидЗатрат) = 1 Тогда
			    глКомментарий("Для элемента норм "+докНормы.Элемент+" не задан вид затрат!",0);
				Возврат 0;
			ИначеЕсли ПустоеЗначение(СтатьяКалькуляции) = 1 Тогда
			    глКомментарий("Для элемента норм "+докНормы.Элемент+" с видом затрат " +
				ВидЗатрат + " не задана статья калькуляции!",0);
				Возврат 0;
			Иначе
				тбНормы.СтатьяКалькуляции = СтатьяКалькуляции;
			КонецЕсли;
			тбНормы.Материал = докНормы.Элемент;
			Если ИспАльтТМЦ = 1 Тогда
			    Если ПустоеЗначение(тбНормы.Материал.ТМЦДляСписания.Получить(НаДату)) = 0 Тогда
			        тбНормы.Материал = докНормы.Элемент.ТМЦДляСписания.Получить(НаДату);
			    КонецЕсли;
			КонецЕсли;
		Иначе
			тбНормы.СтатьяКалькуляции = докНормы.Элемент;
		КонецЕсли;
		
		тбНормы.Кво = ПересчКво * Коэф;
		тбНормы.Цена = докНормы.Цена;
		тбНормы.Способ = докНормы.СпособПодстановкиЦены;
		тбНормы.Сумма = докНормы.Сумма * Коэф;
		//тбНормы.НеПересчитыватьКво = докНормы.НеПересчитыватьКво;
	КонецЦикла; // по строкам норм
	Возврат 1;
КонецФункции //глПолучитьНормы

// ===========================
Функция глПроверкаДублейСтрок(Конт,Обязательно=0) Экспорт
	Если (Константа.ПроверятьДублиСтрок = Нет) и (Обязательно = 0) Тогда
		Возврат 1;
	КонецЕсли;
	СписокТМЦ = СоздатьОбъект("СписокЗначений");
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1 Цикл
		Если ((Найти(Строка(Конт.Вид()),"ПриходнаяНакладная")<>0)
		ИЛИ (Конт.Вид()="СчетВходящий")) Тогда
			Зн = ЗначениеВСтроку(Конт.ТМЦ);
		ИначеЕсли Конт.Вид()="УслугиСтороннихОрганизаций" Тогда
			Зн = ЗначениеВСтроку(Конт.Услуга)+"|"+ЗначениеВСтроку(Конт.Субконто1)+"|"+ЗначениеВСтроку(Конт.Субконто2)+"|"+ЗначениеВСтроку(Конт.Субконто3);
		ИначеЕсли Конт.Вид()="УслугиСтороннихОрганизацийПроизвХарактера" Тогда
			Зн = ЗначениеВСтроку(Конт.Услуга)+"|"+ЗначениеВСтроку(Конт.ВидДеятельности)+"|"+ЗначениеВСтроку(Конт.Подразделение)+"|"+ЗначениеВСтроку(Конт.ВидЗатрат);
		ИначеЕсли Конт.Вид()="ОказаниеУслуг" Тогда
			Зн = ЗначениеВСтроку(Конт.Услуга);
		ИначеЕсли Конт.Вид()="БанковскаяВыписка" Тогда
			Если Конт.Счет.ВидСубконто(2) = ВидыСубконто.Договора Тогда
				Зн = ЗначениеВСтроку(Конт.Субконто1)+"|"+ЗначениеВСтроку(Конт.Субконто2)+"|"+ЗначениеВСтроку(Конт.ДокументОснование);
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли Конт.Вид()="НормыЗатрат" Тогда
			Зн = ЗначениеВСтроку(Конт.ВидЭлемента)+"|"+ЗначениеВСтроку(Конт.Элемент);
		ИначеЕсли Конт.Вид()="ВыпускПродукции" Тогда
			Зн = ЗначениеВСтроку(Конт.Продукция)+"|"+ЗначениеВСтроку(Конт.Заказ);	
		Иначе         
			Если глЕстьРеквизитМнЧ("Партия", Конт.Вид()) = Да Тогда
				Зн = ЗначениеВСтроку(Конт.ТМЦ)+"|"+ЗначениеВСтроку(Конт.Партия);
			ИначеЕсли глЕстьРеквизитМнЧ("Предпочтение", Конт.Вид()) = Да Тогда
				Зн = ЗначениеВСтроку(Конт.ТМЦ)+"|"+ЗначениеВСтроку(Конт.Предпочтение);
			Иначе     
				Зн = ЗначениеВСтроку(Конт.ТМЦ);
			КонецЕсли;	
		КонецЕсли;
		Позиция = СписокТМЦ.НайтиЗначение(Зн);
		Если Позиция <> 0 Тогда
			СтараяСтрока = "";
			тмп = СписокТМЦ.ПолучитьЗначение(Позиция,СтараяСтрока);
			Если Конт.Вид()="БанковскаяВыписка" Тогда
				глКомментарий("Обнаружены одинаковые договора и документы-основания в строках "+СтараяСтрока+" и "+Конт.НомерСтроки, 0,,"!");
			ИначеЕсли Конт.Вид()="НормыЗатрат" Тогда
				глКомментарий("Обнаружены одинаковые элементы и виды элементов в строках "+СтараяСтрока+" и "+Конт.НомерСтроки, 0,,"!");
			ИначеЕсли Конт.Вид()="ВыпускПродукции" Тогда
				глКомментарий("Обнаружена продукция по одинаковым заказам в строках "+СтараяСтрока+" и "+Конт.НомерСтроки, 0,,"!");
			ИначеЕсли ((Конт.Вид()="УслугиСтороннихОрганизаций") 
			ИЛИ(Конт.Вид()="УслугиСтороннихОрганизацийПроизвХарактера") 
			ИЛИ(Конт.Вид()="ОказаниеУслуг")) Тогда
				глКомментарий("Обнаружены одинаковые услуги (виды деятельности, виды затрат или подразделения) в строках "+СтараяСтрока+" и "+Конт.НомерСтроки, 0,,"!");
			Иначе
				глКомментарий("Обнаружены одинаковые ТМЦ (партии) в строках "+СтараяСтрока+" и "+Конт.НомерСтроки, 0,,"!");
			КонецЕсли;
			Возврат 0;
		КонецЕсли;
		СписокТМЦ.ДобавитьЗначение(Зн,""+Конт.НомерСтроки);
	КонецЦикла;
	Возврат 1;
КонецФункции

// ===============================
Функция глПредставление(Субк) Экспорт
    Если ТипЗначения(Субк)=11 Тогда // Справочник
		Если Метаданные.Справочник(Субк.Вид()).ТипКода = "Числовой" Тогда
			// для числового кода выводим полный код
	    	Возврат ""+Субк.ПолныйКод()+" "+Субк.Наименование;
		Иначе
			// для справочников с текстовым кодом, код обычно несет смысловую нагрузку
			// выводим просто код
	    	Возврат ""+Субк.Код+" "+Субк.Наименование;
		КонецЕсли;
    Иначе 
    	Возврат Строка(Субк);
    КонецЕсли;
КонецФункции //глПредставление


// ===============================
// Сравнивает дату документа с датой запрета редактирования,
// Параметры: 
//	Конт 	- контекст документа
//	Режим	- режим проверки : открытие, закрытие, проведение, ввод нового
Процедура глПроверкаДатыДок(Конт,Режим = "Открытие", ЕстьДатаЗапрета = 0) Экспорт
Перем ДатаДок;   
	Попытка
		ДатаДок = Конт.ДатаДок;
		ВидДок = Конт.Вид();
	Исключение
		ДатаДок = Конт.ДатаОперации;
		ВидДок = "Операция";
	КонецПопытки;

	РежимСтр = Нрег(Сокрлп(Режим));
	ТекДатаЗарпета = Константа.ДатаЗапретаРедактирования;
	// попробуем найти документ в датах запрета
	СпрДатыЗапретаРедактирования = СоздатьОбъект("Справочник.УМК_ДатыЗапретаРедактирования");
	Если СпрДатыЗапретаРедактирования.НайтиПоНаименованию(ВидДок,,1) = 1 Тогда
		СПрава = СпрДатыЗапретаРедактирования.Права + ";";
		Если Найти(СПрава, НазваниеНабораПрав() + ";") <> 0 Тогда // ищем для прав
			// теперь проверим пользователя в исключениях
			Если Найти(СпрДатыЗапретаРедактирования.НеДействуетДляПравПользователей + ";", глПользователь.Код + ";") = 0 Тогда
				ТекДатаЗарпета = ?(ТипЗначенияСтр(СпрДатыЗапретаРедактирования.ЗначениеЗапрета) = "Число", ТекущаяДата() - СпрДатыЗапретаРедактирования.ЗначениеЗапрета, СпрДатыЗапретаРедактирования.ЗначениеЗапрета);
			КонецЕсли;
		ИначеЕсли Найти(СпрДатыЗапретаРедактирования.ПраваПользователи + ";", глПользователь.Код + ";") <> 0 Тогда// не нашли ищем для пользователя
			ТекДатаЗарпета = ?(ТипЗначенияСтр(СпрДатыЗапретаРедактирования.ЗначениеЗапрета) = "Число", ТекущаяДата() - СпрДатыЗапретаРедактирования.ЗначениеЗапрета, СпрДатыЗапретаРедактирования.ЗначениеЗапрета);
		КонецЕсли;
	КонецЕсли;
	
	Если ДатаДок > ТекДатаЗарпета Тогда
		Возврат;
	КонецЕсли;
	
	Если (глПользователь.фПривелегииДатаЗапрета = 1)  //--- УМК Сандомирский В.Ю. (12.08.14) Привелегии не обращать внимания на дату запрета
			И (	
				(ВидДок = "Договор") 
				//  ИЛИ (Конт.Вид() = "ВводОстатковКредита") 
			  )
			 Тогда  
		Возврат;
	КонецЕсли;
	
	ЕстьДатаЗапрета = 1;
	Если РежимСтр = "открытие" Тогда
	    // открываем форму
		Если Конт.Форма.ТолькоПросмотр(1) = 0 Тогда
			глПоказатьПредупреждение("Запрещено редактирование документов (операций), "+РазделительСтрок+"введенных по "+Формат(ТекДатаЗарпета,"ДДДММММГГГГ")+" !",4);
		КонецЕсли;
		
	ИначеЕсли РежимСтр = "запись" Тогда
		
		Если (глПользователь.фПривелегииДатаЗапрета = 1) И  (Конт.Выбран() = 1) Тогда  //--- УМК Сандомирский В.Ю. (12.08.14) Привелегии не обращать внимания на дату запрета ( 13.08.14 создавать нельзя перезаписывать можно) 
			Возврат;
		КонецЕсли;
		
		// пытаемся записать
		СтатусВозврата(0);
		глПоказатьПредупреждение("Запрещено записывать документы (операции) "+РазделительСтрок+"датой по "+Формат(ТекДатаЗарпета,"ДДДММММГГГГ")+" !");
	ИначеЕсли РежимСтр = "проведение" Тогда
		
		Если глПользователь.фПривелегииДатаЗапрета = 1 Тогда  //--- УМК Сандомирский В.Ю. (12.08.14) Привелегии не обращать внимания на дату запрета
			Возврат;
		КонецЕсли;
		
		// пытаемся провести
		глВсеВыбрано = 0;
		глКомментарий("Запрещено проводить документы, введенные по "+Формат(ТекДатаЗарпета,"ДДДММММГГГГ")+" !", 0,,"!");
	Иначе
		глКомментарий("Неверный параметр передан в процедуру глПроверкаДатыДок():"+Режим,0,,"!!!");
	КонецЕсли;
КонецПроцедуры //глПроверкаДатыДок


// ===============================
// Формируется заголовок документа по шаблону <Название документа> <Номер>,<Статус проведения>,<Автор>
Функция глЗаголовок(Конт,НазваниеДокумента="") Экспорт
	Заголовок = "";
	Если ПустаяСтрока(НазваниеДокумента) = 1 Тогда
		Заголовок = Конт.ПредставлениеВида();
	Иначе
		Заголовок = НазваниеДокумента;
	КонецЕсли;
	Заголовок = Заголовок + " "+ Конт.НомерДок;
	Если Конт.Выбран() = 1 Тогда  
		Если Конт.Проведен() = 1 Тогда
			ТекстПроведен = ". Проведен";	
			Если глЕстьРеквизитШапки("РежимПроведения",Конт.Вид()) = Да Тогда
				Если Конт.РежимПроведения = 1 Тогда
				    ТекстПроведен = ". Проведен предварительно";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстПроведен = ". Не проведен";	
		КонецЕсли;
	Иначе
		ТекстПроведен = ". Новый";
	КонецЕсли;
	Заголовок = Заголовок + ТекстПроведен;
	
	Если  ПустоеЗначение(Конт.Автор)=0 Тогда
		Заголовок = Заголовок + ". Автор: "+Конт.Автор;
	КонецЕсли;
	Возврат Заголовок;
КонецФункции

//=====================================
// Конт - документ или контекст формы документа, на основании которого будет
//           вводится новый документ
// Описание:
// формирует список документов, которые можно ввести на основании данного.
// Вводится на основании новый документ на основе выбранного вида
Процедура глВыписатьПодчиненныйДокумент(Конт) Экспорт
	Перем СписокВидов, ВидПодч;
	
	// ввод документа на основании
	Если НЕ((ТипЗначенияСтр(Конт) = "Документ") ИЛИ (ТипЗначенияСтр(Конт) = "ГрупповойКонтекст")) Тогда
		глКомментарий("Ошибка: параметр должен иметь тип значения 'Документ' или 'ГрупповойКонтекст'",0);
		Возврат;
	Иначе
		Если Конт.Выбран() = 0 Тогда
			глПоказатьПредупреждение("Нельзя вводить на основании не сохраненного документа!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Позиция = 0;
	// на основе объекта "Метаданные" формируем список видов документов
	// которые можно вводить на основании заданного
	СписокВидов = СоздатьОбъект("СписокЗначений");
	ВидДок = Конт.Вид();
	Для Счетчик=1 По Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Количество() Цикл
		ИД = Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Получить(Счетчик).Идентификатор;
		Представление = Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Получить(Счетчик).Представление();
		СписокВидов.ДобавитьЗначение(ИД,Представление);
	КонецЦикла;
	
	Если СписокВидов.РазмерСписка() = 0 Тогда
		глПоказатьПредупреждение("Нельзя вводить на основании данного вида документа!");
		Возврат;
	ИначеЕсли СписокВидов.РазмерСписка() = 1 Тогда
		// на основании можно вводить документы только одного вида, список не показываем
		ОткрытьФорму("Документ."+СписокВидов.ПолучитьЗначение(1),,Конт.ТекущийДокумент());
	ИначеЕсли СписокВидов.ВыбратьЗначение(ВидПодч,"Выбор вида документа",Позиция) = 1 Тогда
		// выбрали вид документа
		ОткрытьФорму("Документ."+ВидПодч,,Конт.ТекущийДокумент());
	КонецЕсли;
	
КонецПроцедуры 

// ===============================
// Формируется спДействий, доступных в формах документов и журналов
// Параметр СтрДействия -  строка, в которой через запятую указываются идентификаторы действий
// (см. комментарий ниже)
Функция глПолучитьСписокДействий(СтрДействия) Экспорт
	
	спДействий = СоздатьОбъект("СписокЗначений");
	
	Пока СтрДлина(СтрДействия)>0 Цикл
		
		Инд = Найти(СтрДействия,",");
		Если Инд=0 Тогда
		    Инд = СтрДлина(СтрДействия);
		Иначе
			Инд = Инд -1;
		КонецЕсли;
		Действие = Сред(СтрДействия,1,Инд);
		СтрДействия = Сред(СтрДействия,Инд+2);
		спДействий.ДобавитьЗначение(Шаблон("["+Действие+"]"));
	КонецЦикла;                      
	Возврат спДействий;
КонецФункции      
                                     
//=====================================
// Параметры:
// СписокДействий - список значений, содержащий список возможных действий по документу
// вызывается по кнопке "Действия..." в документе
Процедура глДействия(Конт,СписокДействий) Экспорт //По кнопке "Действия"
	Перем Действие, Валюты;
	Перем СписокВидов, ВидПодч;
	Перем ДокументЖурнала;   
	Перем ВалПечати;
	
	Если СписокДействий.ВыбратьЗначение(Действие,,,,1)>0 Тогда
		Если Действие = ДвиженияДокумента Тогда
			глСформироватьДвиженияДокумента(Конт);
		ИначеЕсли Действие = СтруктураПодчиненности Тогда
			глСформироватьДеревоДокументов(Конт);
		ИначеЕсли Действие = ОбновлениеЦен Тогда
			ОткрытьФормуМодально("Обработка.КопированиеЦенИзДокументаВКатегорию",Конт);
		ИначеЕсли Действие = ВводНаОсновании Тогда
			глВыписатьПодчиненныйДокумент(Конт);
		ИначеЕсли Действие = ОткрытьВЖурнале Тогда
			Если Конт.СравнитьТА()=-2 Тогда
				глПоказатьПредупреждение("Документ не записан!");
			Иначе
				ДокументЖурнала = Конт.ТекущийДокумент();
				ОткрытьФорму("Журнал.ПолныйЖурнал.ФормаСписка",ДокументЖурнала);
			КонецЕсли;
		ИначеЕсли Действие = Подчиненные Тогда
			ОткрытьФорму("Журнал.Подчиненные",,Конт.ТекущийДокумент());
		ИначеЕсли Действие = ТоварныйСостав Тогда
			ОткрытьФормуМодально("Обработка.ГрупповаяОбработкаТоварногоСоставаДокумента",Конт);
		ИначеЕсли  Действие = Экспорт_dbf Тогда
			глЭкспорт_dbf(Конт);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// ===============================
// Наименование: глВернутьБазовуюЕдиницуТовара(Товар)
// параметры: 
// Товар - элемент справочника "Номенклатура"
// Возвращаемое значение:
// Базовая единица измерения товара
// Описание:
// Базовая единица измерения - это та, у которой значение реквизита Единица
// равно значению реквизита БазоваяЕдиница товара владельца.
Функция глВернутьБазовуюЕдиницуТовара(Товар) Экспорт
	Перем ЕдиницыТовара;
	Перем ТипБазовойЕдиницы;
	
	Если ПустоеЗначение(Товар) = 1 Тогда
	    // проверка на всякий случай
		глКомментарий("Не задан товар!",0);
		Возврат 0;
	КонецЕсли;

	ТипБазовойЕдиницы = Товар.БазоваяЕдиница;
	
	ЕдиницыТовара = СоздатьОбъект("Справочник.Единицы");
	ЕдиницыТовара.ИспользоватьВладельца(Товар);
	ЕдиницыТовара.ВыбратьЭлементы();
	Пока ЕдиницыТовара.ПолучитьЭлемент()=1 Цикл
	    Если ЕдиницыТовара.Единица =  ТипБазовойЕдиницы Тогда
	        Возврат ЕдиницыТовара.ТекущийЭлемент();
	    КонецЕсли;
	КонецЦикла;
	
	// если дошли до этого места, то у товара нет базовой единицы измерения
	// нужно ее создать и вернуть
	Если ПустоеЗначение(Товар.БазоваяЕдиница) = 1 Тогда
		глКомментарий("У товара "+СокрЛП(Товар.Наименование)+РазделительСтрок+
					  "не задан тип базовой единицы!",0);
		Возврат 0;
	КонецЕсли;
	ЕдиницыТовара.Новый();
	ЕдиницыТовара.Единица = Товар.БазоваяЕдиница;
	ЕдиницыТовара.Наименование = Товар.БазоваяЕдиница.Наименование;
	// коэффициент у базовой единицы может быть равен только 1.
	ЕдиницыТовара.Коэффициент = 1;
	Попытка
		ЕдиницыТовара.Записать();
	Исключение
		глКомментарий("Невозможно создать базовую единицу товара "+СокрЛП(Товар.Наименование),0);
		Возврат 0;
	КонецПопытки;
	Возврат ЕдиницыТовара.ТекущийЭлемент();
КонецФункции	// глВернутьБазовуюЕдиницуТовара

// ===============================
// Наименование: глВернутьЦену(Товар, КатегорияЦены, ДатаЦены=0, Единица=0, Валюта=0)
// параметры: 
// Товар - элемент справочника "Номенклатура"
// КатегорияЦены - категория цены товара, элемент справочника "КатегорииЦен"
// ДатаЦены - дата, на которую брать числовое значение цены товара
// Единица - единица, для которой определять числовое значение цены товара, элемент справочника Единицы
// Валюта - валюта, в эквиваленте которой определять числовое значение цены товара, элемент справочника Валюты
// Возвращает либо элемент справочника Цены, либо, если задана дата,
// числовое значение цены товара для базовой единицы в заданной валюте (по умолчанию в гривне)
Функция глВернутьЦену(Товар, Знач КатегорияЦены, ДатаЦены=0, Валюта=0, КонтрагентДляИсключенияЦены = "", НеПересчитыватьЕдиницу = 0) Экспорт
	Если ПустоеЗначение(Товар) = 1 Тогда
		Возврат 0;
	КонецЕсли;
	Цена = 0;
	
	Если ПустоеЗначение(КонтрагентДляИсключенияЦены) = 0 Тогда
		КатегорияЦены = глПолучитьИсключениеЦеныДляТМЦ(Товар, КонтрагентДляИсключенияЦены, КатегорияЦены, 1);
	КонецЕсли;
	ЦеныТовара = СоздатьОбъект("Справочник.Цены");
	ЦеныТовара.ИспользоватьВладельца(Товар);
	ЦеныТовара.ВыбратьЭлементыПоРеквизиту("КатегорияЦены", КатегорияЦены, 1, 1);
	Пока ЦеныТовара.ПолучитьЭлемент()  = 1 Цикл
		Если ЦеныТовара.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;

		Цена = ЦеныТовара.ТекущийЭлемент();
		Прервать;
	КонецЦикла;
	
	Если (Цена <> 0) И (ПустоеЗначение(ДатаЦены) = 0) Тогда
		// задана дата, значит, нужно вернуть числовое значение цены
		// определим, для какой единицы (по умолчанию для базовой)
		Коэффициент = 1;
		Если НеПересчитыватьЕдиницу = 0 Тогда
			Единица = Цена.Единица.Получить(ДатаЦены);
		
			Если (ПустоеЗначение(Единица) = 0) И (Единица.Единица <> Товар.БазоваяЕдиница) Тогда
				// указана цена не для базовой единицы, учтем коэффициент
				Коэффициент = ?(Единица.Коэффициент = 0, 1, 1 / Единица.Коэффициент);
			КонецЕсли;
		КонецЕсли;
		
		// определим валюты (по умолчанию пересчитываем в гривню)
		ВалН = Цена.Валюта.Получить(ДатаЦены);
		ВалК = ?(ПустоеЗначение(Валюта) = 1, Гривня, Валюта);
		// результат умножим на коэффициент
		Возврат Коэффициент * глПересчет(Цена.Цена.Получить(ДатаЦены),ВалН,ВалК,ДатаЦены);
	КонецЕсли;
	
	Возврат Цена;
КонецФункции

// ===============================
//  возвращает название товара в отчете
//  Реж = 1 - учитывать параметры ЭтоГруппа и Наим, 0 - не учитывать
Функция глТоварВОтчете(Товар,Реж = 0,ЭтоГруппа = "",Наименование = "", ПринудительВБазовой = 0) Экспорт
	Если ПустоеЗначение(Товар)=1 Тогда
		Возврат "";
	КонецЕсли;

	Если Реж = 0 Тогда
		ЭтоГруппа 		= Товар.ЭтоГруппа();
		Наименование 	= Товар.Наименование;
	КонецЕсли;

	Если (ЭтоГруппа=1) Или (глОптимизацияОтчетов=1) Тогда	
		Возврат СокрЛП(Наименование);
	Иначе
		ЕдиницаПоУмолчанию = ?(ПринудительВБазовой = 1, Товар.БазоваяЕдиница, Товар.ЕдиницаПоУмолчанию);
		Возврат СокрЛП(Наименование)+
				?(ПустоеЗначение(Товар.Артикул)=0,", арт. "+СокрЛП(Товар.Артикул),"")+
				?(ПустоеЗначение(ЕдиницаПоУмолчанию)=0," ("+СокрЛП(ЕдиницаПоУмолчанию.Наименование)+")","");
	КонецЕсли;

КонецФункции

// ===============================
//  возвращает название документа для того, чтобы показать его в отчете
Функция глДокументВОтчете(Док, СНомером="",СДатой="", Язык="") Экспорт
	Перем НазвДок;
	
	// При выключенной оптимизации, в отчет выводится пользовательское представление вида документа,
	// если нужно на украинском, с возможностью отображения номера и даты документа
	Если глОптимизацияОтчетов = 0 Тогда
		Если ПустоеЗначение(Док)=1 Тогда
		    Возврат ?(ВРЕГ(Язык)="У","Документ не вибрано.","Документ не выбран.");
		КонецЕсли;
		ВидДок = ВРег(Док.Вид());     
		Если ВРЕГ(Язык) = "У" Тогда
			НазвДок = глУкр(СокрЛП(Док.ПредставлениеВида()));
		Иначе
			НазвДок = СокрЛП(Док.ПредставлениеВида());
		КонецЕсли;
		Если (ВидДок="ПРИХОДНЫЙКАССОВЫЙ")ИЛИ(ВидДок="РАСХОДНЫЙКАССОВЫЙ") Тогда
			Если Док.ВидОплаты = Перечисление.ВидыОплаты.Возврат Тогда
				НазвДок = НазвДок + " ("+ ?(ВРЕГ(Язык)="У","повернення","возврат") +")";
			КонецЕсли;
		КонецЕсли;                                     
		Если ПустоеЗначение(СНомером)=0 Тогда
			Если ВидДок = "ДОГОВОР" Тогда
				НазвДок = НазвДок + " № вн." + Шаблон("[Док.НомерДок]") + " №" + Шаблон("[Док.НомерДоговора]") + " " + глАдресСтрокой(Док.Адрес);
			Иначе
				НазвДок = НазвДок + " №"+Шаблон("[Док.НомерДок]");
			КонецЕсли;			
		КонецЕсли;	                       
		Если ПустоеЗначение(СДатой)=0 Тогда
			НазвДок = НазвДок + ?(ВРЕГ(Язык)="У"," від "," от ")+Шаблон("[Док.ДатаДок]");
		КонецЕсли;	                       
		Возврат НазвДок;
	Иначе   
	// При включенной оптимизации, в отчет выводится синоним документа на русском языке с номером и датой
		Возврат Док;
	КонецЕсли;	
КонецФункции // глДокументВОтчете()

// ===============================
//  проверка того, чтобы дата конца отчета не превышала точки актуальности, 
//  а дата начала не превышала дату конца
Процедура глПроверкаДаты(ДатаНачала,ДатаКонца) Экспорт
	Если ДатаКонца>ПолучитьДатуТА() Тогда
		глПоказатьПредупреждение("Нельзя устанавливать дату отчета больше Точки Актуальности!");
		ДатаКонца=ПолучитьДатуТА();
		ДатаНачала = Мин(ДатаНачала,ДатаКонца);
	КонецЕсли;                                 
	Если ДатаНачала>ДатаКонца Тогда
		глПоказатьПредупреждение("Нельзя устанавливать дату начала отчета больше даты конца!");
		ДатаНачала = ДатаКонца;
	КонецЕсли;	
КонецПроцедуры   // глПроверкаДаты

// ===============================
Процедура глПроверкаАктуальностиОтчета(Дата1,Дата2,ВыбФирма,Тип) Экспорт

	Если (Тип <> 0) И (ПустоеЗначение(ВыбФирма)=1) Тогда
		глПоказатьПредупреждение("Не выбрана фирма.");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ВыбФирма)=0 Тогда
		ВыбФирма.ИспользоватьДату(Дата2);
	КонецЕсли;

	Если глПроверкаИнтервалаОтчета(Дата1,Дата2)=0 Тогда
		Возврат;
	КонецЕсли;

	ПозицияОтчета=?(Дата2<ПолучитьДатуТА(),Дата2,ПолучитьПозициюТА());

	//Если Последовательность.ОсновнаяПоследовательность.Проверить(ПозицияОтчета)=0 Тогда
	//	Если Тип = 0 Тогда
	//		Чего = "конца отчета"; 
	//		Сооб = "Отчет может быть неактуален.";
	//	ИначеЕсли Тип = 1 Тогда
	//		Чего = "документа"; 
	//		Сооб = "Информация для заполнения может быть неактуальна.";
	//	ИначеЕсли Тип = 2 Тогда
	//		Чего = "конца обработки"; 
	//		Сооб = "Данные для обработки могут быть неактуальны.";
	//	КонецЕсли;
	//	глПоказатьПредупреждение("Дата "+Чего+" установлена после"+РазделительСтрок
	//		+"границы последовательности документов ("
	//		+Последовательность.ОсновнаяПоследовательность.Получить() +"). "+РазделительСтрок
	//		+Сооб+" Возможно, следует перепровести документы.")
	//КонецЕсли;
КонецПроцедуры

// ===============================
Функция глВалютаДок(Док) Экспорт   
	// возвращаемое значение валюта документа
	Если ПустоеЗначение(Док)=1 Тогда
		Возврат "";
	КонецЕсли;
	ВидДок=Док.Вид();
	РеквВалюта=Метаданные.Документ(ВидДок).РеквизитШапки("Валюта");
	Если РеквВалюта.Выбран()=1 Тогда
		Возврат Док.Валюта;
	Иначе
		Возврат Гривня;
	КонецЕсли;
КонецФункции

// ===============================
Функция глКонтрагентДок(Док) Экспорт
	// возвращаемое значение Контрагент документа
	Если ПустоеЗначение(Док)=1 Тогда
		Возврат "";
	КонецЕсли;
	РеквКонтрагент=Метаданные.Документ(Док.Вид()).РеквизитШапки("Контрагент");
	Если РеквКонтрагент.Выбран()=1 Тогда
		Возврат Док.Контрагент;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
    
//Функция возвращает значение ОПР в периоде
//
Функция глВернутьОПР(Период = "")
	
	Если ПустоеЗначение(Период) = 1 Тогда
		Период = РабочаяДата()
	КонецЕсли;
	
	
	
КонецФункции

Функция глФРМ(ЧислЗнач,Вал,Реж) Экспорт Далее

// ===============================
// Функция возвращает документ взаиморасчетов (документа который 
// будет использоваться в качестве измерения Счет) по документу основанию
Функция глПолучитьДокументВзаиморасчетов(ДокументОснование) Экспорт
	Если ДокументОснование.Вид() = "ЗаявлениеНаАккредитив" Тогда
	    Возврат ПолучитьПустоеЗначение("Документ");
	КонецЕсли;

	Если ПустоеЗначение(ДокументОснование) = 0 Тогда
		Если Найти("Счет,СчетВходящий",ДокументОснование.Вид())<>0 Тогда
			Возврат ДокументОснование;
		Иначе                                                                                       
			Если глЕстьРеквизитШапки("ДокументОснование",ДокументОснование.Вид()) = Да Тогда
				ДокВзаиморасчетов = глПолучитьДокументВзаиморасчетов(ДокументОснование.ДокументОснование); 
				Если ПустоеЗначение(ДокВзаиморасчетов) = 0 Тогда
					Возврат ДокВзаиморасчетов;
				Иначе
					Возврат ДокументОснование;
				КонецЕсли;	
			Иначе
				Возврат ДокументОснование;
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		Возврат ПолучитьПустоеЗначение("Документ");
	КонецЕсли;	
КонецФункции

// ===============================
// производит пересчет сумы из валюты в основную валюту в зависимости от типа учета
Функция глСуммаОсн(Сумма,Конт,Валюта) Экспорт    
    ДатаКурса = Конт.ДатаДок;
	Результат = глПересчет(Сумма,Валюта,ДатаКурса,Гривня,ДатаКурса,);
	Возврат Окр(Результат,2);
КонецФункции	
                                                 
// ===============================
// Возвращает НашдДолгПоставщику или ДолгПокупателяНам расчитанный для Фирма, Контрагент, Договор , Счет
Функция глДолгКонтрагента(Конт, ЗнакОплаты, Фирма, Контрагент, Договор , Счет) Экспорт
	
	Если (Конт.Вид() = "ПриходныйКассовый") 
	ИЛИ (Конт.Вид() = "РасходныйКассовый") 
	ИЛИ (Конт.Вид() = "ПлатежноеПоручение")
	ИЛИ (Конт.Вид() = "ПлатежноеТребование")
	ИЛИ (Конт.Вид() = "ПлатежноеТребованиеПоручение") Тогда
		ВалютаДолга = Конт.РСчет.Валюта;
	Иначе
		ВалютаДолга = Конт.Валюта;
	КонецЕсли;
	
	ВремРегистры = СоздатьОбъект("Регистры");
	Если ЗнакОплаты = 1 Тогда
		РегВза = ВремРегистры.ВзаиморасчетыПоставщиков;
	Иначе
		РегВза = ВремРегистры.ВзаиморасчетыПокупателей;
	КонецЕсли;

	РегВза.УстановитьЗначениеФильтра("Фирма",Фирма,1);
	
	РегВза.УстановитьЗначениеФильтра("Контрагент",Контрагент,1);
	
	Если ПустоеЗначение(Договор)=0 Тогда
		РегВза.УстановитьЗначениеФильтра("Договор",Договор,1);
	КонецЕсли;

	Если ПустоеЗначение(Счет)=0 Тогда
		РегВза.УстановитьЗначениеФильтра("Счет",Счет,1);
	КонецЕсли;

	РегВза.УстановитьЗначениеФильтра("Валюта",ВалютаДолга,1);
	
	Если Конт.СравнитьТА()=-1  Тогда  // документ не новый, а существующий
		РегВза.ВременныйРасчет();
		ВремРегистры.РассчитатьРегистрыНа(Конт.ТекущийДокумент(),"*");
	КонецЕсли;
	
	Долг = 0;
	РегВза.ВыбратьИтоги();
	Пока РегВза.ПолучитьИтог()=1 Цикл
		Долг = Долг + РегВза.Долг;
	КонецЦикла;
	
	Возврат -Мин(0,ЗнакОплаты*Долг);
КонецФункции // глДолгКонтрагента()

Процедура глВыч_суммы_накл(Конт,ЧтоИзменилось=0) Экспорт Далее 

// ===============================
Функция глФРМ(ЧислЗнач,Вал,Реж) Экспорт
	// Это процедура нашего стандартного форматирования цен и сумм:
	// Для гривень не печатаем дроби, для других валют 3 знака после запятой
	// Триады отделяем символом (')
	Стр=СокрЛ(Формат(ЧислЗнач,"Ч018.2.'"));
	Если (Реж=0) ИЛИ (ПустаяСтрока(Стр)=1) Тогда
		Возврат Стр;
	Иначе
		Возврат Стр;//+" "+СокрП(Вал.Кратко);
	КонецЕсли;
КонецФункции  //глФРМ
                                                             
// ===============================
Функция глФРМТ(ЧислЗнач,Вал,Реж) Экспорт
	// Это процедура стандартного форматирования сумм, без разделения на Триады
	Стр=СокрЛ(Формат(ЧислЗнач,"Ч015.2"));
	Если (Реж=0) ИЛИ (ПустаяСтрока(Стр)=1) Тогда
		Возврат Стр;
	Иначе
		Возврат Стр+" "+СокрП(Вал.Кратко);
	КонецЕсли;
КонецФункции 

// ===============================
Функция глФРМ3(ЧислЗнач, Вал, Реж) Экспорт
	// Это процедура стандартного форматирования сумм: 3 знака, без разделения на триады, пустые суммы выводим.
    Стр=СокрЛ(Формат(ЧислЗнач,"Ч15.3"));
	Если (Реж=0) Тогда
		Возврат Стр;
	Иначе
		Возврат Стр+" "+СокрП(Вал.Кратко);
	КонецЕсли;
КонецФункции

// ===============================
Функция глСтрокаРежимОплаты(Конт, Режим) Экспорт
	Перем Оплата;
	
	Оплата = Да;
	Если Найти("ПриходныйКассовый/РасходныйКассовый", Конт.Вид()) >0 Тогда
		// в кассовых ордерах есть вид оплаты
		Если Конт.ВидОплаты = Перечисление.ВидыОплаты.Возврат Тогда
			Оплата = Нет;
		КонецЕсли;
	КонецЕсли;
	
	// формирум строку
	Если Режим = Перечисление.РежимыОплаты.ПоСчету Тогда
		Если Оплата = Да Тогда
			Стр = "Оплата по договору, счету";
		Иначе
			Стр = "Возврат по договору, счету";
		КонецЕсли;
	ИначеЕсли Режим = Перечисление.РежимыОплаты.ПоДоговору Тогда
		Если Оплата = Да Тогда
			Стр = "Оплата по договору, авт. по счетам";
		Иначе
			Стр = "Возврат по договору, авт. по счетам";
		КонецЕсли;
	ИначеЕсли Режим = Перечисление.РежимыОплаты.ПоДоговоруПриоритетныйСчет Тогда
		Если Оплата = Да Тогда
			Стр = "Оплата по договору, приор. счету";
		Иначе
			Стр = "Возврат по договору, приор. счету";
		КонецЕсли;
	ИначеЕсли Режим = Перечисление.РежимыОплаты.Автораспределение Тогда
		Если Оплата = Да Тогда
			Стр = "Автораспр. оплаты по договорам";
		Иначе
			Стр = "Автораспр. возврата по договорам";
		КонецЕсли;
	ИначеЕсли Режим = Перечисление.РежимыОплаты.АвтораспределениеПриоритетныйДоговор Тогда
		Если Оплата = Да Тогда
			Стр = "Автораспр. оплаты по договорам, приор. договору";
		Иначе
			Стр = "Автораспр. возврата по договорам, приор. договору";
		КонецЕсли;
	КонецЕсли;
	Возврат Стр;
КонецФункции // глСтрокаРежимОплаты()
                                                           
// ===============================
// по количеству в базовых единицах и товару возвращает кол-во, показываемое в отчете,
//  т.е. кол-во в единицах по умолчанию
Функция глКоличествоВОтчете(КолВБазовыхЕдИзм,Товар) Экспорт
	ЕдиницаПоУмолчанию = Товар.ЕдиницаПоУмолчанию;
	Коэффициент = ЕдиницаПоУмолчанию.Коэффициент; 
	
	Если ПустоеЗначение(ЕдиницаПоУмолчанию) = 1 Тогда
		Возврат КолВБазовыхЕдИзм;
	ИначеЕсли Коэффициент = 0 Тогда
		Возврат КолВБазовыхЕдИзм;
	Иначе	
	    Возврат (КолВБазовыхЕдИзм/Коэффициент);
	КонецЕсли;	
КонецФункции
                                               
// ===============================
// по количеству в базовых единицах и товару возвращает кол-во, показываемое в отчете,
//  т.е. кол-во в единицах по умолчанию, отформатированное
Функция глФРМКоличествоВОтчете(КолВБазовыхЕдИзм,Товар, ПринудительноВБазовой = 0) Экспорт
	// При выключенной оптимизации по скорости, количество в отчете выводится в единицах по умолчанию 
	// печатаемого ТМЦ
	Если (глОптимизацияОтчетов = 0) И (ПринудительноВБазовой = 0) Тогда
		Возврат Формат(глКоличествоВОтчете(КолВБазовыхЕдИзм,Товар),глФорматКоличестваВОтчетах);
	Иначе                 
	// При включенной оптимизации по скорости, количество в отчете выводится в базовых единицах 
	    Возврат Формат(КолВБазовыхЕдИзм,глФорматКоличестваВОтчетах);
	КонецЕсли;	
КонецФункции

// ===========================
// Возвращает кассу для указанной фирмы и валюты
Функция глПолучитьКассу(Фирма,Валюта) Экспорт
	Спр = СоздатьОбъект("Справочник.НашиДенежныеСчета");
	Спр.ИспользоватьВладельца(Фирма);
	
	Если НазваниеНабораПрав() = "Заказ" Тогда
		Спр.ВыбратьЭлементыПоРеквизиту("ДоступЗаказ", 1, 1, 0);
	ИначеЕсли (НазваниеНабораПрав() = "ПроизводствоКасса") ИЛИ (НазваниеНабораПрав() = "ПроизводствоСбыт") Тогда
		Спр.ВыбратьЭлементыПоРеквизиту("ДоступПроизводствоКасса", 1, 1, 0);
	Иначе	
		Спр.ВыбратьЭлементыПоРеквизиту("ДоступЗаказ", 0, 1, 0);
	КонецЕсли;
	
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		
		Если НазваниеНабораПрав() = "Заказ" Тогда
			Если Спр.ДоступЗаказ = 0 Тогда
				Продолжить;
			КонецЕсли;	
		ИначеЕсли (НазваниеНабораПрав() = "ПроизводствоКасса") ИЛИ (НазваниеНабораПрав() = "ПроизводствоСбыт") Тогда
			Если Спр.ДоступПроизводствоКасса = 0 Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если Спр.ДоступЗаказ = 1 Тогда
				Продолжить;
			КонецЕсли;	
			Если Спр.ДоступПроизводствоКасса = 1 Тогда
				Продолжить;
			КонецЕсли;		
		КонецЕсли;
		
		Счет = Спр.ТекущийЭлемент();
		Если Счет.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;	
		Если (Счет.Безнал = 0) и (Счет.Валюта = Валюта) Тогда
		    Возврат Счет;
		КонецЕсли;
		
	КонецЦикла;
	
    глКомментарий("Не найдена касса с валютой "+Валюта+" по фирме "+Фирма+"!",0,,"!");
    Возврат 0;
КонецФункции //глПолучитьКассу
                                                                       
// ===============================
Функция глБанковскаяДата(НачДата,КолвоДней)  Экспорт
	// функция возвращает дату через заданное
	// количество рабочих дней, т.е.
	// без суббот и воскресений.
	Дней=0;
	К=0;
	ПрошлоДней= Число(НачДата-'03.01.1994');
	// в константе надо указать любую
	// дату понедельника в прошлом
	Пока Дней<КолвоДней Цикл
		К=К+1;
		// определим день недели
		ДН=НомерДняНедели(НачДата+К);
		Если НЕ((ДН=6) ИЛИ (ДН=7)) Тогда
			Дней=Дней+1;
		КонецЕсли;
	КонецЦикла;
	Возврат НачДата+К;
КонецФункции

// ===============================
// показывает окно с информацией о долге клиента.
// делает те же действия, что и глДолгПоКредиту(),
// но позводяет задавать тип операции вручную
// Параметр ТипОперации может принимать следующие значения:
// - "Закупка"
// - "Продажа"
Процедура глПоказатьДолг(Конт, Контрагент, ТипОперации)  Экспорт
    Перем ЕстьДатаОплаты;

	Если ПустоеЗначение(Контрагент)=1 Тогда
		глПоказатьПредупреждение("Не выбран контрагент.");
		Возврат;
	КонецЕсли;

	ВидДок=Конт.Вид();
	
	// В зависимости от вида документа
	// определим РегистрУчета и
	// определим текущий курс валюты Кредита
	ВремРегистры=СоздатьОбъект("Регистры");
	Если ТипОперации="Продажа" Тогда
		ИмяРегистрУчета="ВзаиморасчетыПокупателей";
		Рег=ВремРегистры.ВзаиморасчетыПокупателей;
		Знак=1;
		// значит кредит мы даем клиенту
		// значит при продаже товара мы начисляем Долг (на клиента),
		ВалютаКредита=Контрагент.ВалютаКредита;
		СуммаКред=Контрагент.СуммаКредита.Получить(Конт.ДатаДок);
		Если СуммаКред<>0 Тогда
			Глубина=Контрагент.Глубина.Получить(Конт.ДатаДок);
		Иначе
			Глубина=0;
		КонецЕсли;
	ИначеЕсли ТипОперации="Закупка" Тогда
		ИмяРегистрУчета="ВзаиморасчетыПоставщиков";
		Рег=ВремРегистры.ВзаиморасчетыПоставщиков;
		Знак=-1;
		// значит кредит нам дает клиент
		ВалютаКредита=Контрагент.ВалютаКредитаПоставщика;
		СуммаКред=Контрагент.СуммаКредитаПоставщика.Получить(Конт.ДатаДок);
		
		Если СуммаКред<>0 Тогда
			Глубина=Контрагент.ГлубинаКредитаПоставщика.Получить(Конт.ДатаДок);
		Иначе
			Глубина=0;
		КонецЕсли;
	КонецЕсли;
	
	Если ВалютаКредита.Выбран()=0 Тогда
		глПоказатьПредупреждение("Не найдена валюта кредита клиента!");
	КонецЕсли;

	Рег.УстановитьФильтр(Конт.Фирма,Контрагент,,,);

	Если Конт.СравнитьТА()=-1  Тогда  // документ не новый, а существующий
		// так делаем, что бы отделить новый Документ
		// если итоги актуальны, то смотрим итоги на ТА
		// если итоги не актуальны, то берем из временногно расчета Регистра
		Рег.ВременныйРасчет();
		ВремРегистры.РассчитатьРегистрыПо(Конт.ТекущийДокумент(),"Контрагент");
	КонецЕсли;
	
	Просрочено=0;
	Срок=0;
	ТекущийДолг=0;
	СрочныйДолг=0; // Это тот долг,для оплаты которого осталось 7 дней сроку.
	ПросроченныйДолг=0;
	Рег.ВыбратьИтоги();
	Пока Рег.ПолучитьИтог()>0 Цикл
		Если ПустоеЗначение(Рег.КредДокумент)=1 Тогда
			// пропускаем пустые документы
			Продолжить;
		КонецЕсли;

		ВидКредДок=Рег.КредДокумент.Вид();
		
		Если глЕстьРеквизитШапки("ДатаОплаты",ВидКредДок) = ДА Тогда
			ДатаОплаты=Рег.КредДокумент.ДатаОплаты;
			Если Число(ДатаОплаты)=0 Тогда
				ДатаОплаты=Рег.КредДокумент.ДатаДок;
			КонецЕсли;
		Иначе
			ДатаОплаты=Рег.КредДокумент.ДатаДок;
		КонецЕсли;

		ТекущийДолг=ТекущийДолг+Рег.ДолгОсн;
		Если ((Знак*Рег.ДолгОсн)>0) И (Просрочено<(Конт.ДатаДок-ДатаОплаты)) Тогда
			// если еще не погашено
			Просрочено=Конт.ДатаДок-ДатаОплаты;
			Если ДатаОплаты < Конт.ДатаДок Тогда
				ПросроченныйДолг=ПросроченныйДолг+Рег.ДолгОсн;
			КонецЕсли;
			Если ДатаОплаты > (Конт.ДатаДок-7) Тогда
				СрочныйДолг=СрочныйДолг+Рег.ДолгОсн;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ТекущийДолг = глПересчет(ТекущийДолг,Гривня,Конт.ДатаДок,ВалютаКредита,Конт.ДатаДок,Конт.ДатаДок);
	ПросроченныйДолг = глПересчет(ПросроченныйДолг,Гривня,Конт.ДатаДок,ВалютаКредита,Конт.ДатаДок,Конт.ДатаДок);
	СрочныйДолг = глПересчет(СрочныйДолг,Гривня,Конт.ДатаДок,ВалютаКредита,Конт.ДатаДок,Конт.ДатаДок);

	Стр0="Контрагент: "+?(ПустоеЗначение(Контрагент.ПолнНаименование)=0,СокрЛП(Контрагент.ПолнНаименование),СокрЛП(Контрагент.Наименование))+". ";
	Стр01="    на "+ПолучитьТА();
	Стр1=?(Знак>0,"Кредит контрагенту= ","Кредит нам= ")+?(СуммаКред=0,"0",глФРМ(СуммаКред,ВалютаКредита,1))+" , на "+СокрЛ(Глубина)+" дней. ";
	Стр2=?(Знак>0,"Долг контрагента= ","Наш долг= ")+?(ТекущийДолг=0,"0",глФРМ(Знак*ТекущийДолг,ВалютаКредита,1))+" . ";
	Стр3=?(Знак*ТекущийДолг>СуммаКред,"КРЕДИТ ИСЧЕРПАН! ","Остаток кредита= "
	+?(Знак*ТекущийДолг=СуммаКред,"0",глФРМ(СуммаКред-Знак*ТекущийДолг,ВалютаКредита,1))+" . ");
	Стр4=?(Знак*ПросроченныйДолг>0,"ПРОСРОЧЕНА ОПЛАТА! "+глФРМ(Знак*ПросроченныйДолг,ВалютаКредита,1)+" на "
	+СокрЛ(Просрочено)+" дней.","Не просрочено.");
	Стр5=?(Знак*СрочныйДолг>0,"Срочный долг= "+глФРМ(Знак*СрочныйДолг,ВалютаКредита,1),"");

	глПоказатьПредупреждение(Стр0+РазделительСтрок+Стр01+РазделительСтрок+Стр1+РазделительСтрок+Стр2+РазделительСтрок+Стр3+РазделительСтрок+Стр4+?(ПустоеЗначение(Стр5)=1,"",РазделительСтрок+Стр5));

КонецПроцедуры

// ===============================
//Дополняет передаваемую строку Стр символами Чем до строки длиной Длина
//справа или слева в зависимости от значения переменной Режим  (1-слева, 2-справа)
Функция глДополнитьСтроку(Стр,Чем,Длина,Режим=1) Экспорт
	Добавить=Длина-СтрДлина(Стр);
	Если Добавить>0  Тогда
		Добавок="";
		Для Сч = 1 По Добавить  Цикл
			Добавок=Добавок+Чем
		КонецЦикла;
		Возврат ?(Режим=1,Добавок+Стр,Стр+Добавок);
	Иначе
		Возврат	Стр;
	КонецЕсли;
КонецФункции //глДополнитьСтроку

//  ----------------------------- Сканер Ш-К ----------------------------------          

// ===============================
// Формирует штрих код товара 
Функция глСформироватьEAN13(ШтрКод) Экспорт
	// Функция вычисляет контрольный символ кода EAN13
	// дополняет им переданный параметр и возвращает сформированный EAN13
	ШтрКод=СокрЛП(ШтрКод);
	ШтрКод=Лев(ШтрКод,12);
	ШтрКод=глДополнитьСтроку(ШтрКод,"0",12,1);
	ШтрКод=Число(ШтрКод);
	Четн = 0;
	Нечетн = 0;
	Для Индекс=1 По 6 Цикл
		Четн=Четн+Сред(ШтрКод,2*Индекс,1);
	КонецЦикла;
	Четн=Четн*3;

	Для Индекс=1 По 6 Цикл
		Нечетн=Нечетн+Сред(ШтрКод,2*Индекс-1,1);
	КонецЦикла;

	КонтЦифра=(Четн+Нечетн)/10-Цел((Четн+Нечетн)/10);
	КонтЦифра=10-Цел(КонтЦифра*10);
	Если КонтЦифра=10 Тогда
		КонтЦифра=0;
	КонецЕсли;
	Возврат Число(Строка(ШтрКод)+Строка(КонтЦифра));
КонецФункции //глСформировтьEAN13
                         
// ===============================
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Эта процедура в глобальном модуле отлавливает данные от сканера штрих кода,
	// когда не открыта ни одна из форм, использующих сканер в своей работе.
	// Пришедшие данные в данном случае пропускаются, чтобы не заполнять буфер сканера
	Если РаботаСоСканеромШтрихКода=2 Тогда
		Если Событие="BarCodeValue"	Тогда
			СканерШтрихКода.ПосылкаДанных = 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура глУстановкаШтрихКода(Конт,Данные) Экспорт
	// Разбор строки данных от сканера штрих кода - определение формата штрих-кода
	Если ШтрихКодИмеетПрефикс=1 Тогда
		Если Найти("MPJS",Лев(Данные,1))=0 Тогда
			глПоказатьПредупреждение("Формат считанного штрих-кода не предназначен для товаров.");
			Возврат;
		Иначе
			Данные=Сред(Данные,2,СтрДлина(Данные)-1);
		КонецЕсли;
	КонецЕсли;
	// Запись полученного штрих-кода
	Если ПустоеЗначение(Конт.ШтрихКод)=1 Тогда
		Конт.ШтрихКод=Число(Данные);
	Иначе
		Если Вопрос("Штрих-код уже задан. Переписать?", 4 )=6 Тогда
			Конт.ШтрихКод=Число(Данные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //глУстановкаШтрихКода

// ===============================
// Функция, формирующая информационную строку о валюте
Функция глСтрокаВалюты(КонтекстДокумента) Экспорт
	// Параметр - контекст документа
	Перем Результат, ЕстьВалюта,ДатаКурсаВалюты;                   
	Результат = "";
	Если глЕстьРеквизитШапки("Дата_Курса", КонтекстДокумента.Вид()) = Да Тогда
		ДатаКурсаВалюты = КонтекстДокумента.Дата_курса; 
	Иначе          
		ДатаКурсаВалюты = КонтекстДокумента.ДатаДок; 
	КонецЕсли;	
	// Анализируем реквизиты документа
	ЕстьВалюта = глЕстьРеквизитШапки("Валюта",КонтекстДокумента.Вид());
	// Про валюту пишем, только если она задана    
	Если ЕстьВалюта = Да Тогда      
		Результат = Результат + Строка(КонтекстДокумента.Валюта.Кратность.Получить(ДатаКурсаВалюты)) + " " + СокрЛП(КонтекстДокумента.Валюта.Кратко)
		+ "=" + Строка(КонтекстДокумента.Курс) + " " + СокрЛП(Гривня.Кратко)
		+ ", на " + Формат(ДатаКурсаВалюты,"ДДДММГГГГ");
	КонецЕсли;
	Возврат(Результат);
КонецФункции //глСтрокаВалюты   
                                                                             
// ===============================
Процедура глПечатьЧека(Конт) Экспорт
	Если (Конт.ДатаДок = РабочаяДата()) Тогда
		Если Конт.ЭККА.РежимРаботы = Перечисление.РежимыРаботыЭККА.Автономный Тогда
			Конт.ЧекПробит = 1;
		Иначе
			ИмяОбр = "ОбслуживаниеЭККА_"+СокрЛП(Строка(Конт.ЭККА.Тип));
			Расшифровка = СоздатьОбъект("СписокЗначений"); 
			
			Расшифровка.ДобавитьЗначение("ПечатьЧека","Парам");
			Расшифровка.ДобавитьЗначение(Конт,"Документ");
			
			глРасшифровка = Расшифровка;
			ОткрытьФорму("Обработка."+ИмяОбр+"#");
			глРасшифровка = 0;
		КонецЕсли;
	ИначеЕсли (Конт.ДатаДок <> РабочаяДата()) Тогда	
		глПоказатьПредупреждение("Чеки печатаются только по документам с датой: "+РабочаяДата());
	КонецЕсли;
КонецПроцедуры         

// ===============================
Процедура глВыбратьЭККА(Конт,ТипЭККА,Интерактивно = 1) Экспорт
	спЭККА = СоздатьОбъект("СписокЗначений");
	Если ТипЭККА = "Чек" Тогда
		глСписокФискальныхРегистраторов.Выгрузить(спЭККА);
	ИначеЕсли ТипЭККА = "Отчет" Тогда	
		глСписокЭККА_OFFLine.Выгрузить(спЭККА);
	КонецЕсли; 		
	КвоЭККА = глСписокЭККА_Автономно.РазмерСписка();
	Для Инд = 1 По КвоЭККА Цикл                            
		Стр = "";
		Знч = глСписокЭККА_Автономно.ПолучитьЗначение(Инд,Стр);
		спЭККА.ДобавитьЗначение(Знч,Стр);
	КонецЦикла;         
	
	Если Интерактивно = 1 Тогда
		ЭККА = Конт.ЭККА;
		Если спЭККА.ВыбратьЗначение(ЭККА,,,,2) = 1 Тогда
			Конт.ЭККА = ЭККА;
		КонецЕсли;
	ИначеЕсли спЭККА.РазмерСписка() > 0 Тогда
		Конт.ЭККА = спЭККА.ПолучитьЗначение(1);	
	Иначе
		глПоказатьПредупреждение("Отсутствует список кассовых аппаратов, необходимый для работы с данным документом.
			|Для формирования списка кассовых аппаратов запустите обработку ""Настройка торгового оборудования"".");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
КонецПроцедуры //глВыбратьЭККА
                                                                                                        
// ===============================
Функция глЗаполнитьСпКассы(Фирма,Валюта) Экспорт
	
	спКассы = СоздатьОбъект("СписокЗначений");
	
	Счета = СоздатьОбъект("Справочник.НашиДенежныеСчета");
	Счета.ИспользоватьВладельца(Фирма);
	Счета.ВыбратьЭлементы();
	Пока Счета.ПолучитьЭлемент()=1 Цикл
		Если (Счета.ПометкаУдаления()=0) и (Счета.Валюта=Валюта) и (Счета.БезНал=0) Тогда
		    спКассы.ДобавитьЗначение(Счета.ТекущийЭлемент(),Счета.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Возврат спКассы;
	
КонецФункции                                

// ===============================
Процедура глЗаполнитьШапку(Конт) Экспорт
	Конт.Автор = глПользователь;
	ВидДок = Конт.Вид();
	Если ПустоеЗначение(Конт.Фирма)=1 Тогда
		Конт.Фирма=глВосстановитьЗначение(,"ОсновнаяФирма");
	КонецЕсли;
	Если глЕстьРеквизитШапки("РСчет",ВидДок) = ДА Тогда
		Если ПустоеЗначение(Конт.РСчет) = 1 Тогда
			Конт.РСчет = Конт.Фирма.РС;
		КонецЕсли;
	КонецЕсли;
	// установим склад
	Если глЕстьРеквизитШапки("МестоХранения",ВидДок) = Да Тогда
		Если ПустоеЗначение(Конт.МестоХранения) = 1 Тогда
			Если Найти("РасходнаяРозничная,ВозвратРозница,ОтчетКА",ВидДок) <> 0 Тогда
				Конт.МестоХранения=глВосстановитьЗначение(Конт,"ОсновнойМагазин");
			Иначе
				Конт.МестоХранения=глВосстановитьЗначение(Конт,"ОсновнойСклад");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//установим ставку НДС
	Если глЕстьРеквизитШапки("ВидНДС",ВидДок) = Да Тогда
	    Конт.ВидНДС=глВосстановитьЗначение(,"БазНДС");
	КонецЕсли;
	// Устанавливаем номер документа
	глУстановитьНомер(Конт);
КонецПроцедуры

// ===============================
Процедура глЗаполнитьШапкуНаОсн(Конт,ДокОсн) Экспорт
	ВидДок=Конт.Вид();
	
	Язык = глЯзык();
	Если (ДокОсн.Вид()="Договор") или (ДокОсн.Вид()="Заказ") Тогда
		Если (глЕстьРеквизитШапки("Договор",ВидДок)=Да)
		И (ПустоеЗначение(ДокОсн)=0) Тогда
			Конт.Договор = ДокОсн;		
		КонецЕсли;
	Иначе
		Счет = глПолучитьДокументВзаиморасчетов(ДокОсн);
		Если ПустоеЗначение(Счет) = 0 Тогда
			// заполняем договор значением, которое указано в док.-основании
			Если глЕстьРеквизитШапки("Договор",Счет.Вид()) = Да Тогда
				// если в соновании реквизит "Договор"
				Если глЕстьРеквизитШапки("Договор",ВидДок)=Да Тогда
					Если (ПустоеЗначение(Счет.Договор)=0) 
					И (ПустоеЗначение(Конт.Договор)=1) Тогда
						Конт.Договор = Счет.Договор;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если глЕстьРеквизитШапки("ДокументОснование",ВидДок) = Да Тогда
				Конт.ДокументОснование = Счет;
			КонецЕсли;
			Если глЕстьРеквизитШапки("Основание",ВидДок) = Да Тогда
				Если ПустоеЗначение(Конт.Основание) = 1 Тогда
					Конт.Основание=глДокументВОтчете(Счет,"с номером","с датой");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Фирму всегда берем из основания
	Если ПустоеЗначение(ДокОсн.Фирма) = 0 Тогда
		// Если сменим фирму, то надо сменить и р/с с номером документа
		Если Конт.Фирма<> ДокОсн.Фирма Тогда;
			Конт.Фирма=ДокОсн.Фирма;
			Если глЕстьРеквизитШапки("РСчет",ВидДок) = ДА Тогда
				Конт.РСчет = Конт.Фирма.РС;
			КонецЕсли;
			// Устанавливаем номер документа
			глУстановитьНомер(Конт);
		КонецЕсли;
	КонецЕсли;

	Если глЕстьРеквизитШапки("Касса",ВидДок) = Да Тогда
		// установим Кассу
		Если глЕстьРеквизитШапки("Касса",ДокОсн.Вид()) =  Да Тогда
			// у документа основания есть реквизит касса
			Конт.Касса = ДокОсн.Касса;
		Иначе
			Если ПустоеЗначение(Конт.Касса) = 1 Тогда
				Конт.Касса = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если глЕстьРеквизитШапки("ЭККА",ВидДок) = Да Тогда
		// установим ЭККА
		Если глЕстьРеквизитШапки("ЭККА",ДокОсн.Вид()) =  Да Тогда
			// у документа основания есть реквизит ЭККА
			Конт.ЭККА = ДокОсн.ЭККА;
		Иначе
			Если ПустоеЗначение(Конт.ЭККА) = 1 Тогда
				Конт.ЭККА = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если глЕстьРеквизитШапки("РСчет",ВидДок) = ДА Тогда
		// установим расчетный счет
		Если глЕстьРеквизитШапки("РСчет",ДокОсн.Вид()) =  Да Тогда
			// у документа основания есть реквизит расчетный счет
			Конт.РСчет = ДокОсн.РСчет ;
		Иначе		
			Если ПустоеЗначение(Конт.РСчет) = 1 Тогда
				Конт.РСчет = Конт.Фирма.РС;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если глЕстьРеквизитШапки("МестоХранения",ВидДок) = Да Тогда
		// установим склад
		Если глЕстьРеквизитШапки("МестоХранения",ДокОсн.Вид()) =  Да Тогда
			// у документа основания есть реквзит МестоХранения
			Конт.МестоХранения = ДокОсн.МестоХранения;
		КонецЕсли;                                                                                                           
		Если ПустоеЗначение(Конт.МестоХранения) = 1 Тогда
			// склад не заполнен
			Если Найти("ОтчетКА,РасходнаяРозничная",ВидДок) <> 0 Тогда
				Конт.МестоХранения=глВосстановитьЗначение(Конт,"ОсновнойМагазин");
			Иначе
				Конт.МестоХранения=глВосстановитьЗначение(Конт,"ОсновнойСклад");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (глЕстьРеквизитШапки("Контрагент", ДокОсн.Вид()) = ДА) Тогда
	    Если (глЕстьРеквизитШапки("Контрагент", ВидДок) = ДА) Тогда
		 	Если (глЕстьРеквизитШапки("Договор", ВидДок) = ДА) И (глЕстьРеквизитШапки("Договор", ДокОсн.Вид()) = ДА) Тогда
	 			Если (Конт.Контрагент <> ДокОсн.Контрагент) или (Конт.Договор.Выбран() = 0) Тогда
	 				// если меняем клиента или договр не выбран, то нужно поменять договор
	 				Конт.Контрагент = ДокОсн.Контрагент;
		 			Конт.Договор = ДокОсн.Договор;
		 		КонецЕсли;
		 	Иначе
		 		Если Конт.Контрагент <> ДокОсн.Контрагент Тогда
	 				Конт.Контрагент = ДокОсн.Контрагент;
	 			КонецЕсли;
		 	КонецЕсли;
		ИначеЕсли (ВидДок = "ПриходныйКассовый") или (ВидДок = "РасходныйКассовый") Тогда
		 	// в приходном и расходном кассовых ордерах
		 	// Контрагент хранится в реквизите Субконто1, а договор - Субконто2
		 	Если глЕстьРеквизитШапки("Договор", ДокОсн.Вид()) = ДА Тогда
	 			Если (Конт.Субконто1 <> ДокОсн.Контрагент) или (ПустоеЗначение(Конт.Субконто2)=1) Тогда
	 				// если меняем клиента или договор не выбран, то нужно поменять договор
	 				Конт.Субконто1 = ДокОсн.Контрагент;
		 			Конт.Субконто2 = ДокОсн.Договор;
		 		КонецЕсли;
		 	Иначе
		 		Если Конт.Субконто1 <> ДокОсн.Контрагент Тогда
	 				Конт.Субконто1 = ДокОсн.Контрагент;				 	
	 			КонецЕсли;
		 	КонецЕсли;
	 	КонецЕсли;
	КонецЕсли;
	// заполнение Категории цен
	Если глЕстьРеквизитШапки("КатегорияЦен", ВидДок) = ДА Тогда
	     Если глЕстьРеквизитШапки("КатегорияЦен", ДокОсн.Вид()) = ДА Тогда
			// Тип цен всегда берем из основания, если он там есть
	 		Конт.КатегорияЦен = ДокОсн.КатегорияЦен;
		КонецЕсли;
	КонецЕсли;
	// заполнение Вид торговли
	Если глЕстьРеквизитШапки("ВидТорговли", ВидДок) = ДА Тогда 
		Если глЕстьРеквизитШапки("ВидТорговли", ДокОсн.Вид()) = ДА Тогда
	 		Конт.ВидТорговли = ДокОсн.ВидТорговли;
	 	Иначе
	 		Конт.ВидТорговли = глВосстановитьЗначение(,"ОсновнойВидТорговли");
		КонецЕсли;
	КонецЕсли;
	// заполнение ставки НДС
	Если глЕстьРеквизитШапки("ВидНДС", ВидДок) = ДА Тогда 
		Если глЕстьРеквизитШапки("ВидНДС", ДокОсн.Вид()) = ДА Тогда
	 		Конт.ВидНДС = ДокОсн.ВидНДС;
	 	ИначеЕсли глЕстьРеквизитШапки("СуммаСНДС", ДокОсн.Вид()) = НЕТ Тогда
	 		// в неплатежных документах устанавливаем
	 		Конт.ВидНДС = глВосстановитьЗначение(,"БазНДС");
	 	КонецЕсли;
	КонецЕсли;
	Если глЕстьРеквизитШапки("ВидТары",ВидДок) = ДА Тогда
		// установим расчетный счет
		Если глЕстьРеквизитШапки("ВидТары",ДокОсн.Вид()) =  Да Тогда
			// у документа основания есть реквизит расчетный счет
			Конт.ВидТары = ДокОсн.ВидТары;
		Иначе
		
			Конт.ВидТары = Перечисление.ВидыТары.Залоговая;					//--- УМК Сандомирский В.Ю. (09.03.15) Перечисление.ВидыТары.Покупная;
		
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // глЗаполнитьШапкуНаОсн()

// ===============================
// Копирование товарного состава накладных
Процедура глСкопироватьТовСостав(Конт,ДокОснование) Экспорт

	ЕстьСкладТЧ = глЕстьРеквизитМнЧ("Склад", Конт.Вид());
	ЕстьСкладТЧОсн = глЕстьРеквизитМнЧ("Склад", ДокОснование.Вид());
	
	ТекСклад = "";
	
	Если (ЕстьСкладТЧ <> Да) И (ЕстьСкладТЧОсн = Да) Тогда
		СписСкладов = СоздатьОбъект("СписокЗначений");
		СписСкладов.ДобавитьЗначение(ДокОснование.МестоХранения);
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			Если (ПустоеЗначение(ДокОснование.Склад) = 0) И (СписСкладов.НайтиЗначение(ДокОснование.Склад) = 0) Тогда
				СписСкладов.ДобавитьЗначение(ДокОснование.Склад);
			КонецЕсли;
		КонецЦикла;
		
		Если СписСкладов.РазмерСписка() > 1 Тогда
			СписСкладов.ВыбратьЗначение(ТекСклад, "Выберите склад для заполнения");
		КонецЕсли;		
	КонецЕсли;
	
	ДокВид = ДокОснование.Вид();
	Если Конт.КоличествоСтрок()=0 Тогда
		Если глЕстьРеквизитМнЧ("Скидка", ДокОснование.Вид()) = Да Тогда
			Если Найти("РасходнаяРозничная",ДокВид)>0 Тогда
			    ПроцентСкидки = ?(ДокОснование.Итог("СуммаСНДС") = 0,0,ДокОснование.Скидка/ДокОснование.Итог("СуммаСНДС"));
			КонецЕсли;		    
		КонецЕсли;
		
		Если глЕстьРеквизитМнЧ("Товар", Конт.Вид()) = Да Тогда
			РеквизитТоварКонт = "Товар";
		ИначеЕсли глЕстьРеквизитМнЧ("ТМЦ", Конт.Вид()) = Да Тогда
			РеквизитТоварКонт = "ТМЦ";
		Иначе
			глКомментарий("Нет возможности выполнить копирование товарного состава в документ "+Конт.ПредставлениеВида()+
				", поскольку в нем нет реквизита Товар или ТМЦ.",0);
			Возврат;
		КонецЕсли;
		
		Если глЕстьРеквизитМнЧ("Товар", ДокВид) = Да Тогда
			РеквизитТоварДок = "Товар";
		ИначеЕсли глЕстьРеквизитМнЧ("ТМЦ", ДокВид) = Да Тогда
			РеквизитТоварДок = "ТМЦ";
		Иначе
			глКомментарий("Нет возможности выполнить копирование товарного состава из документа "+ДокОснование.ПредставлениеВида()+
				", поскольку в нем нет реквизита Товар или ТМЦ.",0);
			Возврат;
		КонецЕсли;
		
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			Если (ПустоеЗначение(ТекСклад) = 0) И (ЕстьСкладТЧ <> Да) И (ЕстьСкладТЧОсн = Да) Тогда
				Если ?(ПустоеЗначение(ДокОснование.Склад) = 1, ДокОснование.МестоХранения, ДокОснование.Склад) <> ТекСклад Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Конт.НоваяСтрока();
			
			ВремТовар = ДокОснование.ПолучитьАтрибут(РеквизитТоварДок);
			Если ПустоеЗначение(ВремТовар)=1 Тогда
			    Продолжить;
			КонецЕсли;
			Конт.УстановитьАтрибут(РеквизитТоварКонт,ВремТовар);
			
			// --- УМК Сандомирский В.Ю. (08.01.15) 
			Если (Конт.Вид() = "ВозвратнаяНакладная") И (ДокОснование.Вид() = "РасходнаяНакладная") Тогда
				Конт.ВУП = ДокОснование.ВидУпаковки; 
				Конт.ДокПродажи = ДокОснование;
			КонецЕсли;
			// ... УМК Сандомирский В.Ю. (08.01.15)
			
			Конт.Ед=ДокОснование.Ед;
			Конт.Коэффициент=ДокОснование.Коэффициент;
			Конт.Кво=ДокОснование.Кво;
			Если (глЕстьРеквизитМнЧ("ДопКво", ДокВид) = Да) и (глЕстьРеквизитМнЧ("ДопКво", Конт.Вид()) = Да) Тогда
				Конт.ДопКво = ДокОснование.ДопКво;
			КонецЕсли;
			Если (ДокВид = "ВводОстатковТМЦ") Тогда
				Конт.ЦенаБезНДС = глПересчет(ДокОснование.ЦенаБезНДС,Гривня,ДокОснование.ДатаДок,Конт.Валюта,Конт.Курс,Конт.Дата_Курса);
				Конт.ЦенаСНДС = глПересчет(ДокОснование.ЦенаСНДС,Гривня,ДокОснование.ДатаДок,Конт.Валюта,Конт.Курс,Конт.Дата_Курса);
				Конт.СуммаБезНДС = глПересчет(ДокОснование.СуммаБезНДС,Гривня,ДокОснование.ДатаДок,Конт.Валюта,Конт.Курс,Конт.Дата_Курса);
				Конт.СуммаCНДС = глПересчет(ДокОснование.СуммаCНДС,Гривня,ДокОснование.ДатаДок,Конт.Валюта,Конт.Курс,Конт.Дата_Курса);
			ИначеЕсли Найти("РасходнаяРозничная",ДокВид)>0 Тогда
				Если (глЕстьРеквизитМнЧ("ЦенаСНДС",Конт.Вид())=Да) Тогда
					Конт.ЦенаСНДС = ДокОснование.ЦенаСНДС*(1 - ПроцентСкидки);
					глВыч_суммы_накл(Конт,1);
				Иначе					
					Конт.ЦенаБезНДС = ДокОснование.ЦенаСНДС*(1 - ПроцентСкидки)*100/(100 + глПроцентНДС(ДокОснование.Товар.СтавкаНДС,ДокОснование.ДатаДок));
					глВыч_суммы_накл(Конт);
				КонецЕсли;        
			ИначеЕсли (Конт.Вид() = "ПриходнаяНакладнаяГТД") Тогда
				Конт.ЦенаБезНДС = ДокОснование.ЦенаБезНДС;
				глВыч_суммы_накл(Конт);
			Иначе				
				Конт.ЦенаБезНДС = ДокОснование.ЦенаБезНДС;
				Если (глЕстьРеквизитМнЧ("ЦенаСНДС",Конт.Вид())=Да) Тогда
					Конт.ЦенаСНДС = ДокОснование.ЦенаСНДС;
				КонецЕсли;
				глВыч_суммы_накл(Конт);
				Конт.СуммаБезНДС = ДокОснование.СуммаБезНДС;
				Если (глЕстьРеквизитМнЧ("СуммаСНДС", ДокВид) = Да) и (глЕстьРеквизитМнЧ("СуммаСНДС", Конт.Вид()) = Да) Тогда
				    Конт.СуммаСНДС = ДокОснование.СуммаСНДС;
				КонецЕсли;				
				Если (глЕстьРеквизитМнЧ("Скидка",Конт.Вид())=Да) Тогда
					Если(глЕстьРеквизитМнЧ("Скидка",ДокОснование.Вид()) = Да) Тогда
						Конт.СуммаБезСкидки=ДокОснование.СуммаБезСкидки;
						Конт.Скидка=ДокОснование.Скидка;
					Иначе
						Конт.СуммаБезСкидки=ДокОснование.СуммаБезНДС;
						Конт.Скидка=0;
					КонецЕсли;
				Иначе
					// есть в Док основани, но нет в новом - нужно пересчитать цену
					Если(глЕстьРеквизитМнЧ("Скидка",ДокОснование.Вид()) = Да) Тогда
						Конт.ЦенаБезНДС = ДокОснование.СуммаБезНДС / ДокОснование.Кво;
						глВыч_суммы_накл(Конт);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если (глЕстьРеквизитМнЧ("Набор",Конт.Вид())=Да) и (глЕстьРеквизитМнЧ("Набор",ДокОснование.Вид())=Да) Тогда
				Конт.Набор=ДокОснование.Набор;
			КонецЕсли;
			Если (ЕстьСкладТЧ = Да) И (ЕстьСкладТЧОсн = Да) Тогда
				Конт.Склад = ДокОснование.Склад;
			КонецЕсли;
		КонецЦикла;
		
		Если ПустоеЗначение(ТекСклад) = 0 Тогда
			Конт.МестоХранения = ТекСклад;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

// ===============================
// Записывает движения по партиям в регистр Партии и Обороты
Процедура глПровестиПартию(Конт, ФлагПрихода, ФлагВозврата, Фирма, Товар, Счет, МестоХранения, Поставщик, Поставка, ПрихДокумент,
	ОстатокТовара, Стоимость, ПродСтоимость, КодОперации, ФлагОборота, Оборот, Доход, НомерСтрокиДокумента=0, Признак = "", 
	Контрагент = "", ЧерезКого = "", ДопКво = 0, СуммаУпаковки=0, ФирмаПрихода = "", СкладПрихода = "", ФормаУпаковки = "", ССУпаковки = 0, ТолькоДвиженияПоФирмеПрихода = 0) Экспорт // --- УМК Сандомирский В.Ю. (10.02.15) добавил сумму упаковки
       Перем СуммовойУчет;
	        
	Если (Конт.НомерСтроки <> 0) 
	И (НомерСтрокиДокумента = 0) Тогда
		НомерСтрокиДокумента = Конт.НомерСтроки;
	КонецЕсли;	
	   
	СуммовойУчет = Нет;	   
	Если ПустоеЗначение(МестоХранения) = 0 Тогда
		Если МестоХранения.Вид() = "МестаХранения" Тогда
			Если МестоХранения.СуммовойУчет=1 Тогда
				// признак суммового учета актуален, только для расходных документов конечной продажи
				Если (((ФлагПрихода = 0) И (ФлагОборота = 1)) ИЛИ ((ФлагВозврата = 1) И (ФлагПрихода = 1))) Тогда
					СуммовойУчет = Да;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (Товар.ВидТМЦ <> Перечисление.ВидыТМЦ.Услуга) 
	И (СуммовойУчет = Нет) И (ТолькоДвиженияПоФирмеПрихода = 0) Тогда
		// услуги - только по оборотам
		// и по складам с признаком суммового учета - только по оборотам
		Если НомерСтрокиДокумента <> 0 Тогда
			Конт.Регистр.Партии.ПривязыватьСтроку(НомерСтрокиДокумента);
		КонецЕсли;
		Конт.Регистр.Партии.Фирма = Фирма;
		Конт.Регистр.Партии.ТМЦ = Товар;
		Конт.Регистр.Партии.Счет = Счет;
		Конт.Регистр.Партии.МестоХранения = МестоХранения;
		Конт.Регистр.Партии.Поставщик = Поставщик;
		Конт.Регистр.Партии.Поставка = Поставка;
		Конт.Регистр.Партии.ПрихДокумент = ПрихДокумент;
		Конт.Регистр.Партии.КодОперации = КодОперации;
		Если ФлагВозврата = 0 Тогда
			Конт.Регистр.Партии.ОстатокТовара = ОстатокТовара;
			Конт.Регистр.Партии.Стоимость = Стоимость;
			Конт.Регистр.Партии.ПродСтоимость = ПродСтоимость;
		Иначе
			Конт.Регистр.Партии.ОстатокТовара = - ОстатокТовара;
			Конт.Регистр.Партии.Стоимость = - Стоимость;
			Конт.Регистр.Партии.ПродСтоимость = - ПродСтоимость;
		КонецЕсли;
		Если ФлагПрихода = 1 Тогда
			Если ФлагВозврата = 0 Тогда
				Конт.Регистр.Партии.ДвижениеПриходВыполнить();
			Иначе
				Конт.Регистр.Партии.ДвижениеРасходВыполнить();
			КонецЕсли;
		Иначе
			Если ФлагВозврата = 0 Тогда
				Конт.Регистр.Партии.ДвижениеРасходВыполнить();
			Иначе
				Конт.Регистр.Партии.ДвижениеПриходВыполнить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(ФирмаПрихода) = 0 Тогда
		Если НомерСтрокиДокумента <> 0 Тогда
			Конт.Регистр.Партии.ПривязыватьСтроку(НомерСтрокиДокумента);
		КонецЕсли;
		Конт.Регистр.Партии.Фирма = ФирмаПрихода;
		Конт.Регистр.Партии.ТМЦ = Товар;
		Конт.Регистр.Партии.Счет = Счет;
		Конт.Регистр.Партии.МестоХранения = СкладПрихода;
		Конт.Регистр.Партии.Поставщик = Поставщик;
		Конт.Регистр.Партии.Поставка = Поставка;
		Конт.Регистр.Партии.ПрихДокумент = ПрихДокумент;
		Конт.Регистр.Партии.КодОперации = КодОперации;
		Если ФлагВозврата = 1 Тогда
			Конт.Регистр.Партии.ОстатокТовара = -ОстатокТовара;
			Конт.Регистр.Партии.Стоимость = -Оборот;
			Конт.Регистр.Партии.ПродСтоимость = -ПродСтоимость;
		Иначе
			Конт.Регистр.Партии.ОстатокТовара = ОстатокТовара;
			Конт.Регистр.Партии.Стоимость = Оборот;
			Конт.Регистр.Партии.ПродСтоимость = ПродСтоимость;			
		КонецЕсли;
		Конт.Регистр.Партии.ДвижениеПриходВыполнить();
	КонецЕсли;
	
	Если (ФлагОборота <> 0) И (ТолькоДвиженияПоФирмеПрихода = 0) Тогда
		Если НомерСтрокиДокумента <> 0 Тогда
			Конт.Регистр.Обороты.ПривязыватьСтроку(НомерСтрокиДокумента);
		КонецЕсли;
		Конт.Регистр.Обороты.Фирма = Фирма;
		Если (Счет = СчетПоКоду("0235")) или (Счет = СчетПоКоду("0236")) Тогда
			//обороты по давальческим услугам отражаем по счету 232
			Конт.Регистр.Обороты.Счет = СчетПоКоду("232");
		Иначе
			Конт.Регистр.Обороты.Счет = Счет;
		КонецЕсли;
		
		Если глЭтоСчетТЗР(Счет)=1 Тогда
			// для ТЗР должны заполняться только Фирма и Счет
			Конт.Регистр.Обороты.ТМЦ = 0;
			Конт.Регистр.Обороты.Поставщик = 0;
			Конт.Регистр.Обороты.Покупатель = 0;
			Конт.Регистр.Обороты.ВидДеятельности = 0;
		Иначе
			Конт.Регистр.Обороты.ТМЦ = Товар;
			Конт.Регистр.Обороты.ЧерезКого = ЧерезКого;
			Конт.Регистр.Обороты.Поставщик = ?((ПустоеЗначение(Поставщик) = 1) и (ФлагПрихода = 1), Контрагент, Поставщик);
			Если (ФлагВозврата = 1) И (ФлагПрихода = 0) Тогда  // Расход-Возврат 
				Попытка
					Конт.Регистр.Обороты.Поставщик = Конт.Контрагент;
				Исключение КонецПопытки;
			КонецЕсли;
			Конт.Регистр.Обороты.Покупатель = 0;
			Если (ФлагПрихода = ФлагВозврата)  Тогда // Расход-Продажа или Приход-Возврат
				Попытка
					Конт.Регистр.Обороты.Покупатель = Конт.Контрагент;
					Конт.Регистр.Обороты.КаналПродаж = Конт.Контрагент.КаналПродаж;
				Исключение КонецПопытки;
			КонецЕсли;
			Конт.Регистр.Обороты.ВидДеятельности = Товар.ВидДеятельности;
		КонецЕсли;
		Конт.Регистр.Обороты.КодОперации = КодОперации;
		Конт.Регистр.Обороты.Партия		 = Поставка;
		Конт.Регистр.Обороты.ВидУпаковки = Признак;
		Если ФормаУпаковки = "" Тогда
			Конт.Регистр.Обороты.ФормаУпаковки = глПолучитьФормуУпаковки(Признак, Товар, Конт.ДатаДок);
		Иначе
			Конт.Регистр.Обороты.ФормаУпаковки = ФормаУпаковки;
		КонецЕсли;
		
		Если ФлагПрихода=1 Тогда
			Если ФлагВозврата=0 Тогда
				Конт.Регистр.Обороты.ПриходКво = ОстатокТовара;
				Конт.Регистр.Обороты.ПриходКвоД = ДопКво;
				Конт.Регистр.Обороты.ПриходСум = Оборот;
				Конт.Регистр.Обороты.РасходКво = 0;
				Конт.Регистр.Обороты.РасходКвоД = 0;
				Конт.Регистр.Обороты.РасходСум = 0;
				Конт.Регистр.Обороты.Доход = Доход;
			Иначе
				Конт.Регистр.Обороты.ПриходКво = 0;
				Конт.Регистр.Обороты.ПриходКвоД = 0;
				Конт.Регистр.Обороты.ПриходСум = 0;
				Конт.Регистр.Обороты.РасходКво = - ОстатокТовара;
				Конт.Регистр.Обороты.РасходКвоД = - ДопКво;
				Конт.Регистр.Обороты.РасходСум = - Оборот;
				Конт.Регистр.Обороты.Доход = - Доход;
				Конт.Регистр.Обороты.СуммаУпаковки = - СуммаУпаковки; // --- УМК Сандомирский В.Ю. (10.02.15) 
				Конт.Регистр.Обороты.ССУпаковки = - ССУпаковки; // --- УМК Сандомирский В.Ю. (10.02.15) 
			КонецЕсли;
		Иначе
			Если ФлагВозврата=0 Тогда
				Конт.Регистр.Обороты.ПриходКво = 0;
				Конт.Регистр.Обороты.ПриходКвоД = 0;
				Конт.Регистр.Обороты.ПриходСум = 0;
				Конт.Регистр.Обороты.РасходКво = ОстатокТовара;
				Конт.Регистр.Обороты.РасходКвоД = ДопКво;
				Конт.Регистр.Обороты.РасходСум = Оборот;
				Конт.Регистр.Обороты.Доход = Доход;
				Конт.Регистр.Обороты.СуммаУпаковки = СуммаУпаковки; // --- УМК Сандомирский В.Ю. (10.02.15) 
				Конт.Регистр.Обороты.ССУпаковки = ССУпаковки; // --- УМК Сандомирский В.Ю. (10.02.15) 
			Иначе
				Конт.Регистр.Обороты.ПриходКво = - ОстатокТовара;
				Конт.Регистр.Обороты.ПриходКвоД = - ДопКво;
				Конт.Регистр.Обороты.ПриходСум = - Оборот;
				Конт.Регистр.Обороты.РасходКво = 0;
				Конт.Регистр.Обороты.РасходКвоД = 0;
				Конт.Регистр.Обороты.РасходСум = 0;
				Конт.Регистр.Обороты.Доход = - Доход;
				
			КонецЕсли;
		КонецЕсли;
	    Конт.Регистр.Обороты.ДвижениеВыполнить();
	КонецЕсли;
	Если (ФлагОборота <> 0) И (ПустоеЗначение(ФирмаПрихода) = 0) И (ТолькоДвиженияПоФирмеПрихода = 0) Тогда
		Если НомерСтрокиДокумента <> 0 Тогда
			Конт.Регистр.ОборотыР.ПривязыватьСтроку(НомерСтрокиДокумента);
		КонецЕсли;
		Конт.Регистр.ОборотыР.Фирма = ФирмаПрихода;
		Если (Счет = СчетПоКоду("0235")) или (Счет = СчетПоКоду("0236")) Тогда
			//обороты по давальческим услугам отражаем по счету 232
			Конт.Регистр.ОборотыР.Счет = СчетПоКоду("232");
		Иначе
			Конт.Регистр.ОборотыР.Счет = Счет;
		КонецЕсли;
		
		Если глЭтоСчетТЗР(Счет)=1 Тогда
			// для ТЗР должны заполняться только Фирма и Счет
			Конт.Регистр.ОборотыР.ТМЦ = 0;
			Конт.Регистр.ОборотыР.Поставщик = 0;
			Конт.Регистр.ОборотыР.Покупатель = 0;
			Конт.Регистр.ОборотыР.ВидДеятельности = 0;
		Иначе
			Конт.Регистр.ОборотыР.ТМЦ = Товар;
			Конт.Регистр.ОборотыР.ЧерезКого = ЧерезКого;
			Конт.Регистр.ОборотыР.Поставщик = ?((ПустоеЗначение(Поставщик) = 1) и (ФлагПрихода = 1), Контрагент, Поставщик);
			Если (ФлагВозврата = 1) И (ФлагПрихода = 0) Тогда  // Расход-Возврат 
				Попытка
					Конт.Регистр.ОборотыР.Поставщик = Конт.Контрагент;
				Исключение КонецПопытки;
			КонецЕсли;
			Конт.Регистр.ОборотыР.Покупатель = 0;
			Если (ФлагПрихода = ФлагВозврата)  Тогда // Расход-Продажа или Приход-Возврат
				Попытка
					Конт.Регистр.ОборотыР.Покупатель = Конт.Контрагент;
				Исключение КонецПопытки;
			КонецЕсли;
			Конт.Регистр.ОборотыР.ВидДеятельности = Товар.ВидДеятельности;
		КонецЕсли;
		Конт.Регистр.ОборотыР.КодОперации = КодОперации;
		Конт.Регистр.ОборотыР.Партия		 = Поставка;
		Конт.Регистр.ОборотыР.ВидУпаковки = Признак;
		Если ФормаУпаковки = "" Тогда
			Конт.Регистр.ОборотыР.ФормаУпаковки = глПолучитьФормуУпаковки(Признак, Товар, Конт.ДатаДок);
		Иначе
			Конт.Регистр.ОборотыР.ФормаУпаковки = ФормаУпаковки;
		КонецЕсли;
		
		Если ФлагПрихода=1 Тогда
			Если ФлагВозврата=0 Тогда
				Конт.Регистр.ОборотыР.ПриходКво = ОстатокТовара;
				Конт.Регистр.ОборотыР.ПриходКвоД = ДопКво;
				Конт.Регистр.ОборотыР.ПриходСум = Оборот;
				Конт.Регистр.ОборотыР.РасходКво = 0;
				Конт.Регистр.ОборотыР.РасходКвоД = 0;
				Конт.Регистр.ОборотыР.РасходСум = 0;
				Конт.Регистр.ОборотыР.Доход = Доход;
			Иначе
				Конт.Регистр.ОборотыР.ПриходКво = 0;
				Конт.Регистр.ОборотыР.ПриходКвоД = 0;
				Конт.Регистр.ОборотыР.ПриходСум = 0;
				Конт.Регистр.ОборотыР.РасходКво = - ОстатокТовара;
				Конт.Регистр.ОборотыР.РасходКвоД = - ДопКво;
				Конт.Регистр.ОборотыР.РасходСум = - Оборот;
				Конт.Регистр.ОборотыР.Доход = - Доход;
				Конт.Регистр.ОборотыР.СуммаУпаковки = - СуммаУпаковки; // --- УМК Сандомирский В.Ю. (10.02.15) 
				Конт.Регистр.ОборотыР.ССУпаковки = - ССУпаковки; // --- УМК Сандомирский В.Ю. (10.02.15) 
			КонецЕсли;
		Иначе
			Если ФлагВозврата=0 Тогда
				Конт.Регистр.ОборотыР.ПриходКво = 0;
				Конт.Регистр.ОборотыР.ПриходКвоД = 0;
				Конт.Регистр.ОборотыР.ПриходСум = 0;
				Конт.Регистр.ОборотыР.РасходКво = ОстатокТовара;
				Конт.Регистр.ОборотыР.РасходКвоД = ДопКво;
				Конт.Регистр.ОборотыР.РасходСум = Оборот;
				Конт.Регистр.ОборотыР.Доход = Доход;
				Конт.Регистр.ОборотыР.СуммаУпаковки = СуммаУпаковки; // --- УМК Сандомирский В.Ю. (10.02.15) 
				Конт.Регистр.ОборотыР.ССУпаковки = ССУпаковки; // --- УМК Сандомирский В.Ю. (10.02.15) 
			Иначе
				Конт.Регистр.ОборотыР.ПриходКво = - ОстатокТовара;
				Конт.Регистр.ОборотыР.ПриходКвоД = - ДопКво;
				Конт.Регистр.ОборотыР.ПриходСум = - Оборот;
				Конт.Регистр.ОборотыР.РасходКво = 0;
				Конт.Регистр.ОборотыР.РасходКвоД = 0;
				Конт.Регистр.ОборотыР.РасходСум = 0;
				Конт.Регистр.ОборотыР.Доход = - Доход;
				
			КонецЕсли;
		КонецЕсли;
	    Конт.Регистр.ОборотыР.ДвижениеВыполнить();
	КонецЕсли;	
КонецПроцедуры

// ===============================
Функция ПолучитьФлагНУ(ФлагВозврата,ВозникаетНО,ВозникаетВДВР)
	Если (ВозникаетНО = 1) и (ВозникаетВДВР = 1) Тогда
		Возврат ?(ФлагВозврата=1, НУ_СторноНОиВДВР, НУ_ВозникновениеНОиВДВР);
	ИначеЕсли (ВозникаетНО = 1) и (ВозникаетВДВР = 0) Тогда
		Возврат ?(ФлагВозврата=1, НУ_СторноНО, НУ_ВозникновениеНО);
	ИначеЕсли (ВозникаетНО = 0) и (ВозникаетВДВР = 1) Тогда
		Возврат ?(ФлагВозврата=1, НУ_СторноВДВР, НУ_ВозникновениеВДВР);
	Иначе
		Возврат "";
	КонецЕсли; 
КонецФункции

// ===============================
// Проверяет, является ли контрагент плательщиком 
// налога на прибыль на общих основаниях
Функция глКонтрагентПлательщикНПнаОО(Контрагент,Договор,Счет,КредДокумент) Экспорт
	Если (ПустоеЗначение(Контрагент) = 1) Или (Контрагент.Вид() <> "Контрагенты") Тогда
		Возврат 1;
	ИначеЕсли ПустоеЗначение(Договор) = 0 Тогда
		Если Договор.Вид() = "Договор" Тогда
		    Возврат Договор.ПлательщикНалогаНаПрибыль;
		КонецЕсли;
		Возврат Контрагент.ПлательщикНалогаНаПрибыль.Получить(Договор.ДатаДок);
	ИначеЕсли ПустоеЗначение(Счет) = 0 Тогда
		Возврат Контрагент.ПлательщикНалогаНаПрибыль.Получить(Счет.ДатаДок);
	Иначе
		Возврат Контрагент.ПлательщикНалогаНаПрибыль.Получить(КредДокумент.ДатаДок);
	КонецЕсли;
КонецФункции //глКонтрагентПлательщикНПнаОО

// ===============================
// Проверяет условия, при которых ВД и ВР по бартеру согласно 
// Закону Украины № 349-IV от 24.12.2002
// начисляются по первому событию
Функция глБартерНаОбщихОснованиях(Договор,Счет,КредДокумент) Экспорт
	Если ПустоеЗначение(Договор) = 0 Тогда
		Возврат ?(Договор.ДатаДок<'01.01.2003', 0, 1);
	ИначеЕсли ПустоеЗначение(Счет) = 0 Тогда
		Возврат ?(Счет.ДатаДок<'01.01.2003', 0, 1);
	Иначе
		Возврат ?(КредДокумент.ДатаДок<'01.01.2003', 0, 1);
	КонецЕсли;
КонецФункции //глБартерНаОбщихОснованиях

// ===============================
// Записывает движения в регистры ВзаиморасчетыПокупателей и ВзаиморасчетыПоставщиков
Процедура глПогаситьДокументВзаиморасчетов(Конт, Знач ЗнакОплаты, ФлагОтгрузки, 
			ФлагВозврата, Фирма, Контрагент, Договор, СтавкаНДС, Счет, КредДокумент, Валюта, 
			Знач СуммаСНДС, Знач СуммаСНДСОсн, Знач СуммаНДС, Знач КодОперации, Знач ВестиНУ = 1,
			Знач НеВключаетсяВВДВР = 0, Знач ПриоритетныйКодОперации = "", Знач Курс_НУ = 0, БезПР = 0) Экспорт
                             
	Если ПустоеЗначение(Договор)=1 Тогда
	     Договор = ПолучитьПустоеЗначение("Документ");
	КонецЕсли; 

	ВидДок = Конт.Вид();
	Если Найти("БанковскаяВыписка,РасходыНаПриобретение,АвансовыйОтчет,УМК_КассоваяВедомость,УМК_КассоваяВедомостьРасходная",ВидДок) <> 0 Тогда
		НомерСтроки = Конт.НомерСтроки;
	Иначе	
		НомерСтроки = 0;		
	КонецЕсли;
	
	Флаг_НУ = ""; ДопФлаг_НУ = "";
	Если ВестиНУ = 1 Тогда
		// определим, возникают ли суммы по НУ
		ВозникаетНО = ?(СтавкаНДС=неНДС,0,1); ВозникаетВДВР = 1-НеВключаетсяВВДВР;
		КонтрагентПлательщик = ?(ЗнакОплаты>0, глКонтрагентПлательщикНПнаОО(Контрагент,Договор,Счет,КредДокумент), 1); 
		Если (КодОперации = ПостОплата) Или (КодОперации = ВозвратАвансовойОплаты) Тогда
			// нет первого события, нет ВД/ВР
		ИначеЕсли (КодОперации = АвансоваяОплата) Или (КодОперации = ВозвратПостОплаты) Тогда
			// есть первое событие, есть ВД/ВР (для неплательщика нет ВД/ВР)              
			Флаг_НУ = ПолучитьФлагНУ(ФлагВозврата,ВозникаетНО,?(КонтрагентПлательщик=1,ВозникаетВДВР,0)); 
		ИначеЕсли (КодОперации = ПостОтгрузка) Или (КодОперации = ВозвратАвансовойОтгрузки) Тогда
			// нет первого события, нет ВД/ВР (для неплательщика есть ВД/ВР)
			Флаг_НУ = ПолучитьФлагНУ(ФлагВозврата,0,?(КонтрагентПлательщик=1,0,ВозникаетВДВР)); 
		ИначеЕсли (КодОперации = АвансоваяОтгрузка) Или (КодОперации = ВозвратПостОтгрузки) Тогда
			// есть первое событие, есть ВД/ВР    
			Флаг_НУ = ПолучитьФлагНУ(ФлагВозврата,ВозникаетНО,ВозникаетВДВР); 
		ИначеЕсли (КодОперации = ПервоеСобытиеБартерРасход) Или (КодОперации = ВозвратВтороеСобытиеБартерПриход) Тогда
			// первое событие по бартеру: отгрузка
			Флаг_НУ = ПолучитьФлагНУ(ФлагВозврата,ВозникаетНО,ВозникаетВДВР); 
		ИначеЕсли (КодОперации = ПервоеСобытиеБартерПриход) Или (КодОперации = ВозвратВтороеСобытиеБартерРасход) Тогда
			// первое событие по бартеру: поставка
			Если глБартерНаОбщихОснованиях(Договор,Счет,КредДокумент) = 0 Тогда
				ДопФлаг_НУ = ПолучитьФлагНУ(ФлагВозврата,ВозникаетНО,ВозникаетВДВР);
			Иначе
				Флаг_НУ = ПолучитьФлагНУ(ФлагВозврата,ВозникаетНО,ВозникаетВДВР);
			КонецЕсли;                                                
		ИначеЕсли (КодОперации = ВтороеСобытиеБартерРасход) Или (КодОперации = ВозвратПервоеСобытиеБартерПриход) Тогда
			// второе событие по бартеру: балансирующая отгрузка
			Если глБартерНаОбщихОснованиях(Договор,Счет,КредДокумент) = 0 Тогда
				Флаг_НУ = ПолучитьФлагНУ(ФлагВозврата,ВозникаетНО,ВозникаетВДВР);
			Иначе
				Флаг_НУ = ПолучитьФлагНУ(ФлагВозврата,0,0);
				ДопФлаг_НУ = ПолучитьФлагНУ(ФлагВозврата,ВозникаетНО,ВозникаетВДВР); 
			КонецЕсли;                                                
		ИначеЕсли (КодОперации = ВтороеСобытиеБартерПриход) Или (КодОперации = ВозвратПервоеСобытиеБартерРасход) Тогда
			// второе событие по бартеру: балансирующая поставка
			ДопФлаг_НУ = ПолучитьФлагНУ(ФлагВозврата,ВозникаетНО,ВозникаетВДВР);
		ИначеЕсли (КодОперации = ВводОстатковОтгрузка) Или (КодОперации = ВводОстатковОплата) Тогда
			// первое событие при вводе остатков
			Флаг_НУ = ПолучитьФлагНУ(ФлагВозврата,ВозникаетНО,ВозникаетВДВР); 
		КонецЕсли;
	КонецЕсли;		

	Если (ПустоеЗначение(Флаг_НУ)=0) Или (ПустоеЗначение(ДопФлаг_НУ)=0) Тогда
		СуммаСНДС_НУ = ?(Курс_НУ=0,СуммаСНДСОсн,СуммаСНДС*Курс_НУ);
	Иначе
		СуммаСНДС_НУ = 0;
	КонецЕсли;
	
	Если ПустоеЗначение(ПриоритетныйКодОперации)=0 Тогда
	    КодОперации = ПриоритетныйКодОперации;
	КонецЕсли;

	// Пересчитываем по курсу документа
	Если глЕстьРеквизитШапки("Курс",ВидДок) = Да Тогда
		СуммаНДС = глПересчет(СуммаНДС,Валюта,Гривня,Конт.Курс,Конт.ДатаДок);
	Иначе
		СуммаНДС = глПересчет(СуммаНДС,Валюта,Гривня,Конт.ДатаДок);
	КонецЕсли;	
	                     
	Если ФлагВозврата = 1 Тогда
	    СуммаСНДС 		= - СуммаСНДС;
		СуммаСНДСОсн 	= - СуммаСНДСОсн;
		СуммаНДС 		= - СуммаНДС;
		СуммаСНДС_НУ 	= - СуммаСНДС_НУ;
	КонецЕсли;
	
	Если ЗнакОплаты>0 Тогда
		ДвиженияПР = ?(БезПР = 1,0,1);
		РегистрВзаиморасчетов			= Конт.Регистр.ВзаиморасчетыПоставщиков;
		Если Конт.Вид() = "БанковскаяВыписка" Тогда
		    ДвиженияПР = 0;
		КонецЕсли;
		РегистрВзаиморасчетовБартер		= Конт.Регистр.ВзаиморасчетыПокупателей;
	Иначе
		ДвиженияПР = 0;
		РегистрВзаиморасчетов			= Конт.Регистр.ВзаиморасчетыПокупателей;
		РегистрВзаиморасчетовБартер		= Конт.Регистр.ВзаиморасчетыПоставщиков;
	КонецЕсли;
	Если ДвиженияПР = 1 Тогда
		Если Конт.ДатаДок >= Константа.ДатаПереходаНаПР Тогда
			РегистрПР = Конт.Регистр.ВзаиморасчетыПоставщиковР;
			РегистрПР.ПривязыватьСтроку(НомерСтроки);
			РегистрПР.Фирма			= Фирма;
			РегистрПР.Контрагент	= Контрагент;
			РегистрПР.Договор		= Договор;
			РегистрПР.СтавкаНДС		= "";
			РегистрПР.Счет			= "";
			РегистрПР.КредДокумент	= "";
			РегистрПР.Валюта		= Валюта;
		
			РегистрПР.Долг			= СуммаСНДС;
			РегистрПР.ДолгОсн		= СуммаСНДСОсн;
		
			РегистрПР.КодОперации	= КодОперации;
			РегистрПР.Флаг_НУ 		= Флаг_НУ;  
			РегистрПР.СуммаСНДС_НУ	= СуммаСНДС_НУ;
			РегистрПР.НДС 			= СуммаНДС;	    
			// оплата
			Если ФлагОтгрузки = 0 Тогда
				Если ЗнакОплаты > 0 Тогда
					РегистрПР.ДвижениеПриходВыполнить();
				Иначе
					РегистрПР.ДвижениеРасходВыполнить();
				КонецЕсли;                                                                                    
			// отгрузка
			Иначе
				Если ЗнакОплаты > 0 Тогда
					РегистрПР.ДвижениеРасходВыполнить();
				Иначе
					РегистрПР.ДвижениеПриходВыполнить();
				КонецЕсли;                                          
			КонецЕсли;		    
		КонецЕсли;		
	КонецЕсли;	
	
	РегистрВзаиморасчетов.ПривязыватьСтроку(НомерСтроки);
	РегистрВзаиморасчетов.Фирма			= Фирма;
	РегистрВзаиморасчетов.Контрагент	= Контрагент;
	РегистрВзаиморасчетов.Договор		= Договор;
	РегистрВзаиморасчетов.СтавкаНДС		= СтавкаНДС;
	РегистрВзаиморасчетов.Счет			= Счет;
	РегистрВзаиморасчетов.КредДокумент	= КредДокумент;
	РегистрВзаиморасчетов.Валюта		= Валюта;

	РегистрВзаиморасчетов.Долг			= СуммаСНДС;
	РегистрВзаиморасчетов.ДолгОсн		= СуммаСНДСОсн;

	РегистрВзаиморасчетов.КодОперации	= КодОперации;
	РегистрВзаиморасчетов.Флаг_НУ 		= Флаг_НУ;  
	РегистрВзаиморасчетов.СуммаСНДС_НУ	= СуммаСНДС_НУ;
	РегистрВзаиморасчетов.НДС 			= СуммаНДС;
	// оплата
	Если ФлагОтгрузки = 0 Тогда
		Если ЗнакОплаты > 0 Тогда
			РегистрВзаиморасчетов.ДвижениеПриходВыполнить();
		Иначе
			РегистрВзаиморасчетов.ДвижениеРасходВыполнить();
		КонецЕсли;                                                                                    
	// отгрузка
	Иначе
	    Если (ПустоеЗначение(Флаг_НУ) = 1) И 
				( (КодОперации = ПервоеСобытиеБартерРасход) Или (КодОперации = ПервоеСобытиеБартерПриход)
				Или (КодОперации = ВтороеСобытиеБартерРасход) Или (КодОперации = ВтороеСобытиеБартерПриход)
				Или (КодОперации = ВозвратВтороеСобытиеБартерПриход) Или (КодОперации = ВозвратВтороеСобытиеБартерРасход)
				Или (КодОперации = ВозвратПервоеСобытиеБартерПриход) Или (КодОперации = ВозвратПервоеСобытиеБартерРасход) 
				) Тогда
			РегистрВзаиморасчетов.СуммаСНДС_НУ	= 0;
			РегистрВзаиморасчетов.НДС 			= 0;
		КонецЕсли;
		Если (КодОперации = ВтороеСобытиеБартерРасход) Или (КодОперации = ВтороеСобытиеБартерПриход) 
				Или (КодОперации = ВозвратПервоеСобытиеБартерПриход) Или (КодОперации = ВозвратПервоеСобытиеБартерРасход) Тогда
			ЗнакОплаты = - ЗнакОплаты;
		КонецЕсли;
		Если ЗнакОплаты > 0 Тогда
			РегистрВзаиморасчетов.ДвижениеРасходВыполнить();
		Иначе
			РегистрВзаиморасчетов.ДвижениеПриходВыполнить();
		КонецЕсли;                                          
	    Если (ПустоеЗначение(ДопФлаг_НУ) = 0) 
				И ((ПустоеЗначение(СуммаСНДС_НУ) = 0) Или (ПустоеЗначение(СуммаНДС) = 0)) Тогда
			РегистрВзаиморасчетовБартер.ПривязыватьСтроку(НомерСтроки);
			РегистрВзаиморасчетовБартер.Фирма 		= Фирма;
			РегистрВзаиморасчетовБартер.Контрагент 	= Контрагент;
			РегистрВзаиморасчетовБартер.Договор 	= Договор;
			РегистрВзаиморасчетовБартер.СтавкаНДС 	= СтавкаНДС;
			РегистрВзаиморасчетовБартер.Счет 		= Счет;
			РегистрВзаиморасчетовБартер.КредДокумент= КредДокумент;
			РегистрВзаиморасчетовБартер.Валюта 		= Валюта;
	
			РегистрВзаиморасчетовБартер.Долг 		= 0;
			РегистрВзаиморасчетовБартер.ДолгОсн 	= 0;
	
			РегистрВзаиморасчетовБартер.КодОперации = КодОперации;
			РегистрВзаиморасчетовБартер.Флаг_НУ 	= ДопФлаг_НУ;
			РегистрВзаиморасчетовБартер.СуммаСНДС_НУ= СуммаСНДС_НУ;
			РегистрВзаиморасчетовБартер.НДС 		= СуммаНДС;
			Если ЗнакОплаты > 0 Тогда
				РегистрВзаиморасчетовБартер.ДвижениеПриходВыполнить();
			Иначе
				РегистрВзаиморасчетовБартер.ДвижениеРасходВыполнить();
			КонецЕсли;                                          
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // глПогаситьДокументВзаиморасчетов()

// ===============================
// Проверяет соответствие долга (строчки из тбДолги) переданным параметрам
Функция глПроверитьДолг(тбДолги,Контрагент=0,Договор=0,СтавкаНДС=0,Счет=0,Валюта=0) Экспорт
	Если ПустоеЗначение(Контрагент)=0 Тогда
		Если тбДолги.Контрагент <> Контрагент Тогда
			возврат 0;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗначения(Договор)<>1 Тогда
		// Если был передан параметр - проверяем
		Если (тбДолги.Договор <> Договор) 
		И ((ПустоеЗначение(тбДолги.Договор)=0) ИЛИ (ПустоеЗначение(Договор)=0)) Тогда
			возврат 0;
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(СтавкаНДС)=0 Тогда
		Если (тбДолги.СтавкаНДС <> СтавкаНДС)
		И ((ПустоеЗначение(тбДолги.СтавкаНДС)=0) ИЛИ (ПустоеЗначение(СтавкаНДС)=0)) Тогда
			возврат 0;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗначения(Счет)<>1 Тогда
		// Если был передан параметр - проверяем
		Если (тбДолги.Счет <> Счет)
		И ((ПустоеЗначение(тбДолги.Счет)=0) ИЛИ (ПустоеЗначение(Счет)=0)) Тогда
			возврат 0;
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(Валюта)=0 Тогда
		Если тбДолги.Валюта <> Валюта Тогда
			возврат 0;
		КонецЕсли;
	КонецЕсли;
	Если тбДолги.Долг=0 Тогда
	    возврат 0;
	КонецЕсли;
	возврат 1;
КонецФункции	

// ===============================     
// Поиск долга с нужными реквизитами
Функция НайтиДолг(тбДолги,Контрагент,Договор,СтавкаНДС,Счет,Валюта)
	тбДолги.ВыбратьСтроки();
	Пока тбДолги.ПолучитьСтроку() = 1 Цикл
		Если глПроверитьДолг(тбДолги,Контрагент,Договор,СтавкаНДС,Счет,Валюта)=0 Тогда
		    Продолжить;
		КонецЕсли;
		Возврат 1;
	КонецЦикла;
	Возврат 0;   
КонецФункции

// ===============================
Процедура глПереоценкаДолга(Конт,ЗнакОплаты,тбДолги,ПогашениеАванса) Экспорт
	НовыйДолгОсн = Окр(глПересчет(тбДолги.Долг,тбДолги.Валюта,Конт.ДатаДок,Гривня,Конт.ДатаДок,),2);
	Разница = Окр(тбДолги.ДолгОсн - НовыйДолгОсн,2);
	Если Разница <>0 Тогда
		Если ЗнакОплаты=+1 Тогда
			РегВзаим = Конт.Регистр.ВзаиморасчетыПоставщиков;
			текПокупатель = "";
			текПоставщик = тбДолги.Контрагент;
		Иначе
			РегВзаим = Конт.Регистр.ВзаиморасчетыПокупателей;
			текПокупатель = тбДолги.Контрагент;
			текПоставщик = "";
		КонецЕсли;
		РегВзаим.Фирма = тбДолги.Фирма;
		РегВзаим.Контрагент = тбДолги.Контрагент;
		РегВзаим.Договор = тбДолги.Договор;
		РегВзаим.СтавкаНДС = тбДолги.СтавкаНДС;
		РегВзаим.КредДокумент = тбДолги.КредДокумент;
		РегВзаим.Валюта = тбДолги.Валюта;
		РегВзаим.Долг = 0;
		РегВзаим.КодОперации = ?(Разница < 0,КурсоваяРазницаДоход,КурсоваяРазницаУбыток);
		РегВзаим.СуммаСНДС_НУ = 0;
		РегВзаим.НДС = 0;
		РегВзаим.Флаг_НУ = "";
		Если Разница > 0 Тогда
			РегВзаим.ДолгОсн = Разница;
			РегВзаим.ДвижениеРасходВыполнить();
		Иначе
			РегВзаим.ДолгОсн = - Разница;
			РегВзаим.ДвижениеПриходВыполнить();
		КонецЕсли;
		
		Если Константа.ОтражатьКурсовуюРазницуВОборотах = 3 Тогда
			// подробно
			Конт.Регистр.Обороты.Движение(тбДолги.Фирма,Константа.КурсоваяРазница,,текПокупатель,текПоставщик,,
				0,0,0,0,-Разница,ДоходОтКурсовойРазницы,);
		ИначеЕсли Константа.ОтражатьКурсовуюРазницуВОборотах = 2 Тогда
			// сводно
			Конт.Регистр.Обороты.Движение(тбДолги.Фирма,Константа.КурсоваяРазница,,,,,
				0,0,0,0,-Разница,ДоходОтКурсовойРазницы,);
		КонецЕсли;
			
		// сформируем проводку по курсовой разнице	    
		ВидДок = Конт.ТекущийДокумент().Вид();
		текСчетКонтрагента = 0;
		// определим счет, который переоцениваем
		Если глЕстьРеквизитШапки("СчетКонтрагента",ВидДок) = Да Тогда
			// счет контрагента указан в шапке документа
			Если Конт.Контрагент = тбДолги.Контрагент Тогда
				текСчетКонтрагента = Конт.СчетКонтрагента;
			ИначеЕсли ВидДок = "ПриходнаяНакладнаяГТД" Тогда
				// это документ ГТД и переоцениваем счет перевозчика
				текСчетКонтрагента = Конт.СчетПеревозчика;
			КонецЕсли;	
		ИначеЕсли глЕстьРеквизитШапки("Счет",ВидДок) = Да Тогда
			// это кассовые ордера
			Если Конт.Субконто1 = тбДолги.Контрагент Тогда
				текСчетКонтрагента = Конт.Счет;
			КонецЕсли;	
		Иначе                                           
			// счета в шапке нет, значит он в табличной части
			Если глЕстьРеквизитМнЧ("Счет",ВидДок) = Да Тогда
				// есть нужный реквизит
				Если ПустоеЗначение(Конт.Счет) = 1 Тогда
					// определить счет не представляется возможным
					глКомментарий("Не определен счет в строке "+Конт.НомерСтроки+"!",0,,"!!!");
					Возврат;
				Иначе
					текСчетКонтрагента = Конт.Счет;
				КонецЕсли;	
			Иначе
				// в документе счета вообще нет
				глКомментарий("В документе не указан счет контрагента!",0,,"!!!");
				Возврат;
			КонецЕсли;
		КонецЕсли;		
		                                          
		Если ПустоеЗначение(текСчетКонтрагента) = 1 Тогда
			глКомментарий("Не заполнен счет контрагента!",0,,"!!!");
			Возврат;
		КонецЕсли;      
		
		Если (ПогашениеАванса=1) И (глВыделятьЛиАвансыПоСчету(текСчетКонтрагента)=1) Тогда  
			текСчетКонтрагента = ?(ЗнакОплаты=1,"3712","6812");
		КонецЕсли;
		
		// определим счета доходов
		СчетДоходовОперКР = СчетПоКоду("71.4");
		СчетДоходовНеоперКР = СчетПоКоду("74.4");
		// определим счета расходов
		Если ИспользоватьСчетаРасходов = Класс8 Тогда
			СчетЗатратОперКР = СчетПоКоду("84");
			СчетЗатратНеоперКР = СчетПоКоду("85");
		Иначе
			СчетЗатратОперКР = СчетПоКоду("94.5");
			СчетЗатратНеоперКР = СчетПоКоду("97.4");
		КонецЕсли;
		
		// определим виды затрат (из констант) по счетам расходов
		ВидЗатратОперКР = Константа.ВидЗатратОперКР;
		ВидЗатратНеоперКР = Константа.ВидЗатратНеоперКР;
		Если (ПустоеЗначение(ВидЗатратНеоперКР) = 1) или (ПустоеЗначение(ВидЗатратОперКР) = 1) Тогда
			Если ПустоеЗначение(ВидЗатратОперКР) = 1 Тогда
				глКомментарий("Не заполнена константа ""Вид затрат по операционной курсовой разнице""!",0,,"!!!");
			КонецЕсли;
			Если ПустоеЗначение(ВидЗатратНеоперКР) = 1 Тогда
				глКомментарий("Не заполнена константа ""Вид затрат по неоперационной курсовой разнице""!",0,,"!!!");
			КонецЕсли;
			глКомментарий("Невозможно выполнить переоценку!",0,,"!!!");
			Возврат;
		КонецЕсли;
		              
		текОперационнаяКР = 1;
		// определим какая это курсовая разница - операционная или неоперационная
		Если Найти(ВидДок,"Кассовый")>0 Тогда
			текОперационнаяКР = Конт.ОперационнаяКР;
		ИначеЕсли ВидДок = "БанковскаяВыписка" Тогда
			Если Конт.ОперационнаяКР = Нет Тогда
				текОперационнаяКР = 0;
			КонецЕсли;
		ИначеЕсли ВидДок = "ЛиквидацияНеоборАктивов" Тогда
			текОперационнаяКР = 0;
        КонецЕсли;
		
		НомерЖурнала="БК";
		// сделаем проводки по бухгалтерскому учету
		Если Разница < 0 Тогда
			// сделаем проводку по бухг. учету
			СчетДоходов = ?(текОперационнаяКР = 0, СчетДоходовНеоперКР, СчетДоходовОперКР);
			глПроводка(Конт,текСчетКонтрагента,СчетДоходов,-Разница,"Переоценка валюты: доход",, тбДолги.Контрагент, тбДолги.Договор,,
			,,, тбДолги.Валюта,,НомерЖурнала);
		Иначе
			// определим счет и вид затрат (операционные/неоперационные)
			СчетЗатрат = ?(текОперационнаяКР = 0, СчетЗатратНеоперКР, СчетЗатратОперКР);
			ВидЗатрат = ?(текОперационнаяКР = 0, ВидЗатратНеоперКР, ВидЗатратОперКР);
			
			глПроводкаПоЗатратам(Конт,СчетЗатрат,текСчетКонтрагента,Разница,"Переоценка валюты: убыток",, ,,ВидЗатрат,
			тбДолги.Контрагент,тбДолги.Договор,, тбДолги.Валюта,,НомерЖурнала);
		КонецЕсли;
		
		тбДолги.ДолгОсн = НовыйДолгОсн;
	КонецЕсли;
КонецПроцедуры

// ===============================
Функция глДокДляКомментария(Док)
    Если ПустоеЗначение(Док)=1 Тогда
		Возврат "<Пустой>";
	Иначе
		Возврат Строка(Док);
    КонецЕсли;
КонецФункции //

// ===============================
// Выполняет проведение взаиморасчетов для платежных документов (ПриходныйКассовый,РасходныйКассовый,БанковскаяВыписка)
Процедура глПогашениеДолга(Конт, ЗнакОплаты, тбДолги, ПромФирма, Контрагент, ВидОперации,
		ДокументОснование, Договор, РежимОплаты, СуммаПогашения, 
		СуммаНДСПогашения, ВалютаПогашения, СтавкаНДСПогашения, 
		НеВключаетсяВВДВР = 0, Курс_НУ =0, СуммаГрн = 0, СортировкаВыполнена = 0) Экспорт
	
	СуммаВГрн = СуммаГрн;
	глКомментарий("=== Погашение долга контрагента "+Контрагент,3);
	ФлагОтгрузки = 0;
	Если ВидОперации = Перечисление.ВидыОплаты.Возврат Тогда
		глКомментарий(" Производим возврат средств",3);
	    ФлагВозврата = 1;
		
		Если СортировкаВыполнена = 0 Тогда
			тбДолги.Сортировать("Контрагент*,КредДокумент-",1);
		КонецЕсли;
		
		Если (РежимОплаты = Перечисление.РежимыОплаты.АвтораспределениеПриоритетныйДоговор) Тогда
			глКомментарий("   Производится возврат средств по приоритетному договору "+глДокДляКомментария(Договор),3);
			// Погашаем приоритетный договор
			НС = 0;
			тбДолги.НайтиЗначение(Контрагент,НС,"Контрагент");
			Для НомСтр = Макс(1,НС) по ?(НС=0,0,тбДолги.КоличествоСтрок()) Цикл
				тбДолги.ПолучитьСтрокуПоНомеру(НомСтр);
				Если тбДолги.Контрагент <> Контрагент Тогда
					Прервать;
				КонецЕсли;
				Если глПроверитьДолг(тбДолги,Контрагент,Договор,СтавкаНДСПогашения,,ВалютаПогашения)=0 Тогда
					Продолжить;
				КонецЕсли;
				// Закрываем 
				СальдоПоОплате=?(ЗнакОплаты>0,Макс(0, тбДолги.Долг), -Мин(0, тбДолги.Долг));
				Если СальдоПоОплате <> 0 Тогда
					СуммаСНДС	 = Мин(СуммаПогашения, СальдоПоОплате);
					Если СуммаВГрн = 0 Тогда
						СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
						СуммаГрн = СуммаСНДСОсн;
					Иначе
						СальдоПоОплатеОсн=?(ЗнакОплаты>0,Макс(0, тбДолги.ДолгОсн), -Мин(0, тбДолги.ДолгОсн));
						СуммаСНДСОсн = Мин(СуммаГрн, СальдоПоОплатеОсн);
					КонецЕсли;
					
					СуммаНДС	 = Окр(СуммаНДСПогашения * СуммаСНДС / СуммаПогашения,2);
					
					тбСуммыВозврата = СоздатьОбъект("ТаблицаЗначений");
					тбДолги.Выгрузить(тбСуммыВозврата,тбДолги.НомерСтроки,тбДолги.НомерСтроки);
					// определим сумму возвратов для переоценки
					тбСуммыВозврата.Долг	= ЗнакОплаты*СуммаСНДС;
					// Пересчитаем сумму возврата по курсу аванса
					тбСуммыВозврата.ДОлгОсн = ЗнакОплаты*СуммаСНДС*?(ПустоеЗначение(тбДолги.Долг)=1,0,(тбДолги.ДОлгОсн/тбДолги.Долг));
					
					тбДолги.Долг	= тбДолги.Долг    - ЗнакОплаты * СуммаСНДС;
					тбДолги.ДолгОсн = тбДолги.ДолгОсн - ЗнакОплаты * СуммаСНДСОсн;
					
					СуммаПогашения	  = СуммаПогашения - СуммаСНДС;
					СуммаНДСПогашения = СуммаНДСПогашения - СуммаНДС;
					СуммаГрн		  = СуммаГрн - СуммаСНДСОсн;
					КодОперации		  = ВозвратПостОплаты;
					
					глПогаситьДокументВзаиморасчетов(Конт,ЗнакОплаты, ФлагОтгрузки, ФлагВозврата,
						тбДолги.Фирма, тбДолги.Контрагент, тбДолги.Договор, тбДолги.СтавкаНДС,тбДолги.Счет,
						тбДолги.КредДокумент, тбДолги.Валюта, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, КодОперации,,НеВключаетсяВВДВР,,Курс_НУ);						
					// необходимо переоценить только возврат
					глПереоценкаДолга(Конт,ЗнакОплаты,тбСуммыВозврата,1);
					тбСуммыВозврата	= 0;
				КонецЕсли;
				Если СуммаПогашения = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; // по тбДолги
		ИначеЕсли ((РежимОплаты = Перечисление.РежимыОплаты.ПоДоговоруПриоритетныйСчет) 
		ИЛИ (РежимОплаты = Перечисление.РежимыОплаты.ПоСчету))Тогда
			глКомментарий("   Производится возврат средств по договору "+глДокДляКомментария(Договор)+", приоритетному счету "+глДокДляКомментария(ДокументОснование),3);
			// Погашаем приоритетный Счет
			НС = 0;
			тбДолги.НайтиЗначение(Контрагент,НС,"Контрагент");
			Для НомСтр = Макс(1,НС) по ?(НС=0,0,тбДолги.КоличествоСтрок()) Цикл
				тбДолги.ПолучитьСтрокуПоНомеру(НомСтр);
				Если тбДолги.Контрагент <> Контрагент Тогда
					Прервать;
				КонецЕсли;
				Если глПроверитьДолг(тбДолги,Контрагент,Договор,СтавкаНДСПогашения,ДокументОснование,ВалютаПогашения)=0 Тогда
					Продолжить;
				КонецЕсли;
				СальдоПоОплате=?(ЗнакОплаты>0,Макс(0, тбДолги.Долг), -Мин(0, тбДолги.Долг));
				Если СальдоПоОплате <> 0 Тогда
					СуммаСНДС	 = Мин(СуммаПогашения, СальдоПоОплате);
					Если СуммаВГрн = 0 Тогда
						СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
						СуммаГрн = СуммаСНДСОсн;
					Иначе
						СуммаСНДСОсн = Окр(СуммаГрн * СуммаСНДС / СуммаПогашения,2);
//						СальдоПоОплатеОсн =?(ЗнакОплаты>0,Макс(0, тбДолги.ДолгОсн), -Мин(0, тбДолги.ДолгОсн));
//						СуммаСНДСОсн = Мин(СуммаГрн, СальдоПоОплатеОсн);
					КонецЕсли;					
					
					СуммаНДС	 = Окр(СуммаНДСПогашения * СуммаСНДС / СуммаПогашения,2);
					
					тбСуммыВозврата = СоздатьОбъект("ТаблицаЗначений");
					тбДолги.Выгрузить(тбСуммыВозврата,тбДолги.НомерСтроки,тбДолги.НомерСтроки);
					// определим сумму возвратов для переоценки
					тбСуммыВозврата.Долг	= ЗнакОплаты*СуммаСНДС;
					// Пересчитаем сумму возврата по курсу аванса
					тбСуммыВозврата.ДОлгОсн = ЗнакОплаты*СуммаСНДС*?(ПустоеЗначение(тбДолги.Долг)=1,0,(тбДолги.ДОлгОсн/тбДолги.Долг));
					
					тбДолги.Долг	= тбДолги.Долг	  - ЗнакОплаты * СуммаСНДС;					
					тбДолги.ДолгОсн = тбДолги.ДолгОсн - ЗнакОплаты * СуммаСНДСОсн;
					
					СуммаПогашения	  = СуммаПогашения - СуммаСНДС;
					СуммаГрн		  = СуммаГрн - СуммаСНДСОсн;
					СуммаНДСПогашения = СуммаНДСПогашения - СуммаНДС;
					КодОперации 	  = ВозвратПостОплаты;
					глПогаситьДокументВзаиморасчетов(Конт,ЗнакОплаты, ФлагОтгрузки, ФлагВозврата,
						тбДолги.Фирма, тбДолги.Контрагент, тбДолги.Договор, тбДолги.СтавкаНДС,тбДолги.Счет,
						тбДолги.КредДокумент, тбДолги.Валюта, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, КодОперации,,НеВключаетсяВВДВР,,Курс_НУ);
					глПереоценкаДолга(Конт,ЗнакОплаты,тбСуммыВозврата,1);
					тбСуммыВозврата	= 0;
				КонецЕсли;
				Если СуммаПогашения = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; // по тбДолги
		КонецЕсли;
		
		Если (СуммаПогашения > 0) и ((РежимОплаты = Перечисление.РежимыОплаты.АвтораспределениеПриоритетныйДоговор) или 
			(РежимОплаты = Перечисление.РежимыОплаты.Автораспределение) или (РежимОплаты = Перечисление.РежимыОплаты.ПоДоговору)
			или (РежимОплаты = Перечисление.РежимыОплаты.ПоДоговоруПриоритетныйСчет)) Тогда
				
			Если (РежимОплаты = Перечисление.РежимыОплаты.АвтораспределениеПриоритетныйДоговор) или
				(РежимОплаты = Перечисление.РежимыОплаты.Автораспределение) Тогда
				глКомментарий("   Производится возврат средств в порядке LIFO по всем договорам",3);
			Иначе
				глКомментарий("   Производится возврат средств в порядке LIFO по договору "+глДокДляКомментария(Договор),3);
			КонецЕсли;
			НС = 0;
			тбДолги.НайтиЗначение(Контрагент,НС,"Контрагент");
			Для НомСтр = Макс(1,НС) по ?(НС=0,0,тбДолги.КоличествоСтрок()) Цикл
				тбДолги.ПолучитьСтрокуПоНомеру(НомСтр);
				// Погашаем неприоритетные долги
				Если тбДолги.Контрагент <> Контрагент Тогда
					Прервать;
				КонецЕсли;
				Если (РежимОплаты = Перечисление.РежимыОплаты.АвтораспределениеПриоритетныйДоговор) или
					(РежимОплаты = Перечисление.РежимыОплаты.Автораспределение) Тогда
					Если глПроверитьДолг(тбДолги,Контрагент,,СтавкаНДСПогашения,,ВалютаПогашения)=0 Тогда
						Продолжить;
					КонецЕсли;
				Иначе // если ПоДоговору или ПоДоговоруПриоритетныйСчет
					Если глПроверитьДолг(тбДолги,Контрагент,Договор,СтавкаНДСПогашения,,ВалютаПогашения)=0 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				// Закрываем 
				СальдоПоОплате=?(ЗнакОплаты>0,Макс(0, тбДолги.Долг), -Мин(0, тбДолги.Долг));
				Если СальдоПоОплате <> 0 Тогда
					СуммаСНДС	 = Мин(СуммаПогашения, СальдоПоОплате);
					Если СуммаВГрн = 0 Тогда
						СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
						СуммаГрн = СуммаСНДСОсн;
					Иначе
						СуммаСНДСОсн = Окр(СуммаГрн * СуммаСНДС / СуммаПогашения,2);
						//СальдоПоОплатеОсн =?(ЗнакОплаты>0,Макс(0, тбДолги.ДолгОсн), -Мин(0, тбДолги.ДолгОсн));
						//СуммаСНДСОсн = Мин(СуммаГрн, СальдоПоОплатеОсн);
					КонецЕсли;					

					СуммаНДС	 = Окр(СуммаНДСПогашения * СуммаСНДС / СуммаПогашения,2);
					
					тбСуммыВозврата = СоздатьОбъект("ТаблицаЗначений");
					тбДолги.Выгрузить(тбСуммыВозврата,тбДолги.НомерСтроки,тбДолги.НомерСтроки);
					// определим сумму возвратов для переоценки
					тбСуммыВозврата.Долг	= ЗнакОплаты*СуммаСНДС;
					// Пересчитаем сумму возврата по курсу аванса
					тбСуммыВозврата.ДОлгОсн = ЗнакОплаты*СуммаСНДС*?(ПустоеЗначение(тбДолги.Долг)=1,0,(тбДолги.ДОлгОсн/тбДолги.Долг));
					
					тбДолги.Долг	= тбДолги.Долг - ЗнакОплаты * СуммаСНДС;
					тбДолги.ДолгОсн = тбДолги.ДолгОсн - ЗнакОплаты * СуммаСНДСОсн;
					
					СуммаПогашения	  = СуммаПогашения - СуммаСНДС;
					СуммаНДСПогашения = СуммаНДСПогашения - СуммаНДС;
					СуммаГрн		  = СуммаГрн - СуммаСНДСОсн;
					КодОперации		  = ВозвратПостОплаты;
					глПогаситьДокументВзаиморасчетов(Конт,ЗнакОплаты, ФлагОтгрузки, ФлагВозврата,
						тбДолги.Фирма, тбДолги.Контрагент, тбДолги.Договор, тбДолги.СтавкаНДС, тбДолги.Счет,
						тбДолги.КредДокумент,ВалютаПогашения, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, КодОперации,,НеВключаетсяВВДВР,,Курс_НУ);
					// необходимо переоценить только возврат
					глПереоценкаДолга(Конт,ЗнакОплаты,тбСуммыВозврата,1);
					ВремТбДолги	= 0;
				КонецЕсли;
				Если СуммаПогашения = 0 Тогда
					прервать;
				КонецЕсли;
			КонецЦикла; // по тбДолги
		КонецЕсли; 
			
		Если СуммаПогашения > 0 Тогда
			глКомментарий("В строке № "+Конт.НомерСтроки+ " возврат средств проводится как возврат закрытой оплаты по договору "+глДокДляКомментария(Договор)+", по счету "+глДокДляКомментария(ДокументОснование)+".",3);
			КодОперации	 = ВозвратАвансовойОплаты;
			СуммаСНДС	 = СуммаПогашения;
			Если СуммаВГрн = 0 Тогда
				СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
			Иначе
				СуммаСНДСОсн = СуммаГрн;
			КонецЕсли;					
			
			СуммаНДС	 = СуммаНДСПогашения;
			глПогаситьДокументВзаиморасчетов(Конт,ЗнакОплаты, ФлагОтгрузки, ФлагВозврата,
				ПромФирма, Контрагент, Договор, СтавкаНДСПогашения, ДокументОснование, Конт.ТекущийДокумент(), 
				ВалютаПогашения, СуммаСНДС,СуммаСНДСОсн, СуммаНДС, КодОперации,,НеВключаетсяВВДВР,,Курс_НУ);
			Счет = глПолучитьДокументВзаиморасчетов(Конт.ТекущийДокумент());
			// в таблицу долгов добавим строку по возврату
			тбДолги.НоваяСтрока();
			тбДолги.Фирма		 = ПромФирма;
			тбДолги.Контрагент	 = Контрагент;
			тбДолги.Договор		 = Договор;
			тбДолги.Счет		 = ДокументОснование;
			тбДолги.СтавкаНДС	 = СтавкаНДСПогашения;
			тбДолги.КредДокумент = Конт.ТекущийДокумент();
			тбДолги.Валюта		 = ВалютаПогашения;
			тбДолги.Долг		 = тбДолги.Долг	   - ЗнакОплаты*СуммаСНДС;
			тбДолги.ДолгОсн		 = тбДолги.ДолгОсн - ЗнакОплаты*СуммаСНДСОсн;
			СуммаПогашения	  = 0;
			СуммаНДСПогашения = 0;
			
			//если сортировка в данной процедуре не выполняется, 
			//то после добавления строки необходимо отсортировать.
			Если СортировкаВыполнена = 1 Тогда
				тбДолги.Сортировать("Контрагент*,КредДокумент-",1);
			КонецЕсли;
			
		КонецЕсли;
	Иначе //Если ВидОперации = Перечисление.ВидыОплаты.Оплата Тогда 
		ФлагВозврата = 0;
		
		Если СортировкаВыполнена = 0 Тогда
			тбДолги.Сортировать("Контрагент*,КредДокумент+",1);
		КонецЕсли;
		
		// определим документ-счет
		Если ДокументОснование.Вид() = "ПриходнаяНакладнаяГТД" Тогда
			// для ГТД счетов может быть несколько: по поставщику, по перевозке и по таможне
			Если ((Контрагент = ДокументОснование.Контрагент)
			ИЛИ (ПустоеЗначение(Контрагент)=1)) Тогда // поставщик
				// определим стандартным образом
				Счет = глПолучитьДокументВзаиморасчетов(ДокументОснование);
			Иначе // переозчик или таможня
				Если ПустоеЗначение(ДокументОснование) = 1 Тогда
					Счет = ПолучитьПустоеЗначение("Документ");
				Иначе                     
					// а если указан, тогда он и есть счет
					Счет = ДокументОснование;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Счет = глПолучитьДокументВзаиморасчетов(ДокументОснование);
		КонецЕсли;		
		Если (РежимОплаты = Перечисление.РежимыОплаты.ПоСчету) или 
			(РежимОплаты = Перечисление.РежимыОплаты.ПоДоговору) или 
			(РежимОплаты = Перечисление.РежимыОплаты.ПоДоговоруПриоритетныйСчет) Тогда
				
			Если (РежимОплаты = Перечисление.РежимыОплаты.ПоСчету) или 
				(РежимОплаты = Перечисление.РежимыОплаты.ПоДоговоруПриоритетныйСчет) Тогда
				// Прежде всего погашается остаток по ДокументОснование
				глКомментарий("   Производится погашение авансовых отгрузок по договору "+глДокДляКомментария(Договор)+", по счету "+глДокДляКомментария(ДокументОснование)+".",3);
				НС = 0;
				тбДолги.НайтиЗначение(Контрагент,НС,"Контрагент");
				Для НомСтр = Макс(1,НС) по ?(НС=0,0,тбДолги.КоличествоСтрок()) Цикл
					тбДолги.ПолучитьСтрокуПоНомеру(НомСтр);
					Если (тбДолги.Контрагент <> Контрагент) Тогда
						Прервать;
					КонецЕсли;
					Если глПроверитьДолг(тбДолги,Контрагент,Договор,СтавкаНДСПогашения,ДокументОснование,ВалютаПогашения)=0 Тогда
						Продолжить;
					КонецЕсли;
					СальдоПоОтгрузке=?(ЗнакОплаты<0,Макс(0, тбДолги.Долг), -Мин(0, тбДолги.Долг));
					Если СальдоПоОтгрузке <> 0 Тогда
					    СуммаСНДС	 = Мин(СуммаПогашения, СальдоПоОтгрузке);
						Если СуммаВГрн = 0 Тогда
							СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
							СуммаГрн = СуммаСНДСОсн;
						Иначе
							СуммаСНДСОсн = Окр(СуммаГрн * СуммаСНДС / СуммаПогашения,2);
							//СальдоПоОплатеОсн =?(ЗнакОплаты<0,Макс(0, тбДолги.ДолгОсн), -Мин(0, тбДолги.ДолгОсн));
							//СуммаСНДСОсн = Мин(СуммаГрн, СальдоПоОплатеОсн);
						КонецЕсли;

						СуммаНДС	 = Окр(СуммаНДСПогашения * СуммаСНДС / СуммаПогашения,2);
						
						тбДолги.Долг	 = тбДолги.Долг	   + ЗнакОплаты * СуммаСНДС;
						тбДолги.ДолгОсн	 = тбДолги.ДолгОсн + ЗнакОплаты * СуммаСНДСОсн;
						
						СуммаПогашения	  = СуммаПогашения - СуммаСНДС;
						СуммаНДСПогашения = СуммаНДСПогашения - СуммаНДС;
						СуммаГрн		  = СуммаГрн - СуммаСНДСОсн;
						КодОперации		  = ПостОплата;                                                                                                 
						глПогаситьДокументВзаиморасчетов(Конт,ЗнакОплаты, ФлагОтгрузки, ФлагВозврата, 
							тбДолги.Фирма, тбДолги.Контрагент, тбДолги.Договор, тбДолги.СтавкаНДС, тбДолги.Счет,
							тбДолги.КредДокумент,тбДолги.Валюта, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, КодОперации,,НеВключаетсяВВДВР,,Курс_НУ);
							
							
						// --- УМК Сандомирский В.Ю. (15.09.14) хитросделанный РКО при погашении ГТД 	
						фПереоценка = 1;
						Если Конт.Вид() = "РасходныйКассовый"  Тогда
							Если Конт.РСчет.Валюта <> Конт.Валюта Тогда  
								фПереоценка = 0;	
							КонецЕсли;	
						КонецЕсли;	
						
						Если фПереоценка = 1  Тогда
							глПереоценкаДолга(Конт,ЗнакОплаты,тбДолги,0);
						КонецЕсли;
									
						Если СуммаПогашения=0 Тогда
						    Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; // цикл по тбДолги
			КонецЕсли; // погашение долга по указанному счету
			
			Если (СуммаПогашения > 0) и ((РежимОплаты = Перечисление.РежимыОплаты.ПоДоговору) или 
				(РежимОплаты = Перечисление.РежимыОплаты.ПоДоговоруПриоритетныйСчет)) Тогда
				// Погашаем оставшиеся КредДокументы в порядке ФИФО
				глКомментарий("   Производится погашение авансовых отгрузок по договору "+глДокДляКомментария(Договор)+".",3);
				НС = 0;
				тбДолги.НайтиЗначение(Контрагент,НС,"Контрагент");
				Для НомСтр = Макс(1,НС) по ?(НС=0,0,тбДолги.КоличествоСтрок()) Цикл
					тбДолги.ПолучитьСтрокуПоНомеру(НомСтр);
					Если тбДолги.Контрагент <> Контрагент Тогда
						Прервать;
					КонецЕсли;
					Если глПроверитьДолг(тбДолги,Контрагент,Договор,СтавкаНДСПогашения,,ВалютаПогашения)=0 Тогда
						Продолжить;
					КонецЕсли;
					СальдоПоОтгрузке=?(ЗнакОплаты<0,Макс(0, тбДолги.Долг), -Мин(0, тбДолги.Долг));
					Если СальдоПоОтгрузке <> 0 Тогда
						СуммаСНДС	 = Мин(СуммаПогашения, СальдоПоОтгрузке);
						Если СуммаВГрн = 0 Тогда
							СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
							СуммаГрн = СуммаСНДСОсн;
						Иначе
							СуммаСНДСОсн = Окр(СуммаГрн * СуммаСНДС / СуммаПогашения,2);
							//СальдоПоОплатеОсн =?(ЗнакОплаты<0,Макс(0, тбДолги.ДолгОсн), -Мин(0, тбДолги.ДолгОсн));
							//СуммаСНДСОсн = Мин(СуммаГрн, СальдоПоОплатеОсн);
						КонецЕсли;					

						СуммаНДС	 = Окр(СуммаНДСПогашения * СуммаСНДС / СуммаПогашения,2);
						
						тбДолги.Долг	= тбДолги.Долг	  + ЗнакОплаты * СуммаСНДС;
						тбДолги.ДолгОсн = тбДолги.ДолгОсн + ЗнакОплаты * СуммаСНДСОсн;
						
						СуммаПогашения	  = СуммаПогашения - СуммаСНДС;
						СуммаНДСПогашения = СуммаНДСПогашения - СуммаНДС;
						СуммаГрн		  = СуммаГрн - СуммаСНДСОсн;
						КодОперации		  = ПостОплата;
						глПогаситьДокументВзаиморасчетов(Конт,ЗнакОплаты, ФлагОтгрузки, ФлагВозврата,
							тбДолги.Фирма, тбДолги.Контрагент, тбДолги.Договор, тбДолги.СтавкаНДС, тбДолги.Счет,
							тбДолги.КредДокумент,тбДолги.Валюта, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, КодОперации,,НеВключаетсяВВДВР,,Курс_НУ);
						глПереоценкаДолга(Конт,ЗнакОплаты,тбДолги,0);
					КонецЕсли;
					Если СуммаПогашения = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла; // цикл по тбДолги
			КонецЕсли;
			Если СуммаПогашения > 0 Тогда
				глКомментарий("   Производится авансовая оплата по договору "+глДокДляКомментария(Договор)+", по счету "+глДокДляКомментария(Счет)+".",3);
				// Авансовый платёж
				КодОперации	 = АвансоваяОплата;
				СуммаСНДС	 = СуммаПогашения;
				Если СуммаВГрн = 0 Тогда
					СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
					СуммаГрн = СуммаСНДСОсн;
				Иначе
					СуммаСНДСОсн = Окр(СуммаГрн * СуммаСНДС / СуммаПогашения,2);
					//СальдоПоОплатеОсн =?(ЗнакОплаты<0,Макс(0, тбДолги.ДолгОсн), -Мин(0, тбДолги.ДолгОсн));
					//СуммаСНДСОсн = Мин(СуммаГрн, СальдоПоОплатеОсн);
				КонецЕсли;					
				
				СуммаНДС	 = СуммаНДСПогашения;
				глПогаситьДокументВзаиморасчетов(Конт,ЗнакОплаты, ФлагОтгрузки, ФлагВозврата, 
					ПромФирма, Контрагент, Договор, СтавкаНДСПогашения, Счет, Конт.ТекущийДокумент(), 
					ВалютаПогашения, СуммаСНДС,СуммаСНДСОсн, СуммаНДС, КодОперации,,НеВключаетсяВВДВР,,Курс_НУ);
				Если НайтиДолг(тбДолги,Контрагент,Договор,СтавкаНДСПогашения,Счет,ВалютаПогашения) = 0 Тогда
					// если в банковской выписке есть несколько строк по одному кред. документу, то
					// после каждого проведения по авнасам необходимо изменять таблицу долгов
					тбДолги.НоваяСтрока();
					тбДолги.Фирма		 = ПромФирма;
					тбДолги.Контрагент	 = Контрагент;
					тбДолги.Договор		 = Договор;
					тбДолги.Счет		 = ДокументОснование;
					тбДолги.СтавкаНДС	 = СтавкаНДСПогашения;
					тбДолги.КредДокумент = Конт.ТекущийДокумент();
					тбДолги.Валюта		 = ВалютаПогашения;
					
					//если сортировка в данной процедуре не выполняется, 
					//то после добавления строки необходимо отсортировать.
					Если СортировкаВыполнена = 1 Тогда 
						тбДолги.Сортировать("Контрагент*,КредДокумент+",1);
					КонецЕсли;
					
				КонецЕсли;	
				тбДолги.Долг	= тбДолги.Долг	  + ЗнакОплаты*СуммаСНДС;
				тбДолги.ДолгОсн	= тбДолги.ДолгОсн + ЗнакОплаты*СуммаСНДСОсн;
				СуммаПогашения	  = 0;
				СуммаНДСПогашения = 0;
				СуммаГрн		  = 0;
			КонецЕсли;
		Иначе // если РежимОплаты = Автораспределение или АвтораспределениеПриоритетныйДоговор
			Если (РежимОплаты = Перечисление.РежимыОплаты.АвтораспределениеПриоритетныйДоговор) Тогда
				глКомментарий("   Погашаются авансовые отгрузки по приоритетному договору "+глДокДляКомментария(Договор)+".",3);
				// Погашаем приоритетный договор
				НС = 0;
				тбДолги.НайтиЗначение(Контрагент,НС,"Контрагент");
				Для НомСтр = Макс(1,НС) по ?(НС=0,0,тбДолги.КоличествоСтрок()) Цикл
					тбДолги.ПолучитьСтрокуПоНомеру(НомСтр);
					Если тбДолги.Контрагент <> Контрагент Тогда
						Прервать;
					КонецЕсли;
					Если глПроверитьДолг(тбДолги,Контрагент,Договор,СтавкаНДСПогашения,,ВалютаПогашения)=0 Тогда
						Продолжить;
					КонецЕсли;
					СальдоПоОтгрузке=?(ЗнакОплаты<0,Макс(0, тбДолги.Долг), -Мин(0, тбДолги.Долг));
					Если СальдоПоОтгрузке <> 0 Тогда
						СуммаСНДС	 = Мин(СуммаПогашения, СальдоПоОтгрузке);
						Если СуммаВГрн = 0 Тогда
							СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
							СуммаГрн = СуммаСНДСОсн;
						Иначе
							СуммаСНДСОсн = Окр(СуммаГрн * СуммаСНДС / СуммаПогашения,2);
							//СальдоПоОплатеОсн =?(ЗнакОплаты<0,Макс(0, тбДолги.ДолгОсн), -Мин(0, тбДолги.ДолгОсн));
							//СуммаСНДСОсн = Мин(СуммаГрн, СальдоПоОплатеОсн);
						КонецЕсли;

						СуммаНДС	 = Окр(СуммаНДСПогашения * СуммаСНДС / СуммаПогашения,2);
						
						тбДолги.Долг	= тбДолги.Долг	  + ЗнакОплаты * СуммаСНДС;
						тбДолги.ДолгОсн = тбДолги.ДолгОсн + ЗнакОплаты * СуммаСНДСОсн;
						
						СуммаПогашения	  = СуммаПогашения - СуммаСНДС;
						СуммаНДСПогашения = СуммаНДСПогашения - СуммаНДС;
						СуммаГрн		  = СуммаГрн - СуммаСНДСОсн;
						
						КодОперации = ПостОплата;
						глПогаситьДокументВзаиморасчетов(Конт,ЗнакОплаты, ФлагОтгрузки, ФлагВозврата,
							тбДолги.Фирма, тбДолги.Контрагент, тбДолги.Договор, тбДолги.СтавкаНДС, тбДолги.Счет, 
							тбДолги.КредДокумент,тбДолги.Валюта, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, КодОперации,,НеВключаетсяВВДВР,,Курс_НУ);
						глПереоценкаДолга(Конт,ЗнакОплаты,тбДолги,0);
					КонецЕсли;
					Если СуммаПогашения = 0 Тогда
						прервать;
					КонецЕсли;					
				КонецЦикла; // по тбДолги
			КонецЕсли;
			Если СуммаПогашения > 0 Тогда
				глКомментарий("   Погашаются авансовые отгрузки по всем договорам",3);
				НС = 0;
				тбДолги.НайтиЗначение(Контрагент,НС,"Контрагент");
				Для НомСтр = Макс(1,НС) по ?(НС=0,0,тбДолги.КоличествоСтрок()) Цикл
					тбДолги.ПолучитьСтрокуПоНомеру(НомСтр);
					Если тбДолги.Контрагент <> Контрагент Тогда
						Прервать;
					КонецЕсли;   
					Если глПроверитьДолг(тбДолги,Контрагент,,СтавкаНДСПогашения,,ВалютаПогашения)=0 Тогда
						Продолжить;
					КонецЕсли;
					СальдоПоОтгрузке=?(ЗнакОплаты<0, Макс(0, тбДолги.Долг), -Мин(0, тбДолги.Долг));
					Если СальдоПоОтгрузке <> 0 Тогда
						СуммаСНДС	 = Мин(СуммаПогашения, СальдоПоОтгрузке);
						Если СуммаВГрн = 0 Тогда
							СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
							СуммаГрн = СуммаСНДСОсн;
						Иначе
							СуммаСНДСОсн = Окр(СуммаГрн * СуммаСНДС / СуммаПогашения,2);
							//СальдоПоОплатеОсн =?(ЗнакОплаты<0, Макс(0, тбДолги.ДолгОсн), -Мин(0, тбДолги.ДолгОсн));
							//СуммаСНДСОсн = Мин(СуммаГрн, СальдоПоОплатеОсн);
						КонецЕсли;					

						СуммаНДС	 = Окр(СуммаНДСПогашения * СуммаСНДС / СуммаПогашения,2);
						
						тбДолги.Долг	= тбДолги.Долг	  + ЗнакОплаты * СуммаСНДС;
						тбДолги.ДолгОсн = тбДолги.ДолгОсн + ЗнакОплаты * СуммаСНДСОсн;
						
						СуммаПогашения	  = СуммаПогашения - СуммаСНДС;
						СуммаНДСПогашения = СуммаНДСПогашения - СуммаНДС;
						СуммаГрн		  = СуммаГрн - СуммаСНДСОсн;
						
						КодОперации = ПостОплата;
						глПогаситьДокументВзаиморасчетов(Конт,ЗнакОплаты, ФлагОтгрузки, ФлагВозврата, 
							тбДолги.Фирма, тбДолги.Контрагент, тбДолги.Договор, тбДолги.СтавкаНДС, тбДолги.Счет,
							тбДолги.КредДокумент, тбДолги.Валюта, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, КодОперации,,НеВключаетсяВВДВР,,Курс_НУ);
						глПереоценкаДолга(Конт,ЗнакОплаты,тбДолги,0);
					КонецЕсли;
					Если СуммаПогашения = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла; // по тбДолги
			КонецЕсли;
			Если СуммаПогашения > 0 Тогда
				глКомментарий("   Производится авансовая оплата по договору "+глДокДляКомментария(Договор)+", по счету "+глДокДляКомментария(ДокументОснование)+".",3);
				КодОперации	 = АвансоваяОплата;
				СуммаСНДС	 = СуммаПогашения;
				СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
				СуммаНДС	 = СуммаНДСПогашения;
				глПогаситьДокументВзаиморасчетов(Конт,ЗнакОплаты, ФлагОтгрузки, ФлагВозврата, 
					ПромФирма, Контрагент, Договор, СтавкаНДСПогашения, ДокументОснование, Конт.ТекущийДокумент(), ВалютаПогашения, СуммаСНДС,СуммаСНДСОсн, СуммаНДС, КодОперации,,НеВключаетсяВВДВР,,Курс_НУ);

				Если НайтиДолг(тбДолги,Контрагент,Договор,СтавкаНДСПогашения,ДокументОснование,ВалютаПогашения) = 0 Тогда
					// если в банковской выписке есть несколько строк по одному кред. документу, то
					// после каждого проведения по авнасам необходимо изменять таблицу долгов
					тбДолги.НоваяСтрока();
					тбДолги.Фирма		 = ПромФирма;
					тбДолги.Контрагент	 = Контрагент;
					тбДолги.Договор		 = Договор;
					тбДолги.Счет		 = ДокументОснование;
					тбДолги.СтавкаНДС	 = СтавкаНДСПогашения;
					тбДолги.КредДокумент = Конт.ТекущийДокумент();
					тбДолги.Валюта		 = ВалютаПогашения;
				КонецЕсли;	
				тбДолги.Долг	= тбДолги.Долг	  + ЗнакОплаты*СуммаСНДС;
				тбДолги.ДолгОсн	= тбДолги.ДолгОсн + ЗнакОплаты*СуммаСНДСОсн;
					
				СуммаПогашения = 0;
				СуммаНДСПогашения = 0;
			КонецЕсли;
		КонецЕсли; // по режимам оплаты
	КонецЕсли; // Возврат или оплата 
КонецПроцедуры // глПогашениеДолга()
                                  
// ===============================
// Устанавливает фильтры и при не обходимости рассчитывает ВремРегистры для получения тбДолги
Процедура глРассчитатьИтогиВзаиморасчетов(Конт, ВремРегистры, спФирмы, ЗнакОплаты, Контрагент, Договор, Валюта=0, ТолькоФильтр = 0, УчитыватьДоговор = 1) Экспорт
	Если ЗнакОплаты = +1 Тогда
		Рег = ВремРегистры.ВзаиморасчетыПоставщиков;
	ИначеЕсли ЗнакОплаты = -1 Тогда
		Рег = ВремРегистры.ВзаиморасчетыПокупателей;
	КонецЕсли;
    Рег.УстановитьЗначениеФильтра("Фирма",спФирмы,2);
	Рег.УстановитьЗначениеФильтра("Контрагент",Контрагент,2);
	Если УчитыватьДоговор = 1 Тогда
		Рег.УстановитьЗначениеФильтра("Договор",Договор,2);
		Рег.УстановитьЗначениеФильтра("Валюта",Валюта,2);
	КонецЕсли;	
	Если Конт.ИтогиАктуальны()=0 Тогда
	    Рег.ВременныйРасчет(1);
		Если ТолькоФильтр = 0 Тогда
		    ВремРегистры.РассчитатьРегистрыНа(Конт.ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// ===============================
// Возвращает таблицу тбДолги для выбранной Фирмы, Списка контрагентов и договоров
// Предварительно должна быть вызвана Процедура глРассчитатьИтогиВзаиморасчетов для временного расчета ВремРегистры
Функция глПолучитьИтогиВзаиморасчетов(Конт, ВремРегистры, Фирма, ЗнакОплаты, Контрагент, Договор, Валюта=0) Экспорт
	Если ЗнакОплаты = +1 Тогда
		Рег = ВремРегистры.ВзаиморасчетыПоставщиков;
	Иначе
		Рег = ВремРегистры.ВзаиморасчетыПокупателей;
	КонецЕсли;
	тбДолги = 0;
	Рег.УстановитьЗначениеФильтра("Фирма",Фирма,1);
	Рег.УстановитьЗначениеФильтра("Контрагент",Контрагент,2);
	Рег.УстановитьЗначениеФильтра("Договор",Договор,2);
	Рег.УстановитьЗначениеФильтра("Валюта",Валюта,2);
	Рег.ВыгрузитьИтоги(тбДолги,1,1);
	Возврат тбДолги;
КонецФункции
	
// ===============================
// Выполняет движения по регистрам взаиморасчетов, используется в товарных накладных
// Параметры:
//	Конт			- контекст модуля проведения
// 	ФлагОтгрузки	- 1 если это отгрузка, 0 если это оплата
//	ЗнакОплаты		- +1 если это взаиморасчеты с поставщиком, -1 - с покупателем
//	ФлагВозврата	- 0 прямая операция, 1 возврат
// 	Фирма			- фирма, для которой проводим проведение по взаиморасчетам, если пустая, то упр. учет
// 	тбДолги			- таблица, содеражщая долги которые будут погашаться
// 	тбСуммыПогашения- таблица, содеражщая суммы которые проводятся по взаиморасчетам
//	ВалютаПогашения - валюта, в которой погашается долг
// 	КурсВалютыПогашения, ДатаКурсаВалютыПогашения - параметры валюты
//  Контрагент		- контрагент, взаиморасчеты с которым проводятся
//	Договор			- договор, по которому производится проведение
//	ВидТорговли		- вид торговли, по которому производится проведение
// 	ДокументОснование - документ основание
// 	ПриоритетныйКодОперации	- если указан, то он проставляется в регистр не зависимо от первого/второго события
Процедура глПровестиПоВзаиморасчетам(Конт, ФлагОтгрузки, ЗнакОплаты,ФлагВозврата, Фирма, 
	тбДолги, тбСуммыПогашения, ВалютаПогашения, Контрагент, Договор, ВидТорговли, 
	ДокументОснование, ПриоритетныйКодОперации = "") Экспорт
	       
	глКомментарий("=== Проведение по взаиморасчетам с контрагентом "+Контрагент+".",3);
	ЗнакОтгрузки = ?(ФлагОтгрузки=1, +1, -1);
	Если (ФлагВозврата = 1) и (ВидТорговли <> Перечисление.ВидыТорговли.Нал) Тогда
		Если ВидТорговли = Перечисление.ВидыТорговли.Бартер тогда
			ЗнакОплаты = -ЗнакОплаты;
			ЗнакОтгрузки = -ЗнакОтгрузки;
		КонецЕсли;	
		тбДолги.Сортировать("Контрагент*,КредДокумент-");
		Если ПустоеЗначение(ДокументОснование)=0 Тогда
			// возврат по указанному Счету (ДокументОснование)
			глКомментарий("   Производится погашение долгов (возврат) в порядке LIFO по договору "+глДокДляКомментария(Договор)+", по счету "+глДокДляКомментария(ДокументОснование)+".",3);
			НС = 0;
			тбДолги.НайтиЗначение(Контрагент,НС,"Контрагент");
			Для НомСтр = Макс(1,НС) по ?(НС=0,0,тбДолги.КоличествоСтрок()) Цикл
				тбДолги.ПолучитьСтрокуПоНомеру(НомСтр);
				Если тбДолги.Контрагент <> Контрагент Тогда
					Прервать;
				КонецЕсли;
				Счет = глПолучитьДокументВзаиморасчетов(Конт.ТекущийДокумент());
				Если глПроверитьДолг(тбДолги,Контрагент,Договор,,Счет,ВалютаПогашения) = 0 Тогда
					// обрабатываем только те долги, в которых есть нужные Контрагент, Договор, Счет, Валюта
					Продолжить;
				КонецЕсли;
				фЕстьЧтоПогашать = 0; // устанавливается в 1, если в тбСуммыПогашения есть хоть одна строка с ненулевой суммой
				тбСуммыПогашения.ВыбратьСтроки();
				Пока тбСуммыПогашения.ПолучитьСтроку()=1 Цикл
					СуммаПогашения = тбСуммыПогашения.СуммаСНДС;
					Если СуммаПогашения = 0 Тогда
						Продолжить;
					КонецЕсли;
					СальдоПоОтгрузке = ?(ЗнакОтгрузки * ЗнакОплаты<0, Макс(0, тбДолги.Долг), -Мин(0, тбДолги.Долг));
					Если СальдоПоОтгрузке = 0 Тогда
						Продолжить;
					КонецЕсли;
					фЕстьЧтоПогашать   = 1;
					СуммаНДСПогашения  = тбСуммыПогашения.СуммаНДС;
					СтавкаНДСПогашения = тбСуммыПогашения.СтавкаНДС;
					Попытка
						НеВключаетсяВВДВР = тбСуммыПогашения.НеВключаетсяВВДВР;
					Исключение
						НеВключаетсяВВДВР = 0;
					КонецПопытки;
					Если тбДолги.СтавкаНДС <> СтавкаНДСПогашения Тогда
						Продолжить;
					КонецЕсли;
					СуммаСНДС	 	= Мин(СуммаПогашения, СальдоПоОтгрузке);
					СуммаСНДСОсн 	= глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
					СуммаНДС	 	= Окр(СуммаНДСПогашения * СуммаСНДС/СуммаПогашения,2);
					тбДолги.Долг 	= тбДолги.Долг + ЗнакОтгрузки * ЗнакОплаты * СуммаСНДС;
					тбДолги.ДолгОсн	= тбДолги.ДолгОсн + ЗнакОтгрузки * ЗнакОплаты * СуммаСНДСОсн;
					тбСуммыПогашения.СуммаСНДС = тбСуммыПогашения.СуммаСНДС - СуммаСНДС;
					тбСуммыПогашения.СуммаНДС  = тбСуммыПогашения.СуммаНДС - СуммаНДС;
					// Делаем запись в регистр взаиморасчетов - сторно первого события
					Если ФлагОтгрузки = 1 тогда
						Если ВидТорговли = Перечисление.ВидыТорговли.Бартер тогда
							Если ЗнакОплаты > 0 Тогда
								КодОперации = ВозвратВтороеСобытиеБартерПриход;
							Иначе        
								КодОперации = ВозвратВтороеСобытиеБартерРасход;
							КонецЕсли	
						Иначе
							КодОперации = ВозвратПостОтгрузки;
						КонецЕсли;
					Иначе                               
						Если ВидТорговли = Перечисление.ВидыТорговли.Бартер тогда
							Если ЗнакОплаты > 0 Тогда
								КодОперации = ВозвратВтороеСобытиеБартерРасход;
							Иначе        
								КодОперации = ВозвратВтороеСобытиеБартерПриход;
							КонецЕсли	
						Иначе
							КодОперации = ВозвратПостОплаты;
						КонецЕсли;	
					КонецЕсли;	
					глПогаситьДокументВзаиморасчетов(Конт, ?(ВидТорговли=Перечисление.ВидыТорговли.Бартер,-ЗнакОплаты,ЗнакОплаты), ФлагОтгрузки, ФлагВозврата, тбДолги.Фирма, тбДолги.Контрагент,
						тбДолги.Договор, СтавкаНДСПогашения, тбДолги.Счет, тбДолги.КредДокумент, ВалютаПогашения, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, 
						КодОперации, 1, НеВключаетсяВВДВР,ПриоритетныйКодОперации);
					глПереоценкаДолга(Конт,ЗнакОплаты,тбДолги,0);
				КонецЦикла;
				Если фЕстьЧтоПогашать = 0 Тогда
					// если нечего погашат, то не будем перебирать долги дальше
					Прервать;
				КонецЕсли;					
			КонецЦикла;
		КонецЕсли;
		
		Если ВидТорговли = Перечисление.ВидыТорговли.Бартер Тогда
			// Для бартера удобнее погашать автоматом счета по договору
			глКомментарий("   Производится погашение авансовых оплат (возврат) по договору "+глДокДляКомментария(Договор)+".",3);
			тбСуммыПогашения.ВыбратьСтроки();
			Пока тбСуммыПогашения.ПолучитьСтроку()=1 Цикл
				СуммаПогашения = тбСуммыПогашения.СуммаСНДС;
				Если СуммаПогашения = 0 Тогда
					Продолжить;
				КонецЕсли;
				СуммаНДСПогашения = тбСуммыПогашения.СуммаНДС;
				СтавкаНДСПогашения = тбСуммыПогашения.СтавкаНДС;
				Попытка
					НеВключаетсяВВДВР = тбСуммыПогашения.НеВключаетсяВВДВР;
				Исключение
					НеВключаетсяВВДВР = 0;
				КонецПопытки;
				НС = 0;
				тбДолги.НайтиЗначение(Контрагент,НС,"Контрагент");
				Для НомСтр = Макс(1,НС) по ?(НС=0,0,тбДолги.КоличествоСтрок()) Цикл
					тбДолги.ПолучитьСтрокуПоНомеру(НомСтр);
					Если тбДолги.Контрагент<>Контрагент Тогда
						Прервать;
					КонецЕсли;
					Если глПроверитьДолг(тбДолги,Контрагент,Договор,СтавкаНДСПогашения,,ВалютаПогашения)=0 Тогда
						Продолжить;
					КонецЕсли;
					СальдоПоОтгрузке	= ?(ЗнакОтгрузки * ЗнакОплаты<0, Макс(0, тбДолги.Долг), -Мин(0, тбДолги.Долг));
					СальдоПоОтгрузкеОсн = ?(ЗнакОтгрузки * ЗнакОплаты<0, Макс(0, тбДолги.ДолгОсн), -Мин(0, тбДолги.ДолгОсн));
					
					Если СальдоПоОтгрузке = 0 Тогда
						Продолжить;
					КонецЕсли;
					СуммаСНДС	 	= Мин(СуммаПогашения, СальдоПоОтгрузке);
					СуммаСНДСОсн 	= глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
					СуммаНДС	 	= Окр(СуммаНДСПогашения * СуммаСНДС/СуммаПогашения,2);
					тбДолги.Долг 	= тбДолги.Долг + ЗнакОтгрузки * ЗнакОплаты * СуммаСНДС;
					тбДолги.ДолгОсн	= тбДолги.ДолгОсн + ЗнакОтгрузки * ЗнакОплаты * СуммаСНДСОсн;
					тбСуммыПогашения.СуммаСНДС = тбСуммыПогашения.СуммаСНДС - СуммаСНДС;
					тбСуммыПогашения.СуммаНДС  = тбСуммыПогашения.СуммаНДС - СуммаНДС;
					
					// второе событие - без НДС
					Если ФлагОтгрузки = 1 тогда
						Если ВидТорговли = Перечисление.ВидыТорговли.Бартер тогда
							Если ЗнакОплаты > 0 Тогда
								КодОперации = ВозвратВтороеСобытиеБартерПриход;
							Иначе        
								КодОперации = ВозвратВтороеСобытиеБартерРасход;
							КонецЕсли	
						Иначе
							КодОперации = ВозвратПостОтгрузки;
						КонецЕсли;
					Иначе                               
						Если ВидТорговли = Перечисление.ВидыТорговли.Бартер тогда
							Если ЗнакОплаты > 0 Тогда
								КодОперации = ВозвратВтороеСобытиеБартерРасход;
							Иначе        
								КодОперации = ВозвратВтороеСобытиеБартерПриход;
							КонецЕсли	
						Иначе
							КодОперации = ВозвратПостОплаты;
						КонецЕсли;	
					КонецЕсли;	
					глПогаситьДокументВзаиморасчетов(Конт, ?(ВидТорговли=Перечисление.ВидыТорговли.Бартер,-ЗнакОплаты,ЗнакОплаты), ФлагОтгрузки, ФлагВозврата, тбДолги.Фирма, тбДолги.Контрагент, тбДолги.Договор,
					СтавкаНДСПогашения, тбДолги.Счет ,тбДолги.КредДокумент, ВалютаПогашения, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, 
					КодОперации,, НеВключаетсяВВДВР, ПриоритетныйКодОперации);
					Если СуммаПогашения = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если ВидТорговли = Перечисление.ВидыТорговли.Бартер тогда
			ЗнакОплаты = -ЗнакОплаты;
			ЗнакОтгрузки = -ЗнакОтгрузки;
		КонецЕсли;
		
		Если тбСуммыПогашения.Итог("СуммаСНДС")<>0 Тогда
			// если в тбСуммыПогашения есть ненулевые суммы
			Счет = глПолучитьДокументВзаиморасчетов(Конт.ТекущийДокумент());
			глКомментарий("   Не распределенный долг проводится как возврат оплаченой отгрузки по договору "+глДокДляКомментария(Договор)+", по счету "+глДокДляКомментария(Счет)+".",3);
			тбСуммыПогашения.ВыбратьСтроки();
			Пока тбСуммыПогашения.ПолучитьСтроку()=1 Цикл
				Если тбСуммыПогашения.СуммаСНДС <> 0 Тогда
					СуммаПогашения = тбСуммыПогашения.СуммаСНДС;
					Если СуммаПогашения = 0 Тогда
						Продолжить;
					КонецЕсли;
					// Не распределенный долг считаем возвратом оплаченой отгрузки
					СуммаНДСПогашения	 = тбСуммыПогашения.СуммаНДС;
					СтавкаНДСПогашения	 = тбСуммыПогашения.СтавкаНДС;
					Если ФлагОтгрузки = 1 Тогда
						Если ВидТорговли = Перечисление.ВидыТорговли.Бартер тогда
							Если ЗнакОплаты > 0 Тогда
								КодОперации = ВозвратПервоеСобытиеБартерРасход;
							Иначе        
								КодОперации = ВозвратПервоеСобытиеБартерПриход;
							КонецЕсли;
						Иначе
							КодОперации	= ВозвратАвансовойОтгрузки;
						КонецЕсли;
					Иначе
						Если ВидТорговли = Перечисление.ВидыТорговли.Бартер тогда
							Если ЗнакОплаты > 0 Тогда
								КодОперации = ВозвратПервоеСобытиеБартерПриход;
							Иначе        
								КодОперации = ВозвратПервоеСобытиеБартерРасход;
							КонецЕсли;
						Иначе
							КодОперации = ВозвратАвансовойОплаты;
						КонецЕсли;	
					КонецЕсли;	
					СуммаСНДС	 = СуммаПогашения;
					СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
					СуммаНДС	 = СуммаНДСПогашения;
					Попытка
						НеВключаетсяВВДВР = тбСуммыПогашения.НеВключаетсяВВДВР;
					Исключение
						НеВключаетсяВВДВР = 0;
					КонецПопытки;
					глПогаситьДокументВзаиморасчетов(Конт, ?(ВидТорговли=Перечисление.ВидыТорговли.Бартер,-ЗнакОплаты,ЗнакОплаты), ФлагОтгрузки, ФлагВозврата, Фирма, Контрагент,
						Договор, СтавкаНДСПогашения, Счет, Конт.ТекущийДокумент(), ВалютаПогашения, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, 
						КодОперации,, НеВключаетсяВВДВР, ПриоритетныйКодОперации);
					тбДолги.НоваяСтрока();
					тбДолги.Фирма		 = Фирма;
					тбДолги.Контрагент	 = Контрагент;
					тбДолги.Договор		 = Договор;
					тбДолги.СтавкаНДС	 = СтавкаНДСПогашения;
					тбДолги.Счет		 = Счет;
					тбДолги.КредДокумент = Конт.ТекущийДокумент();
					тбДолги.Валюта		 = ВалютаПогашения;
					тбДолги.Долг		 = - ЗнакОтгрузки * ЗнакОплаты*СуммаСНДС;
					тбДолги.ДолгОсн		 = - ЗнакОтгрузки * ЗнакОплаты*СуммаСНДСОсн;
					тбСуммыПогашения.СуммаСНДС = 0;
					тбСуммыПогашения.СуммаНДС  = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе //Если (ФлагВозврата = 0) или ((ФлагВозврата = 1) и (ВидТорговли = Перечисление.ВидыТорговли.Нал)) Тогда
		тбДолги.Сортировать("Контрагент*,КредДокумент+");
		// определим документ-счет
		Если Конт.Вид() = "ПриходнаяНакладнаяГТД" Тогда
			// для ГТД счетов может быть несколько: по поставщику, по перевозке и по таможне
			Если ((Контрагент = Конт.Контрагент)
			ИЛИ (ПустоеЗначение(Контрагент)=1)) Тогда // поставщик
				// определим стандартным образом
				
				Счет = Конт.ТекущийДокумент(); //--- УМК Сандомирский В.Ю. (16,09,14) ГТД само по себе изза распределения дельты (было : Счет = глПолучитьДокументВзаиморасчетов(Конт.ТекущийДокумент());
					
			Иначе // переозчик или таможня
				Если ПустоеЗначение(ДокументОснование) = 1 Тогда
					// счет не указан, возьмем текущий документ
					Счет = Конт.ТекущийДокумент();
				Иначе                     
					// а если указан, тогда определим стандартным образом
					Счет = глПолучитьДокументВзаиморасчетов(ДокументОснование);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Конт.Вид() = "РасходыНаПриобретение" Тогда
			// в расходах на приобретение документ-основание указан в табличной части
			// для определения счета используем его, если он указан
			Счет = глПолучитьДокументВзаиморасчетов(?(ПустоеЗначение(ДокументОснование)=1,Конт.ТекущийДокумент(),ДокументОснование));
		Иначе
			Счет = глПолучитьДокументВзаиморасчетов(Конт.ТекущийДокумент());
		КонецЕсли;		
		Если ВидТорговли <> Перечисление.ВидыТорговли.Нал Тогда
			Если ВидТорговли = Перечисление.ВидыТорговли.Бартер тогда
				ЗнакОплаты = -ЗнакОплаты;
				ЗнакОтгрузки = -ЗнакОтгрузки;
			КонецЕсли;
			Для Инд = 1 по 2 Цикл
				Если Инд = 1 Тогда
					// при первом прохождении цикла погашаем долги по ДокументуОснованию
					СчетПогашения = ДокументОснование;
				Иначе
					// при втором - погашем долги по счету, если Счет не совпадает с ДокументОснование
					Если Счет = ДокументОснование Тогда
						Прервать;
					Иначе
						СчетПогашения = Счет;
					КонецЕсли;
				КонецЕсли;
				глКомментарий("   Производится погашение авансовых оплат по договору "+глДокДляКомментария(Договор)+", по счету "+глДокДляКомментария(СчетПогашения)+".",3);
				тбСуммыПогашения.ВыбратьСтроки();
				Пока тбСуммыПогашения.ПолучитьСтроку()=1 Цикл
					СуммаПогашения = тбСуммыПогашения.СуммаСНДС;
					Если СуммаПогашения = 0 Тогда
						Продолжить;
					КонецЕсли;
					СуммаНДСПогашения = тбСуммыПогашения.СуммаНДС;
					СтавкаНДСПогашения = тбСуммыПогашения.СтавкаНДС;
					Попытка
						НеВключаетсяВВДВР = тбСуммыПогашения.НеВключаетсяВВДВР;
					Исключение
						НеВключаетсяВВДВР = 0;
					КонецПопытки;
					НС = 0;
					тбДолги.НайтиЗначение(Контрагент,НС,"Контрагент");
					Для НомСтр = Макс(1,НС) по ?(НС=0,0,тбДолги.КоличествоСтрок()) Цикл
						тбДолги.ПолучитьСтрокуПоНомеру(НомСтр);
						Если тбДолги.Контрагент<>Контрагент Тогда
							Прервать;
						КонецЕсли;
						Если глПроверитьДолг(тбДолги,Контрагент,Договор,СтавкаНДСПогашения,СчетПогашения,ВалютаПогашения)=0 Тогда
							Продолжить;
						КонецЕсли;
						СальдоПоОплате = ?(ЗнакОтгрузки * ЗнакОплаты>0, Макс(0, тбДолги.Долг), -Мин(0, тбДолги.Долг));
						СальдоПоОплатеОсн = ?(ЗнакОтгрузки * ЗнакОплаты>0, Макс(0, тбДолги.ДолгОсн), -Мин(0, тбДолги.ДолгОсн));
						Если СальдоПоОплате = 0 Тогда
							Продолжить;
						КонецЕсли;
						СуммаСНДС = Мин(СуммаПогашения, СальдоПоОплате);
						СуммаНДС = Окр(СуммаНДСПогашения * СуммаСНДС / СуммаПогашения,2);
						Если (ВидТорговли <> Перечисление.ВидыТорговли.Бартер) Тогда
							СуммаПогашенияОсн = СуммаПогашения * СальдоПоОплатеОсн / СальдоПоОплате;
							СуммаСНДСОсн = Мин(СуммаПогашенияОсн, СальдоПоОплатеОсн);
						Иначе
							СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
						КонецЕсли;
						тбДолги.Долг = тбДолги.Долг - ЗнакОтгрузки * ЗнакОплаты*СуммаСНДС;
						тбДолги.ДолгОсн = тбДолги.ДолгОсн - ЗнакОтгрузки * ЗнакОплаты*СуммаСНДСОсн;
						СуммаПогашения = СуммаПогашения - СуммаСНДС;
						СуммаНДСПогашения = СуммаНДСПогашения - СуммаНДС;
						// второе событие - без НДС
						Если ФлагОтгрузки = 1 Тогда     
							Если ВидТорговли = Перечисление.ВидыТорговли.Бартер Тогда
								Если ЗнакОплаты > 0 Тогда
									КодОперации = ВтороеСобытиеБартерРасход;
								Иначе        
									КодОперации = ВтороеСобытиеБартерПриход;
								КонецЕсли	
							Иначе          
								КодОперации = ПостОтгрузка;
							КонецЕсли;	
						Иначе	
							Если ВидТорговли = Перечисление.ВидыТорговли.Бартер Тогда
								Если ЗнакОплаты > 0 Тогда
									КодОперации = ВтороеСобытиеБартерПриход;
								Иначе        
									КодОперации = ВтороеСобытиеБартерРасход;
								КонецЕсли	
							Иначе          
								КодОперации = ПостОплата;
							КонецЕсли;	
						КонецЕсли;
						глПогаситьДокументВзаиморасчетов(Конт, ЗнакОплаты, ФлагОтгрузки, ФлагВозврата, тбДолги.Фирма, тбДолги.Контрагент, тбДолги.Договор,
							СтавкаНДСПогашения, тбДолги.Счет ,тбДолги.КредДокумент, ВалютаПогашения, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, 
							КодОперации,, НеВключаетсяВВДВР, ПриоритетныйКодОперации);
						Если СуммаПогашения = 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					тбСуммыПогашения.СуммаСНДС = СуммаПогашения;
					тбСуммыПогашения.СуммаНДС = СуммаНДСПогашения;
				КонецЦикла;
			КонецЦикла;
			
			Если ВидТорговли = Перечисление.ВидыТорговли.Бартер Тогда
				// Для бартера удобнее погашать автоматом счета по договору
				глКомментарий("   Производится погашение авансовых оплат по договору "+глДокДляКомментария(Договор)+".",3);
				тбСуммыПогашения.ВыбратьСтроки();
				Пока тбСуммыПогашения.ПолучитьСтроку()=1 Цикл
					СуммаПогашения = тбСуммыПогашения.СуммаСНДС;
					Если СуммаПогашения = 0 Тогда
						Продолжить;
					КонецЕсли;
					СуммаНДСПогашения = тбСуммыПогашения.СуммаНДС;
					СтавкаНДСПогашения = тбСуммыПогашения.СтавкаНДС;
					Попытка
						НеВключаетсяВВДВР = тбСуммыПогашения.НеВключаетсяВВДВР;
					Исключение
						НеВключаетсяВВДВР = 0;
					КонецПопытки;
					НС = 0;
					тбДолги.НайтиЗначение(Контрагент,НС,"Контрагент");
					Для НомСтр = Макс(1,НС) по ?(НС=0,0,тбДолги.КоличествоСтрок()) Цикл
						тбДолги.ПолучитьСтрокуПоНомеру(НомСтр);
						Если тбДолги.Контрагент<>Контрагент Тогда
							Прервать;
						КонецЕсли;
						Если глПроверитьДолг(тбДолги,Контрагент,Договор,СтавкаНДСПогашения,,ВалютаПогашения)=0 Тогда
							Продолжить;
						КонецЕсли;
						СальдоПоОплате = ?(ЗнакОтгрузки * ЗнакОплаты>0, Макс(0, тбДолги.Долг), -Мин(0, тбДолги.Долг));
						СальдоПоОплатеОсн = ?(ЗнакОтгрузки * ЗнакОплаты>0, Макс(0, тбДолги.ДолгОсн), -Мин(0, тбДолги.ДолгОсн));
						
						Если СальдоПоОплате = 0 Тогда
							Продолжить;
						КонецЕсли;
						СуммаСНДС = Мин(СуммаПогашения, СальдоПоОплате);
						СуммаНДС = Окр(СуммаНДСПогашения * СуммаСНДС / СуммаПогашения,2);
						СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
						
						тбДолги.Долг = тбДолги.Долг - ЗнакОтгрузки * ЗнакОплаты*СуммаСНДС;
						тбДолги.ДолгОсн = тбДолги.ДолгОсн - ЗнакОтгрузки * ЗнакОплаты*СуммаСНДСОсн;
						
						СуммаПогашения = СуммаПогашения - СуммаСНДС;
						СуммаНДСПогашения = СуммаНДСПогашения - СуммаНДС;
						
						// второе событие - без НДС
						Если ФлагОтгрузки = 1 Тогда
							Если ЗнакОплаты > 0 Тогда
								КодОперации = ВтороеСобытиеБартерРасход;
							Иначе
								КодОперации = ВтороеСобытиеБартерПриход;
							КонецЕсли
						Иначе
							Если ЗнакОплаты > 0 Тогда
								КодОперации = ВтороеСобытиеБартерПриход;
							Иначе
								КодОперации = ВтороеСобытиеБартерРасход;
							КонецЕсли
						КонецЕсли;
						
						глПогаситьДокументВзаиморасчетов(Конт, ЗнакОплаты, ФлагОтгрузки, ФлагВозврата, тбДолги.Фирма, тбДолги.Контрагент, тбДолги.Договор,
						СтавкаНДСПогашения, тбДолги.Счет ,тбДолги.КредДокумент, ВалютаПогашения, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, 
						КодОперации,, НеВключаетсяВВДВР, ПриоритетныйКодОперации);
						Если СуммаПогашения = 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					тбСуммыПогашения.СуммаСНДС = СуммаПогашения;
					тбСуммыПогашения.СуммаНДС = СуммаНДСПогашения;
				КонецЦикла;
			КонецЕсли;
			Если ВидТорговли = Перечисление.ВидыТорговли.Бартер тогда
				ЗнакОплаты = -ЗнакОплаты;
				ЗнакОтгрузки = -ЗнакОтгрузки;
			КонецЕсли;
		КонецЕсли;
		Если тбСуммыПогашения.Итог("СуммаСНДС") <> 0 Тогда
			глКомментарий("   Производятся движения по авансовой отгрузке по договору "+глДокДляКомментария(Договор)+", по счету "+глДокДляКомментария(Счет)+".",3);
			// все, что не распределилось - АВАНС
			тбСуммыПогашения.ВыбратьСтроки();
			Пока тбСуммыПогашения.ПолучитьСтроку()=1 Цикл
				СуммаПогашения = тбСуммыПогашения.СуммаСНДС;
				Если СуммаПогашения = 0 Тогда
					Продолжить;
				КонецЕсли;
				СуммаНДСПогашения = тбСуммыПогашения.СуммаНДС;
				СтавкаНДСПогашения = тбСуммыПогашения.СтавкаНДС;
				Если ФлагОтгрузки = 1 Тогда
					Если ВидТорговли = Перечисление.ВидыТорговли.Бартер Тогда
						Если ЗнакОплаты > 0 Тогда
							КодОперации = ПервоеСобытиеБартерПриход;
						Иначе        
							КодОперации = ПервоеСобытиеБартерРасход;
						КонецЕсли	
					Иначе          
						КодОперации = АвансоваяОтгрузка;
					КонецЕсли;	
				Иначе
					КодОперации = АвансоваяОплата;
				КонецЕсли;
				СуммаСНДС = СуммаПогашения;
				СуммаСНДСОсн = глСуммаОсн(СуммаСНДС,Конт,ВалютаПогашения);
				СуммаНДС = СуммаНДСПогашения;
				Попытка
					НеВключаетсяВВДВР = тбСуммыПогашения.НеВключаетсяВВДВР;
				Исключение
					НеВключаетсяВВДВР = 0;
				КонецПопытки;
				глПогаситьДокументВзаиморасчетов(Конт, ЗнакОплаты, ФлагОтгрузки, ФлагВозврата, Фирма, Контрагент,
				Договор, СтавкаНДСПогашения, Счет, Конт.ТекущийДокумент(), ВалютаПогашения, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, КодОперации,, НеВключаетсяВВДВР, ПриоритетныйКодОперации);
				
				фАвансПогашен = 0;
				Если ВидТорговли = Перечисление.ВидыТорговли.Нал Тогда
					ЕстьЧек = глЕстьРеквизитШапки("ЧекПробит",Конт.ТекущийДокумент().Вид());
					Если Константа.ПроводкиПоКассеТолькоОрдерами = Нет тогда
						глКомментарий("   Производится погашение долга при продаже за наличные",3);
						ФлагОтгрузкиНал = 0;
						КодОперации = ПостОплата;
						
						глПогаситьДокументВзаиморасчетов(Конт, ЗнакОплаты, ФлагОтгрузкиНал, ФлагВозврата, Фирма, Контрагент,
						Договор, СтавкаНДСПогашения, Счет, Конт.ТекущийДокумент(), ВалютаПогашения, СуммаСНДС, СуммаСНДСОсн, СуммаНДС, КодОперации,, НеВключаетсяВВДВР, ПриоритетныйКодОперации);
						фАвансПогашен = 1;
					КонецЕсли;
				КонецЕсли;	
				Если фАвансПогашен = 0 Тогда
					тбДолги.НоваяСтрока();
					тбДолги.Фирма		 = Фирма;
					тбДолги.Контрагент	 = Контрагент;
					тбДолги.Договор		 = Договор;
					тбДолги.СтавкаНДС	 = СтавкаНДСПогашения;
					тбДолги.Счет		 = Счет;
					тбДолги.КредДокумент = Конт.ТекущийДокумент();
					тбДолги.Валюта		 = ВалютаПогашения;
					тбДолги.Долг		 = тбДолги.Долг	   - ЗнакОтгрузки * ЗнакОплаты*СуммаСНДС;
					тбДолги.ДолгОсн		 = тбДолги.ДолгОсн - ЗнакОтгрузки * ЗнакОплаты*СуммаСНДСОсн;
				КонецЕсли;
				тбСуммыПогашения.СуммаСНДС = 0;
				тбСуммыПогашения.СуммаНДС = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; // возврат или отгрузка
КонецПроцедуры // глПровестиПоВзаиморасчетам

// ===============================
Процедура глРассчитатьОстаткиИРезервы(Конт, Регистры, Отбор ,ФлагУчетаОстатков, ФлагУчетаРезервов, ТолькоФильтр = 0, МенятьТМЦ = 1, РасчетИтогов = 0) Экспорт //--- УМК Сандомирский В.Ю, (03.10.14) 7ой параметр : (0 - текущий товар ТЧ \ 1-Заменять товаром для списания \ 2-Заменять товаром для приходования)
	Если ТипЗначенияСтр(Отбор)="СписокЗначений" Тогда
		Фирма = Отбор.Получить("Фирма");
		спТовар = Отбор.Получить("Товар");
		спМестаХранения = Отбор.Получить("МестоХранения");
	Иначе
		Фирма = 0;
		спТовар = 0;
		спМестаХранения = 0;
	КонецЕсли;
	
	Если ТипЗначенияСтр(спТовар) <> "СписокЗначений" Тогда
		Если глЕстьРеквизитМнЧ("ТМЦ",Конт.Вид()) = Да Тогда
		    РеквТовар = "ТМЦ";
		ИначеЕсли глЕстьРеквизитМнЧ("Услуга",Конт.Вид()) = Да Тогда
		    РеквТовар = "Услуга"; // для оказания услуг
		Иначе
			глКомментарий("В процедуру глРассчитатьОстаткиИРезервы передан некорректный параметр Конт.",0);
			Возврат;
		КонецЕсли;
		спТовар = СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(спТовар,РеквТовар);
		
		
		Если (ПустоеЗначение(Константа.УМК_ДатаНачалаПартииОстатки) <> 1) //--- УМК Сандомирский В.Ю, (03.10.14)
				И (Константа.УМК_ДатаНачалаПартииОстатки <= Конт.ДатаДок)  Тогда 		
			//--- УМК Сандомирский В.Ю, (03.10.14) --- В расчете остатков ничего не меняем					
		Иначе					
			Если МенятьТМЦ = 1 Тогда
				Перемещение = ?(Конт.Вид() = "Перемещение",1,0); // + umk
				глЗаменитьТМЦ(спТовар, Конт.ДатаДок,,Перемещение);
			КонецЕсли;		
		КонецЕсли;			
	КонецЕсли;
	
	Если ПустоеЗначение(Фирма)=1 Тогда
		Фирма = Конт.Фирма;
	КонецЕсли;
 	
	Если ФлагУчетаОстатков=1 Тогда
		Рег=Регистры.Остатки;		
		Рег.УстановитьЗначениеФильтра("Фирма",Фирма,1);
		Рег.УстановитьЗначениеФильтра("ТМЦ",спТовар,2);
		Рег.УстановитьЗначениеФильтра("МестоХранения",спМестаХранения,2);		
		Если ((Конт.ИтогиАктуальны()=0) И (глКонтрольОстатков = 1)) ИЛИ (РасчетИтогов = 1) Тогда
			Рег.ВременныйРасчет(1);
		КонецЕсли;
	КонецЕсли;
	
	//--- УМК Сандомирский В.Ю. (26.06.15) Проба не расчитывать резервы для оптимизации проведения РН
	//Если ФлагУчетаРезервов=1 Тогда
	//	РегРезерв=Регистры.Резервы;
	//	
	//	РегРезерв.УстановитьЗначениеФильтра("Фирма",Фирма,1);
	//	РегРезерв.УстановитьЗначениеФильтра("ТМЦ",спТовар,2);
	//	Если Конт.ИтогиАктуальны()=0 Тогда
	//		РегРезерв.ВременныйРасчет(1);
	//	КонецЕсли;     				
	//КонецЕсли;
	//... УМК Сандомирский В.Ю. (26.06.15)
	
	Если (ТолькоФильтр=0) ИЛИ (РасчетИтогов = 1) Тогда
		Если (Конт.ИтогиАктуальны() = 0) Тогда
			Регистры.РассчитатьРегистрыНа(Конт.ТекущийДокумент());
		КонецЕсли;     				
	КонецЕсли;
КонецПроцедуры //глРассчитатьОстаткиИРезервы

// ===============================
Процедура глПровестиОстатки(Конт, ВремРегистры, Фирма, Склад, Товар, Знач ВидУпаковки, ОстатокТовара,              // --- Добавлено  Знач ВидУпаковки
	ФлагПрихода, ФлагВозврата, ФлагУчетаОстатков=0, ФлагПеремещения=2, УчитыватьРезерв=0, Счет="", НомерСтроки =0, ДКво = 0, ФлагСписания = 0, 
	ДатаСп = '  .  .    ', ДляТМЦ = "", ДляУпаковки = "", ФирмаПрихода = "", СкладПрихода = "") Экспорт
	
	Если (ПустоеЗначение(ВидУпаковки) = 1) ИЛИ (ВидУпаковки = НетУп) ИЛИ (Конт.ДатаДок < глДатаНачалаРаботыСУпаковкой) Тогда     // --- Добавлено  Знач ВидУпаковки начинаем работать с упаковкой с даты константы
		ВидУпаковки = ПолучитьПустоеЗначение("Справочник.ВидыУпаковки");
	КонецЕсли;  // ... Добавлено  Знач ВидУпаковки
	
	Если Товар.Вид() <> "ТМЦ" Тогда
		Возврат;
	КонецЕсли;
	
	Если Товар.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда		
		Возврат;
	КонецЕсли;
	    
	Если Склад.Вид() = "МестаХранения" Тогда
		Если Склад.СуммовойУчет=1 Тогда
			// если по складу ведется суммовой учет, этот регистр не двигается
			Возврат;
		КонецЕсли;	
	КонецЕсли;	

	Если НомерСтроки = 0 Тогда
		НомерСтроки = Конт.НомерСтроки;
	КонецЕсли;
	Конт.Регистр.Остатки.ПривязыватьСтроку(НомерСтроки);
	
	ДопКво = 0;
	Если Товар.УчетДопКво = 1 Тогда
		Если ДКво <> 0 Тогда
		    ДопКво = ДКво;
		ИначеЕсли глЕстьРеквизитМнЧ("ДопКво", Конт.Вид()) = Да Тогда
			ДопКво = Конт.ДопКво;
		КонецЕсли;
	КонецЕсли;
	
	Если ФлагПрихода = 1 Тогда		
		Конт.Регистр.Остатки.Фирма 			= Фирма;
		Конт.Регистр.Остатки.ТМЦ 			= Товар;
		Конт.Регистр.Остатки.МестоХранения 	= Склад; 
		Конт.Регистр.Остатки.ВидУпаковки 	= ВидУпаковки;      // --- Добавлено   ВидУпаковк
		Конт.Регистр.Остатки.ФлагУчета 		= ФлагПеремещения;
		Конт.Регистр.Остатки.ФлагСписания 	= ФлагСписания;
		Конт.Регистр.Остатки.ДляТМЦ			= ДляТМЦ;
		Конт.Регистр.Остатки.ДляУпаковки	= ДляУпаковки;
		Если ФлагВозврата = 0 Тогда
			Конт.Регистр.Остатки.ОстатокТовара = ОстатокТовара;
			Конт.Регистр.Остатки.ДопКво = ДопКво;
			Конт.Регистр.Остатки.ДвижениеПриходВыполнить();
		Иначе
			Конт.Регистр.Остатки.ДопКво = -ДопКво;
			Конт.Регистр.Остатки.ОстатокТовара = - ОстатокТовара;
			Конт.Регистр.Остатки.ДвижениеРасходВыполнить();
		КонецЕсли;
		
		Если ПустоеЗначение(ФирмаПрихода) = 0 Тогда
			Конт.Регистр.Остатки.Фирма 			= ФирмаПрихода;
			Конт.Регистр.Остатки.ТМЦ 			= Товар;
			Конт.Регистр.Остатки.МестоХранения 	= СкладПрихода;  
			Конт.Регистр.Остатки.ВидУпаковки 	= ВидУпаковки;   			 // --- Добавлено   ВидУпаковк
			Конт.Регистр.Остатки.ФлагУчета 		= ФлагПеремещения;
			Конт.Регистр.Остатки.ФлагСписания 	= ФлагСписания;
			Конт.Регистр.Остатки.ДляТМЦ			= ДляТМЦ;
			Конт.Регистр.Остатки.ДляУпаковки	= ДляУпаковки;		
			Конт.Регистр.Остатки.ОстатокТовара = -ОстатокТовара;
			Конт.Регистр.Остатки.ДопКво = -ДопКво;
			Конт.Регистр.Остатки.ДвижениеПриходВыполнить();
		КонецЕсли;		
	Иначе
		Если глКонтрольОстатков = 1 Тогда
			// проверка остатка
			ТекущийОстаток = ВремРегистры.Остатки.Остаток(Фирма,Товар,Склад,ВидУпаковки,"ОстатокТовара");
			
			Если ОстатокТовара > ТекущийОстаток Тогда                // --- Добавлено   ВидУпаковк
				глКомментарий(Шаблон("Строка [НомерСтроки]. На складе [Склад] недостаточно ТМЦ [Товар] по фирме [Фирма] вид упаковки [ВидУпаковки]. 
				| Имеется [ТекущийОстаток], требуется [ОстатокТовара]. ( Регистр ""Остатки"" )"),0);
				Если Константа.РазрешитьОтрицОстатки = Нет Тогда
					глНеПроводить(Конт);
					Возврат;
				КонецЕсли;
			КонецЕсли;			
			Если Товар.УчетДопКво = 1 Тогда
				ТекущийОстатокДоп = ВремРегистры.Остатки.Остаток(Фирма,Товар,Склад,ВидУпаковки,"ДопКво");
				Если ДопКво > ТекущийОстатокДоп Тогда               // --- Добавлено   ВидУпаковк
				глКомментарий(Шаблон("Строка [НомерСтроки]. На складе [Склад] недостаточно доп. количества ТМЦ [Товар] по фирме [Фирма] вид упаковки [ВидУпаковки]. . 
					| Имеется [ТекущийОстатокДоп], требуется [ДопКво]. ( Регистр ""Остатки"" )"),0);
					Если Константа.РазрешитьОтрицОстатки = Нет Тогда
						глНеПроводить(Конт);
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
	
			// проверка свободного остатка
			Если УчитыватьРезерв=1 Тогда
				Резерв = ВремРегистры.Резервы.СводныйОстаток(Фирма,Товар,,ВидУпаковки,,"Резерв");        		 // --- Добавлено   ВидУпаковк
				РезервПоСчету = ВремРегистры.Резервы.Остаток(Фирма,Товар,Счет,ВидУпаковки,,"Резерв");   			 // --- Добавлено   ВидУпаковк
				ОстатокВсего = ВремРегистры.Остатки.СводныйОстаток(Фирма,Товар,,ВидУпаковки,"ОстатокТовара");    // --- Добавлено   ВидУпаковк
				СвободныйОстаток = Мин(РезервПоСчету, ОстатокВсего) + Макс(0,ОстатокВсего - Резерв);			
				Если ОстатокТовара > СвободныйОстаток Тогда
					глКомментарий(Шаблон("Строка [НомерСтроки]. Недостаточно свободного ТМЦ [Товар] по фирме [Фирма] вид упаковки [ВидУпаковки]. . 
					| Свободный остаток [СвободныйОстаток], необходимо [ОстатокТовара]."),0);
					Если Константа.РазрешитьПродаватьРезерв=Нет Тогда
						глНеПроводить(Конт);
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		Конт.Регистр.Остатки.Фирма 			= Фирма;
		Конт.Регистр.Остатки.ТМЦ 			= Товар;
		Конт.Регистр.Остатки.МестоХранения 	= Склад;  
		Конт.Регистр.Остатки.ВидУпаковки 	= ВидУпаковки;   			 // --- Добавлено   ВидУпаковк
		Конт.Регистр.Остатки.ФлагУчета 		= ФлагПеремещения;
		Конт.Регистр.Остатки.ФлагСписания 	= ФлагСписания;
		Конт.Регистр.Остатки.ДляТМЦ			= ДляТМЦ;
		Конт.Регистр.Остатки.ДляУпаковки	= ДляУпаковки;		
		
		Если ФлагВозврата = 0 Тогда
			Конт.Регистр.Остатки.ОстатокТовара = ОстатокТовара;
			Конт.Регистр.Остатки.ДопКво = ДопКво;
			Конт.Регистр.Остатки.ДвижениеРасходВыполнить();
		Иначе
			Конт.Регистр.Остатки.ОстатокТовара = - ОстатокТовара;
			Конт.Регистр.Остатки.ДопКво = - ДопКво;
			Конт.Регистр.Остатки.ДвижениеПриходВыполнить();
		КонецЕсли;
		
		Если ПустоеЗначение(ФирмаПрихода) = 0 Тогда
			Конт.Регистр.Остатки.Фирма 			= ФирмаПрихода;
			Конт.Регистр.Остатки.ТМЦ 			= Товар;
			Конт.Регистр.Остатки.МестоХранения 	= СкладПрихода;  
			Конт.Регистр.Остатки.ВидУпаковки 	= ВидУпаковки;   			 // --- Добавлено   ВидУпаковк
			Конт.Регистр.Остатки.ФлагУчета 		= ФлагПеремещения;
			Конт.Регистр.Остатки.ФлагСписания 	= ФлагСписания;
			Конт.Регистр.Остатки.ДляТМЦ			= ДляТМЦ;
			Конт.Регистр.Остатки.ДляУпаковки	= ДляУпаковки;		
			Конт.Регистр.Остатки.ОстатокТовара = ОстатокТовара;
			Конт.Регистр.Остатки.ДопКво = ДопКво;
			Конт.Регистр.Остатки.ДвижениеПриходВыполнить();
		КонецЕсли;
		
		Если Конт.Вид() = "СписаниеТМЦВПроизводство" Тогда
			Если ПустоеЗначение(ДатаСп) = 1 Тогда
			    ДатаС = Конт.ДатаДок;
			Иначе
				ДатаС = ДатаСп;
			КонецЕсли;
			Если Товар.СписыватьПриВыпуске.Получить(ДатаС) = 1 Тогда
				// оприходуем назад, если списание будет идти при выпуске
				Конт.Регистр.Остатки.Фирма 			= Фирма;
				Конт.Регистр.Остатки.ТМЦ 			= Товар;
				Конт.Регистр.Остатки.МестоХранения 	= Склад;  
				Конт.Регистр.Остатки.ВидУпаковки 	= ВидУпаковки;   			 // --- Добавлено   ВидУпаковк
				Конт.Регистр.Остатки.ФлагУчета 		= ФлагПеремещения;		
				Конт.Регистр.Остатки.ОстатокТовара = ОстатокТовара;
				Конт.Регистр.Остатки.ДопКво = ДопКво;
				Конт.Регистр.Остатки.ДвижениеПриходВыполнить();			    
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //глПровестиОстатки

// ===============================
// используется при печати накладных, в которых предусмотрена работа с наборами 
Функция глВНаборе(Набор) Экспорт
    Если Набор.Выбран()=1 Тогда
        Возврат "   - ";
	Иначе
		Возврат "";
    КонецЕсли;
КонецФункции              

// ===============================
// Устанавливает видимость реквизитов ЦенаСНДС и ЦенаБезНДС в зависимости от значения констаты 
// Константа.ЦеныВНакладных, вызывается ПриОткрытии()
Процедура глУстВидимостьЦен(Конт) Экспорт
	текОсновнаяЦена = Константа.ОсновнаяЦена;
	ЕстьЦенаСНДС=глЕстьРеквизитМнЧ("ЦенаСНДС",Конт.Вид());
	ЕстьЦенаБезНДС=глЕстьРеквизитМнЧ("ЦенаБезНДС",Конт.Вид());
	Если ( ЕстьЦенаСНДС = Да ) и ( ЕстьЦенаБезНДС = Да ) Тогда
		Конт.Форма.ЦенаСНДС.Видимость(1);
		Конт.Форма.ЦенаБезНДС.Видимость(1);
		Конт.Форма.ЦенаСНДС.ВыполнятьФормулуТолькоПриИзменении(1);
		Конт.Форма.ЦенаБезНДС.ВыполнятьФормулуТолькоПриИзменении(1);
		Если Константа.ЦеныВНакладных = Перечисление.ВариантыОтображенияЦенВНакладных.ОсновнаяЦена Тогда
			Если текОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаБезНДС Тогда
				Конт.Форма.ЦенаСНДС.Видимость(0);
			ИначеЕсли текОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаСНДС	Тогда
				Конт.Форма.ЦенаБезНДС.Видимость(0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЕстьСуммаБезСкидки = глЕстьРеквизитМнЧ("СуммаБезСкидки",Конт.Вид());	
	Если Найти("Счет,РасходнаяНакладная,ВозвратПоставщику,ОказаниеУслуг",Конт.Вид()) <> 0 Тогда // расходные документы
		Если ЕстьСуммаБезСкидки = Да Тогда
			Конт.Форма.СуммаБезСкидки.Доступность(0);
		КонецЕсли;	
		Если текОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаБезНДС Тогда
			Конт.Форма.СуммаБезНДС.Доступность(0);
		ИначеЕсли текОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаСНДС	Тогда
			Конт.Форма.СуммаСНДС.Доступность(0);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры                    

// Параметр ОсновнойКонтрагент предназаначен для документа ГТД в котором основание 
// может формироваться для перевозчика и таможни. 
// Для них не добавляется текст "Оплачивается только по договору".
// ===============================
Функция глСтрокаОснование(Конт,Договор,ДокументОснование="",Основание="",Режим="", ОсновнойКонтрагент=0) Экспорт
	Текст = "";
	//Док = Конт;
	//Попытка
	//	ДокВид = Док.Вид();
	//Исключение
	//	ДокВид = "";
	//КонецПопытки;
	
	
	Язык = глЯзык();
	Если (ПустоеЗначение(Договор) = 0)
	И (ТипЗначения(Договор) = 12) Тогда
		Если Язык = "у" Тогда
			Текст = Текст + глУкр(СокрЛП(Договор.ПредставлениеВида()))+" № " + Договор.НомерДок + 
					" від " + Формат(Договор.ДатаДок,"ДДММГГ") + РазделительСтрок;
		Иначе		
			Текст = Текст + СокрЛП(Договор.ПредставлениеВида())+" № " + Договор.НомерДок + 
				" от " + Формат(Договор.ДатаДок,"ДДММГГ") + РазделительСтрок;
		КонецЕсли;
	Иначе
		Текст = Текст + Договор;
	КонецЕсли;	             
	
	Если ПустоеЗначение(Основание) = 0 Тогда	
		Текст = Текст + СокрП(Основание);
	ИначеЕсли ПустоеЗначение(ДокументОснование) = 0 Тогда
		Если Язык = "у" Тогда
			Основание=глУкр(СокрЛП(ДокументОснование.ПредставлениеВида()))+" № " + ДокументОснование.НомерДок + 
				" від " + Формат(ДокументОснование.ДатаДок,"ДДММГГ");
		Иначе
			Основание=СокрЛП(ДокументОснование.ПредставлениеВида())+" № " + ДокументОснование.НомерДок + 
				" от " + Формат(ДокументОснование.ДатаДок,"ДДММГГ");
		КонецЕсли;
		Текст = Текст + СокрП(Основание);			
	КонецЕсли;
	
	Если ПустоеЗначение(Режим) = 0 Тогда
		Текст = Текст + РазделительСтрок + глСтрокаРежимОплаты(Конт,Режим);	
	КонецЕсли;	                                                                                        
	
	Если ПустоеЗначение(Текст)=1 Тогда
	    Текст = "Основание не указано";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// ===============================
Процедура глСообщитьОбОтсутствииПартии(ФлагВозврата, Фирма, Товар, НомерСтроки, Счет="") Экспорт
	Если ФлагВозврата = 0 Тогда
		Если ПустоеЗначение(Счет) = 1 Тогда
			Текст = Текст + Шаблон(" Строка [НомерСтроки]. Недостаточно ТМЦ [Товар].");
		Иначе
			Текст = Текст + Шаблон(" Строка [НомерСтроки]. На счете [Счет] недостаточно ТМЦ [Товар].");
		КонецЕсли;
	Иначе
		Текст = Текст + Шаблон(" Строка [НомерСтроки]. Не распределился возврат ТМЦ [Товар]. ");
	КонецЕсли;
	глКомментарий(Текст+"( Регистр ""Партии"" )",0);
КонецПроцедуры

// ===============================
Процедура глСообщитьОСозданииПартии(Товар, Количество) Экспорт
	Текст = Шаблон("Сформирована партия товара [Товар],  [Количество] [Товар.БазоваяЕдиница].");
	глКомментарий(Текст,0);
КонецПроцедуры

// ===============================
// Возвращает позицию партии
// Если партия не указана, то возвращает позицию '01.01.1998'
Функция глПолучитьПозициюПартии(Партия) Экспорт
	Если ПустоеЗначение(Партия)=0 Тогда
		Возврат Партия.ПолучитьПозицию();
	Иначе
		Возврат СформироватьПозициюДокумента('01.01.1998',0,0,0);
	КонецЕсли;
КонецФункции

// ===============================
// Формирует ключ для тбОстатки
Функция глПолучитьКлючТБОстатков(Партия,Поставка,КодТовара,Счет,МестоХранения=0) Экспорт
	Перем	Разделитель, СчетСтр, МестоХраненияСтр;
	
	Разделитель = " | ";
		
	СчетСтр = Счет.Код;
		
	Если ПустоеЗначение(МестоХранения) = 1 Тогда
		МестоХраненияСтр = "";
	Иначе
		МестоХраненияСтр = МестоХранения.ПолныйКод();
	КонецЕсли;
	
	Возврат глПолучитьПозициюПартии(Партия)+глПолучитьПозициюПартии(Поставка)+Разделитель+
	        КодТовара+Разделитель+
			СчетСтр+Разделитель+
			МестоХраненияСтр;
КонецФункции
                            
// ===============================
// Процедура накладывает фильтры, нужные для временного расчета регистров
// Если ТолькоФильтр = 	0 - выполняет временный расчет регистров
// 						1 - устанавливает фильтры, и если нужно флаг временного расчета, но не производит расчет регистров
Процедура глРассчитатьОстаткиПартий(Конт, ВремРегистры, Фирма, Отбор=0, ТолькоФильтр=0, МенятьТМЦ = 1) Экспорт //--- УМК Сандомирский В.Ю, (03.10.14) 6ой параметр : (0 - текущий товар ТЧ \ 1-Заменять товаром для списания \ 2-Заменять товаром для приходования)	
	ЕстьОтбор = 0;
	Если ТипЗначенияСтр(Отбор)="СписокЗначений" Тогда
		ЕстьОтбор = 1;
		спТовары=Отбор.Получить("Товар");
		спСчета = Отбор.Получить("Счет");
		Контрагент = Отбор.Получить("Контрагент");
		МестоХранения = Отбор.Получить("МестоХранения");
		Поставщик = Отбор.Получить("Поставщик");
		Поставка = Отбор.Получить("Поставка");
		ПрихДокумент = Отбор.Получить("ПрихДокумент");
		Договор = Отбор.Получить("Договор");
	Иначе
		спТовары = 0;
		спСчета = 0;
		Контрагент = 0;
		Поставщик = 0;
		Поставка = 0;
		ПрихДокумент = 0;
		Договор = 0;
	КонецЕсли;
	
	Если ТипЗначенияСтр(спТовары) <> "СписокЗначений" Тогда
		ВидДок = Конт.Вид();
		Если глЕстьРеквизитМнЧ("ТМЦ",ВидДок) = Да Тогда
			РеквТовар = "ТМЦ";
		ИначеЕсли глЕстьРеквизитМнЧ("Услуга",ВидДок) = Да Тогда
		    РеквТовар = "Услуга";
		Иначе
			глКомментарий("В процедуру глРассчитатьОстаткиПартий передан некорректный параметр Конт.",0);
			Возврат;
		КонецЕсли;
		спТовары=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(спТовары,РеквТовар);		
		
		Если (ПустоеЗначение(Константа.УМК_ДатаНачалаПартииОстатки) <> 1) //--- УМК Сандомирский В.Ю, (03.10.14)
				И (Константа.УМК_ДатаНачалаПартииОстатки <= Конт.ДатаДок)  Тогда 		
			Если МенятьТМЦ = 2 Тогда
				глЗаменитьТМЦ(спТовары, Конт.ДатаДок,2);  //--- УМК Сандомирский В.Ю, (03.10.14) ФлагЗамены = 1 меняем на ТМЦ списания Флаг = 2 меняем на ТМЦ оприходования
			КонецЕсли;					
		Иначе		
			Если МенятьТМЦ = 1 Тогда
				Перемещение = ?(Конт.Вид() = "Перемещение",1,0); // + umk
				глЗаменитьТМЦ(спТовары, Конт.ДатаДок,,Перемещение);
			КонецЕсли;		
		КонецЕсли;		
	КонецЕсли;
	
	Рег=ВремРегистры.Партии;
	Рег.УстановитьЗначениеФильтра("Фирма",Фирма,1);
	Если ЕстьОтбор = 1 Тогда
		Если ПустоеЗначение(спТовары)=0 Тогда
			Рег.УстановитьЗначениеФильтра("ТМЦ",спТовары,2);
		КонецЕсли;
		Если ПустоеЗначение(спСчета)=0 Тогда
			Рег.УстановитьЗначениеФильтра("Счет",спСчета,2);
		КонецЕсли;
		Если ПустоеЗначение(МестоХранения)=0 Тогда
			Рег.УстановитьЗначениеФильтра("МестоХранения",МестоХранения,2);
		ИначеЕсли ПустоеЗначение(Контрагент)=0 Тогда
			Рег.УстановитьЗначениеФильтра("МестоХранения",Контрагент,2);
		КонецЕсли;
		Если ПустоеЗначение(Поставщик)=0 Тогда
			Рег.УстановитьЗначениеФильтра("Поставщик",Поставщик,2);
		КонецЕсли;
		Если ПустоеЗначение(Поставка)=0 Тогда
			Рег.УстановитьЗначениеФильтра("Поставка",Поставка,2);
		КонецЕсли;
		Если ПустоеЗначение(ПрихДокумент)=0 Тогда
			Рег.УстановитьЗначениеФильтра("ПрихДокумент",ПрихДокумент,2);
		КонецЕсли;
	КонецЕсли;
	Если Конт.ИтогиАктуальны()=0 Тогда
		Рег.ВременныйРасчет(1);
		Если ТолькоФильтр=0 Тогда
			ВремРегистры.РассчитатьРегистрыНа(Конт.ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
                              
// ===============================
// Процедура формирует тбПартии и тбОстатки, необходимые для проведения по Регистру партии товаров
// Формируется тбПартии для каждой строки документа (используется поле НомерСтрокиДокумента в тбПартии)
// в соответствии с Предпочтением в данной строке
Процедура глСформироватьТаблицуПартий(Конт, ВремРегистры, Фирма, Отбор=0, Предпочтение=0, 
	тбПартии, тбОстатки, ИнвСтратегияПредпочтения=0, ИнвСтратегияПродажи=0, МенятьТМЦ = 1) Экспорт
	
	Перем ТбИтоги;
	
	ЕстьОтбор = 0;
	Если ТипЗначенияСтр(Отбор)="СписокЗначений" Тогда
		ЕстьОтбор = 1;
		ТекущийДок = Отбор.Получить("ТекущийДокумент");
		спТовары=Отбор.Получить("Товар");
		спСчета = Отбор.Получить("Счет");
		Контрагент = Отбор.Получить("Контрагент");
		МестоХранения = Отбор.Получить("МестоХранения");
		Поставщик = Отбор.Получить("Поставщик");
		Поставка = Отбор.Получить("Поставка");
		ПрихДокумент = Отбор.Получить("ПрихДокумент");
		Договор = Отбор.Получить("Договор");
	Иначе
		ТекущийДок = 0;
		спСчета = 0;
		Контрагент = 0;
		МестоХранения = 0;
		Поставщик = 0;
		Поставка = 0;
		ПрихДокумент = 0;
		Договор = 0;
	КонецЕсли;
	
	Если ТипЗначенияСтр(спТовары) <> "СписокЗначений" Тогда
		ВидДок = Конт.Вид();
		Если глЕстьРеквизитМнЧ("ТМЦ",ВидДок) = Да Тогда
			РеквТовар = "ТМЦ";
		ИначеЕсли глЕстьРеквизитМнЧ("Услуга",ВидДок) = Да Тогда
		    РеквТовар = "Услуга";
		Иначе
			глКомментарий("В процедуру глСформироватьТаблицуПартий передан некорректный параметр Конт.",0);
			Возврат;
		КонецЕсли;
		спТовары=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(спТовары,РеквТовар);
		
		Если (ПустоеЗначение(Константа.УМК_ДатаНачалаПартииОстатки) <> 1) //--- УМК Сандомирский В.Ю, (03.10.14)
				И (Константа.УМК_ДатаНачалаПартииОстатки <= Конт.ДатаДок)  Тогда 
		
			Если МенятьТМЦ = 2 Тогда
				глЗаменитьТМЦ(спТовары, Конт.ДатаДок,2);  //--- УМК Сандомирский В.Ю, (03.10.14) ФлагЗамены = 1 меняем на ТМЦ списания Флаг = 2 меняем на ТМЦ оприходования
			КонецЕсли;	
			
		Иначе
				
			Если МенятьТМЦ = 1 Тогда
				Перемещение = ?(Конт.Вид() = "Перемещение",1,0); // + umk
				глЗаменитьТМЦ(спТовары, Конт.ДатаДок,,Перемещение);
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;

	Если (ПустоеЗначение(Константа.УМК_ДатаНачалаПартииОстатки) <> 1) //--- УМК Сандомирский В.Ю, (03.10.14)
				И (Константа.УМК_ДатаНачалаПартииОстатки <= Конт.ДатаДок)  Тогда 
		
			Если МенятьТМЦ = 2 Тогда
				глЗаменитьТМЦ(спТовары, Конт.ДатаДок,2);  //--- УМК Сандомирский В.Ю, (03.10.14) ФлагЗамены = 1 меняем на ТМЦ списания Флаг = 2 меняем на ТМЦ оприходования
			КонецЕсли;	
			
	КонецЕсли;	
	
	Рег=ВремРегистры.Партии;
	// ставим фильтры
	Если ЕстьОтбор = 1 Тогда
		Если ПустоеЗначение(спТовары)=0 Тогда
			Рег.УстановитьЗначениеФильтра("ТМЦ",спТовары,2);
		КонецЕсли;
		Если ПустоеЗначение(спСчета)=0 Тогда
			Рег.УстановитьЗначениеФильтра("Счет",спСчета,2);
		КонецЕсли;
		Если ПустоеЗначение(МестоХранения)=0 Тогда
			Рег.УстановитьЗначениеФильтра("МестоХранения",МестоХранения,2);
		ИначеЕсли ПустоеЗначение(Контрагент)=0 Тогда
			Рег.УстановитьЗначениеФильтра("МестоХранения",Контрагент,2);
		КонецЕсли;
		Если ПустоеЗначение(Поставщик)=0 Тогда
			Рег.УстановитьЗначениеФильтра("Поставщик",Поставщик,2);
		КонецЕсли;		
		Если ПустоеЗначение(Поставка)=0 Тогда
			Рег.УстановитьЗначениеФильтра("Поставка",Поставка,2);
		КонецЕсли;		
		Если ПустоеЗначение(ПрихДокумент)=0 Тогда
			Рег.УстановитьЗначениеФильтра("ПрихДокумент",ПрихДокумент,2);
		КонецЕсли;				
	КонецЕсли;          
	// выбираем итоги   
	Рег.ВыгрузитьИтоги(тбИтоги,1,1);
	тбИтоги.Сортировать("ТМЦ*,ПрихДокумент",1);

	тбПартии=СоздатьОбъект("ТаблицаЗначений");
	тбПартии.НоваяКолонка("НомерСтрокиДокумента","Число",5,0);
	тбПартии.НоваяКолонка("ТМЦ");
	тбПартии.НоваяКолонка("ПрихДокумент");
	тбПартии.НоваяКолонка("Счет");
	тбПартии.НоваяКолонка("МестоХранения");
	тбПартии.НоваяКолонка("Поставщик");
	тбПартии.НоваяКолонка("Поставка");
	тбПартии.НоваяКолонка("FIFO","Строка",34);
	тбПартии.НоваяКолонка("LIFO","Строка",34);
		
	тбОстатки=СоздатьОбъект("ТаблицаЗначений");
	тбОстатки.НоваяКолонка("Ключ","Строка");
	
	// Для отладки
	// тбОстатки.НоваяКолонка("ТМЦ");
	// тбОстатки.НоваяКолонка("МестоХранения");
	// тбОстатки.НоваяКолонка("ПрихДокумент");
	
	тбОстатки.НоваяКолонка("ОстатокТовара","Число",15,3);
	тбОстатки.НоваяКолонка("Стоимость","Число",16,2);
	тбОстатки.НоваяКолонка("ПродСтоимость","Число",16,2);
	
	ЕстьПредпочтения=0;
	Если ПустоеЗначение(Предпочтение)=1 Тогда
		Если глЕстьРеквизитМнЧ("Предпочтение",ВидДок) = Да Тогда
			спПредпочтения=СоздатьОбъект("СписокЗначений");
			Конт.ВыгрузитьТабличнуюЧасть(спПредпочтения,"Предпочтение");
			ЕстьПредпочтения=1;
		КонецЕсли;			    
	Иначе
		Если ТипЗначенияСтр(Предпочтение)="СписокЗначений" Тогда
			// передали список предпочтений
			спПредпочтения=Предпочтение;
			ЕстьПредпочтения=1;
		Иначе
			// одно предпочтение на всех
			ТекПредпочтение=Предпочтение;
		КонецЕсли;
	КонецЕсли;
    
	Если ПустоеЗначение(спТовары)=0 Тогда
		Для НомСтроки=1 по спТовары.РазмерСписка() Цикл
			Товар=спТовары.ПолучитьЗначение(НомСтроки);
			Если ПустоеЗначение(Товар) = 1 Тогда
				Продолжить;	
			КонецЕсли;                                 
			
			МетодРасчетаСебестоимости=глПолучитьМетодРасчетаСебестоимости(Товар,Конт.ДатаДок);
			
			Если МетодРасчетаСебестоимости=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
				// НаправлениеСортировки по убыванию
				КолонкаСортировки="LIFO";// по убыванию
				ВНачало="2";
				ВКонец="1";
			Иначе
				// НаправлениеСортировки по возрастанию
				КолонкаСортировки="FIFO";// по возрастанию
				ВНачало="1";
				ВКонец="2";
			КонецЕсли;
			
			Если ЕстьПредпочтения =1 Тогда
				ТекПредпочтение=спПредпочтения.ПолучитьЗначение(НомСтроки);
			КонецЕсли;
			чНСвТаблице=0;
			Если тбИтоги.НайтиЗначение(Товар,чНСвТаблице,"ТМЦ")=0 Тогда
				// по данному товару нет партий
				Продолжить;
			КонецЕсли;
			тбИтоги.ПолучитьСтрокуПоНомеру(чНСвТаблице);
			Пока тбИтоги.ТМЦ=Товар Цикл
				Если тбИтоги.ОстатокТовара<=0 Тогда
					Если тбИтоги.ПолучитьСтроку()=0 Тогда
						Прервать;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
				// если счет отбора не указан, значит отобрали по всем счетам
				// в таком случае, здесь отбираем по счетам учета
				Если (спСчета = 0) И (тбИтоги.Счет <> Товар.Счет) Тогда
					Продолжить;
				КонецЕсли;
				
				Партия=тбИтоги.ПрихДокумент;
				ПозицияПартии=глПолучитьПозициюПартии(Партия);
				// Сравниваем документы по позиции
				Если ПозицияПартии>Конт.ПолучитьПозицию() Тогда
					глКомментарий("Для ТМЦ "+Товар+" партия "+Партия+" находится позже, чем позиция проводимого документа! Проверьте правильность формирования партии !" ,3);
				КонецЕсли;
				Если ПустоеЗначение(Договор)=0 Тогда
					Если Партия.Договор<>Договор Тогда
						Если тбИтоги.ПолучитьСтроку()=0 Тогда
							Прервать;
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				// Определяем стратегии
				
				// Стратегия продажи
				// сначала списываем собственные (балансовые) ТМЦ
				// если обратное не указано в ИнвСтратегияПродажи
				СтратегияПродажи=ВКонец;
				Если тбИтоги.Счет.Забалансовый = 0 Тогда
					СтратегияПродажи=?(ИнвСтратегияПродажи=0,ВНачало,ВКонец);
				Иначе
					СтратегияПродажи=?(ИнвСтратегияПродажи=0,ВКонец,ВНачало);
				КонецЕсли;
				// Стратегия предпочтения
				СтратегияПредпочтения=ВКонец;
				Если ПустоеЗначение(ТекПредпочтение)=0 Тогда
					Если ТипЗначенияСтр(ТекПредпочтение)="Документ" Тогда
						// проверяем Партию
						Если Партия=ТекПредпочтение Тогда
							СтратегияПредпочтения=?(ИнвСтратегияПредпочтения=0,ВНачало,ВКонец);
						КонецЕсли;
					КонецЕсли;
					Если ТипЗначенияСтр(ТекПредпочтение)="Справочник" Тогда
						// проверяем Поставщика
						Если тбИтоги.Поставщик=ТекПредпочтение Тогда
							СтратегияПредпочтения=?(ИнвСтратегияПредпочтения=0,ВНачало,ВКонец);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ПозицияСоСтратегией=СтратегияПредпочтения+СтратегияПродажи+ПозицияПартии;
				тбПартии.НоваяСтрока();
				тбПартии.НомерСтрокиДокумента=НомСтроки;
				тбПартии.ТМЦ=Товар;
				тбПартии.ПрихДокумент=Партия;
				тбПартии.Счет=тбИтоги.Счет;
				тбПартии.МестоХранения=тбИтоги.МестоХранения;
				тбПартии.Поставщик=тбИтоги.Поставщик;
				тбПартии.Поставка=тбИтоги.Поставка;
				тбПартии.УстановитьЗначение(тбПартии.КоличествоСтрок(),КолонкаСортировки,ПозицияСоСтратегией);
				
				// нужно проверить, есть ли такая партия уже в остатках ?
				Если ТипЗначенияСтр(МестоХранения)="СписокЗначений" Тогда
					// фильтр по списку складов, значит нужен склад в ключе
					Ключ = глПолучитьКлючТбОстатков(Партия,тбПартии.Поставка,Строка(Товар.Код),тбПартии.Счет,тбПартии.МестоХранения);
				Иначе
					// склад только один, ключ без склада
					Ключ = глПолучитьКлючТбОстатков(Партия,тбПартии.Поставка,Строка(Товар.Код),тбПартии.Счет);
				КонецЕсли;
				
				Если тбОстатки.НайтиЗначение(Ключ,,"Ключ")=0 Тогда
					тбОстатки.НоваяСтрока();
					тбОстатки.Ключ=Ключ;
					
					// Нужны для отладки
					// тбОстатки.ТМЦ=Товар;							
					// тбОстатки.МестоХранения=тбИтоги.МестоХранения;
					// тбОстатки.ПрихДокумент=Партия;
					
					тбОстатки.Стоимость=тбИтоги.Стоимость;
					тбОстатки.ПродСтоимость=тбИтоги.ПродСтоимость;
					тбОстатки.ОстатокТовара=тбИтоги.ОстатокТовара;
				КонецЕсли;
				Если тбИтоги.ПолучитьСтроку()=0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	тбПартии.Сортировать("+НомерСтрокиДокумента,+FIFO,-LIFO");
	тбОстатки.Сортировать("+Ключ");
	
	тбПартии.УдалитьКолонку("FIFO");
	тбПартии.УдалитьКолонку("LIFO");
КонецПроцедуры

// ===============================
// Изменяет тбОстатки на величину списываемых Измерений/Реквизитов
Процедура глУчестьСписание(тбОстатки,СписываемыйОстатокТовара,СписываемаяСтоимость,СписываемаяПродСтоимость) Экспорт
	
	тбОстатки.ОстатокТовара = тбОстатки.ОстатокТовара - СписываемыйОстатокТовара;
	тбОстатки.Стоимость = тбОстатки.Стоимость - СписываемаяСтоимость;
	тбОстатки.ПродСтоимость = тбОстатки.ПродСтоимость - СписываемаяПродСтоимость;	
КонецПроцедуры


// ===============================
// Добавляет в заголовок отчета инфо о фирме
Процедура глЗаголовокФирма(Фирма,Заг,Язык) Экспорт
	Если ПустоеЗначение(Фирма)=1 Тогда
		Заг=Заг+?(Язык="у","По всім фірмам. ","По всем фимам. ");
	Иначе
	    Заг=Заг+?(Язык="у","По фірмі ","По фирме ")+Фирма+". ";
	КонецЕсли;                        
КонецПроцедуры

// ===============================
// Показывает остаток товара по Фирме, Складу с учетом резерва
Функция глКонтрольОстатка(Конт, Знач ТМЦ, МестоХранения = "", УчитыватьРезерв=1, РегО = "" , Кво = 0, фОстаткиНаДокумент = 0,фНеСчитать = 0, ЕстьВУП = "", ЕстьКоэф = "") Экспорт // --- УМК Сандомирский В.Ю. (30.08.14) не считать остатки фНеСчитать = 1	
	Если фНеСчитать = 1 Тогда // --- УМК Сандомирский В.Ю. (30.08.14) не считать остатки фНеСчитать = 1
		Возврат "";
	КонецЕсли;	
	
	Если (ПустоеЗначение(ТМЦ)=1) Или (Константа.ПоказыватьОстаткиТМЦ = Нет) Тогда
	    Возврат "";
	КонецЕсли;
	
	Фирма=Конт.Фирма;
	ТМСпис = ТМЦ.ТМЦДляСписания.Получить(Конт.ДатаДок);
	ТМЦ = ?(ПустоеЗначение(ТМСпис) = 1, ТМЦ, ТМСпис);   
	ВидУпаковки = ПолучитьПустоеЗначение("Справочник.ВидыУпаковки"); 
	ЕстьВУП = ?(ЕстьВУП = "", глЕстьРеквизитМнЧ("ВидУпаковки", Конт.Вид()), ЕстьВУП);
	ЕстьКоэф = ?(ЕстьКоэф = "", глЕстьРеквизитМнЧ("ВидУпаковки", Конт.Вид()), ЕстьКоэф);
	
	Если ЕстьВУП = Да Тогда
		Если Конт.ВидУпаковки <> НетУп Тогда
			ВидУпаковки = Конт.ВидУпаковки;
		КонецЕсли;
	КонецЕсли;	
	
	Если фОстаткиНаДокумент = 1 Тогда		
		Если Конт.ДатаДок < глДатаНачалаРаботыСУпаковкой Тогда			
			Если ПустоеЗначение(МестоХранения) =0 Тогда
				Остаток=РегО.СводныйОстаток(Фирма,ТМЦ,МестоХранения,,"ОстатокТовара");
			Иначе     
				Остаток=РегО.СводныйОстаток(Фирма,ТМЦ,,,"ОстатокТовара");			
			КонецЕсли;
		Иначе
			Если ПустоеЗначение(МестоХранения) =0 Тогда
				Остаток=РегО.СводныйОстаток(Фирма,ТМЦ,МестоХранения,ВидУпаковки,"ОстатокТовара");
			Иначе     
				Остаток=РегО.СводныйОстаток(Фирма,ТМЦ,,ВидУпаковки,"ОстатокТовара");			
			КонецЕсли;				
		КонецЕсли;		
		
		Если ПустоеЗначение(МестоХранения) =0 Тогда
			Остаток=РегО.СводныйОстаток(Фирма,ТМЦ,МестоХранения,ВидУпаковки,"ОстатокТовара");
		Иначе     
			Остаток=РегО.СводныйОстаток(Фирма,ТМЦ,,ВидУпаковки,"ОстатокТовара");			
		КонецЕсли;
		ОстатокПрогн = Остаток - Кво;
		Если ЕстьКоэф = Да Тогда
			Если (Конт.Коэффициент<>0) Тогда
				Остаток = Остаток/Конт.Коэффициент;
			КонецЕсли;
		КонецЕсли;
		Возврат Строка(Остаток) + " / " + (ОстатокПрогн);
	Иначе
		// Вычислим, сколько всего данного товара		
		Если Конт.ДатаДок < глДатаНачалаРаботыСУпаковкой Тогда		
			Если ПустоеЗначение(МестоХранения) =0 Тогда
				//Остаток=Регистр.Остатки.СводныйОстаток(Фирма,ТМЦ,МестоХранения,,"ОстатокТовара");
				Остаток=Регистр.Остатки.СводныйОстаток(Фирма,ТМЦ,МестоХранения,,"ОстатокТовара");
			Иначе     
				//Остаток=Регистр.Остатки.СводныйОстаток(Фирма,ТМЦ,,,"ОстатокТовара");
				Остаток=Регистр.Остатки.СводныйОстаток(Фирма,ТМЦ,,,"ОстатокТовара");
			КонецЕсли;			
		Иначе			
			Если ПустоеЗначение(МестоХранения) =0 Тогда
				//Остаток=Регистр.Остатки.СводныйОстаток(Фирма,ТМЦ,МестоХранения,,"ОстатокТовара");
				Остаток=Регистр.Остатки.СводныйОстаток(Фирма,ТМЦ,МестоХранения,ВидУпаковки,"ОстатокТовара");
			Иначе     
				//Остаток=Регистр.Остатки.СводныйОстаток(Фирма,ТМЦ,,,"ОстатокТовара");
				Остаток=Регистр.Остатки.СводныйОстаток(Фирма,ТМЦ,,ВидУпаковки,"ОстатокТовара");
			КонецЕсли;
		КонецЕсли;		
			
		// проверяем резерв товара
		Если УчитыватьРезерв=1 Тогда	
			// Вычислим, сколько зарезервировано всего данного товара			
			Если Конт.ДатаДок < глДатаНачалаРаботыСУпаковкой Тогда
				Резерв=Регистр.Резервы.СводныйОстаток(Фирма,ТМЦ,,,,"Резерв");
			Иначе
				Резерв=Регистр.Резервы.СводныйОстаток(Фирма,ТМЦ,,ВидУпаковки,,"Резерв");
			КонецЕсли;	
				
			РезервПоСчету=0;
			Если (Конт.Вид()="РасходнаяНакладная") или (Конт.Вид()="РасходнаяРозничная") Тогда
				// Если выписывается накладная на основании Счета
				Если Конт.ДокументОснование.Вид()="Счет" Тогда
					// Вычислим, сколько зарезервировано именно по данному Счету					
					Если Конт.ДатаДок < глДатаНачалаРаботыСУпаковкой Тогда
						РезервПоСчету=Регистр.Резервы.СводныйОстаток(Фирма,ТМЦ,Конт.ДокументОснование,,,"Резерв");
					Иначе
						РезервПоСчету=Регистр.Резервы.СводныйОстаток(Фирма,ТМЦ,Конт.ДокументОснование,,,"Резерв");
					КонецЕсли;							
				КонецЕсли;
			КонецЕсли;
	
			//ПолныйОстаток=Регистр.Остатки.СводныйОстаток(Фирма,ТМЦ,,,"ОстатокТовара");
			Если Конт.ДатаДок < глДатаНачалаРаботыСУпаковкой Тогда
				ПолныйОстаток=Регистр.Остатки.СводныйОстаток(Фирма,ТМЦ,,,"ОстатокТовара");
			Иначе
				ПолныйОстаток=Регистр.Остатки.СводныйОстаток(Фирма,ТМЦ,,ВидУпаковки,"ОстатокТовара");
			КонецЕсли;
				
			СвободныйРесурс=ПолныйОстаток-Резерв+РезервПоСчету;
			Остаток=СвободныйРесурс;
		КонецЕсли;
		Если ЕстьКоэф = Да Тогда
			Если (Конт.Коэффициент<>0) Тогда
				Остаток = Остаток/Конт.Коэффициент;
			КонецЕсли;
		КонецЕсли;
	
		Возврат СокрЛП(Формат(Остаток,глФорматКоличестваВформах));		
	КонецЕсли;                                             
КонецФункции
                  
// ===============================
Процедура глУстан_Вал(КонтекстДокумента, ВалютаДокумента, Валюта_Прежн, Курс, Курс_Прежн) Экспорт
	// Теперь надо пересчитать цены и суммы по строкам спецификации, если они есть
	Если КонтекстДокумента.КоличествоСтрок()>0 Тогда
		                                             
		Ответ = 0;
		// поспрашиваем пользователя
		Если ВалютаДокумента <> Валюта_Прежн Тогда
			Ответ = Вопрос("В документе изменена валюта! Пересчитать суммы ?","Да+Нет");
		ИначеЕсли Курс <> Курс_Прежн Тогда
			Ответ = Вопрос("В документе изменен курс валюты! Пересчитать суммы ?","Да+Нет");
		КонецЕсли;
		
		Если Ответ <> "Да" Тогда
		    Возврат;
		КонецЕсли;
		
		фСчитатьОтЦеныБезНДС = 0;
		
		Если Константа.ОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаБезНДС Тогда
			Если глЕстьРеквизитМнЧ("ЦенаБезНДС",КонтекстДокумента.Вид()) = Да Тогда
			    фСчитатьОтЦеныБезНДС = 1;
			КонецЕсли;
		КонецЕсли;
		
		фЕстьСкидкаВМнЧ	  = глЕстьРеквизитМнЧ("Скидка", КонтекстДокумента.Вид());
		фЕстьСкидкаВШапке = глЕстьРеквизитШапки("Скидка", КонтекстДокумента.Вид());
		
		Если фЕстьСкидкаВШапке = Да Тогда
			Если ПустоеЗначение(КонтекстДокумента.Скидка) = 0 Тогда
				СкидкаВДок = КонтекстДокумента.Скидка;
			Иначе	         
				фЕстьСкидкаВШапке = Нет;
			КонецЕсли;			
		КонецЕсли;
		
		КонтекстДокумента.ВыбратьСтроки();
		Пока КонтекстДокумента.ПолучитьСтроку()>0 Цикл
                               
			Если фЕстьСкидкаВМнЧ = Да Тогда
				Если ПустоеЗначение(КонтекстДокумента.Скидка) = 0 Тогда
					СкидкаВДок = КонтекстДокумента.Скидка;
				Иначе	         
					фЕстьСкидкаВМнЧ = Нет;
				КонецЕсли;			
			КонецЕсли;
			
			ВалютаТовара=Гривня;

			Если (фСчитатьОтЦеныБезНДС = 1) ИЛИ 
			(Найти("ПриходнаяНакладнаяГТД,ЛиквидацияНеоборАктивов",КонтекстДокумента.Вид()) > 0) Тогда
				ЦенаВДок = КонтекстДокумента.ЦенаБезНДС;	
			Иначе	
				ЦенаВДок = КонтекстДокумента.ЦенаСНДС;
			КонецЕсли;
            
			Если ВалютаДокумента=Валюта_Прежн Тогда
				// если валюта не менялась (поменялся курс)
				Если Курс_Прежн = 0 Тогда
					Курс_Прежн = 1;
				КонецЕсли;
				Если Курс = 0 Тогда
					Курс = 1;
				КонецЕсли;
				
				Если КонтекстДокумента.Вид() = "ПриходнаяНакладнаяГТД" Тогда
					// для ГТД валютная цена не должна изменяться					
					ЦенаВДок = ЦенаВДок;    // цена должна остаться прежней не зависимо от курса
				ИначеЕсли ВалютаТовара=ВалютаДокумента Тогда
					// если валюта товара совпадает с валютой накладной
					ЦенаВДок = ЦенаВДок;    // цена должна остаться прежней не зависимо от курса
				ИначеЕсли  ВалютаТовара=Гривня  Тогда
					// если валюта товара не совпадает с валютой накладной, а товар гривневый
					// (это значит при росте курса цена уменьшается)
					// цена пересчитывается через гривни
					ЦенаВДок = (ЦенаВДок*Курс_Прежн)/Курс;
					Если (фЕстьСкидкаВМнЧ = Да) ИЛИ ((фЕстьСкидкаВШапке = Да) И (КонтекстДокумента.НомерСтроки = 1)) Тогда
						// пересчитаем скидку
						СкидкаВДок = (СкидкаВДок*Курс_Прежн)/Курс;
					КонецЕсли;
				ИначеЕсли  ВалютаДокумента=Гривня  Тогда
					// если валюта товара не совпадает с валютой накладной, а накладная гривневая
					// (товар валютный ,а накладная гривневая)
					// (это значит при росте курса цена растет)
					// цена поднимается в соответствии с ростом курса доллара
					// (т.к. в гривневой накладной у нас указан курс доллара)
					// Здесь есть некоторая натяжка, но так уж сделаем!
					// цена пересчитывается через гривни
					ЦенаВДок = (ЦенаВДок*Курс)/Курс_Прежн;
					Если (фЕстьСкидкаВМнЧ = Да) ИЛИ ((фЕстьСкидкаВШапке = Да) И (КонтекстДокумента.НомерСтроки = 1)) Тогда
						// пересчитаем скидку
						СкидкаВДок = (СкидкаВДок*Курс)/Курс_Прежн;
					КонецЕсли;
				Иначе
					// если валюта товара не совпадает с валютой накладной, а товар и накладная валютные
					// (товар в одной валюте ,а накладная в другой валюте, но не гривня)
					// цена поднимается в соответствии с ростом курса валюты накладной
					// Здесь есть некоторая натяжка, но так уж сделаем!
					ЦенаВДок = (ЦенаВДок*Курс)/Курс_Прежн;             
					Если (фЕстьСкидкаВМнЧ = Да) ИЛИ ((фЕстьСкидкаВШапке = Да) И (КонтекстДокумента.НомерСтроки = 1)) Тогда
						// пересчитаем скидку
						СкидкаВДок = (СкидкаВДок*Курс)/Курс_Прежн;
					КонецЕсли;
				КонецЕсли;
			Иначе   // Валюта поменялась, но  (курс не менялся)				
				ЦенаВДок = глПересчет(ЦенаВДок,Валюта_Прежн,Курс_Прежн,ВалютаДокумента,Курс);
				Если (фЕстьСкидкаВМнЧ = Да) ИЛИ ((фЕстьСкидкаВШапке = Да) И (КонтекстДокумента.НомерСтроки = 1)) Тогда
					// пересчитаем скидку
					СкидкаВДок = глПересчет(СкидкаВДок,Валюта_Прежн,Курс_Прежн,ВалютаДокумента,Курс);
				КонецЕсли;
			КонецЕсли;	
			              
			Если фЕстьСкидкаВМнЧ = Да Тогда
				КонтекстДокумента.Скидка = СкидкаВДок;
			КонецЕсли;	
			
			Если (фСчитатьОтЦеныБезНДС = 1) ИЛИ 
			(Найти("ПриходнаяНакладнаяГТД,ЛиквидацияНеоборАктивов",КонтекстДокумента.Вид()) > 0) Тогда
				КонтекстДокумента.ЦенаБезНДС = ЦенаВДок;
			Иначе	
				КонтекстДокумента.ЦенаСНДС = ЦенаВДок;
			КонецЕсли;
			
			Если КонтекстДокумента.Вид()="ПриходнаяНакладнаяГТД" Тогда				
			    КонтекстДокумента.Акциз = глПересчет(КонтекстДокумента.Акциз,Валюта_Прежн,Курс_Прежн,ВалютаДокумента,Курс);
				КонтекстДокумента.Пошлина = глПересчет(КонтекстДокумента.Пошлина,Валюта_Прежн,Курс_Прежн,ВалютаДокумента,Курс);
				КонтекстДокумента.ТаможенныеУслуги = глПересчет(КонтекстДокумента.ТаможенныеУслуги,Валюта_Прежн,Курс_Прежн,ВалютаДокумента,Курс);
				КонтекстДокумента.Перевозка = глПересчет(КонтекстДокумента.Перевозка,Валюта_Прежн,Курс_Прежн,ВалютаДокумента,Курс);
			КонецЕсли;
			
			// пересчитываем сумму по товару
			Если (фСчитатьОтЦеныБезНДС = 1) ИЛИ 
			(Найти("ПриходнаяНакладнаяГТД,ЛиквидацияНеоборАктивов",КонтекстДокумента.Вид()) > 0) Тогда
				глВыч_суммы_накл(КонтекстДокумента,-1);
			Иначе
				глВыч_суммы_накл(КонтекстДокумента,1);
			КонецЕсли;
			
		КонецЦикла;
		Если фЕстьСкидкаВШапке = Да Тогда
			КонтекстДокумента.Скидка = СкидкаВДок;
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура глПриИзмененииДатыДокумента(Конт, СтараяДата) Экспорт
	Перем ВремКурс,ВремДата;
	Перем ИзмПараметрыКурса;
	
	Если глЕстьРеквизитШапки("Курс",Конт.Вид()) = Да Тогда
		// если курс и дата курса не менялисть вручную,
		// то расчитаем на новую дату
		ИзмененыПараметрыКурса = Нет;
		Если глЕстьРеквизитШапки("Дата_Курса",Конт.Вид()) = Да Тогда
			Если СтараяДата <>Конт.Дата_Курса Тогда
				ИзмененыПараметрыКурса = Да;
			КонецЕсли;    
		Иначе
			Если СтараяДата <>Конт.ДатаДок Тогда
				ИзмененыПараметрыКурса = Да;
			КонецЕсли;	
		КонецЕсли;
		ВремКурс = глКурсДляВалюты(Конт.Валюта,СтараяДата);
		Если ВремКурс <> Конт.Курс Тогда
			ИзмененыПараметрыКурса = Да;
		КонецЕсли;
		
		Если ИзмененыПараметрыКурса = Нет Тогда
			// курс и дату курса руками не меняли.
			// значит можно пересчитать
			Если глЕстьРеквизитШапки("Дата_Курса",Конт.Вид()) = Да Тогда
				Конт.Дата_Курса = Конт.ДатаДок;
				// Дата должна быть задана
				Если ПустоеЗначение(Конт.Дата_Курса) = 1 Тогда
					Конт.Дата_Курса = РабочаяДата();
				КонецЕсли;
			КонецЕсли;
			Конт.Курс = глКурсДляВалюты(Конт.Валюта,Конт.ДатаДок);
			Если ПустоеЗначение(Конт.Курс) = 1 Тогда
				// курс не должен быть равным нулю
				Конт.Курс = 1;
			КонецЕсли;
			
			// Пересчет Цен по курсу
			Если (глЕстьРеквизитМнЧ("ЦенаСНДС", Конт.Вид()) = Да) или 
				 (глЕстьРеквизитМнЧ("ЦенаБезНДС", Конт.Вид()) = Да) Тогда
				глУстан_Вал(Конт, Конт.Валюта, Конт.Валюта, Конт.Курс, ВремКурс);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СтараяДата = Конт.ДатаДок;
КонецПроцедуры

// ===============================
// Формирует строку для печати курса валюты
Функция глКурсДляПечати(Валюта,Курс,ДатаКурса) Экспорт
	Перем ВалютаПечати;
	ВалютаПечати = Валюта;
	Кратность = ВалютаПечати.Кратность.Получить(ДатаКурса);
	Возврат Строка(Курс) + ?(Кратность = 1,""," за " + Строка(Кратность));
КонецФункции

// ===============================
// Назначение:	проверяет возможные ошибки округления для сумм с НДС
// Аргументы: 	Конт - контекст документа
//				СуммаБезНДС - итоговая сумма без НДС по документу
//				СуммаСНДС - итоговая сумма с НДС по документу
//				НДС - итоговая сумма НДС по документу
Процедура глПроверкаНДСВДокументе(Конт, СуммаБезНДС, СуммаСНДС, НДС) Экспорт
	фВозврата = 1;
	Если глЕстьРеквизитШапки("Валюта",Конт.Вид()) = Да Тогда
		ВалютаПогашения = Конт.Валюта;
	Иначе
		ВалютаПогашения = Гривня;
	КонецЕсли;
	
	// проверим переданные суммы	
  Разница = СуммаСНДС - СуммаБезНДС - НДС; // определяем разницу
	Разница = ?(Разница>0, Разница, - Разница); // берем модуль
	Разница = Окр(Разница, 2); // округляем
	Если Разница > 0 Тогда
		глКомментарий("Ошибка расчета суммы НДС "
						+ ": Сумма без НДС ("	+ глФРМ3(СуммаБезНДС,Гривня,1) + ")"
						+ " + НДС ("			+ глФРМ3(НДС		,Гривня,1) + ")"
						+ " <> Сумма с НДС ("	+ глФРМ3(СуммаСНДС	,Гривня,1) + ")",0,,"!");
	КонецЕсли;
					   
	Если (Конт.КоличествоСтрок() = 0)
	ИЛИ (Конт.Вид() = "АвансовыйОтчет")
	ИЛИ (Конт.Вид() = "БанковскаяВыписка")
	ИЛИ (Конт.Вид() = "РасходыНаПриобретение") Тогда
		// дальнейшие проверки не нужны
		Возврат
	КонецЕсли;
	
	тбСуммПоСтавкамНДС = глПолучитьСуммыДляПогашения(Конт, Конт.Фирма, ВалютаПогашения);

	тбСуммПоСтавкамНДС.ВыбратьСтроки();
	Пока тбСуммПоСтавкамНДС.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(тбСуммПоСтавкамНДС.СтавкаНДС) = 0 Тогда;
			ПроцНДС = глПроцентНДС(тбСуммПоСтавкамНДС.СтавкаНДС,Конт.ДатаДок);
		Иначе
			ПроцНДС = 0;
		КонецЕсли; 
		
		РасчНДС = Окр(тбСуммПоСтавкамНДС.СуммаСНДС * ПроцНДС / (100 + ПроцНДС),3);
	    Разница = тбСуммПоСтавкамНДС.СуммаНДС - РасчНДС; // определяем разницу
		Разница = ?(Разница>0, Разница, - Разница); // берем модуль
		Разница = Окр(Разница, 2); // округляем
		Если Разница > 0.01 Тогда  
		    Текст = "сумма по ставке НДС "+тбСуммПоСтавкамНДС.СтавкаНДС+" (" + глФРМ3(тбСуммПоСтавкамНДС.СуммаНДС,Гривня,1) + ")"
						+ " отличается от расчетной (" + глФРМ3(РасчНДС,Гривня,1) + ")";
			глКомментарий("Ошибка расчета суммы НДС: "+Текст,0,,"!");
		КонецЕсли;
	КонецЦикла;
	
	// проверяем соотв. расчитанной суммы по ставкам НДС и той, что передали 
	Если тбСуммПоСтавкамНДС.Итог("СуммаНДС") <> Окр(НДС,2) Тогда
		// рассчитаем базу для НДС в зависимости от константы
		Если Константа.ОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаБезНДС Тогда
			текБазаДляНДС = тбСуммПоСтавкамНДС.Итог("СуммаСНДС") - тбСуммПоСтавкамНДС.Итог("СуммаНДС");
		Иначе               
			текБазаДляНДС = тбСуммПоСтавкамНДС.Итог("СуммаСНДС");
		КонецЕсли;	
		ТекстСообщения = "Из за ограниченной точности реквизита НДС сумма НДС ( "+НДС+" ) не соответствует базе ( "+текБазаДляНДС+" ). 
		|Суммы необходимо откорректировать вручную!";
	    глКомментарий(ТекстСообщения,,,"!");
	КонецЕсли;
	// считаем разницу округленных сумм
	Разница = (Окр(СуммаБезНДС,2) + Окр(НДС,2)) - Окр(суммаСНДС,2);
	Если ПустоеЗначение(Разница) = 0 Тогда
		ТекстСообщения = "Сумма без НДС ( "+СуммаБезНДС+" ) и сумма с НДС ( "+СуммаСНДС+" ) были округлены в большую сторону. Ошибка при округлении составляет :"+Разница+" 
		|Суммы необходимо откорректировать вручную!";
	    глКомментарий(ТекстСообщения,,,"!");
	КонецЕсли;
КонецПроцедуры //глПроверкаНДСВДокументе

Процедура глИзмПроцСписания(Конт, Жостко = 0) Экспорт
	Если Жостко = 0 Тогда
		Если (Конт.КвоСписания <> 0) и (Конт.ПроцСписания = 0) Тогда
			Возврат;	    
		КонецЕсли;	    
	КонецЕсли;
	
	Конт.КвоСписания 	= Окр(?(Конт.Вид() = "ПереработкаМяса", Конт.ВесФакт, Конт.Кво)	* (Конт.ПроцСписания / 100), 1);
	Если Конт.Вид() <> "ПереработкаМяса" Тогда
	    Конт.ДопКвоСписания = Окр(Конт.ДопКво	* (Конт.ПроцСписания / 100), 1);
	КонецЕсли;	
КонецПроцедуры

// ===============================
// Вычисляет суммы в строке накладной
// Параметры:
// ЧтоИзменилось - указывает, какой реквизит изменился
// 0 - Кво, Ед, и т.д
//-1 - ЦенаБезНДС
// 1 - ЦенаСНДС
// 2 - СуммаБезСкидки,Скидка
// 3 - СуммаБезНДС
// 4 - СуммаСНДС,СуммаБезНДСгрн,СуммаАкциза,СуммаПошлины,СуммаУслуг,СуммаПеревозки в ГТД       
// 5 - НДС
Процедура глВыч_суммы_накл(Конт,ЧтоИзменилось=0) Экспорт  
	Перем ЕстьСкидка,ВремСумма,ВсемЦена,ВидНДС;    
	          
	Количество = Конт.Кво;
	
	Если (глЕстьРеквизитМнЧ("КвоШт", Конт.Вид()) = Да) //--- УМК Сандомирский В.Ю, (25.11.14)
		И (глЕстьРеквизитМнЧ("КвоПересчет", Конт.Вид()) = Да) 
		И (Количество = 0) Тогда
		
			
		Если (ПустоеЗначение(Конт.ВидУпаковки) = 1) ИЛИ (Конт.ВидУпаковки = НетУп)  Тогда
			Конт.КвоПересчет = Конт.КвоШт * Конт.ТМЦ.Вес;
		Иначе		
			РазрешенныйВидУпаковкиТМЦ =  глПолучитьРазрешенныйВидУпаковки(Конт.ТМЦ,Конт.ВидУпаковки);
			Если ПустоеЗначение(РазрешенныйВидУпаковкиТМЦ) <> 1 Тогда
				Конт.КвоПересчет = Конт.КвоШт * РазрешенныйВидУпаковкиТМЦ.ВесУпаковки.Получить(Конт.ДатаДок);	
			КонецЕсли;	
		КонецЕсли;	
			
		Количество = Конт.КвоПересчет;		
	КонецЕсли; //... УМК Сандомирский В.Ю, (25.11.14)
	
	
	Если ЧтоИзменилось = 0 Тогда
		Попытка
			глИзмПроцСписания(Конт);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	СчитатьПоФ1 = 0;
	Если глЕстьРеквизитШапки("Ф1", Конт.Вид()) = Да Тогда
	    СчитатьПоФ1 = Конт.Ф1;
	КонецЕсли;
	Если (СчитатьПоФ1 = 0) И (глЕстьРеквизитШапки("Ф1", Конт.Вид()) = Да) Тогда
		СчитатьПоФ1 = Конт.Контрагент.Ф1Округление.Получить(Конт.ДатаДок);
	КонецЕсли;
	
	Если глЕстьРеквизитШапки("МестоХранения", Конт.Вид()) = Да Тогда
		Если Конт.МестоХранения.Вид() = "МестаХранения" Тогда
			Если Конт.МестоХранения.СуммовойУчет=1 Тогда
				Если Конт.Вид() = "Перемещение" Тогда
					Если Конт.НовоеМестоХранения.СуммовойУчет = 1 Тогда
						// нельзя изменять количество при перемещении на склад с суммовым учетом
						Количество = 1;
					КонецЕсли;
				Иначе
					Количество = 1;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Если глЕстьРеквизитМнЧ("ТМЦ", Конт.Вид()) = Да Тогда
		Товар = Конт.ТМЦ;
	ИначеЕсли глЕстьРеквизитМнЧ("Услуга", Конт.Вид()) = Да Тогда
		Товар = Конт.Услуга;
	ИначеЕсли глЕстьРеквизитМнЧ("НеоборотныйАктив", Конт.Вид()) = Да Тогда
		Товар = Конт.НеоборотныйАктив;
	ИначеЕсли глЕстьРеквизитМнЧ("Продукция", Конт.Вид()) = Да Тогда
		Товар = Конт.Продукция;	
	КонецЕсли; // umk + 

	Если ПустоеЗначение(Товар) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВидДок = Конт.Вид();
	
	ВидНДС = 0;
	Если глЕстьРеквизитШапки("ВидНДС", ВидДок)= Да Тогда
		Если Конт.ВидНДС <> ОсновнаяСтавкаНДС Тогда
			ВидНДС = Конт.ВидНДС;
		КонецЕсли;
	КонецЕсли;                    
	Если Товар.Вид() = "ТМЦ" Тогда
		Если (Товар.ВидТМЦ = Перечисление.ВидыТМЦ.Тара) Тогда
		    Если глЕстьРеквизитШапки("ВидТары", ВидДок)= Да Тогда
				Если Конт.ВидТары <> Перечисление.ВидыТары.Покупная Тогда
					ВидНДС = БезНДС;
				КонецЕсли;
		    КонецЕсли;
		КонецЕсли;
	
		Если ПустоеЗначение(ВидНДС)=1 Тогда
			ВидНДС = Товар.СтавкаНДС;
		ИначеЕсли (ВидНДС.Код = "НДС20") Тогда
			ВидНДС = Товар.СтавкаНДС;
		КонецЕсли;
	Иначе
		// для не ТМЦ ставку берем из документа        
		// если она там указна
		Если ((глЕстьРеквизитШапки("ВидНДС", ВидДок)= Да)
		ИЛИ (глЕстьРеквизитМнЧ("ВидНДС", ВидДок)= Да)) Тогда
			ВидНДС = Конт.ВидНДС;
		КонецЕсли;	
	КонецЕсли;
	
	ПроцНДС = глПроцентНДС(ВидНДС,Конт.ДатаДок);
	ЦенаБылаРавна = 0;
	
	Если (ВидДок = "ПриходнаяНакладнаяГТД") Тогда
		// Считавем от цены без НДС, не зависимо от константы ОсновнаяЦена
		Если ЧтоИзменилось < 4 Тогда
			Если ЧтоИзменилось < 2 Тогда
				Конт.СуммаБезНДСВал = Окр(Конт.ЦенаБезНДС*Количество,глТочностьСуммВДок-1);
			КонецЕсли;      
			// рассчитаем автосумму ( это будет сумму без НДС)
			Конт.СуммаБезНДС = глПересчет(Конт.СуммаБезНДСВал, Конт.Валюта, Гривня, Конт.Курс, Конт.ДатаДок);
			// и неавтосумму
			Конт.СуммаСНДС = Конт.СуммаБезНДС*(100+ПроцНДС)/100;
		КонецЕсли;
		Если ЧтоИзменилось < 5 Тогда
			// изменилась сумма с ндс или без НДС
			Конт.НДС = Конт.СуммаСНДС - Конт.СуммаБезНДС;
		Иначе	               
			// изменилась сумма НДС
			Конт.СуммаСНДС = Конт.СуммаБезНДС + Конт.НДС;
		КонецЕсли;	
	ИначеЕсли (ВидДок = "ЗаказПоставщику") ИЛИ (ВидДок = "ЗаказПоставщикуП") Тогда
		Конт.СуммаСНДС = Конт.ЦенаСНДС * Конт.Кво;
	ИначеЕсли ВидДок = "ВыпускПродукции" Тогда
		Конт.СуммаСНДС = Конт.ЦенаСНДС * Конт.КвоГПприемки;	
	ИначеЕсли ((ВидДок = "ПриходнаяНакладнаяЗапасы") 
	ИЛИ (ВидДок = "ПриходнаяНакладнаяПрочие")
	ИЛИ (ВидДок = "СчетВходящий")) Тогда
		Если Константа.ОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаСНДС Тогда
			// Считаем от цены с НДС
			Если ЧтоИзменилось < 2 Тогда
				Если ЧтоИзменилось=-1 Тогда
					Конт.ЦенаСНДС = Конт.ЦенаБезНДС*(100+ПроцНДС)/100;
				КонецЕсли;
				Конт.ЦенаБезНДС = Конт.ЦенаСНДС*100/(100+ПроцНДС);
				Конт.СуммаСНДС = Окр(Конт.ЦенаСНДС*Количество,глТочностьСуммВДок-1);  // автосумма
				Конт.СуммаБезНДС = Конт.СуммаСНДС - Окр(Конт.СуммаСНДС * ПроцНДС/(100+ПроцНДС),глТочностьСуммВДок); // неавтосумма
			КонецЕсли;
			Если ЧтоИзменилось = 4 Тогда
				// изменилась автосумма, пересчитаем  неавтосумму
				Конт.СуммаБезНДС = Конт.СуммаСНДС - Окр(Конт.СуммаСНДС * ПроцНДС/(100+ПроцНДС),глТочностьСуммВДок);
			КонецЕсли;
			Если ЧтоИзменилось < 5 Тогда
				// изменилась сумма с НДС или без НДС
				Конт.НДС = Конт.СуммаСНДС - Конт.СуммаБезНДС;
			Иначе     
				// изменилась сумма НДС
				Конт.СуммаБезНДС = Конт.СуммаСНДС - Конт.НДС;
			КонецЕсли;	
		Иначе
			// Считаем от цены без НДС
			Если ЧтоИзменилось < 4 Тогда
				Если ЧтоИзменилось < 3 Тогда
					Если ЧтоИзменилось < 2 Тогда
						Если ЧтоИзменилось=1 Тогда
							Конт.ЦенаБезНДС = Конт.ЦенаСНДС*100/(100+ПроцНДС);
						КонецЕсли;
						Конт.ЦенаСНДС = Конт.ЦенаБезНДС*(100+ПроцНДС)/100;
					КонецЕсли;
					Конт.СуммаБезНДС = Окр(Конт.ЦенаБезНДС*Количество,глТочностьСуммВДок-1);  // автосумма
				КонецЕсли;
				// изменилась автосумма, пересчитаем  неавтосумму
				Конт.СуммаСНДС = Конт.СуммаБезНДС*(100+ПроцНДС)/100;
			КонецЕсли;                                              
			Если ЧтоИзменилось < 5 Тогда
				// изменилась сумма с ндс или без НДС
				Конт.НДС = Конт.СуммаСНДС - Конт.СуммаБезНДС;
			Иначе     
				// изменилась сумма НДС
				Конт.СуммаСНДС = Конт.СуммаБезНДС + Конт.НДС;
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли (ВидДок = "РасходнаяРозничная") 
	или (ВидДок = "ОтчетКА") или (ВидДок = "Перемещение") 
	или (ВидДок = "ВозвратРозница") или (ВидДок = "РозничнаяНакладная") Тогда
		Если ((глЕстьРеквизитМнЧ("СуммаСНДС", ВидДок) = Да) и 
		(глЕстьРеквизитМнЧ("ЦенаСНДС", ВидДок) = Да)) Тогда
			Конт.СуммаСНДС= Конт.ЦенаСНДС*Количество;  // автосумма
		КонецЕсли;
		Если ЧтоИзменилось = 0 Тогда
			Если глЕстьРеквизитМнЧ("ЦенаУчБезНДС", ВидДок) = Да Тогда
				// если есть ЦенаУчБезНДС, значит СуммаУчБезНДС тоже есть
				// документ - ВозвратРозница
				Конт.СуммаУчБезНДС = Конт.ЦенаУчБезНДС*Количество*Конт.Коэффициент;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (ВидДок = "ОприходованиеИзлишков") Тогда
		Конт.СуммаБезНДС = Конт.ЦенаБезНДС*Количество;   
	ИначеЕсли (ВидДок = "Приложение1") Тогда
		Если Константа.ОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаСНДС Тогда
			// Считаем от цены с НДС
			Если ЧтоИзменилось=-1 Тогда
				Конт.ЦенаСНДС = Конт.ЦенаБезНДС*(100+ПроцНДС)/100;
			КонецЕсли;
			// берем неокругленную цену без НДС для точного пересчета суммы
			ВремЦена = Конт.ЦенаСНДС*100/(100+ПроцНДС);
			Конт.ЦенаБезНДС = ВремЦена;
		Иначе
			Если ЧтоИзменилось=1 Тогда
				Конт.ЦенаБезНДС = Конт.ЦенаСНДС*100/(100+ПроцНДС);
			КонецЕсли;
			Конт.ЦенаСНДС = Конт.ЦенаБезНДС*(100+ПроцНДС)/100;
			ВремЦена = Конт.ЦенаБезНДС;
		КонецЕсли;
		Конт.КвоОст = Конт.Кво - Конт.КвоОтгр;
		Конт.СуммаБезНДС = ВремЦена*Конт.Кво;
		Конт.СуммаБезНДСОтгр = ВремЦена*Конт.КвоОтгр;
		Конт.НДСОтгр = Конт.СуммаБезНДСОтгр*ПроцНДС/100;
	ИначеЕсли (ВидДок = "Приложение2") Тогда
		Если ЧтоИзменилось>2 Тогда
			Если ЧтоИзменилось <5 Тогда
				Конт.ИзмНДС = Конт.ИзмСуммыСНДС - Конт.ИзмСуммыБезНДС;
			ИначеЕсли ЧтоИзменилось = 5 Тогда
				Если Константа.ОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаСНДС Тогда
					Конт.ИзмСуммыБезНДС = Конт.ИзмСуммыСНДС - Конт.ИзмНДС;
				Иначе
					Конт.ИзмСуммыСНДС = Конт.ИзмСуммыБезНДС + Конт.ИзмНДС;
				КонецЕсли;	
			КонецЕсли;
		Иначе
			Если Константа.ОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаСНДС Тогда
				// Считаем от цены с НДС
				Если ЧтоИзменилось=-1 Тогда
					Конт.ЦенаСНДС = Конт.ЦенаБезНДС*(100+ПроцНДС)/100;
				КонецЕсли;
				Конт.ЦенаБезНДС = Конт.ЦенаСНДС*100/(100+ПроцНДС);
				Конт.СуммаБезНДС = (Конт.ЦенаСНДС*Конт.Кво)*100/(100+ПроцНДС);
				Конт.ИзмСуммыБезНДС = (Конт.ЦенаСНДС * Конт.ИзмКво + Конт.Кво * Конт.ИзмЦены)*100/(100+ПроцНДС);
			Иначе
				Если ЧтоИзменилось=1 Тогда
					Конт.ЦенаБезНДС = Конт.ЦенаСНДС*100/(100+ПроцНДС);
				КонецЕсли;
				Конт.ЦенаСНДС = Конт.ЦенаБезНДС*(100+ПроцНДС)/100;
				Конт.СуммаБезНДС = Конт.ЦенаБезНДС*Конт.Кво;
				Конт.ИзмСуммыБезНДС = Конт.ЦенаБезНДС * Конт.ИзмКво + Конт.Кво * Конт.ИзмЦены;
			КонецЕсли;
			Конт.ИзмНДС = Конт.ИзмСуммыБезНДС * ПроцНДС/100;
			Конт.ИзмСуммыСНДС = Конт.ИзмСуммыБезНДС + Конт.ИзмНДС;
		КонецЕсли;
	ИначеЕсли (ВидДок = "ЛиквидацияНеоборАктивов") Или (ВидДок = "СписаниеТМЦ") Тогда
		// все считаем от цены безНДС
		Если ЧтоИзменилось < 3 Тогда
			Конт.СуммаБезНДС = Окр(Конт.ЦенаБезНДС*Количество,глТочностьСуммВДок-1);  // автосумма
			Конт.СуммаСНДС 	= Конт.СуммаБезНДС*(100+ПроцНДС)/100;  // неавтосумма
			Конт.НДС = Конт.СуммаСНДС - Конт.СуммаБезНДС;
		ИначеЕсли ЧтоИзменилось < 5 Тогда
			Конт.НДС = Конт.СуммаСНДС - Конт.СуммаБезНДС;
		Иначе
			Конт.СуммаСНДС = Конт.СуммаБезНДС*(100+ПроцНДС)/100;  // неавтосумма
		КонецЕсли;
	ИначеЕсли ВидДок = "ВозвратТМЦИзПроизводства" Тогда
		// все считаем от цены безНДС
		Если ЧтоИзменилось = -1 Тогда
			Конт.СуммаБезНДС = Окр(Конт.ЦенаБезНДС*Количество,глТочностьСуммВДок-1);  // автосумма
		    Конт.СуммаДав = Конт.СуммаБезНДС;
			Если (глЭтоДавальческийЗаказ(Конт.Заказ) =1)  Тогда
				Если ((Товар.ВидТМЦ = Перечисление.ВидыТМЦ.Продукция) или (Товар.ВидТМЦ = Перечисление.ВидыТМЦ.Полуфабрикат))  Тогда
					Если Конт.СуммаДав > Конт.СуммаБезНДС Тогда
					    Конт.СуммаДав = Конт.СуммаБезНДС;
					КонецЕсли;
				Иначе
					Если Конт.СуммаДав > 0 Тогда
					    Конт.СуммаДав = Конт.СуммаБезНДС;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Конт.СуммаДав = 0;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (Константа.ОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаСНДС) Тогда
		ЕстьНДС = глЕстьРеквизитМнЧ("НДС", ВидДок);
		ЕстьСкидка = глЕстьРеквизитМнЧ("Скидка", ВидДок);
		ЕстьСкидка = ?(Константа.ИспользоватьСкидку=Нет,Нет,ЕстьСкидка);
	    // все считаем от цены СНДС
		Если ЧтоИзменилось < 3 Тогда
			Если ЧтоИзменилось<2 Тогда
				Если глЕстьРеквизитМнЧ("ЦенаБезНДС", ВидДок) = Да Тогда
					Если ЧтоИзменилось=-1 Тогда
						Конт.ЦенаСНДС = Конт.ЦенаБезНДС*(100+ПроцНДС)/100;
					КонецЕсли;
					Конт.ЦенаБезНДС = Конт.ЦенаСНДС*100/(100+ПроцНДС);
					ВремСумма = Окр(Конт.ЦенаСНДС*Количество,глТочностьСуммВДок-1);  // это будет автосумма
					Если ЕстьСкидка = Да Тогда
						Конт.СуммаБезСкидки = ВремСумма;
					Иначе
						Конт.СуммаСНДС = ВремСумма;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ЕстьСкидка = Да Тогда
				// если изменяли скидку или сумму без скидки ...
				Если ЧтоИзменилось = 2 Тогда
				    // надо проверить, чтоб сумма скидки не была больше, чем сумма в строке
					Если Конт.Скидка > Конт.СуммаБезСкидки Тогда
						// если сумма скидки больше суммы без скидки, то скидку делаем равной сумме без скидки
						Конт.Скидка = Конт.СуммаБезСкидки; 
					КонецЕсли;	
				КонецЕсли;
				Конт.СуммаСНДС = Конт.СуммаБезСкидки - Конт.Скидка; // рассчитываем автосумму при наличии скидки
			КонецЕсли;
			Если глЕстьРеквизитМнЧ("СуммаБезНДС", ВидДок) = Да Тогда
				Конт.СуммаБезНДС = Конт.СуммаСНДС - Окр(Конт.СуммаСНДС * ПроцНДС/(100+ПроцНДС),глТочностьСуммВДок);  // неавтосумма
			КонецЕсли;
			Если ЕстьНДС = Да Тогда
				Конт.НДС = Конт.СуммасНДС - Конт.СуммаБезНДС;
			КонецЕсли;
		КонецЕсли;
		Если ЧтоИзменилось = 4 Тогда
			Если ЕстьСкидка = Да Тогда
				// пересчитаем сумму без скидки
			   	Конт.Скидка			= Макс(Конт.Скидка, -Конт.СуммаСНДС); 
	   			Конт.СуммаБезСкидки = Конт.СуммаСНДС + Конт.Скидка;
			КонецЕсли;	
			// изменилась автосумма, пересчитаем  неавтосумму
			Конт.СуммаБезНДС = Конт.СуммаСНДС - Окр(Конт.СуммаСНДС * ПроцНДС/(100+ПроцНДС),глТочностьСуммВДок);
		КонецЕсли;
		Если ЧтоИзменилось < 5 Тогда
			Если ЕстьНДС = Да Тогда
				Конт.НДС = Конт.СуммасНДС - Конт.СуммаБезНДС;
			КонецЕсли;
		Иначе		
			Если глЕстьРеквизитМнЧ("СуммаБезНДС", ВидДок) = Да Тогда
				Конт.СуммаБезНДС = Конт.СуммаСНДС - Конт.НДС; // неавтосумма
			КонецЕсли;
		КонецЕсли;
	Иначе        
		ЕстьНДС = глЕстьРеквизитМнЧ("НДС", ВидДок);
		ЕстьСкидка = глЕстьРеквизитМнЧ("Скидка", ВидДок);
		ЕстьСкидка = ?(Константа.ИспользоватьСкидку=Нет,Нет,ЕстьСкидка);
		ЕстьЦенаБезСкидки = глЕстьРеквизитМнЧ("ЦенаБезСкидки", ВидДок);
		ЦеныБылиРавны = 0;
		Если (глЕстьРеквизитМнЧ("ЦенаСНДС", ВидДок) = Да) И (ЕстьЦенаБезСкидки = Да) Тогда
			ЦеныБылиРавны = ?(Конт.ЦенаБезСкидки = Конт.ЦенаСНДС, 1, 0);
		КонецЕсли;
		
		// все считаем от цены безНДС
		Если ЧтоИзменилось < 4 Тогда
			Если ЧтоИзменилось<2 Тогда
				Если глЕстьРеквизитМнЧ("ЦенаБезНДС", ВидДок) = Да Тогда
					Если ЧтоИзменилось = 1 Тогда
						Конт.ЦенаБезНДС = Конт.ЦенаСНДС*100/(100+ПроцНДС);
						Если СчитатьПоФ1 = 1 Тогда
						    Конт.ЦенаБезНДС = Окр(Конт.ЦенаБезНДС, 2);
						КонецЕсли;
					КонецЕсли;
					Если глЕстьРеквизитМнЧ("ЦенаСНДС", ВидДок) = Да Тогда
						Конт.ЦенаСНДС = Окр(Конт.ЦенаБезНДС*(100+ПроцНДС)/100, 2);
					КонецЕсли;
					ВремСумма = Окр(Конт.ЦенаБезНДС*Количество,глТочностьСуммВДок-1);  // это будет автосумма
					Если ЕстьСкидка = Да Тогда
						Конт.СуммаБезСкидки = ВремСумма;
					Иначе
						Конт.СуммаБезНДС = ВремСумма;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ЕстьСкидка = Да Тогда
				// если изменяли скидку или сумму без скидки ...
				Если ЧтоИзменилось = 2 Тогда
				    // надо проверить, чтоб сумма скидки не была больше, чем сумма в строке
					Если Конт.Скидка > Конт.СуммаБезСкидки Тогда
						// если сумма скидки больше суммы без скидки, то скидку делаем равной сумме без скидки
						Конт.Скидка = Конт.СуммаБезСкидки; 
					КонецЕсли;	
				КонецЕсли;	
				Конт.СуммаБезНДС = Конт.СуммаБезСкидки-Конт.Скидка; // расчет автосуммы при наличии скидки
			КонецЕсли;
			Если (глЕстьРеквизитМнЧ("СуммаСНДС", ВидДок) = Да) И 
			(глЕстьРеквизитМнЧ("СуммаБезНДС", ВидДок) = Да) Тогда
				Конт.СуммаСНДС = Конт.СуммаБезНДС*(100+ПроцНДС)/100;  // неавтосумма
			КонецЕсли;
			Если (СчитатьПоФ1 = 0) И ((ВидДок = "РасходнаяНакладная") ИЛИ (ВидДок = "ВозвратнаяНакладная") ИЛИ (ВидДок = "СчетФактура")) Тогда //--- УМК Сандомирский В.Ю. (19.06.14) исправлена ошибка пересчета цен в док СчетФактура теперь как в РН
				Конт.СуммаСНДС = Окр(Конт.ЦенаСНДС * Количество, 2);
				Конт.СуммаБезНДС = Конт.СуммаСНДС / ((100+ПроцНДС)/100);
				Если (Конт.Вид() = "РасходнаяНакладная") ИЛИ (Конт.Вид() = "СчетФактура") Тогда //--- УМК Сандомирский В.Ю. (19.06.14) исправлена ошибка пересчета цен в
				    Конт.СуммаБезСкидки = Конт.СуммаБезНДС;
				КонецЕсли;				
			КонецЕсли;
			Если ЕстьНДС = Да Тогда
				Конт.НДС = Конт.СуммасНДС - Конт.СуммаБезНДС;
			КонецЕсли;
		КонецЕсли;
		Если ЧтоИзменилось =4 Тогда
			Если ЕстьСкидка = Да Тогда
				Конт.Скидка			= Макс(Конт.Скидка, -Конт.СуммаБезНДС); 
				Конт.СуммаБезСкидки = Конт.СуммаБезНДС + Конт.Скидка;			
			КонецЕсли;
		КонецЕсли;
		Если ЧтоИзменилось < 5 Тогда
			Если ЕстьНДС = Да Тогда
				Конт.НДС = Конт.СуммасНДС - Конт.СуммаБезНДС;
			КонецЕсли;
		Иначе
			Если (глЕстьРеквизитМнЧ("СуммаСНДС", ВидДок) = Да) И 
			(глЕстьРеквизитМнЧ("СуммаБезНДС", ВидДок) = Да) Тогда        
				Конт.СуммаСНДС = Конт.СуммаБезНДС + Конт.НДС; // неавтосумма
			КонецЕсли;
		КонецЕсли;
		Если (ЕстьЦенаБезСкидки = Да) И (ЦеныБылиРавны = 1) Тогда
			Конт.ЦенаБезСкидки = Конт.ЦенаСНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если (глЕстьРеквизитМнЧ("СуммаУпаковки", ВидДок) = Да) Тогда //--- УМК Сандомирский В.Ю,(24.11.14) расчет суммы упаковки
		Конт.СуммаУпаковки = Конт.ЦенаУпаковки * Количество;
	КонецЕсли; //... УМК Сандомирский В.Ю,(24.11.14) расчет суммы упаковки	
КонецПроцедуры

Процедура глРассчитатьПересчетКво(Конт) Экспорт
	Если (ПустоеЗначение(Конт.ВидУпаковки) = 1) ИЛИ (Конт.ВидУпаковки = НетУп)  Тогда //--- УМК Сандомирский В.Ю. (02.07.15)
		Конт.КвоПересчет = Конт.Кво + Конт.КвоШт * Конт.ТМЦ.Вес;
	Иначе	
		РазрешенныйВидУпаковкиТМЦ = глПолучитьРазрешенныйВидУпаковки(Конт.ТМЦ, Конт.ВидУпаковки);
		Если ПустоеЗначение(РазрешенныйВидУпаковкиТМЦ) <> 1 Тогда
			Конт.КвоПересчет = Конт.Кво + Конт.КвоШт * РазрешенныйВидУпаковкиТМЦ.ВесУпаковки.Получить(Конт.ДатаДок) * глПолучитьВычитатьВес(Конт, Конт.ДатаДок);
		КонецЕсли;		
	КонецЕсли;
	
	глВыч_Суммы_Накл(Конт);
КонецПроцедуры

Функция глПолучитьПроцентСписания(Товар, Склад, ДатаДок) Экспорт
	СпрМХ = СоздатьОбъект("Справочник.ПроцентыСписания");
	СпрМХ.ИспользоватьВладельца(Товар);
	СпрМХ.ВыбратьЭлементыПоРеквизиту("МестоХранения", Склад, 1, 0);	
	Пока СпрМХ.ПолучитьЭлемент() = 1 Цикл
		Если СпрМХ.ПометкаУдаления() = 0 Тогда
			Возврат СпрМХ.ПроцСписания.Получить(ДатаДок);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Товар.ПроцСписания.Получить(ДатаДок);
КонецФункции

//======================================================================================= //--- УМК Сандомирский В.Ю,(20.03.14)
Функция глПолучитьЦенуВУП_старая(Конт, КатегорияЦен, ДДок, ВалДок, ДатаКурса, Товар) Экспорт

КонецФункции

//======================================================================================= //--- УМК Сандомирский В.Ю,(24.03.14)
Функция ПолучитьКолонку(ТЗнач,НаимКолонки) Экспорт
    Перем Заголовок;
    Для Сч = 1 По ТЗнач.КоличествоКолонок() Цикл
        Если нРег(ТЗнач.ПолучитьПараметрыКолонки(Сч,,,,Заголовок,,,)) = нРег(НаимКолонки) Тогда
            Возврат Сч;
        КонецЕсли;
    КонецЦикла; 
    Возврат 0;
КонецФункции

//======================================================================================= //--- УМК Сандомирский В.Ю,(11.09.14) Расчет цены упаковки от УМК_ДатаНачалаГрупУпаковок !!!!!! добавить в глПолучитьЦенуВУП
Функция глПолучитьЦенуУпаковки(ТекТМЦ,ТекВидУпаковки,ТекДата,КатегорияЦены = "", СтрогоПоКатегории = 0, Действует = 0) Экспорт
	Если ПустоеЗначение(ТекВидУпаковки) = 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	СпрРазрешенныеВидвУпаковкиТМЦ = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
	Если ТекВидУпаковки.Вид() = "ВидыУпаковки" Тогда		
		СпрРазрешенныеВидвУпаковкиТМЦ.ИспользоватьВладельца(ТекТМЦ);		
		Если СпрРазрешенныеВидвУпаковкиТМЦ.НайтиПоРеквизиту("ВидУпаковки",ТекВидУпаковки,0) = 0 Тогда
			ЕстьЦенаПоТМЦ = 1;
			Возврат ?(СтрогоПоКатегории = 1, 0, ТекВидУпаковки.Цена.Получить(ТекДата));
		КонецЕсли;
	Иначе
		СпрРазрешенныеВидвУпаковкиТМЦ.НайтиЭлемент(ТекВидУпаковки);
	КонецЕсли;
	
	// поищем исключение для типа цен
	СпрЦеныУп = СоздатьОбъект("Справочник.УМК_ЦеныУпаковки");
	СпрЦеныУп.ИспользоватьВладельца(СпрРазрешенныеВидвУпаковкиТМЦ.ТекущийЭлемент());
	Если КатегорияЦены <> "" Тогда
		Если СпрЦеныУп.НайтиПоРеквизиту("КатегорияЦены", КатегорияЦены, 0) = 1 Тогда			
			Если (СпрЦеныУп.ПометкаУдаления() = 0) Тогда
				Действует = СпрЦеныУп.Действует.Получить(ТекДата);
				Если Действует = 1 Тогда
					Возврат СпрЦеныУп.Цена.Получить(ТекДата);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрогоПоКатегории = 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат СпрРазрешенныеВидвУпаковкиТМЦ.Цена.Получить(ТекДата);		
КонецФункции

//======================================================================================= //--- УМК Сандомирский В.Ю, (20.03.14) (24.03.14) (06.10.14) (10.11.14)
Функция глПолучитьЦенуВУП(Конт, КатегорияЦен, ДДок, ВалДок, ДатаКурса, Товар) Экспорт	
	//--- В таблице значений	
	Цена = 0;
	
	Если ТипЗначенияСтр(Конт) = "ТаблицаЗначений" Тогда	
		Если ПолучитьКолонку(Конт,"ВУП") > 0 Тогда   //--- ищем колонку "ВУП"
			ВУП = Конт.ВУП;
		ИначеЕсли ПолучитьКолонку(Конт,"ВидУпаковки") > 0 	Тогда		//--- Ищем колонку "ВидУпаковки"
			ВУП = Конт.ВидУпаковки;
		КонецЕсли;
		
	Иначе
		Если глЕстьРеквизитМнЧ("ВУП", Конт.Вид()) = Да Тогда
			ВУП = Конт.ВУП;
		ИначеЕсли глЕстьРеквизитМнЧ("ВидУпаковки", Конт.Вид()) = Да Тогда
			ВУП = Конт.ВидУпаковки;
		КонецЕсли;
	КонецЕсли;

	Попытка
		Если (ПустоеЗначение(ВУП) = 1) ИЛИ (ВУП.Код = 0) Тогда
			Возврат 0;
		Иначе
			ЕстьЦенаПоТМЦ = 0;					
			Если (ПустоеЗначение(Константа.УМК_ДатаНачалаГрупУпаковок) <> 1) //--- УМК Сандомирский В.Ю. (06.10.14)
				И (Константа.УМК_ДатаНачалаГрупУпаковок <= ДДок)  Тогда 					
				ТекТМЦ = Товар; //ТекТМЦ = Конт.ТМЦ; 					//--- УМК Сандомирский В.Ю. (10.11.14) исправил
				Цена = глПолучитьЦенуУпаковки(ТекТМЦ,ВУП,ДДок, КатегорияЦен);
			Иначе //--- по старому					
				СпрЦеныУп = СоздатьОбъект("Справочник.ЦеныУпаковкиПоТМЦ");
				СпрЦеныУп.ИспользоватьВладельца(ВУП);
				Если СпрЦеныУп.НайтиПоРеквизиту("ТМЦ", Товар, 0) = 1 Тогда
					Если СпрЦеныУп.ПометкаУдаления() = 0 Тогда
					    Цена = СпрЦеныУп.Цена.Получить(ДДок);
						ЕстьЦенаПоТМЦ = 1;
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьЦенаПоТМЦ = 0 Тогда
					Цена = Конт.ВУП.Цена.Получить(ДДок);
				КонецЕсли;					
			КонецЕсли;	
		КонецЕсли;
	Исключение КонецПопытки;
	
	Возврат глПересчет(Цена,Гривня,ДДок,ВалДок,ДатаКурса);	//	
	//		Попытка
	//			Если (ПустоеЗначение(Конт.ВУП) = 1) ИЛИ (Конт.ВУП.Код = 0) Тогда
	//				Возврат 0;
	//			Иначе
	//				ЕстьЦенаПоТМЦ = 0;					
	//				Если (ПустоеЗначение(Константа.УМК_ДатаНачалаГрупУпаковок) <> 1) //--- УМК Сандомирский В.Ю. (06.10.14)
	//					И (Константа.УМК_ДатаНачалаГрупУпаковок <= ДДок)  Тогда 					
	//					ТекТМЦ = Товар; //ТекТМЦ = Конт.ТМЦ; 					//--- УМК Сандомирский В.Ю. (10.11.14) исправил
	//					Цена = глПолучитьЦенуУпаковки(ТекТМЦ,Конт.ВУП,ДДок);							
	//				Иначе //--- по старому					
	//					СпрЦеныУп = СоздатьОбъект("Справочник.ЦеныУпаковкиПоТМЦ");
	//					СпрЦеныУп.ИспользоватьВладельца(Конт.ВУП);
	//					Если СпрЦеныУп.НайтиПоРеквизиту("ТМЦ", Товар, 0) = 1 Тогда
	//						Если СпрЦеныУп.ПометкаУдаления() = 0 Тогда
	//						    Цена = СпрЦеныУп.Цена.Получить(ДДок);
	//							ЕстьЦенаПоТМЦ = 1;
	//						КонецЕсли;
	//					КонецЕсли;
	//					
	//					Если ЕстьЦенаПоТМЦ = 0 Тогда
	//						Цена = Конт.ВУП.Цена.Получить(ДДок);
	//					КонецЕсли;					
	//				КонецЕсли;						
	//			КонецЕсли;			
	//		Исключение 	КонецПопытки;  //--- Не работае тчо то с упаковкой			
	//		Возврат глПересчет(Цена,Гривня,ДДок,ВалДок,ДатаКурса);
	//	ИначеЕсли ПолучитьКолонку(Конт,"ВидУпаковки") > 0 	Тогда		//--- Ищем колонку "ВидУпаковки"
	//		Цена = 0; 
	//		Попытка				
	//			Если (ПустоеЗначение(Конт.ВидУпаковки) = 1) ИЛИ (Конт.ВидУпаковки.Код = 0) Тогда
	//				Возврат 0;
	//			Иначе					
	//				Если (ПустоеЗначение(Константа.УМК_ДатаНачалаГрупУпаковок) <> 1) //--- УМК Сандомирский В.Ю. (06.10.14)
	//				И (Константа.УМК_ДатаНачалаГрупУпаковок <= ДДок)  Тогда 				
	//					ТекТМЦ = Товар; //ТекТМЦ = Конт.ТМЦ; 					//--- УМК Сандомирский В.Ю. (10.11.14)
	//					Цена = глПолучитьЦенуУпаковки(ТекТМЦ,Конт.ВидУпаковки,ДДок);							
	//				Иначе //--- по старому						
	//					ЕстьЦенаПоТМЦ = 0;
	//					СпрЦеныУп = СоздатьОбъект("Справочник.ЦеныУпаковкиПоТМЦ");
	//					СпрЦеныУп.ИспользоватьВладельца(Конт.ВидУпаковки);
	//					Если СпрЦеныУп.НайтиПоРеквизиту("ТМЦ", Товар, 0) = 1 Тогда
	//						Если СпрЦеныУп.ПометкаУдаления() = 0 Тогда
	//						    Цена = СпрЦеныУп.Цена.Получить(ДДок);
	//							ЕстьЦенаПоТМЦ = 1;
	//						КонецЕсли;
	//					КонецЕсли;
	//					
	//					Если ЕстьЦенаПоТМЦ = 0 Тогда
	//						Цена = Конт.ВидУпаковки.Цена.Получить(ДДок);
	//					КонецЕсли;					
	//				КонецЕсли;						
	//			КонецЕсли;			
	//		Исключение 	КонецПопытки;  //--- Не работае тчо то с упаковкой			
	//		Возврат глПересчет(Цена,Гривня,ДДок,ВалДок,ДатаКурса);		
	//	КонецЕсли;		
	//Иначе	
	//	//--- В документах
	//	Если глЕстьРеквизитМнЧ("ВУП", Конт.Вид()) = Да Тогда		
	//		Цена = 0; 
	//		Попытка				
	//			Если (ПустоеЗначение(Конт.ВУП) = 1) ИЛИ (Конт.ВУП.Код = 0) Тогда
	//				Возврат 0;
	//			Иначе					
	//				Если (ПустоеЗначение(Константа.УМК_ДатаНачалаГрупУпаковок) <> 1) //--- УМК Сандомирский В.Ю. (06.10.14)
	//					И (Константа.УМК_ДатаНачалаГрупУпаковок <= ДДок)  Тогда 					
	//					ТекТМЦ = Товар; //ТекТМЦ = Конт.ТМЦ; 					//--- УМК Сандомирский В.Ю. (10.11.14) исправил
	//					Цена = глПолучитьЦенуУпаковки(ТекТМЦ,Конт.ВУП,ДДок);						
	//				Иначе						
	//					ЕстьЦенаПоТМЦ = 0;
	//					СпрЦеныУп = СоздатьОбъект("Справочник.ЦеныУпаковкиПоТМЦ");
	//					СпрЦеныУп.ИспользоватьВладельца(Конт.ВУП);
	//					Если СпрЦеныУп.НайтиПоРеквизиту("ТМЦ", Товар, 0) = 1 Тогда
	//						Если СпрЦеныУп.ПометкаУдаления() = 0 Тогда
	//						    Цена = СпрЦеныУп.Цена.Получить(ДДок);
	//							ЕстьЦенаПоТМЦ = 1;
	//						КонецЕсли;
	//					КонецЕсли;
	//					
	//					Если ЕстьЦенаПоТМЦ = 0 Тогда
	//						Цена = Конт.ВУП.Цена.Получить(ДДок);
	//					КонецЕсли;						
	//				КонецЕсли;						
	//			КонецЕсли;			
	//		Исключение 	КонецПопытки;  //--- Не работае тчо то с упаковкой			
	//		Возврат глПересчет(Цена,Гривня,ДДок,ВалДок,ДатаКурса);		
	//	ИначеЕсли глЕстьРеквизитМнЧ("ВидУпаковки", Конт.Вид()) = Да Тогда
	//		Цена = 0; 
	//		Попытка				
	//			Если (ПустоеЗначение(Конт.ВидУпаковки) = 1) ИЛИ (Конт.ВидУпаковки.Код = 0) Тогда
	//				Возврат 0;
	//			Иначе					
	//				Если (ПустоеЗначение(Константа.УМК_ДатаНачалаГрупУпаковок) <> 1) //--- УМК Сандомирский В.Ю. (06.10.14)
	//				И (Константа.УМК_ДатаНачалаГрупУпаковок <= ДДок)  Тогда 				
	//					ТекТМЦ = Товар; //ТекТМЦ = Конт.ТМЦ; 					//--- УМК Сандомирский В.Ю. (10.11.14) исправил
	//					Цена = глПолучитьЦенуУпаковки(ТекТМЦ,Конт.ВидУпаковки,ДДок);							
	//				Иначе //--- по старому					
	//					ЕстьЦенаПоТМЦ = 0;
	//					СпрЦеныУп = СоздатьОбъект("Справочник.ЦеныУпаковкиПоТМЦ");
	//					СпрЦеныУп.ИспользоватьВладельца(Конт.ВидУпаковки);
	//					Если СпрЦеныУп.НайтиПоРеквизиту("ТМЦ", Товар, 0) = 1 Тогда
	//						Если СпрЦеныУп.ПометкаУдаления() = 0 Тогда
	//						    Цена = СпрЦеныУп.Цена.Получить(ДДок);
	//							ЕстьЦенаПоТМЦ = 1;
	//						КонецЕсли;
	//					КонецЕсли;
	//					
	//					Если ЕстьЦенаПоТМЦ = 0 Тогда
	//						Цена = Конт.ВидУпаковки.Цена.Получить(ДДок);
	//					КонецЕсли;					
	//				КонецЕсли;					
	//			КонецЕсли;			
	//		Исключение 	КонецПопытки;  //--- Не работае тчо то с упаковкой			
	//		Возврат глПересчет(Цена,Гривня,ДДок,ВалДок,ДатаКурса);			
	//	КонецЕсли;
	//КонецЕсли;	
КонецФункции

//======================================================================
Процедура глПолучитьСрокГодности(Конт) Экспорт
	Конт.СрокГодности = Конт.ТМЦ.СрокГодности;
	Конт.ЕдиницаИзмерения = Конт.ТМЦ.ЕдиницаИзмерения;
	Если (ПустоеЗначение(Конт.ВидУпаковки) = 0) И (Конт.ВидУпаковки <> НетУп) Тогда
		СпрР = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
		СпрР.ИспользоватьВладельца(Конт.ТМЦ);
		Если СпрР.НайтиПоРеквизиту("ВидУпаковки", Конт.ВидУпаковки, 0) = 1 Тогда
			Если СпрР.ПометкаУдаления() = 0 Тогда
				Конт.СрокГодности = СпрР.СрокГодности;
				Конт.ЕдиницаИзмерения = СпрР.ЕдиницаИзмерения;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры // 

Функция глПолучитьИсключениеЦеныДляТМЦ(Товар, Контрагент, КатегорияЦен, ВозвращатьКатегория = 1) Экспорт
	Если ПустоеЗначение(Товар) = 0 Тогда
		СпрИТЦ = СоздатьОбъект("Справочник.ИсключенияПоТипамЦен");
		СпрИТЦ.ИспользоватьВладельца(Товар);
		Если СпрИТЦ.НайтиПоРеквизиту("Контрагент", Контрагент, 0) = 1 Тогда
			Если СпрИТЦ.ПометкаУдаления() = 0 Тогда
				Возврат СпрИТЦ.КатегорияЦен;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если ВозвращатьКатегория = 1 Тогда
		Возврат КатегорияЦен;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

//======================================================================
Функция ПроверитьДокПолучателейСкидок(Док, ДатаДок, Контрагент, НеПроверятьТЧ = 0)
	Если ПустоеЗначение(Док.УстановкаСкидокТМЦ) = 0 Тогда
		Если (Док.УстановкаСкидокТМЦ.Проведен() = 1) И (Док.УстановкаСкидокТМЦ.ДатаДок <= ДатаДок) И ((Док.УстановкаСкидокТМЦ.ДатаПо >= ДатаДок) ИЛИ (ПустоеЗначение(Док.УстановкаСкидокТМЦ.ДатаПо) = 1)) Тогда
			Если НеПроверятьТЧ = 1 Тогда
				Возврат 1;
			КонецЕсли;
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл
				Если (Док.Контрагент = Контрагент) ИЛИ (Контрагент.ПринадлежитГруппе(Док.Контрагент) = 1) Тогда
					Возврат 1;
				КонецЕсли
			КонецЦикла;				
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
КонецФункции // 

//======================================================================
Функция глПолучитьДокументУстановкиСкидок(ДатаДок, Контрагент, ВернутьПолучателей = 0) Экспорт
	
	Если глПрямыеЗапросы = 1 Тогда
		
		рс = СоздатьОбъект("ODBCRecordset");
		ТекстЗапроса = 
		"SELECT УстановкаСкидокТМЦ.IDDOC [УстановкаСкидокТМЦ $Документ.УстановкаСкидокТМЦ]
		|	, ПолучателиСкидки.IDDOC [ПолучателиСкидки $Документ.ПолучателиСкидки]
		|	, $ПолучателиСкидкиСтроки.Контрагент [Контрагент $Справочник.Контрагенты]
		|FROM $Документ.УстановкаСкидокТМЦ AS УстановкаСкидокТМЦ With (NOLOCK)
		|	INNER JOIN $Документ.ПолучателиСкидки AS ПолучателиСкидки With (NOLOCK) ON УстановкаСкидокТМЦ.IDDOC = $ПолучателиСкидки.УстановкаСкидокТМЦ
		|	INNER JOIN $ДокументСтроки.ПолучателиСкидки AS ПолучателиСкидкиСтроки With (NOLOCK) ON ПолучателиСкидки.IDDOC = ПолучателиСкидкиСтроки.IDDOC
		|	INNER JOIN _1SJOURN AS Журнал With (NOLOCK) ON УстановкаСкидокТМЦ.IDDOC = Журнал.IDDOC
		|WHERE ((Журнал.CLOSED & 1) = 1)
		|	AND (Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime) <= :ДатаДок)
		|	AND (($УстановкаСкидокТМЦ.ДатаПо >= :ДатаДок)
		|           OR ($УстановкаСкидокТМЦ.ДатаПо = '17530101'))
		|ORDER BY УстановкаСкидокТМЦ.IDDOC DESC
		|	, $ПолучателиСкидкиСтроки.Контрагент";
		

		рс.УстановитьТекстовыйПараметр("ДатаДок", ДатаДок);
		Результат = рс.ВыполнитьИнструкцию(ТекстЗапроса);
		
		Если Результат.КоличествоСтрок() = 0 Тогда 
			Возврат "";
		КонецЕсли;
		
		Результат.ВыбратьСтроки();
		
		Пока Результат.ПолучитьСтроку() = 1 Цикл
			Если (Результат.Контрагент = Контрагент) ИЛИ (Контрагент.ПринадлежитГруппе(Результат.Контрагент) = 1) Тогда
				Если ВернутьПолучателей = 1 Тогда
					Возврат Результат.ПолучателиСкидки;
				Иначе
					Возврат Результат.УстановкаСкидокТМЦ;
				КонецЕсли;
			КонецЕсли
		КонецЦикла;	
		
	Иначе // конец по запросу 
		Док = СоздатьОбъект("Документ");
		Док.ОбратныйПорядок(1);
		Док.УстановитьФильтр(1, 0);
		Док.ВыбратьПоЗначению(, , "Контрагент", Контрагент);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Вид() = "ПолучателиСкидки" Тогда
				Если ПроверитьДокПолучателейСкидок(Док.ТекущийДокумент(), ДатаДок, Контрагент, 1) = 1 Тогда
					Если ВернутьПолучателей = 1 Тогда
						Возврат Док.ТекущийДокумент();
					Иначе
						Возврат Док.УстановкаСкидокТМЦ;
					КонецЕсли;									
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Док = СоздатьОбъект("Документ.ПолучателиСкидки");
		Док.ОбратныйПорядок(1);
		Док.УстановитьФильтр(1, 0);
		Док.ВыбратьДокументы(, );
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если ПроверитьДокПолучателейСкидок(Док.ТекущийДокумент(), ДатаДок, Контрагент) = 1 Тогда
				Если ВернутьПолучателей = 1 Тогда
					Возврат Док.ТекущийДокумент();
				Иначе
					Возврат Док.УстановкаСкидокТМЦ;
				КонецЕсли;									
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // 

//======================================================================
Функция глПолучитьДатуЦ(Конт) Экспорт
	ДатаЦ = Конт.ДатаДок;
	Если глЕстьРеквизитШапки("ДатаЦ", Конт.Вид()) = Да Тогда
		Если ПустоеЗначение(Конт.ДатаЦ) = 0 Тогда
			ДатаЦ = Конт.ДатаЦ;		
		КонецЕсли;
	КонецЕсли;

	Возврат ДатаЦ;	
КонецФункции // 

//======================================================================
Функция глОпределитьСкидкуБонусТМЦ(Конт, ТМЦ, ПолучательБонуса = "", Бонус = 0, СпособПредоставленияСкидки, БонусСуммой, КатегорияЦены, ОкруглятьДо, ВидСкидки,УстановкаСкидокТМЦ = "") Экспорт
	
	Если ПустоеЗначение(УстановкаСкидокТМЦ) = 1 Тогда
		Попытка
			УстановкаСкидокТМЦ = Конт.ПолучитьАтрибут("УстановкаСкидокТМЦ" + ВидСкидки);
		Исключение
			Возврат 0;	
		КонецПопытки;
	КонецЕсли;
	
	Если ПустоеЗначение(УстановкаСкидокТМЦ) = 0 Тогда
		УстановкаСкидокТМЦ.ВыбратьСтроки();
		Пока УстановкаСкидокТМЦ.ПолучитьСтроку() = 1 Цикл
			
			//Если категория цены заполнена, то фильтруем и по ней.
			Если ПустоеЗначение(КатегорияЦены)=0 Тогда
				Если КатегорияЦены <> УстановкаСкидокТМЦ.КатегорияЦен Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;//Фильтр по типу цены
			
			Если УстановкаСкидокТМЦ.ТМЦ = ТМЦ Тогда
				Бонус = УстановкаСкидокТМЦ.Бонус;
				СпособПредоставленияСкидки = УстановкаСкидокТМЦ.СпособПредоставления;
				БонусСуммой = УстановкаСкидокТМЦ.СуммойБонус;
				КатегорияЦены = УстановкаСкидокТМЦ.КатегорияЦен;
				ОкруглятьДо = УстановкаСкидокТМЦ.ОкруглятьДо;
				Если СпособПредоставленияСкидки = Перечисление.СпособыПредоставленияСкидки.ЦенаПоКатегории Тогда
					Возврат 1;
				Иначе
					Возврат УстановкаСкидокТМЦ.Скидка;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;		
	
	Возврат 0;
	
КонецФункции

//======================================================================
Функция глРассчитатьЦенуСоСкидкой(Конт, Знач ЦенаЦены, ТМЦ, КатЦен, СпособПредоставленияСкидки, ЕстьАкция, ОкруглятьДо, УстановкаСкидокТМЦ) Экспорт
	
	Если СпособПредоставленияСкидки = Перечисление.СпособыПредоставленияСкидки.Процент Тогда
		ЦенаЦены = ЦенаЦены - ЦенаЦены * (ЕстьАкция / 100);
	ИначеЕсли СпособПредоставленияСкидки = Перечисление.СпособыПредоставленияСкидки.Сумма Тогда
		ЦенаЦены = ЦенаЦены - ЕстьАкция;
	ИначеЕсли СпособПредоставленияСкидки = Перечисление.СпособыПредоставленияСкидки.ФиксЦена Тогда
		ЦенаЦены = ЕстьАкция;
	Иначе
		КатегорияЦены = КатЦен;
		Если ТипЗначенияСтр(Конт) = "Дата" Тогда
			ДатаЦ = Конт;
		Иначе
			ДатаЦ = глПолучитьДатуЦ(Конт); 
		КонецЕсли;
		
		
		ЦенаЦены = глВернутьЦену(ТМЦ, КатегорияЦены, ДатаЦ);
		Если (ТипЗначенияСтр(Конт) <> "Дата") Тогда
			Если ((глЕстьРеквизитМнЧ("ВУП", Конт.Вид()) = Да) ИЛИ (глЕстьРеквизитМнЧ("ВидУпаковки", Конт.Вид()) = Да)) Тогда
				ЦенаЦены = ЦенаЦены + глПолучитьЦенуВУП(Конт, КатегорияЦены, ДатаЦ, Гривня, ДатаЦ, ТМЦ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//Округлим цену по правилу 
	Если (ПустоеЗначение(ЕстьАкция) = 0) И (СпособПредоставленияСкидки <> Перечисление.СпособыПредоставленияСкидки.ФиксЦена) И (ПустоеЗначение(УстановкаСкидокТМЦ) = 0) Тогда
		Если УстановкаСкидокТМЦ.фОкруглятьЦены = 1 Тогда   
			Возврат глОкруглить(ЦенаЦены, УстановкаСкидокТМЦ.КратностьОкругления, УстановкаСкидокТМЦ.Способ);	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Окр(ЦенаЦены, ОкруглятьДо);

КонецФункции // 

//======================================================================
Процедура глУстановитьСкидкуПоАкции(Конт, ЦенаЦены, ТМЦ, ЕстьАкция, КатегорияЦены, ВидСкидки = "", УстановкаСкидокТМЦ = "") Экспорт
	Если глЕстьРеквизитШапки("Контрагент", Конт.Вид()) = Да Тогда
		Контр = Конт.Контрагент;
	ИначеЕсли глЕстьРеквизитШапки("КонтрагентДляИсключенияЦены", Конт.Вид()) = Да Тогда
		Контр = Конт.КонтрагентДляИсключенияЦены;
	Иначе
		Возврат;
	КонецЕсли;
	
	СпособПредоставленияСкидки = Перечисление.СпособыПредоставленияСкидки.Процент; БонусСуммой = Нет; 
	//Для розничного контрагента необходима фильтрация по типу цены в документе УстановкаСкидокТМЦ
	КатЦен = ?(ПустоеЗначение(Конт.Контрагент.КатегорияЦенРозница.Получить(Конт.ДатаДок)) = 1,"",КатегорияЦены); 
	ОкруглятьДо = 2;
	ЕстьАкция = глОпределитьСкидкуБонусТМЦ(Конт, ТМЦ,,,СпособПредоставленияСкидки, БонусСуммой, КатЦен, ОкруглятьДо, ВидСкидки, УстановкаСкидокТМЦ);
	ЦенаЦены = глРассчитатьЦенуСоСкидкой(Конт, ЦенаЦены, ТМЦ, КатЦен, СпособПредоставленияСкидки, ЕстьАкция, ОкруглятьДо, УстановкаСкидокТМЦ);
КонецПроцедуры // 

//======================================================================
Функция глПолучитьДатуИзУК(ДатаДок, ТМЦ) Экспорт
	СтрКэша = 0;
	Если глКэшУдостоверенийКачества.НайтиЗначение(ДатаДок, СтрКэша, "Дата") = 0 Тогда
		глКэшУдостоверенийКачества.НоваяСтрока();
		глКэшУдостоверенийКачества.Дата = ДатаДок;
		глКэшУдостоверенийКачества.ТТМЦ = СоздатьОбъект("ТаблицаЗначений");
		глКэшУдостоверенийКачества.ТТМЦ.НоваяКолонка("ТМЦ", "Справочник.ТМЦ");
		глКэшУдостоверенийКачества.ТТМЦ.НоваяКолонка("ДатаУК", "Дата");
		
		ДокУК = СоздатьОбъект("Документ.УдостоверениеКачества");
		ДокУК.УстановитьФильтр(1, 0);
		ДокУК.ВыбратьДокументы(ДатаДок, ДатаДок);
		Пока ДокУК.ПолучитьДокумент() = 1 Цикл
			ДокУК.ВыбратьСтроки();
			Пока ДокУК.ПолучитьСтроку() = 1 Цикл
				глКэшУдостоверенийКачества.ТТМЦ.НоваяСтрока();
				глКэшУдостоверенийКачества.ТТМЦ.ДатаУК = ДокУК.ДатаУК;
				глКэшУдостоверенийКачества.ТТМЦ.ТМЦ = ДокУК.ТМЦ;
			КонецЦикла;
		КонецЦикла;
		глКэшУдостоверенийКачества.ТТМЦ.Сортировать("ДатаУК-");
		СтрКэша = глКэшУдостоверенийКачества.НомерСтроки;
	КонецЕсли;
	
	глКэшУдостоверенийКачества.ПолучитьСтрокуПоНомеру(СтрКэша);
	Поз = 0;
	глКэшУдостоверенийКачества.ТТМЦ.НайтиЗначение(ТМЦ, Поз, "ТМЦ");
	Если Поз <> 0 Тогда
		Возврат глКэшУдостоверенийКачества.ТТМЦ.ПолучитьЗначение(Поз, "ДатаУК");
	КонецЕсли;
	
	Возврат  Дата(0);
КонецФункции // глПолучитьДатуИзУК(Конт.ДатаДок, Конт.ТМЦ)

// ===============================
// Вызывается при изменениии реквизита Товар в накладных
Процедура глПриИзмененииТовара(Конт, СчитатьЦену = 0, Знач НеМенятьЦену = 0) Экспорт
	Перем КатегорияЦен;
	
	// в документах может не быть реквизита "Ед"
	Если глЕстьРеквизитМнЧ("Ед", Конт.Вид()) = Да Тогда
		РеквЕд = "Ед";
	Иначе
		РеквЕд = "";
	КонецЕсли;		

		// в документах может не быть реквизита "Ед"
	Если глЕстьРеквизитМнЧ("НеНачислятьБонус", Конт.Вид()) = Да Тогда
		Если Конт.НеНачислятьБонус = Да Тогда
			НеМенятьЦену = 1;
		КонецЕсли;
	КонецЕсли;

	// может не быть и реквизита "Коэффициент"
	Если глЕстьРеквизитМнЧ("Коэффициент", Конт.Вид()) = Да Тогда
		РеквКоэффициент = "Коэффициент";
	Иначе
		РеквКоэффициент = "";
	КонецЕсли;		

	Если глЕстьРеквизитМнЧ("ТМЦ", Конт.Вид()) = Да Тогда
		РеквТовар = "ТМЦ"; 
	ИначеЕсли глЕстьРеквизитМнЧ("Продукция", Конт.Вид()) = Да Тогда
		РеквТовар = "Продукция"; // umk	
	ИначеЕсли глЕстьРеквизитМнЧ("Услуга", Конт.Вид()) = Да Тогда
		РеквТовар = "Услуга";
	ИначеЕсли глЕстьРеквизитМнЧ("Номенклатура", Конт.Вид()) = Да Тогда
		РеквТовар = "Номенклатура";
	КонецЕсли;        

	Товар = Конт.ПолучитьАтрибут(РеквТовар);
	
	Если ПустоеЗначение(Товар) = 1 Тогда
		Возврат;
	КонецЕсли;	

	Если глЕстьРеквизитМнЧ("ДатаУК", Конт.Вид()) = Да Тогда
		ТекД = Конт.ДатаДок;
		Если глЕстьРеквизитШапки("ДатаУКШ", Конт.Вид()) = Да Тогда
			Если ПустоеЗначение(Конт.ДатаУКШ) = 0 Тогда
				ТекД = Конт.ДатаУКШ;
			КонецЕсли;
		КонецЕсли;
		
		Конт.ДатаУК = глПолучитьДатуИзУК(ТекД, Конт.ТМЦ);
	КонецЕсли;
	
	Если глЕстьРеквизитМнЧ("ПроцСписания", Конт.Вид()) = Да Тогда
		НуженПроцент = 1;
		Если Конт.Вид() = "Перемещение" Тогда
			Если (Конт.МестоХранения.Морозилка = 1) И (Конт.НовоеМестоХранения.Морозилка = 1) Тогда
				НуженПроцент = 0;
			КонецЕсли;
		КонецЕсли;
		Если НуженПроцент = 1 Тогда
		    Конт.ПроцСписания = глПолучитьПроцентСписания(Товар, глПолучитьСкладКонтекста(Конт), Конт.ДатаДок);
			глИзмПроцСписания(Конт);			
		КонецЕсли;
	КонецЕсли;
	
	// Это документы не для услуг. В такие документы можно добавлять только ТЗР
	Если ((Конт.Вид()="ПриходнаяНакладнаяЗапасы")) Тогда
		Если (Товар.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга)
		И (глЭтоСчетТЗР(Товар.Счет)=0) Тогда
			глКомментарий("В документ можно добавлять только услуги, относящиеся к транспортно-заготовительным расходам.",1);
			// очистим реквизит
			Конт.УстановитьАтрибут(РеквТовар,0);
			Возврат;
		КонецЕсли;	
	КонецЕсли;	

	Если глПроверкаТовараВДокументе(Конт,Товар) = Нет Тогда
		Конт.УстановитьАтрибут(РеквТовар,0);                
		// обнуляем реквизит "Ед", если он присутствует в документе
		Если ПустоеЗначение(РеквЕд) = 0 Тогда
			Конт.УстановитьАтрибут(РеквЕд,0);
		КонецЕсли;
		// обнуляем реквизит "Коэффициент", если он присутствует в документе
		Если ПустоеЗначение(РеквКоэффициент) = 0 Тогда
			Конт.УстановитьАтрибут(РеквКоэффициент,0);
		КонецЕсли;
		Возврат;
	КонецЕсли;                                                                                                                                     
		
	Если ПустоеЗначение(Товар) = 1 Тогда
		// Удалили товар.
		// обнуляем реквизит "Ед", если он присутствует в документе
		Если ПустоеЗначение(РеквЕд) = 0 Тогда
			Конт.УстановитьАтрибут(РеквЕд,0);
		КонецЕсли;
		// обнуляем реквизит "Коэффициент", если он присутствует в документе
		Если ПустоеЗначение(РеквКоэффициент) = 0 Тогда
			Конт.УстановитьАтрибут(РеквКоэффициент,0);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	// нужно проверить, чтобы выбранный товар не был набором
	Если Товар.Вид() = "ТМЦ" Тогда
		Если Товар.ВидТМЦ = Перечисление.ВидыТМЦ.Набор Тогда
			// вариант 1. В документ набор в документ можно добалять
			Если глЕстьРеквизитМнЧ("Набор", Конт.Вид()) = Да Тогда
				// вариа1. В документ набор в документ можно добалять
				ТекстПредупреждения = "Наборы в документ можно добавлять только через подбор.";
			Иначе
				// вариант 2. В документ набор вообще добавлять нельзя
				ТекстПредупреждения = "Наборы в документ добавлять нельзя.";
			КонецЕсли;
			                              
			глПоказатьПредупреждение(ТекстПредупреждения, 3);
			// очистим реквизиты
			Конт.УстановитьАтрибут(РеквТовар,0);
			// обнуляем реквизит "Ед", если он присутствует в документе
			Если ПустоеЗначение(РеквЕд) = 0 Тогда
				Конт.УстановитьАтрибут(РеквЕд,0);
			КонецЕсли;
			// обнуляем реквизит "Коэффициент", если он присутствует в документе
			Если ПустоеЗначение(РеквКоэффициент) = 0 Тогда
				Конт.УстановитьАтрибут(РеквКоэффициент,0);
			КонецЕсли;
			Возврат;
		КонецЕсли;   		
	КонецЕсли;
	
	Если (глЕстьРеквизитМнЧ("КвоШт", Конт.Вид()) = Да) И (глЕстьРеквизитМнЧ("КвоПересчет", Конт.Вид()) = Да) Тогда //--- УМК Сандомирский В.Ю, (25.11.14) исправил (01.07.15)				
		Если (ПустоеЗначение(Конт.ВидУпаковки) = 1) ИЛИ (Конт.ВидУпаковки = НетУп)  Тогда
			Конт.КвоПересчет = Конт.Кво + Конт.КвоШт * Конт.ТМЦ.Вес;
		Иначе	
			РазрешенныйВидУпаковкиТМЦ =  глПолучитьРазрешенныйВидУпаковки(Конт.ТМЦ,Конт.ВидУпаковки);
			Если ПустоеЗначение(РазрешенныйВидУпаковкиТМЦ) <> 1 Тогда
				Конт.КвоПересчет = Конт.Кво + Конт.КвоШт * РазрешенныйВидУпаковкиТМЦ.ВесУпаковки.Получить(Конт.ДатаДок);	
			КонецЕсли;		
		КонецЕсли;		
	КонецЕсли;	
	
	Если Товар.Вид() <> "ТМЦ" Тогда
		НовыйТовар = Нет;
		Если ПустоеЗначение(Конт.Ед) = 1 Тогда
			НовыйТовар = Да;
		ИначеЕсли Товар <> Конт.Ед.Владелец Тогда
			НовыйТовар = Да;
		КонецЕсли;
    	
		Если НовыйТовар = Нет Тогда
			Возврат;
		КонецЕсли;
	
		 //заполняем реквизит "Ед", если он присутствует в документе
		Если ПустоеЗначение(РеквЕд) = 0 Тогда
			глУстановкаБазЕд(Конт,Константа.СлужебныйТМЦ,Товар.БазЕдиница)
		КонецЕсли;
		// заполняем реквизит "Коэффициент", если он присутствует в документе
		Если ПустоеЗначение(РеквКоэффициент) = 0 Тогда
			Конт.УстановитьАтрибут(РеквКоэффициент,Конт.Ед.Коэффициент);
		КонецЕсли;
		
		Если Конт.Кво = 0 Тогда
			Конт.Кво = 1;
		КонецЕсли;
	ИначеЕсли глЕстьРеквизитМнЧ("Ед", Конт.Вид()) = Да Тогда
		НовыйТовар = Нет;
		Если ПустоеЗначение(Конт.Ед) = 1 Тогда
			НовыйТовар = Да;
		ИначеЕсли Товар <> Конт.Ед.Владелец Тогда
			НовыйТовар = Да;
		КонецЕсли;
    	
		Если (НовыйТовар = Нет) и (СчитатьЦену = 0) Тогда
			Возврат;
		КонецЕсли;
	
		// заполняем реквизит "Ед", если он присутствует в документе
		Если ПустоеЗначение(РеквЕд) = 0 Тогда
			Конт.УстановитьАтрибут(РеквЕд,Товар.ЕдиницаПоУмолчанию);
		КонецЕсли;
		// заполняем реквизит "Коэффициент", если он присутствует в документе
		Если ПустоеЗначение(РеквКоэффициент) = 0 Тогда
			Конт.УстановитьАтрибут(РеквКоэффициент,Конт.Ед.Коэффициент);
		КонецЕсли;                                        
		
		Если (Конт.Вид() <> "УстановкаЦенТМЦ") и (Конт.Вид() <> "УстановкаЦенСырья") и (Конт.Вид() <> "УМК_ЗаказКлиента") И (Конт.Вид() <> "УМК_ОриентировочныйЗаказ") 
		 И (Конт.Вид() <> "ПересчетЦенУпаковки") И (Конт.Вид() <> "УМК_Спецификация") И (Конт.Вид() <> "ПланПродаж") Тогда //--- УМК Сандомирский В.Ю, (18.11.2014) (01.07.15) если заказ клиента не лепим КГ = 1
			Если Конт.Кво = 0 Тогда
				Конт.Кво = 1;
			КонецЕсли;		    
		КонецЕсли;
		
	КонецЕсли;
	Если Конт.Вид() = "ПриходнаяНакладнаяЗапасы" Тогда
	    Если ПустоеЗначение(Товар.НГруппа) = 0 Тогда
			Если ПустоеЗначение(Товар.НГруппа.МХ) = 0 Тогда
				Конт.Склад = Товар.НГруппа.МХ;
			Иначе
				Конт.Склад = Конт.МестоХранения;//Конт.Фирма.СкладМатериалов;
			КонецЕсли;
		Иначе
			//Конт.Склад = Конт.Фирма.СкладМатериалов;
			Конт.Склад = Конт.МестоХранения;
	    КонецЕсли;
		
		Возврат;	    
	КонецЕсли;

	
	Если НеМенятьЦену = 1 Тогда
		Возврат;
	КонецЕсли;
	
	фЕстьЦенаСНДС = глЕстьРеквизитМнЧ("ЦенаСНДС", Конт.Вид());
	фЕстьЦенаБезНДС = глЕстьРеквизитМнЧ("ЦенаБезНДС", Конт.Вид());
	
	Если (фЕстьЦенаСНДС = Нет) и (фЕстьЦенаБезНДС = Нет)
	и (глЕстьРеквизитМнЧ("Цена", Конт.Вид()) = Нет) Тогда
		// цены в документе нет
		Возврат;
	КонецЕсли;
	
	Если глЕстьРеквизитШапки("КатегорияЦен",Конт.Вид()) = Да Тогда
		// бурем категорию цены из шапки
		КатегорияЦен = Конт.КатегорияЦен;
		Если глЕстьРеквизитШапки("Контрагент", Конт.Вид()) = Да Тогда
			// поищем исключения
			КатегорияЦен = глПолучитьИсключениеЦеныДляТМЦ(Товар, Конт.Контрагент, КатегорияЦен);
		КонецЕсли;
	ИначеЕсли (Конт.Вид() = "РасходнаяРозничная") ИЛИ
	          (Конт.Вид() = "ОтчетКА") ИЛИ
			  (Конт.Вид() = "Перемещение") ИЛИ
			  (Конт.Вид() = "ВозвратРозница") ИЛИ
			  (Конт.Вид() = "Перемещение") ИЛИ
			  (Конт.Вид() = "РасходнаяРозничная")
			  Тогда
		КатегорияЦен = Константа.РозничнаяКатегорияЦен;
	ИначеЕсли (Конт.Вид() = "ЗаказПоставщику") Тогда
		КатегорияЦен = Константа.ЗакупЦена;
	ИначеЕсли (Конт.Вид() = "ЗаказПоставщикуП") Тогда
		КатегорияЦен = Константа.ЗакупЦена;
	Иначе
		// для документа категория цен не предусмотрена
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(КатегорияЦен) = 1 Тогда
		// нет категории, нет и цены
		Возврат;
	КонецЕсли;

	ДатаЦ = глПолучитьДатуЦ(Конт);
	
	Если глЕстьРеквизитШапки("Валюта", Конт.Вид()) = Да Тогда
		ВалДок = Конт.Валюта;
		КурсВ = Конт.Курс;                                                                     
		Если глЕстьРеквизитШапки("Дата_курса", Конт.Вид()) = Да Тогда
			КурсИЗ = Конт.Дата_курса;
			ДатаКурса = Конт.Дата_курса;
		Иначе
			КурсИЗ = Конт.ДатаДок;
			ДатаКурса = Конт.ДатаДок;
		КонецЕсли;
	Иначе
		ВалДок = Гривня;
		КурсВ = Конт.ДатаДок;
		КурсИЗ = КурсВ;
		ДатаКурса = Конт.ДатаДок;
	КонецЕсли;
	
	// вычисляем цену
	Если Товар.Вид() = "ТМЦ" Тогда
		ЦенаТовара = глВернутьЦену(Товар, КатегорияЦен);
	Иначе
		// для не ТМЦ берем цену из справочника
		ЦенаТовара = глПересчет(Товар.Цена_Прих, Гривня, ВалДок, ДатаКурса, КурсВ);				
		Если фЕстьЦенаБезНДС = Да Тогда
			Конт.ЦенаБезНДС = ЦенаТовара;
			глВыч_суммы_накл(Конт,-1);    			
		ИначеЕсли фЕстьЦенаСНДС = Да Тогда
			// если есть только цена с НДС
			Если глЕстьРеквизитШапки("ВидНДС",Конт.Вид()) = Да Тогда
				СтавкаНДС = Конт.ВидНДС;
				ЦенаТовара = ЦенаТовара*(100+глПроцентНДС(СтавкаНДС,Конт.ДатаДок));
			КонецЕсли;                                             
			Конт.ЦенаСНДС = ЦенаТовара;
			глВыч_суммы_накл(Конт,); 
		КонецЕсли;	
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(ЦенаТовара) = 1 Тогда
		// для товара в категории цены нет
		ЦенаЦены = 0;
		Попытка ВалютаЦены = Конт.Валюта; Исключение ВалютаЦены = Гривня КонецПопытки;  //--- УМК Сандомирский В.Ю. (08.09.14) глючит в создании заказа из отчета по заказам
		ЕдЦены = Конт.Ед;
		Сообщить("Для товара: " + Строка(Товар) + " цена не задана");
	Иначе
		// получим параметры цены
		ЦенаТовара.ИспользоватьДату(ДатаЦ);
		ЦенаЦены = ЦенаТовара.Цена;
		ВалютаЦены = ЦенаТовара.Валюта;
		ЕдЦены = ЦенаТовара.Единица;		
	КонецЕсли;	
	
	Попытка		              
		Если ПустоеЗначение(РеквКоэффициент) = 1 Тогда
			ЦенаЦены = ЦенаЦены * 1 / ЕдЦены.Коэффициент;
		Иначе     
			ЦенаЦены = ЦенаЦены * Конт.Коэффициент / ЕдЦены.Коэффициент;			
		КонецЕсли;	
	Исключение       
		// если на дату документа у единицы еще не было коэффициента
		ЦенаЦены = 0;
		глКомментарий(Шаблон("У единицы [ЕдЦены] на дату [Конт.ДатаДок] не установлен коэффициент."),1);
	КонецПопытки;
	    
	ЦенаЦены = глПересчет(ЦенаЦены,ВалютаЦены,КурсИЗ,ВалДок,КурсВ,ДатаКурса);
	
	Если (глЕстьРеквизитМнЧ("ВУП", Конт.Вид()) = Да) ИЛИ (глЕстьРеквизитМнЧ("ВидУпаковки", Конт.Вид()) = Да) Тогда								//--- УМК Сандомирский В.Ю, (20.03.14)
		ДДок = ДатаЦ;
		ЦенаЦены = ЦенаЦены + глПолучитьЦенуВУП(Конт, КатегорияЦен, ДДок, ВалДок, ДатаКурса, Товар);
	КонецЕсли;
	
	Если (глЕстьРеквизитМнЧ("ЦенаУпаковки", Конт.Вид()) = Да) И (глЕстьРеквизитМнЧ("ЦенаУпаковки", Конт.Вид()) = Да) Тогда	//--- УМК Сандомирский В.Ю, (24.11.14) расчет цен упаковки
		ДДок = ДатаЦ;
		
		Если глЕстьРеквизитМнЧ("ВидУпаковки", Конт.Вид()) = Да Тогда
			Конт.ЦенаУпаковки = глПолучитьЦенуУпаковки(Товар,Конт.ВидУпаковки,ДДок, КатегорияЦен);
		ИначеЕсли  глЕстьРеквизитМнЧ("ВУП", Конт.Вид()) = Да Тогда
			Конт.ЦенаУпаковки = глПолучитьЦенуУпаковки(Товар,Конт.ВУП,ДДок, КатегорияЦен);			
		КонецЕсли;			
	КонецЕсли;
	ЦенаТары = 0;
	Если глЕстьРеквизитМнЧ("Тара", Конт.Вид()) = Да Тогда		
		ЦенаТары = глВернутьЦену(Конт.Тара, Конт.Тара.БазоваяКатегорияЦены.Получить(Конт.ДатаДок), Конт.ДатаДок, ВалДок) * ?(Конт.Ед.Единица = Константа.БазЕдиница, 1, Конт.Ед.Вес);
	КонецЕсли;	

	// определим ставку НДС
	Если глЕстьРеквизитШапки("ВидНДС",Конт.Вид()) = Да Тогда
		СтавкаНДС = Конт.ВидНДС;
	Иначе
		СтавкаНДС = Товар.СтавкаНДС;
	КонецЕсли;
	
	ЕстьАкция = 0;
	пЦенаБезСкидки = 0; // Хранит цену без скидки перед пересчетом суммы по накладной
	СтНДС = глПроцентНДС(СтавкаНДС,Конт.ДатаДок);
	Если глЕстьРеквизитШапки("УстановкаСкидокТМЦ", Конт.Вид()) = Да Тогда
		Если глЕстьРеквизитМнЧ("ЦенаБезСкидки", Конт.Вид()) = Да Тогда
			Конт.ЦенаБезСкидки = ЦенаЦены + ЦенаТары;
			Если Константа.ОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаБезНДС Тогда
				// нужно вычислить цену без НДС, потом от не цену с НДС
				ЦенаБезНДС = Окр(Конт.ЦенаБезСкидки * 100 / (СтНДС + 100), 5);
				Конт.ЦенаБезСкидки = Окр(ЦенаБезНДС*(100+СтНДС)/100, 2);
			КонецЕсли;
			пЦенаБезСкидки = Конт.ЦенаБезСкидки; // запомним цену. 
		КонецЕсли;
		//Если контрагент не с типом цен Розница (Пример - Фридман) тогда считаем акции
		//Если ПустоеЗначение(Конт.Контрагент.КатегорияЦенРозница.Получить(Конт.ДатаДок)) = 1 Тогда
			глУстановитьСкидкуПоАкции(Конт, ЦенаЦены, Товар, ЕстьАкция, КатегорияЦен);
		//КонецЕсли;
	КонецЕсли;	
	ЦенаЦены = ЦенаЦены + ЦенаТары;		
	
	Если Конт.Вид() = "ОприходованиеИзлишков" Тогда
		// если есть партия в документе, пропробуем установить цену партии
		Если глЕстьРеквизитМнЧ("Партия", Конт.Вид()) = Да Тогда
			Если ПустоеЗначение(Конт.Партия) = 0 Тогда
				Если ПустоеЗначение(Конт.Партия.Цена_Прих) = 0 Тогда
					ЦенаЦены = Конт.Партия.Цена_Прих;
					ЕдЦены = Товар.ЕдиницаПоУмолчанию;
					Попытка		
						ЦенаЦены = ЦенаЦены * Конт.Коэффициент / ЕдЦены.Коэффициент;
					Исключение       	
						// если на дату документа у единицы еще не было коэффициента
						ЦенаЦены = 0;
						глКомментарий(Шаблон("У единицы [ЕдЦены] на дату [Конт.ДатаДок] не установлен коэффициент."),1);
					КонецПопытки;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	                                     
		Конт.ЦенаБезНДС = ЦенаЦены;
		глВыч_суммы_накл(Конт,-1);					
		
	ИначеЕсли ((фЕстьЦенаСНДС = Да) и (Константа.ОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаСНДС)) или
		 	  ((фЕстьЦенаСНДС = Да) и (фЕстьЦенаБезНДС = Нет)) Тогда
			
		Конт.ЦенаСНДС = ЦенаЦены;
		глВыч_суммы_накл(Конт,1);
	Иначе
		Если (Товар.Вид() = "ТМЦ") и (ПустоеЗначение(СтавкаНДС) = 0) Тогда
			// вся операция облагается НДС, 
			// имеет смысл проверить, облагается ли указанный товар
			Если Сокрлп(СтавкаНДС.Код) = "НДС20" Тогда
				СтавкаНДС = Товар.СтавкаНДС;
				СтНДС = глПроцентНДС(СтавкаНДС,Конт.ДатаДок);
			КонецЕсли;
		КонецЕсли;
		// устанавливаем цену без НДС
		ЦенаЦены = ЦенаЦены*100/(СтНДС + 100);
		Конт.ЦенаБезНДС = ЦенаЦены;
		глВыч_суммы_накл(Конт,-1);		
	КонецЕсли;
	
	Если (глЕстьРеквизитМнЧ("ЦенаБезСкидки", Конт.Вид()) = Да) И (ЕстьАкция = 0) Тогда
		Конт.ЦенаБезСкидки = Конт.ЦенаСНДС;
	КонецЕсли;
	
	// + umk + Если есть скидки по акции то необходимо установить цену Без скидки т.к. цена в расх. накл. пересчиталась.
	Если (глЕстьРеквизитШапки("УстановкаСкидокТМЦ", Конт.Вид()) = Да) И (ЕстьАкция > 0) И (Конт.Вид() = "РасходнаяНакладная") Тогда
		Если глЕстьРеквизитМнЧ("ЦенаБезСкидки", Конт.Вид()) = Да Тогда
			Конт.ЦенаБезСкидки =  пЦенаБезСкидки;
		КонецЕсли;
	КонецЕсли;	
	// - umk
	
	
	//Если глЕстьРеквизитМнЧ("ВидУпаковки", Конт.Вид()) = Да Тогда //--- УМК Сандомирский В.Ю, (20.03.14)						
	//	ДДок = Конт.ДатаДок;
	//	ЦенаЦены = ЦенаЦены + глПолучитьЦенуВУП(Конт, КатегорияЦен, ДДок, ВалДок, ДатаКурса, Товар);
	//КонецЕсли;	
	
	Если глЕстьРеквизитМнЧ("СрокГодности", Конт.Вид()) = Да Тогда
		глПолучитьСрокГодности(Конт);
	КонецЕсли;
	
	
	//--- ошибочно !!!
	//Если (глЕстьРеквизитМнЧ("КвоШт", Конт.Вид()) = Да) И (глЕстьРеквизитМнЧ("КвоШт", Конт.Вид()) = Да) Тогда //--- УМК Сандомирский В.Ю, (25.11.14)						
	//	
	//	РазрешенныйВидУпаковкиТМЦ =  глПолучитьРазрешенныйВидУпаковки(Конт.ТМЦ,Конт.ВидУпаковки);
	//	Если ПустоеЗначение(РазрешенныйВидУпаковкиТМЦ) <> 1 Тогда
	//		Конт.КвоПересчет = Конт.КвоШт * РазрешенныйВидУпаковкиТМЦ.ВесУпаковки;	
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры // глПриИзмененииТовара()

// ===============================
// Вызывается при изменении Единицы
Процедура глИзмЕдин(Конт,Рекв = "Ед") Экспорт
	Перем ВремКоэфф, ВремЦена, ВремВалюта;
	Перем Товар;
	Если ПустоеЗначение(Конт.Ед) = 1 Тогда
		// пустая единица. ничего не делаем
		Возврат;
	КонецЕсли;                      
	
	Если глЕстьРеквизитМнЧ("ТМЦ", Конт.Вид()) = Да Тогда
		РеквТовар = "ТМЦ";
	ИначеЕсли глЕстьРеквизитМнЧ("Услуга", Конт.Вид()) = Да Тогда
		РеквТовар = "Услуга";
	ИначеЕсли глЕстьРеквизитМнЧ("Продукция", Конт.Вид()) = Да Тогда  //в док. Заказ, ВыпускПродукции...
		РеквТовар = "Продукция";
	ИначеЕсли глЕстьРеквизитМнЧ("Элемент", Конт.Вид()) = Да Тогда    //в док. НормыЗатрат
		Если Конт.Элемент.Вид() <> "ТМЦ" Тогда
	    	Возврат;
		КонецЕсли;
		РеквТовар = "Элемент";
	КонецЕсли;                                                                           
	
	Товар = Конт.ПолучитьАтрибут(РеквТовар);
	
	// сохраним старый коэффициент
	ВремКоэфф = Конт.Коэффициент;
	// заполним коэффициент в документе из единицы
	Конт.Коэффициент = Конт.Ед.Коэффициент;
	Если глЕстьРеквизитМнЧ("ЦенаСНДС", Конт.Вид()) = Да Тогда
		// нужно пересчитать цену
		Если глЕстьРеквизитШапки("Валюта",Конт.Вид()) = Да Тогда
			ВремВалюта = Конт.Валюта;
		Иначе
			ВремВалюта = Гривня;
		КонецЕсли;
		Если ВремКоэфф <> 0 Тогда
			// цена была за другой коэффициент. Пересчетываем
			ВремЦена = Конт.ЦенаСНДС * Конт.Коэффициент / ВремКоэфф;
		КонецЕсли;
		Конт.ЦенаСНДС = ВремЦена;
		глВыч_суммы_накл(Конт,1);
	ИначеЕсли глЕстьРеквизитМнЧ("ЦенаБезНДС", Конт.Вид()) = Да Тогда
		Если ВремКоэфф <> 0 Тогда
			// цена была за другой коэффициент. Пересчетываем
			ВремЦена = Конт.ЦенаБезНДС * Конт.Коэффициент / ВремКоэфф;
		КонецЕсли;
		Конт.ЦенаБезНДС = ВремЦена;
		глВыч_суммы_накл(Конт,-1);
	КонецЕсли;
КонецПроцедуры

// ===============================
// ПРОЦЕДУРЫ РАБОТЫ С МЕХАНИЗМОМ ПОДБОРА В ДОКУМЕНТЕ                
// ===============================
// Название: глСоздатьТаблицуСостава(Конт)
// Возвращаемое значение:
// таблица значений
// НЕТ
// Параметры:
// Конт	- контекст формы документа, инициирующего подбор
// Описание:
// Функция формирует и возвращает таблицу значений, которая состоит из следующих колонок
// Товар - соответствует колонки товар из документа
// Набор - для документов, поддерживающих наборы соответствует колонке набор в документе
// НомерСтрокиДокумента - номер строки из документа, содержащей данный товар
// Индекс - это поле формируется в функции. Поле предназначено для поиска.
//               Формируется ТМЦ.Код + [Набор.Код | "00000"], 
//               где Набор.Код используется для документов, поддерживающих работу с наборами,
//               иначе используется строка "00000"
Функция глСоздатьТаблицуСостава(Конт,РеквТовар) Экспорт
	Перем КэшТаблица;
	Перем ВыгружаемыеПоля;
	Перем ЕстьНабор;
	Перем Индекс;
	
	КэшТаблица = СоздатьОбъект("ТаблицаЗначений");
	ЕстьНабор = глЕстьРеквизитМнЧ("Набор", Конт.Вид());
	
	// формуруем строку выгружаемых полей
	ВыгружаемыеПоля = "НомерСтроки,"+РеквТовар;
	Если ЕстьНабор = Да Тогда
		ВыгружаемыеПоля = ВыгружаемыеПоля + ",Набор";
	КонецЕсли;
	
	Конт.ВыгрузитьТабличнуюЧасть(КэшТаблица, ВыгружаемыеПоля);
	
	// Формируем индекс в таблице
	КэшТаблица.НоваяКолонка("Индекс","Число",10);
	КэшТаблица.ВыбратьСтроки();
	Пока КэшТаблица.ПолучитьСтроку() = 1 Цикл
		ТМЦ = КэшТаблица.ПолучитьЗначение(КэшТаблица.НомерСтроки,РеквТовар);
		Код = ТМЦ.Код;
		Индекс = Число(Код) *100000;
		Если ЕстьНабор = Да Тогда
			Индекс = Индекс + Число(КэшТаблица.Набор.Код);
		КонецЕсли;
		КэшТаблица.Индекс = Индекс;
	КонецЦикла;
	
	Возврат КэшТаблица;     
КонецФункции

// ===============================
// Название: глПодбор(Конт,СправочникПодбора,ФормаПодбора="ФормаСписка")
// Возвращаемое значение:
// НЕТ
// Параметры:
// Конт	- контекст формы документа, инициирующего подбор
// СправочникПодбора - наименование идентификатор справочника,
//					   как оно задано в конфигураторе, из которого
//					   будет усущечтвляться подбор.
//		Может принимать значения "номенклатура" или "прайс_лист"
// ФормаПодбора - форма списка справочника
// Описание:
// универсальная процедура, которая инициирует механизм подбора
// товара в документы.
// (открывает форму списка справочник в режиме "ДляПодбора" )
Процедура глПодбор(Конт,СправочникПодбора,ФормаПодбора="ФормаСписка") Экспорт
	// по кнопке "По каталогу" или "По прайсу"
	Перем Параметр;
	Перем ВидДок, Реквизит;
	
	// сохраняем контекст формы в локальной переменной
	Параметр = Конт;
	
	ВидДок = Конт.Вид();
	
	Если (НРег(СправочникПодбора) = "прайс_лист") Тогда
		Если Найти("РасходнаяРозничная,ОтчетКА",ВидДок) = 0 Тогда 
			ЕстьКатегорияЦен = глЕстьРеквизитШапки("КатегорияЦен",ВидДок);
			Если ЕстьКатегорияЦен = Нет Тогда
				глПоказатьПредупреждение("В данный документ нельзя подбирать товары из прайс-листа.");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// открываем форму подбора
	Конт.ОткрытьПодбор(СправочникПодбора,ФормаПодбора,Параметр);
КонецПроцедуры
                           
// ===============================
// Название: глДобавитьТоварВДокумент(Выб,НачКол,Конт)
// Возвращаемое значение:
// НЕТ
// Параметры:
// Выб - выбранный элемент из справочника "Номенклатура" или "Прайс_лист"
// НачКол - количество, которое нужно добавить
// Конт - контекст документа, из которого вызвали функцию
// Описание:
// Универсальная процедура добавления товара в многострочную часть документа.
// Вызывается из модуля формы документа из процедуры ОбработкаПодбора()
Процедура глДобавитьТоварВДокумент(Конт,Выб,ИзменитьКоличествоНа,ЭлемЦены, НЗ = "",ВидУпаковки="",ИзменитьШтукиНа="", УстановитьСклад = "Нет") Экспорт //--- УМК Сандомирский В.Ю. (14.11.14)
	Перем ВыбранныйТовар, ЕдиницаВыбранногоТовара; 
	Перем ВидДок;
	Перем Режим;
	Перем ЕстьНабор,ЕстьЦена,фЦенаСНДС;
	Перем ВалютаДокумента;
	Перем ВыбКатегорияЦен;
	Перем ЦеныВНаборе;     
	Перем ТоварНайден;
	Перем ДатаКурса;
	
	
	ВидДок = Конт.Вид();                 
	
	Если глЕстьРеквизитМнЧ("ТМЦ", Конт.Вид()) = Да Тогда
		РеквТовар = "ТМЦ";
	ИначеЕсли глЕстьРеквизитМнЧ("Услуга", Конт.Вид()) = Да Тогда
		РеквТовар = "Услуга";
	ИначеЕсли глЕстьРеквизитМнЧ("Продукция", Конт.Вид()) = Да Тогда
		РеквТовар = "Продукция";
	Иначе     
		// в документ нельзя добавлять товары
		глПоказатьПредупреждение("В этот документ товары подбирать нельзя!");
		Возврат;
	КонецЕсли;	

	Если глЕстьРеквизитШапки("Валюта", Конт.Вид()) = Да Тогда
		ВалютаДокумента = Конт.Валюта;
	КонецЕсли;

	Если глЕстьРеквизитШапки("Дата_Курса", Конт.Вид()) = Да Тогда
		ДатаКурсаДокумента = Конт.Дата_Курса;
	Иначе
		ДатаКурсаДокумента = Конт.ДатаДок;
	КонецЕсли;	
	
	ЕстьЦена = глЕстьРеквизитМнЧ("ЦенаСНДС", Конт.Вид());
	Если ЕстьЦена = Да Тогда
		фЦенаСНДС = 1;
	Иначе
		ЕстьЦена = глЕстьРеквизитМнЧ("ЦенаБезНДС", Конт.Вид());
		фЦенаСНДС = 0;
	КонецЕсли;
	
	Если (Конт.Вид() = "ВводВЭксплуатацию") или (Конт.Вид() = "СписаниеТМЦВПроизводство") Тогда
		// в документ "ВводВЭксплуатацию" цену подбирать не нужно, она расчитывается при проведении
		ЕстьЦена = Нет;
	КонецЕсли;
	
	Если глЕстьРеквизитШапки("КатегорияЦен", Конт.Вид()) = Да Тогда
		ВыбКатегорияЦен = Конт.КатегорияЦен;
	ИначеЕсли 	(ВидДок = "ОтчетКА") ИЛИ
	(ВидДок = "РасходнаяРозничная") ИЛИ
	(ВидДок = "ВозвратРозница") ИЛИ	
	(ВидДок = "Перемещение") Тогда     
		ВыбКатегорияЦен = Константа.РозничнаяКатегорияЦен;
	Иначе
		ВыбКатегорияЦен = ПолучитьПустоеЗначение("Справочник.КатегорииЦен");
	КонецЕсли;
	
	Если ПустоеЗначение(ЭлемЦены)=1 Тогда
		// заполнять будем в единицах по умолчанию
		ЕдиницаВыбранногоТовара = Выб.ЕдиницаПоУмолчанию;
	КонецЕсли;
	ДатаЦ = Конт.ДатаДок;
	Если глЕстьРеквизитШапки("ДатаЦ", Конт.Вид()) = Да Тогда
		Если ПустоеЗначение(Конт.ДатаЦ) = 0 Тогда
			ДатаЦ = Конт.ДатаЦ;		
		КонецЕсли;
	КонецЕсли;
	
	ВыбранныйТовар = Выб;
	ВыбраннаяУпаковка = ВидУпаковки; //--- УМК Сандомирский В.Ю, (14.11.14)

	// Это документы не для услуг. В такие документы можно добавлять только ТЗР
	Если ((Найти(Строка(Конт.Вид()),"ПриходнаяНакладная")<>0) ИЛИ (Конт.Вид()="СчетВходящий"))
	И (ВыбранныйТовар.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга)
	И (глЭтоСчетТЗР(ВыбранныйТовар.Счет)=0) Тогда
		глКомментарий("В документ можно добавлять только услуги, относящиеся к транспортно-заготовительным расходам.",1);
		Возврат;
	КонецЕсли;	

	Если глПроверкаТовараВДокументе(Конт,ВыбранныйТовар) = Нет Тогда
		Возврат;
	КонецЕсли;                                                                                                                                     
	ЕстьНабор = глЕстьРеквизитМнЧ("Набор",Конт.Вид());

// ===============================
// в этой части происходит добавление набора в документ

	Если ВыбранныйТовар.ВидТМЦ = Перечисление.ВидыТМЦ.Набор Тогда		
		Если ЕстьНабор = Нет Тогда
			// в документ нельзя добавлять наборы
			глПоказатьПредупреждение("В этот документ наборы подбирать нельзя!");
			Возврат;
		КонецЕсли;
		
		ТовСостав = глСоздатьТаблицуСостава(Конт,РеквТовар);
		
		Если ЕстьЦена = Да Тогда
			// получим цену набора
			Если ПустоеЗначение(ЭлемЦены)=0 Тогда
				спЦенаНабора = ЭлемЦены;
			Иначе
				спЦенаНабора = глВернутьЦену(ВыбранныйТовар,ВыбКатегорияЦен);
			КонецЕсли;
			
			Если ПустоеЗначение(спЦенаНабора) = 0 Тогда
				// нашли цену набора
				спЦенаНабора.ИспользоватьДату(Конт.ДатаДок,1);
				// пересчитаем цену в валюту документа
				ЦенаНабора = глПересчет(спЦенаНабора.Цена,спЦенаНабора.Валюта,ДатаКурсаДокумента,Конт.Валюта,Конт.Курс,ДатаКурсаДокумента);
				Если ПустоеЗначение(ЕдиницаВыбранногоТовара) = 0 Тогда
					// нужно пересчитать из единицы цены в выбранную единицу
					ЦенаНабора = ЦенаНабора * ЕдиницаВыбранногоТовара.Коэффициент /
					спЦенаНабора.Единица.Коэффициент;
				Иначе
					ЕдиницаВыбранногоТовара = спЦенаНабора.Единица;
				КонецЕсли;
			Иначе
				ЦенаНабора = 0;
			КонецЕсли;
			
			// создадим таблицу товаров из набора и расчитаем их цены
			ЦеныВНаборе = СоздатьОбъект("ТаблицаЗначений");
			ЦеныВНаборе.НоваяКолонка("Товар");
			ЦеныВНаборе.НоваяКолонка("Цена");
			ЦеныВНаборе.НоваяКолонка("Кол");
			
			СуммаКомплектующих = 0;
			
			ТоварыВНаборе = СоздатьОбъект("Справочник.Комплектация");
			ТоварыВНаборе.ИспользоватьВладельца(ВыбранныйТовар);
			ТоварыВНаборе.ВыбратьЭлементы();
			Пока ТоварыВНаборе.ПолучитьЭлемент()=1 Цикл
				Если ТоварыВНаборе.ПометкаУдаления()=1 Тогда
					// помеченные на удаление комплектующие пропускаем
					Продолжить;
				КонецЕсли;
				
				ЦеныВНаборе.НоваяСтрока();
				ЦеныВНаборе.Товар = ТоварыВНаборе.Товар;
				ЦеныВНаборе.Кол   = ТоварыВНаборе.Кво;
				
				// попытаемся получить цену
				ЦенаТовара = глВернутьЦену(ТоварыВНаборе.Товар, ВыбКатегорияЦен);
				ЦенаЦены = 0;
				Если ПустоеЗначение(ЦенаТовара) = 0 Тогда
					ЦенаТовара.ИспользоватьДату(Конт.ДатаДок,1);
					ЦенаЦены = ЦенаТовара.Цена / ЦенаТовара.Единица.Коэффициент;
					ЦеныВНаборе.Цена = глПересчет(ЦенаЦены,ЦенаТовара.Валюта,ДатаКурсаДокумента,Конт.Валюта,Конт.Курс,ДатаКурсаДокумента);
				Иначе
					ЦеныВНаборе.Цена = 0;
				КонецЕсли;
				СуммаКомплектующих = СуммаКомплектующих + ЦеныВНаборе.Цена * ЦеныВНаборе.Кол *
				ЕдиницаВыбранногоТовара.Коэффициент;
			КонецЦикла;
			
			// вторая итерация. Вычислим сумму комплектующего и добавим его в документ 
			ЦеныВнаборе.ВыбратьСтроки();
			Пока ЦеныВНаборе.ПолучитьСтроку() <> 0 Цикл
				
				КодВыбранногоНабора = ВыбранныйТовар.Код;
				ИндексДляТаблицы = Число(ЦеныВНаборе.Товар.Код) * 100000 + Число(КодВыбранногоНабора);
				Позиция = 0;
				НомСтроки = 0;
				Если ТовСостав.НайтиЗначение(ИндексДляТаблицы,Позиция,"Индекс")=1 Тогда
					// нашли в таблице, значит товар есть в документе
					НомСтроки = ТовСостав.ПолучитьЗначение(Позиция,"НомерСтрокиДокумента");
					Конт.ПолучитьСтрокуПоНомеру(НомСтроки);
					Конт.Кво = Конт.Кво + ИзменитьКоличествоНа * ЦеныВНаборе.Кол *
					ЕдиницаВыбранногоТовара.Коэффициент;
				Иначе
					// не нашли. добавляем новый
					
					Если (ЦеныВНаборе.Цена <> 0) И (СуммаКомплектующих<>0) Тогда
						// цена товара и набора не равна нулю
						// нужно высчитать цену товара
						ЦеныВНаборе.Цена = ЦеныВНаборе.Цена *  ЦенаНабора / СуммаКомплектующих;
					КонецЕсли;
					
					Если фЦенаСНДС=0 Тогда
					    ЦеныВНаборе.Цена = ЦеныВНаборе.Цена * 100/(100 +глПроцентНДС(ВыбранныйТовар.СтавкаНДС,Конт.ДатаДок));
					КонецЕсли;
					
					Конт.НоваяСтрока();
					ТовСостав.НоваяСтрока();
					
					// ===============================
					// дабавляем товар в таблицу состава
					ТовСостав.НомерСтроки = Конт.НомерСтроки;
					ТовСостав.Индекс = ИндексДляТаблицы;
					
					ТовСостав.УстановитьЗначение(ТовСостав.КоличествоСтрок(),РеквТовар,ЦеныВНаборе.Товар);
					ТовСостав.Набор = ВыбранныйТовар;
					// ===============================
					
					Конт.УстановитьАтрибут(РеквТовар,ЦеныВНаборе.Товар);
					Конт.Набор = ВыбранныйТовар;
					// товары в наборе хранятся в базовых единицах
					Конт.Ед = глВернутьБазовуюЕдиницуТовара(ЦеныВНаборе.Товар);
					Конт.Коэффициент = Конт.Ед.Коэффициент;
					
					Конт.Кво = ИзменитьКоличествоНа * ЦеныВНаборе.Кол *
					ЕдиницаВыбранногоТовара.Коэффициент;
					
					Если фЦенаСНДС=1 Тогда
					    Конт.ЦенаСНДС = ЦеныВНаборе.Цена;
					Иначе
						Конт.ЦенаБезНДС = ЦеныВНаборе.Цена;
					КонецЕсли;
				КонецЕсли;
				// вычислим суммы
				глВыч_Суммы_Накл(Конт,?(фЦенаСНДС=0,-1,1));
			КонецЦикла;
		Иначе // Нет цены
			ТоварыВНаборе = СоздатьОбъект("Справочник.Комплектация");
			ТоварыВНаборе.ИспользоватьВладельца(ВыбранныйТовар);
			ТоварыВНаборе.ВыбратьЭлементы();
			Пока ТоварыВНаборе.ПолучитьЭлемент()=1 Цикл
				Если ТоварыВНаборе.ПометкаУдаления()=1 Тогда
					// помеченные на удаление комплектующие пропускаем
					Продолжить;
				КонецЕсли;
				
				КодВыбранногоНабора = ВыбранныйТовар.Код;
				ИндексДляТаблицы = Число(ТоварыВНаборе.Товар.Код) * 100000 + Число(КодВыбранногоНабора);
				Позиция = 0;
				НомСтроки = 0;
				Если ТовСостав.НайтиЗначение(ИндексДляТаблицы,Позиция,"Индекс")=1 Тогда
					// нашли в таблице, значит товар есть в документе
					НомСтроки = ТовСостав.ПолучитьЗначение(Позиция,"НомерСтрокиДокумента");
					Конт.ПолучитьСтрокуПоНомеру(НомСтроки);
					Конт.Кво = Конт.Кво + ИзменитьКоличествоНа * ТоварыВНаборе.Кво *
					ЕдиницаВыбранногоТовара.Коэффициент;
				Иначе
					// не нашли. добавляем новый
					
					Конт.НоваяСтрока();
					ТовСостав.НоваяСтрока();
					
					// ===============================
					// дабавляем товар в таблицу состава
					ТовСостав.НомерСтроки = Конт.НомерСтроки;
					ТовСостав.Индекс = ИндексДляТаблицы;
					
					ТовСостав.УстановитьЗначение(ТовСостав.КоличествоСтрок(),РеквТовар,ТоварыВНаборе.Товар);
					ТовСостав.Набор = ВыбранныйТовар;
					// ===============================

					Конт.УстановитьАтрибут(РеквТовар,ТоварыВНаборе.Товар);
					Конт.Набор = ВыбранныйТовар;
					// товары в наборе хранятся в базовых единицах
					Конт.Ед = глВернутьБазовуюЕдиницуТовара(ТоварыВНаборе.Товар);
					Конт.Коэффициент = Конт.Ед.Коэффициент;
					
					Конт.Кво = ИзменитьКоличествоНа * ТоварыВНаборе.Кво *
					ЕдиницаВыбранногоТовара.Коэффициент;
					
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли; // есть ли цена ?
	
// конец части добавления набора
// ===============================

// =============================== 
// здесь добавляется простой товар
	Иначе
        ТоварНайден = Нет;
		Если (Конт.Вид() <> "Заказ") И (Конт.Вид() <> "РасходнаяНакладная") Тогда 
			Конт.ВыбратьСтроки();
			Пока Конт.ПолучитьСтроку()=1 Цикл    
				Если ЕстьНабор = Да Тогда
					// в документе могут быть наборы 
					Если ПустоеЗначение(Конт.Набор) = 0 Тогда
						// это часть набор, ищем дальше
						Продолжить;
					КонецЕсли;	
				КонецЕсли;	
				
				Если (Конт.Вид() = "УМК_ЗаказКлиента") ИЛИ (Конт.Вид() = "УМК_ОриентировочныйЗаказ") ИЛИ (Конт.Вид() = "УМК_Спецификация") Тогда //--- УМК Сандомирский В.Ю. (06.11.14) 									
					Если (ВыбранныйТовар = Конт.ТМЦ) И 
						 ((ВыбраннаяУпаковка  = Конт.ВидУпаковки) ИЛИ ((ПустоеЗначение(ВыбраннаяУпаковка) = 1) И (Конт.ВидУпаковки = НетУп))
						 	ИЛИ ((ПустоеЗначение(Конт.ВидУпаковки) = 1) И (ВыбраннаяУпаковка = НетУп))) Тогда						
						Если (ИзменитьКоличествоНа > 0) И  (Конт.Кво > 0) И (Конт.КвоШт = 0) Тогда //--- Добавляем в строку к-во
							Конт.Кво = Конт.Кво + ИзменитьКоличествоНа;
							ТоварНайден = Да;	
						КонецЕсли;
						
						Если (ИзменитьШтукиНа > 0) И (Конт.КвоШт > 0) И (Конт.Кво = 0) Тогда //--- Добавляем в строку к-во
							Конт.КвоШт = Конт.КвоШт + ИзменитьШтукиНа;
							ТоварНайден = Да;
						КонецЕсли;
						
						Если глЕстьРеквизитМнЧ("КвоПересчет", Конт.Вид()) = Да Тогда
							глРассчитатьПересчетКво(Конт);
						КонецЕсли;
					КонецЕсли;					
				Иначе	
					Если ВыбранныйТовар = Конт.ПолучитьАтрибут(РеквТовар)  Тогда  // нашли товар
						// проверим еиницу измерения ТМЦ
						ЕдиницаВыбранногоТовараВДокументе = Конт.ПолучитьАтрибут("Ед");
						текЕдиницаВыбранногоТовара = ?(ПустоеЗначение(ЕдиницаВыбранногоТовара)=1,ВыбранныйТовар.ЕдиницаПоУмолчанию,ЕдиницаВыбранногоТовара);
						Если ЕдиницаВыбранногоТовараВДокументе = текЕдиницаВыбранногоТовара Тогда
							Если Конт.Вид() = "РасходнаяНакладная" Тогда
								Конт.Кол = Конт.Кол + ИзменитьКоличествоНа;
								Конт.ВесУп = глПолучитьВесУп(Конт.ТМЦ,Конт.Кол, Конт.ВидУпаковки,Конт.ДатаДок); //--- УМК Сандомирский В.Ю. (06.11.14) 
								ВычитатьВес = ВыбранныйТовар.ВычитатьВесУпаковки.Получить(Конт.ДатаДок);
								//Конт.Кво = Окр(Конт.Кол-((Конт.кол - Конт.ВесУп * ВычитатьВес)*(Конт.свес*0.01)), Конт.КвоЗнаков + 2);
								КолДляРасчета = Конт.Кол - Конт.ВесУп * ВычитатьВес;							
								Конт.Кво = Окр(КолДляРасчета - (КолДляРасчета * (Конт.свес*0.01)), Конт.КвоЗнаков + 2);
							ИначеЕсли Конт.Вид() = "Заказ" Тогда
								Конт.КвоКутеров = Конт.КвоКутеров + ИзменитьКоличествоНа;
								Конт.Кво = Конт.НормыЗатрат.КвоПродукции * Конт.НормыЗатрат.КоэффициентПродукции * Конт.КвоКутеров;
							Иначе						
								Конт.Кво = Конт.Кво + ИзменитьКоличествоНа;
							КонецЕсли;					
							ТоварНайден = Да;				
						Иначе
							глКомментарий(Шаблон("ТМЦ ""[ВыбранныйТовар]"" уже есть в документе, в строке [Конт.НомерСтроки]. 
							|Единица измерения, указанная в документе ([ЕдиницаВыбранногоТовараВДокументе]), отличается от единицы измерения, по умолчанию ([текЕдиницаВыбранногоТовара]).
							|ТМЦ ""[ВыбранныйТовар]"" не будет добавлен в документ."),0);
						КонецЕсли;
						Если (ЕстьЦена=Да) Тогда
							глВыч_Суммы_Накл(Конт,?(фЦенаСНДС=0,-1,1));
						КонецЕсли;
						Если (ВидДок = "ПриходнаяНакладнаяЗапасы") И (УстановитьСклад = "Да") Тогда
							Конт.Склад = Конт.МестоХранения;
						КонецЕсли;
						Возврат;			
					КонецЕсли;					
				КонецЕсли;	
			КонецЦикла;		    
		КонецЕсли;		
				
		Если ВидДок = "СписаниеТМЦ" Тогда
			// в СписанииТМЦ цены и суммы будут рассчитаны при проведении
			Если ТоварНайден = Нет Тогда
				Конт.НоваяСтрока();
				Конт.УстановитьАтрибут(РеквТовар,ВыбранныйТовар);
				Конт.Кво = ИзменитьКоличествоНа;
				глУстановкаБазЕд(Конт, ВыбранныйТовар, глКилограмм, 1);
			КонецЕсли;
			Возврат;		
		КонецЕсли;
		Если ТоварНайден = Нет Тогда
			Конт.НоваяСтрока();
			Конт.УстановитьАтрибут(РеквТовар,ВыбранныйТовар);
			Если Конт.Вид() ="РасходнаяНакладная" Тогда
				Конт.ВесУп = глПолучитьВесУп(Конт.ТМЦ,Конт.Кол, Конт.ВидУпаковки,Конт.ДатаДок); //--- УМК Сандомирский В.Ю. (06.11.14) 
				Конт.Кол = ИзменитьКоличествоНа;
				Если Конт.НеИспользоватьСВес = 1 Тогда
					Конт.свес = 0;
				Иначе
					Конт.свес = глПолучитьСкидкуНаВес(Конт.ВидУпаковки, Конт.ТМЦ,Конт.ДатаДок); //--- УМК Сандомирский В.Ю. (06.11.14) 
					Если (Конт.свес <> 0) И (Конт.Контрагент.СкидкаНаВес <> 0) Тогда
						Конт.свес = Конт.Контрагент.СкидкаНаВес;	
					КонецЕсли;
				КонецЕсли;
				
				ВычитатьВес = ВыбранныйТовар.ВычитатьВесУпаковки.Получить(Конт.ДатаДок);
				КолДляРасчета = Конт.Кол - Конт.ВесУп * ВычитатьВес;			
				Конт.Кво = Окр(КолДляРасчета - (КолДляРасчета  * (Конт.свес*0.01)), Конт.КвоЗнаков + 2);					
			ИначеЕсли Конт.Вид() = "Заказ" Тогда
				Конт.ПоследКод = Конт.ПоследКод + 1;
				Конт.КодСтроки = Конт.ПоследКод;
				Конт.КвоЗамесов = 1;
				Если НЗ = "" Тогда
				    Конт.НормыЗатрат = ВыбранныйТовар.НормыЗатрат.Получить(Конт.ДатаДок);
				Иначе
					Конт.НормыЗатрат = НЗ;
				КонецЕсли;				
				Конт.КвоКутеров = ИзменитьКоличествоНа;
				Конт.Кво = Конт.НормыЗатрат.КвоПродукции * Конт.НормыЗатрат.КоэффициентПродукции * Конт.КвоКутеров;					
				глУстановкаБазЕд(Конт, ВыбранныйТовар, глКилограмм, 1);
			ИначеЕсли  (Конт.Вид() = "УМК_ЗаказКлиента") ИЛИ (Конт.Вид() = "УМК_ОриентировочныйЗаказ") ИЛИ (Конт.Вид() = "УМК_Спецификация") Тогда //--- УМК Сандомирский В.Ю. (14.11.14)  если не нашли ()			
				Конт.Кво 			= ИзменитьКоличествоНа;    				
				Конт.ВидУпаковки 	= ВыбраннаяУпаковка;
				Если (Конт.Вид() <> "УМК_Спецификация") И (Конт.Вид() <> "УМК_ОриентировочныйЗаказ") Тогда
					Конт.ВидУпаковкиН = ВыбраннаяУпаковка;
				КонецЕсли;
				
				Если Конт.Вид() <> "УМК_ОриентировочныйЗаказ" Тогда
					Конт.КвоШт 		= ИзменитьШтукиНа;
				КонецЕсли;
				Если Конт.НомерСтроки = 1 Тогда
					глУстановитьСкладПоТМЦ(ВыбранныйТовар, Конт);
				КонецЕсли;
			Иначе
				Если Конт.Вид() = "ПриходнаяНакладнаяЗапасы" Тогда
				    Если ПустоеЗначение(ВыбранныйТовар.НГруппа) = 0 Тогда
						Если ПустоеЗначение(ВыбранныйТовар.НГруппа.МХ) = 0 Тогда
							Конт.Склад = ВыбранныйТовар.НГруппа.МХ;
						Иначе
							Конт.Склад = Конт.Фирма.СкладМатериалов;
						КонецЕсли;
					Иначе
						Конт.Склад = Конт.Фирма.СкладМатериалов;
					КонецЕсли;
					Если (ВидДок = "ПриходнаяНакладнаяЗапасы") И (УстановитьСклад = "Да") Тогда
						Конт.Склад = Конт.МестоХранения;
					КонецЕсли;					
				КонецЕсли;
				
				Конт.Кво = ИзменитьКоличествоНа;    
			КонецЕсли;		
			Если  Конт.Вид() = "ВозвратнаяНакладная" Тогда
				Если Конт.ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Тара Тогда
				    Конт.Склад = Константа.ОснСкладГП;
				КонецЕсли;								
			КонецЕсли;
			
			Если (ЕстьЦена=Да) И (ПустоеЗначение(ВыбКатегорияЦен)=0) Тогда
				// заполним цену товара				
				Если ПустоеЗначение(ЭлемЦены)=0 Тогда
				    ЦенаТовара = ЭлемЦены;
				Иначе
					ЦенаТовара = глВернутьЦену(ВыбранныйТовар, ВыбКатегорияЦен);
				КонецЕсли;
				
				Если ПустоеЗначение(ЦенаТовара) = 0 Тогда
					//ЦенаТовара.ИспользоватьДату(Конт.ДатаДок,1);
					ЦенаЦены = ЦенаТовара.Цена.Получить(ДатаЦ);
					ВалютаЦены = ЦенаТовара.Валюта.Получить(ДатаЦ);
					ЕдиницаЦены = ЦенаТовара.Единица.Получить(ДатаЦ);
					Если ПустоеЗначение(ЕдиницаВыбранногоТовара) = 0 Тогда
						// Пересчитаем цену
						Если ПустоеЗначение(ЕдиницаЦены.Коэффициент) = 1 тогда
							ЦенаЦены = ЦенаЦены * ЕдиницаВыбранногоТовара.Коэффициент;
						ИначеЕсли ЕдиницаЦены.Коэффициент = 0 тогда	
							ЦенаЦены = ЦенаЦены * ЕдиницаВыбранногоТовара.Коэффициент;
						Иначе			
							ЦенаЦены = ЦенаЦены * ЕдиницаВыбранногоТовара.Коэффициент/
						    	       ЕдиницаЦены.Коэффициент;
						КонецЕсли;			   
					Иначе
						ЕдиницаВыбранногоТовара = ЕдиницаЦены;
					КонецЕсли;
					Если ПустоеЗначение(ВалютаДокумента)=0 Тогда
						ВалютаПересчета = ВалютаДокумента;
						КурсВ = Конт.Курс;
						КурсИЗ = ДатаКурсаДокумента;
						ДатаКурса = ДатаКурсаДокумента;
					Иначе
						ВалютаПересчета = Гривня;
						КурсВ = ДатаЦ;
						КурсИЗ = ДатаЦ;
						ДатаКурса = ДатаЦ;
					КонецЕсли;
					ЦенаЦены = глПересчет(ЦенаЦены, ВалютаЦены, КурсИЗ,
					                                 ВалютаПересчета,КурсВ,ДатаКурса);
					
					СтНДС = глПроцентНДС(ВыбранныйТовар.СтавкаНДС,Конт.ДатаДок);
					Если фЦенаСНДС=0 Тогда
					    ЦенаЦены = ЦенаЦены * 100/(100 +глПроцентНДС(ВыбранныйТовар.СтавкаНДС,Конт.ДатаДок));
					КонецЕсли;

					ЕстьАкция = 0;
					Если глЕстьРеквизитМнЧ("ЦенаБезСкидки", Конт.Вид()) = Да Тогда						
						Конт.ЦенаБезСкидки = ЦенаЦены;
						Если Константа.ОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаБезНДС Тогда
							// нужно вычислить цену без НДС, потом от не цену с НДС
							ЦенаБезНДС = Окр(Конт.ЦенаБезСкидки * 100 / (СтНДС + 100), 5);
							Конт.ЦенаБезСкидки = Окр(ЦенаБезНДС*(100+СтНДС)/100, 2);
						КонецЕсли;
						КатегорияЦены = "";
						глУстановитьСкидкуПоАкции(Конт, ЦенаЦены, ВыбранныйТовар, ЕстьАкция, КатегорияЦены);
					КонецЕсли;						
					
					Если фЦенаСНДС=1 Тогда
						Конт.ЦенаСНДС = ЦенаЦены;
					Иначе
						Конт.ЦенаБезНДС = ЦенаЦены;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ВидДок = "СписаниеТМЦВПроизводство" Тогда
				Конт.ВидДеятельности = ВыбранныйТовар.ВидДеятельности;
				Если Конт.СписыватьПоНормам = 0 Тогда 
					Конт.ВидЗатрат = ВыбранныйТовар.ВидЗатрат;
				КонецЕсли;	
			КонецЕсли;
			Если ВидДок = "НезавершенноеПроизводство" Тогда
				Конт.ВидДеятельности = ВыбранныйТовар.ВидДеятельности;
				Конт.КоэфЗавершенности = 1;
			КонецЕсли;
			Если ВидДок = "ВозвратТМЦИзПроизводства" Тогда
				Конт.ВидДеятельности = ВыбранныйТовар.ВидДеятельности;
				Конт.ВидЗатрат = ВыбранныйТовар.ВидЗатрат;
				ЕдиницаВыбранногоТовара = ВыбранныйТовар.ЕдиницаПоУмолчанию;
				Конт.Ед = ЕдиницаВыбранногоТовара;
				Конт.Коэффициент = ЕдиницаВыбранногоТовара.Коэффициент;
				Конт.ЦенаБезНДС = ВыбранныйТовар.УчетнаяЦена.Получить(?(Конт.Выбран() = 1, Конт.ТекущийДокумент(), Конт.ДатаДок)) * Конт.Коэффициент;
			КонецЕсли;
		КонецЕсли;
		Если (ЕстьЦена=Да) Тогда
			глВыч_Суммы_Накл(Конт,?(фЦенаСНДС=0,-1,1));
		КонецЕсли;
		
		Если ПустоеЗначение(ЕдиницаВыбранногоТовара) = 1 Тогда
			ЕдиницаВыбранногоТовара = ВыбранныйТовар.ЕдиницаПоУмолчанию;
		КонецЕсли;
		Если (глЕстьРеквизитМнЧ("Ед", Конт.Вид()) = Да) Тогда
			Если ПустоеЗначение(Конт.Ед) = 1 Тогда
				Конт.Ед = ЕдиницаВыбранногоТовара;
			КонецЕсли;
		КонецЕсли;
		Если глЕстьРеквизитМнЧ("Коэффициент", Конт.Вид()) = Да Тогда
			Если ПустоеЗначение(Конт.Коэффициент) = 1 Тогда
				Конт.Коэффициент = ЕдиницаВыбранногоТовара.Коэффициент;
			КонецЕсли;
		КонецЕсли;	  
	КонецЕсли;
КонецПроцедуры // глДобавитьТоварВДокумент()

// ===============================
// Название: глПриОбработкеПодбора(Выб,Конт)
// Возвращаемое значение:
// НЕТ
// Параметры:
// Конт - контекст документа, из которого вызвали функцию
// Выб - выбранный элемент из справочника "Номенклатура" или "Прайс_лист"
//       или таблица значений, содержащая товары
// Описание:
// Вызывается из модуля формы документа из процедуры ОбработкаПодбора()
Процедура глПриОбработкеПодбора(Выб,Конт) Экспорт
	Перем ТипЗнач;
	ТипЗнач=ТипЗначенияСтр(Выб);
	Если ТипЗнач="ТаблицаЗначений" Тогда
		УстановитьСклад = "Нет";
		Если Конт.Вид() = "ПриходнаяНакладнаяЗапасы" Тогда
			УстановитьСклад = Вопрос("Установить склад из шапки документа в подобранных строках?", "Да+Нет");
		КонецЕсли;
		Выб.ВыбратьСтроки();
		Пока Выб.ПолучитьСтроку()<>0 Цикл
			глДобавитьТоварВДокумент(Конт,Выб.Элемент,Выб.Количество,Выб.ЭлементЦены, Выб.НормыЗатрат, ,,УстановитьСклад);
		КонецЦикла;
	ИначеЕсли ТипЗнач="СписокЗначений" Тогда
		глДобавитьТоварВДокумент(Конт,Выб.Получить("ТМЦ"),Выб.Получить("Количество"),);
		
	ИначеЕсли ТипЗнач="Справочник" Тогда
		глДобавитьТоварВДокумент(Конт,Выб,1,);
	КонецЕсли;
КонецПроцедуры                                            

// =============================== //--- УМК Сандомирский В.Ю, (14.11.14)
// Название: глПриОбработкеПодбора(Выб,Конт)
// Возвращаемое значение:
// НЕТ
// Параметры:
// Конт - контекст документа, из которого вызвали функцию
// Выб - выбранный элемент из справочника "Номенклатура" или "Прайс_лист"
//       или таблица значений, содержащая товары
// Описание:
// Вызывается из модуля формы документа из процедуры ОбработкаПодбора()
Процедура глПриОбработкеПодбораЗаказа(Выб,Конт) Экспорт
	Перем ТипЗнач;
	ТипЗнач=ТипЗначенияСтр(Выб);
	Если ТипЗнач="ТаблицаЗначений" Тогда
		Выб.ВыбратьСтроки();
		Пока Выб.ПолучитьСтроку()<>0 Цикл
			глДобавитьТоварВДокумент(Конт,Выб.Элемент,Выб.Кг,Выб.ЭлементЦены, Выб.НормыЗатрат,Выб.Уп,Выб.Шт);  //Конт,Выб,ИзменитьКоличествоНа,ЭлемЦены, НЗ = "",ВидУпаковки="",ИзменитьШтукиНа=""
			глПриИзмененииТовара(Конт, 1);
			глВыч_Суммы_Накл(Конт);
		КонецЦикла;
	ИначеЕсли ТипЗнач="СписокЗначений" Тогда
		глДобавитьТоварВДокумент(Конт,Выб.Получить("ТМЦ"),Выб.Получить("Количество"),);
		
	ИначеЕсли ТипЗнач="Справочник" Тогда
		глДобавитьТоварВДокумент(Конт,Выб,1,);
	КонецЕсли;
КонецПроцедуры   

// ===============================
// Название: глДобавитьТоварПоШтрихКоду(Конт,Данные)
// Возвращаемое значение:
// НЕТ
// Параметры:
// Конт - контекст документа, из которого вызвали функцию
// Событие - внешнее событие, которое необходимо обработать
// Данные - считанный сканером штрих-код
// Описание:
// Универсальная процедура добавления товара, введенного со сканера штрих-кодов, 
// в многострочную часть документа. Процедура разбирает штрих-код, считанный сканером
// и заполняет строку документа
// Вызывается из модуля формы документа из процедуры ОбработкаВнешнегоСобытия()
Процедура глДобавитьТоварПоШтрихКоду(Конт,Событие,Данные) Экспорт
	Если РаботаСоСканеромШтрихКода<>2 Тогда
		Возврат;
	КонецЕсли;
	Если Событие="BarCodeValue"	Тогда
		СканерШтрихКода.ПосылкаДанных = 1;
        Если Конт.Форма.ТолькоПросмотр() = 1 Тогда
        	// форма открыта только для просмотра
			Возврат;
        КонецЕсли;
	КонецЕсли;
	// Определение типа штрих-кода
	Если ШтрихКодИмеетПрефикс=1 Тогда
		Если Найти("MPJS",Лев(Данные,1))<>0 Тогда
			// Штрих-код определяет ТМЦ
			Данные=Сред(Данные,2,СтрДлина(Данные)-1);
		Иначе
			Сообщить("Формат считанного штрих-кода не предназначен для ТМЦ");
		КонецЕсли;
	КонецЕсли;
	Тов=СоздатьОбъект("Справочник.ТМЦ");
	Упак=СоздатьОбъект("Справочник.Единицы");
	
	Лев2 = Лев(Данные,2);
	Если Лев2 = "22" Тогда
		// Используется свой внутренний штрих-код ТМЦ
		// Штрих-код построен по коду ТМЦ и весу
		Если Тов.НайтиПоКоду(Сред(Данные,3,5))=0 Тогда
			Сообщить("ТМЦ с кодом "+Сред(Данные,3,5)+" не найден");
			Возврат;
		КонецЕсли;
		ТекКво=Число(Сред(Данные,8,5))/1000;
		Упаковка = Тов.ЕдиницаПоУмолчанию;
	Иначе
		// Используется основной штрих-код ТМЦ
		// или свой внутренний штрих-код ТМЦ с префиксом "20,21"
		Если Упак.НайтиПоРеквизиту("ШтрихКод",Данные,1)=0 Тогда
			Сообщить("ТМЦ со штрих кодом "+Данные+" не найден");
			Возврат;
		КонецЕсли;
		Упаковка=Упак.ТекущийЭлемент();
		Тов=Упаковка.Владелец;
	КонецЕсли;
	                               
	глДобавитьТоварВДокумент(Конт,Тов.ТекущийЭлемент(),?(ПустоеЗначение(ТекКво)=1,1,ТекКво),);		
КонецПроцедуры // глДобавитьТоварПоШтрихКоду

// ===============================
// глКонтрольДатыДокумента(ПереданКонтекст, НачальнаяДатаДокумента)
//
// Параметры:
//  ПереданКонтекст        - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - дата документа до изменения. 
// 
// Возвращемое значение:
//  1 - если документу был присвоен новый номер;
//  0 - если документу не был присвоен новый номер.
//  
// Описание:
//  Функция определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, проверяет уникальность 
// номера документа, и, в противном случае, пытается присвоить документу 
// новый уникальный номер.
//  Для работы функции должна быть объявлена глобальная переменная модуля 
// формы документа НачальнаяДатаДокумента. В процедуре ПриОткрытии 
// в эту переменную должна быть записана дата документа.
//  Функция глКонтрольДатыДокумента() вызывается из процедуры ПриЗаписи.
//  В процедуре ПриЗаписи проверяется возвращаемое значение, и, если
// оно равно 1 (то есть, документу присвоен новый номер), статус возврата 
// устанавливается в 0, то есть документ не записывается, а происходит возрат 
// к редактированию документа.
//
Функция глКонтрольДатыДокумента(ПереданКонтекст, НачальнаяДатаДокумента) Экспорт
	Перем ФлагПрисвоенияНомера; // для возвращаемого значения
	
	ФлагПрисвоенияНомера=0;
	
	// Назначенную для данного вида документов периодичность смены номера
	// определяем из метаданных.
	ПериодСменыНомера = Метаданные.Документ(ПереданКонтекст.Вид()).ПериодичностьНомера;
	
	// В зависимости от установленной периодичности смены номеров,
	// определяем разность старой и новой датами документа.
	// В данном случае конкретная величина разности не важна, 
	// важен сам факт ее наличия.
	Если ПериодСменыНомера = "Год" Тогда
		РазностьДат = НачГода(НачальнаяДатаДокумента)-НачГода(ПереданКонтекст.ДатаДок);
		
	ИначеЕсли ПериодСменыНомера = "Квартал" Тогда
		РазностьДат = НачКвартала(НачальнаяДатаДокумента)-НачКвартала(ПереданКонтекст.ДатаДок);

	ИначеЕсли ПериодСменыНомера = "Месяц" Тогда
		РазностьДат = НачМесяца(НачальнаяДатаДокумента)-НачМесяца(ПереданКонтекст.ДатаДок);

	ИначеЕсли ПериодСменыНомера = "День" Тогда
		РазностьДат = НачальнаяДатаДокумента-ПереданКонтекст.ДатаДок;
	Иначе
		РазностьДат = 0;
	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		// В результате изменения даты документ "ушел" в другой период
		// смены номера. Возможные ситуации:
		// 1) в этом периоде уже существуют документы, и номер документа 
		//    стал неуникален;
		// 2) номер документа - большой, и за-за этого в последовательности
		//    номеров образовалась дыра.
		
		// Все операции проверки номера выполняем с "копией" документа.
		Дубликат = СоздатьОбъект("Документ."+ПереданКонтекст.Вид());
		Дубликат.Новый();
		Дубликат.НомерДок=ПереданКонтекст.НомерДок;
		Дубликат.ДатаДок=ПереданКонтекст.ДатаДок;
		Дубликат.Фирма =ПереданКонтекст.Фирма;
		
		// Попробуем присвоить новый номер.
		// Вызов метода должен учитывать особенности нумерации 
		// конкретного вида
		глУстановитьНомер(Дубликат);
		
		// Если новый номер не равен старому, значит, 
		// назначение номера прошло успешно.
		Если ( Дубликат.НомерДок <> ПереданКонтекст.НомерДок ) Тогда
			
			// Запоминаем новый номер и проверяем его на уникальность
			НовыйНомерДок = Дубликат.НомерДок;
			Если Дубликат.НайтиПоНомеру(Дубликат.НомерДок,Дубликат.ДатаДок)=0 Тогда
				
				// Если номер уникальный, выдаем запрос о необходимости 
				// назначить документу новый номер
				Если Вопрос("Изменен " + Нрег(ПериодСменыНомера)+" даты документа. Для документов вида """+ПереданКонтекст.ПредставлениеВида()+""""+РазделительСтрок+
							"каждый "+Нрег(ПериодСменыНомера)+" нумерация начинается заново. Присвоить новый номер?","Да+Нет") = "Да" Тогда
					ПереданКонтекст.НомерДок = НовыйНомерДок;

					// Новую дату документа запомнаем в качестве начальной даты - 
					// в случае возможных последующих проверок.
					НачальнаяДатаДокумента=ПереданКонтекст.ДатаДок;

					// Устанавливаем возвращаемое значение
					ФлагПрисвоенияНомера=1;
	
				КонецЕсли;    				
			КонецЕсли;
		КонецЕсли;
		// Активизируем номер докутента: если до
		ПереданКонтекст.Активизировать("НомерДок");
	КонецЕсли;

	Возврат ФлагПрисвоенияНомера;
	
КонецФункции // глКонтрольДатыДокумента()  

// ===============================
// Проверяет актуальность элемента на определенную дату
// Дата начала действия является первым днем действия элемента,
// дата окончания - последним днем действия
Функция глСпрАктуален(спрЭлемент, дНаДату) Экспорт
	Если спрЭлемент.ПометкаУдаления() = 1 Тогда
		// если элемент помечен на удаление, считаем неактуальным
		Возврат 0;
	КонецЕсли;
	Если ПустоеЗначение(дНаДату) = 1 Тогда
		// если дата не указана, считаем актуальным
	    Возврат 1;
	КонецЕсли;
	дНачалоДействия = спрЭлемент.ДатаНачалаДействия;
	Если ПустоеЗначение(дНачалоДействия) = 1 Тогда
		Возврат 0; // Если нет даты начала, то не действует
	ИначеЕсли дНачалоДействия > дНаДату  Тогда
		Возврат 0;
	Иначе
		дОкончаниеДействия = спрЭлемент.ДатаОкончанияДействия; 
		Если ПустоеЗначение(дОкончаниеДействия) = 1 Тогда
			Возврат 1;// Если нет даты окончания и начало < НаДату, то действует
		ИначеЕсли дОкончаниеДействия >= дНаДату Тогда
			Возврат 1;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
КонецФункции

// ===============================
// Принимает на вход справочник с инициированной выборкой элементов, среди которых ведется поиск
// Возвращает список актуальных элементов
Функция глСпрСписокАктуальных(спрСправочник, дНаДату) Экспорт
Перем спАктуальныеЭлементы; // Список актуальных элементов
        
	спАктуальныеЭлементы = СоздатьОбъект("СписокЗначений");
	Пока спрСправочник.ПолучитьЭлемент()=1 Цикл
		спрЭлемент = спрСправочник.ТекущийЭлемент();
		Если глСпрАктуален(спрЭлемент, дНаДату)=1 Тогда
			спАктуальныеЭлементы.ДобавитьЗначение(спрЭлемент,"");
		КонецЕсли;
	КонецЦикла;
	
	Возврат спАктуальныеЭлементы;
КонецФункции
                 
//================================                      
// Эта процедура предназначена для печати Списания ТМЦ и Накладной-требования
Процедура глПечатьСписаниеТМЦ(Док, МестоХранения = "", ТипПечФормы) Экспорт
	Если ТипПечФормы  = "СписаниеТМЦ" Тогда
		Таб = СоздатьОбъект("Таблица");
		СуффиксТаблицы = ?(глВосстановитьЗначение(,"ФормыНаУкраинском")= Да, "_Укр", "");
		Таб.ИсходнаяТаблица("Списание"+СуффиксТаблицы);
		глУстПропись(Гривня);
		ВесПрод = 0;
		Попытка
			// возьмём вес продукци из выпуска
			КвоКутеров = Док.КвоКутеров;
			КвоФарша = Док.КвоФарша;
			Док.ПолучитьСтрокуПоНомеру(1);
			ДокП = СоздатьОбъект("Документ");
			Если (ПустоеЗначение(Док.Заказ) = 0) и (ПустоеЗначение(Док.ПродукцияШ) = 0) Тогда
				ДокП.ВыбратьПодчиненныеДокументы(,,Док.Заказ);
				Пока ДокП.ПолучитьДокумент() = 1 Цикл
					Если (ДокП.Вид() = "ВыпускПродукции") и (ДокП.ПометкаУдаления() = 0) Тогда
					    ДокП.ВыбратьСтроки();
						Пока ДокП.ПолучитьСтроку() = 1 Цикл
							Если ДокП.Продукция = Док.ПродукцияШ Тогда
							    ВесПрод = ДокП.Кво;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ВесПрод <> 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Исключение 
			КвоФарша = 0;
			ВесПрод = 0;
		КонецПопытки;
		
		тбМатериалы = СоздатьОбъект("ТаблицаЗначений");
		тбМатериалы.НоваяКолонка("МестоХранения","Справочник.МестаХранения");
		тбМатериалы.НоваяКолонка("ТМЦ","Справочник.ТМЦ");
		тбМатериалы.НоваяКолонка("Кво");
		тбМатериалы.НоваяКолонка("Сумма");
		тбМатериалы.НоваяКолонка("СуммаДав");
		Рег = СоздатьОбъект("Регистр.Партии");
		Если ПустоеЗначение(МестоХранения) = 0 Тогда
		    Рег.УстановитьЗначениеФильтра("МестоХранения",МестоХранения,1); 
		КонецЕсли;
		Рег.ВыбратьДвиженияДокумента(Док);
		Пока Рег.ПолучитьДвижение()=1 Цикл
			Если Рег.Расход = 1 Тогда
				тбМатериалы.НоваяСтрока();
				тбМатериалы.МестоХранения = Рег.МестоХранения;
				тбМатериалы.ТМЦ = Рег.ТМЦ;
				тбМатериалы.Кво = Рег.ОстатокТовара;
				тбМатериалы.Сумма = Рег.Стоимость;
				Если Рег.Счет.Забалансовый = 1 Тогда
					тбМатериалы.СуммаДав = Рег.Стоимость - Рег.ПродСтоимость;
				Иначе
					тбМатериалы.СуммаДав = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Ном = 0;
		ИтогСумма = 0;
		ИтогСуммаДав = 0;
		ПерваяСтраница = 1;
		СтароеМестоХранения = "";
		
		тбМатериалы.Свернуть("МестоХранения,ТМЦ","Кво,Сумма,СуммаДав");
		тбМатериалы.Сортировать("+МестоХранения");
		тбМатериалы.ВыбратьСтроки();
		
		Пока тбМатериалы.ПолучитьСтроку()=1 Цикл
			Если СтароеМестоХранения <> тбМатериалы.МестоХранения Тогда
				Если ПерваяСтраница = 0 Тогда
					ПечИтогСумма = Формат(ИтогСумма,"Ч12.2");
					ПечИтогСуммаДав = Формат(ИтогСуммаДав,"Ч12.2");
					//прописью
					ПечИтогСуммаП = Формат(ИтогСумма,"ЧПДС");
					ПечИтогСуммаДавП = Формат(ИтогСуммаДав,"ЧПДС");
					Таб.ВывестиСекцию("Дно");  
					Таб.НоваяСтраница();
				КонецЕсли;
				СтароеМестоХранения = тбМатериалы.МестоХранения;
				ПерваяСтраница = 0;
				Ном = 0;
				ИтогСумма = 0;
				ИтогСуммаДав = 0;
			    Таб.ВывестиСекцию("Шапка");
			КонецЕсли;
			
			Ном = Ном + 1;
			ПечТМЦ = СокрЛП(тбМатериалы.ТМЦ.ПолнНаименование);
			ПечЕд = СокрЛП(тбМатериалы.ТМЦ.БазоваяЕдиница);
			ПечКво = Формат(тбМатериалы.Кво,"Ч12.3");
			ПечЦена = Формат(тбМатериалы.Сумма/тбМатериалы.Кво,"Ч12.2");
			ПечСумма = Формат(тбМатериалы.Сумма,"Ч12.2");
			ПечСуммаДав = Формат(тбМатериалы.СуммаДав,"Ч12.2");
			СуммаДляФ = ?(ВесПрод = 0,0, тбМатериалы.Сумма / ВесПрод);
			ПечСуммаДляФ = Формат(СуммаДляФ, "Ч12.2");
			
			Таб.ВывестиСекцию("Строка");
			ИтогСумма = ИтогСумма + тбМатериалы.Сумма;
			ИтогСуммаДав = ИтогСуммаДав + тбМатериалы.СуммаДав;
		КонецЦикла;
				
		ПечИтогСумма = Формат(ИтогСумма,"Ч12.2");
		ПечИтогСуммаДав = Формат(ИтогСуммаДав,"Ч12.2");
		//прописью
		ПечИтогСуммаП = Формат(ИтогСумма,"ЧПДС");
		ПечИтогСуммаДавП = Формат(ИтогСуммаДав,"ЧПДС");
		Таб.ВывестиСекцию("Дно");
		
		Таб.Защита(Константа.ФлагЗащитыТаблиц);
		Таб.ТолькоПросмотр(1);
		Таб.Опции(0,0,,);
		Таб.Показать("ПЕЧАТЬ: Списание ТМЦ в производство","");
		глУстПропись(Гривня);
	    
	ИначеЕсли ТипПечФормы = "НакладнаяТребование" Тогда
		Таб = СоздатьОбъект("Таблица");
		Таб.ИсходнаяТаблица("НакладнаяТребование_Укр");
		глУстПропись(Гривня,"у");
		
		тбМатериалы = СоздатьОбъект("ТаблицаЗначений");
		тбМатериалы.НоваяКолонка("МестоХранения","Справочник.МестаХранения");
		тбМатериалы.НоваяКолонка("ТМЦ","Справочник.ТМЦ");
		тбМатериалы.НоваяКолонка("Кво");
		тбМатериалы.НоваяКолонка("Сумма");
		тбМатериалы.НоваяКолонка("СуммаДав");
		Рег = СоздатьОбъект("Регистр.Партии");
		Если ПустоеЗначение(МестоХранения) = 0 Тогда
		    Рег.УстановитьЗначениеФильтра("МестоХранения",МестоХранения,1); 
		КонецЕсли;
		Рег.ВыбратьДвиженияДокумента(Док);
		Пока Рег.ПолучитьДвижение()=1 Цикл
			Если Рег.Расход = 1 Тогда
				тбМатериалы.НоваяСтрока();
				тбМатериалы.МестоХранения = Рег.МестоХранения;
				тбМатериалы.ТМЦ = Рег.ТМЦ;
				тбМатериалы.Кво = Рег.ОстатокТовара;
				тбМатериалы.Сумма = Рег.Стоимость;
				Если Рег.Счет.Забалансовый = 1 Тогда
					тбМатериалы.СуммаДав = Рег.Стоимость - Рег.ПродСтоимость;
				Иначе
					тбМатериалы.СуммаДав = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Ном = 0;
		ИтогСумма = 0;
		ПерваяСтраница = 1;
		СтароеМестоХранения = "";
		
		тбМатериалы.Свернуть("МестоХранения,ТМЦ","Кво,Сумма,СуммаДав");
		тбМатериалы.Сортировать("+МестоХранения");
		тбМатериалы.ВыбратьСтроки();
		
		Пока тбМатериалы.ПолучитьСтроку()=1 Цикл
			Если СтароеМестоХранения <> тбМатериалы.МестоХранения Тогда
				Если ПерваяСтраница = 0 Тогда
					ПечИтогСуммаП = Нрег(Формат(ИтогСумма,"ЧПДС"));
					Таб.ВывестиСекцию("Дно");
		            Таб.НоваяСтраница();
				КонецЕсли;
				СтароеМестоХранения = тбМатериалы.МестоХранения;
				ПерваяСтраница = 0;
				Ном = 0;
				ИтогСумма = 0;
			    Таб.ВывестиСекцию("Шапка");
			КонецЕсли;
			
			Ном = Ном + 1;
			ПечТМЦ = СокрЛП(тбМатериалы.ТМЦ.ПолнНаименование);
			ПечАртикул = СокрЛП(тбМатериалы.ТМЦ.Артикул);
			ПечЕд = СокрЛП(тбМатериалы.ТМЦ.БазоваяЕдиница);
			ПечКво = Формат(тбМатериалы.Кво,"Ч12.3");
			ПечЦена = Формат(тбМатериалы.Сумма/тбМатериалы.Кво,"Ч12.2");
			ПечСумма = Формат(тбМатериалы.Сумма,"Ч12.2");
			Если тбМатериалы.СуммаДав > 0 Тогда
				Если тбМатериалы.СуммаДав = тбМатериалы.Сумма Тогда
					КорСчет = "ДВ";
				Иначе
					КорСчет = "231;ДВ";
				КонецЕсли;
			Иначе
				КорСчет = "231";
			КонецЕсли;
			Таб.ВывестиСекцию("Строка");
			ИтогСумма = ИтогСумма + тбМатериалы.Сумма;
		КонецЦикла;
		
		ПечИтогСуммаП = Нрег(Формат(ИтогСумма,"ЧПДС"));
		Таб.ВывестиСекцию("Дно");
		Таб.Защита(Константа.ФлагЗащитыТаблиц);
		
		Таб.ТолькоПросмотр(1);
		Таб.Опции(0,0,,);
		Таб.Показать("Накладная-требование","");
		глУстПропись(Гривня);
	КонецЕсли;
КонецПроцедуры		//глПечатьСписаниеТМЦ                  	

// ===============================
// РАБОТА С ФИЛЬТРАМИ И ДИАЛОГАМИ ОТЧЕТОВ
// ===============================

// ===============================
// глПоказатьОбъектИзСписка(СписокОбъектов)
//
// Параметры:
//  СписокОбъектов - список значений с объектами
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Открывает карточку текущего объекта, из списка значений.
//
Процедура глПоказатьОбъектИзСписка(СписокОбъектов) Экспорт
	
	Поз = СписокОбъектов.ТекущаяСтрока();
	Если Поз>0 Тогда
		ОткрытьФорму(СписокОбъектов.ПолучитьЗначение(Поз));
	КонецЕсли;                                                    
	
КонецПроцедуры // глПоказатьОбъектИзСписка()

// ===============================
// глПриСменеСтрокиТаблицыМФ(Принудительно = 0, ТекСтрокаВТаблицеМФ)
//
// Параметры:
//  Принудительно 1 - выполнить действия, даже если не сменилась тек. строка
//	ТекСтрокаВТаблицеМФ -  предыдущая текущая строка в таблице МФ         
//	Конт - контекст формы
//
// Возвращаемое значение:
//  Возвращает строку с названием вида фильтра (используктся для формирования надписи).
//
// Вызывается из формул элементов диалога:
//  Функция вызывается при смене текущей строки таблицы МФ.
//
// Описание:
//  Предназначена для обновления списков значений в диалоге множественного фильтра.
//
Функция глПриСменеСтрокиТаблицыМФ(Принудительно = 0, ТекСтрокаВТаблицеМФ, Конт) Экспорт
	
	ТаблицаМФ = Конт.ТаблицаМФ;
	СписокЭлементовМФ = Конт.СписокЭлементовМФ;
	ТипМФ = Конт.ТипМФ;
	
	// текущая строка не поменялась
	Если (ТекСтрокаВТаблицеМФ = ТаблицаМФ.ТекущаяСтрока()) и (Принудительно=0) Тогда
		Возврат ТаблицаМФ.Представление;
	КонецЕсли;
            
	// сначала запомним список выбранных объектов строки МФ %%откуда%% пришли
	Если ПустоеЗначение(ТекСтрокаВТаблицеМФ) = 0 Тогда
		Попытка
			ТаблицаМФ.ПолучитьСтрокуПоНомеру(ТекСтрокаВТаблицеМФ);
		Исключение 
			Возврат ТаблицаМФ.Представление; 
		КонецПопытки;
	    СписокЭлементовМФ.Выгрузить(ТаблицаМФ.СписокЭлементов);
		Если СписокЭлементовМФ.РазмерСписка()=0 Тогда
			ТаблицаМФ.ФлВкл=1;
		КонецЕсли;                       
	КонецЕсли;
	
	ТекСтрокаВТаблицеМФ = ТаблицаМФ.ТекущаяСтрока();
	Попытка
		ТаблицаМФ.ПолучитьСтрокуПоНомеру(ТекСтрокаВТаблицеМФ);
	Исключение 
		Возврат ТаблицаМФ.Представление; 
	КонецПопытки;
	
	СписокЭлементовМФ.УдалитьВсе();
	Если ТаблицаМФ.Вид="ЗначенияСвойств" Тогда
		Если ТипМФ.РазмерСписка()<3 Тогда
			ТипМФ.ВставитьЗначение(3,"одновременно все");    
		КонецЕсли;
	Иначе
		Если ТипМФ.РазмерСписка()>2 Тогда
			ТипМФ.УдалитьЗначение(3);    
		КонецЕсли;
	КонецЕсли;
	ТипМФ.ТекущаяСтрока(ТаблицаМФ.ТипМФ);
	
	Попытка
		Спис	= ТаблицаМФ.СписокЭлементов;
	Исключение
		Возврат ТаблицаМФ.Представление;
	КонецПопытки;
	
	Если ТипЗначенияСтр(Спис) = "СписокЗначений" Тогда
		Спис.Выгрузить(СписокЭлементовМФ);
	Иначе			
		ТаблицаМФ.СписокЭлементов = СоздатьОбъект("СписокЗначений");
	КонецЕсли;	
	Возврат ТаблицаМФ.Представление;
	
КонецФункции	// глПриСменеСтрокиТаблицыМФ()    
  
// ===============================
// глМножественныйФильтрЗадан(ТаблицаМФ)
//
// Параметры:
//  ТаблицаМФ - ссылка на таблицу МФ
//
// Возвращаемое значение:
//  0, если множественный фильтр задан
//  1, иначе
//
// Описание:
//  Проверяет, задан ли множественный фильтр (хотя бы один)
//
Функция глМножественныйФильтрЗадан(ТаблицаМФ)  Экспорт
	
	ТаблицаМФ.ВыбратьСтроки();
	Пока ТаблицаМФ.ПолучитьСтроку()>0 Цикл
		Если (ТаблицаМФ.СписокЭлементов.РазмерСписка()>0) и (ТаблицаМФ.ФлВкл=2) Тогда
			Возврат 1;       
		КонецЕсли;       
	КонецЦикла;
	Возврат 0;
	
КонецФункции // глМножественныйФильтрЗадан	 

// ===============================
// глРаботаСТаблицейМФ(Режим,Конт)
//
// Параметры:
//  Режим 	- текстовая строка, определяет выполняемое действие	
//  Конт 	- контекст формы отчета
//
// Вызывается из формул элементов диалога:
//  Кнопки "Добавить", "ДобавитьНесколько", "Удалить", "УдалитьВсе"
//
// Описание:
//  Производит действия с таблице МФ в соотв. с параметром "Режим"
//
Процедура глРаботаСТаблицейМФ(Режим, Конт) Экспорт
	
	Перем ТекПоз;
	Перем ТекЭлемент;
	Перем ФормаПодбора;
	Перем ВидЗначенияПодбора;
	Перем СправочникПодбора;
	
	ТаблицаМФ = Конт.ТаблицаМФ;
	СписокЭлементовМФ = Конт.СписокЭлементовМФ;

	ТекПоз = СписокЭлементовМФ.ТекущаяСтрока();
	Если ТекПоз>0 Тогда // текущий элемент, спозиционируем на него
		ТекЭлемент=СписокЭлементовМФ.ПолучитьЗначение(ТекПоз);
	КонецЕсли;

	Если (Режим="Добавить") или (Режим="ДобавитьНесколько")  Тогда		// добавляем в список один элемент
		Если ТаблицаМФ.Тип="СписокЗначений" Тогда
			Значение="";ПозицияЗначения=0;
			ВидСписок = ТаблицаМФ.Вид;
			Если ВидСписок.ВыбратьЗначение(Значение,"",ПозицияЗначения,,1)=0 Тогда
				Возврат;
			КонецЕсли;
			
			Если СписокЭлементовМФ.НайтиЗначение(Значение)=0 Тогда
				ПредставлениеЗначения = "";
				ВидСписок.ПолучитьЗначение(ПозицияЗначения,ПредставлениеЗначения);
				СписокЭлементовМФ.ДобавитьЗначение(Значение,ПредставлениеЗначения);
				ТаблицаМФ.ФлВкл=2;
			КонецЕсли;  
			Возврат;
		КонецЕсли;

		Если ТипЗначенияСтр(ТаблицаМФ.Вид)="СписокЗначений" Тогда
			ВидЗначенияПодбора="";
			Если ТаблицаМФ.Вид.ВыбратьЗначение(ВидЗначенияПодбора,"",,,1)=0 Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли (ПустоеЗначение(ВидЗначенияПодбора) = 1) и (ТаблицаМФ.Тип = "Строка") Тогда
			Стр = "А";
			Пока Стр <> "" Цикл
				Стр = "";
				Если ВвестиСтроку(Стр, "Введите значение", 100) = 0 Тогда
				    Возврат;
				КонецЕсли;
				Стр = СокрЛП(Стр);
				Если Стр <> "" Тогда
					Если СписокЭлементовМФ.НайтиЗначение(Стр) = 0 Тогда
					    СписокЭлементовМФ.ДобавитьЗначение(Стр);
						ТаблицаМФ.ФлВкл=2
					КонецЕсли;				    
				КонецЕсли;
				
				Если Режим = "Добавить" Тогда
				    Возврат;
				КонецЕсли;
			КонецЦикла;
			Возврат;
		Иначе
			ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
		КонецЕсли;
		Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
			Возврат;
		КонецЕсли;
		СправочникПодбора = СокрЛП(ТаблицаМФ.Тип)+"."+ВидЗначенияПодбора;
		
		Зн = "";
		// проверим, не является ли справочник подчиненным другому?
		// если да, то надо сначала спросить владельца
		Если Врег(СокрЛП(ТаблицаМФ.Тип))=Врег("Справочник") Тогда
			Владелец = Метаданные.Справочник(ВидЗначенияПодбора).Владелец;
			Если СокрЛП(Владелец) <> "Метаданные" Тогда
				Если Владелец.ПолныйИдентификатор() = "Справочник.Фирмы" Тогда
					Попытка
						Зн= Конт.ВыбФирма;
					Исключение КонецПопытки;
				КонецЕсли;
				Если ПустоеЗначение(Зн)=1 Тогда
					Зн=СоздатьОбъект(Владелец.ПолныйИдентификатор());
					Зн.ВыборГруппы(0);
					Если Зн.Выбрать("Выберите "+Метаданные.Справочник(ВидЗначенияПодбора).Владелец,"") = 0 Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
				Если ВидЗначенияПодбора = "Подразделения" Тогда
					// для справочника подразделения нужно передать фирму как парамеитр,
					// иначе откроется "лишний" список фирм
					ФормаПодбора = Зн.ТекущийЭлемент();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// открываем окно подбора
		Конт.ОткрытьПодбор(СправочникПодбора,,ФормаПодбора,?(Режим="ДобавитьНесколько",1,0),ТекЭлемент);
		Если Врег(СокрЛП(ТаблицаМФ.Тип))=Врег("Справочник") Тогда
			ФормаПодбора.ВыборГруппы(1);
		КонецЕсли;
		Если ТипЗначенияСтр(Зн)="Справочник" Тогда
			ФормаПодбора.ИспользоватьВладельца(Зн.ТекущийЭлемент());
		КонецЕсли;
		
    ИначеЕсли Режим="УдалитьВсе" Тогда	// удаляем все элементы из списка
		СписокЭлементовМФ.УдалитьВсе();
		ТаблицаМФ.ФлВкл=1;
		
	ИначеЕсли Режим="Удалить" Тогда	// удаляем из списка один элемент
		Если ТекПоз >0 Тогда
			СписокЭлементовМФ.УдалитьЗначение(ТекПоз);
			Если СписокЭлементовМФ.РазмерСписка()>ТекПоз Тогда
				СписокЭлементовМФ.ТекущаяСтрока(ТекПоз);
			Иначе // поставим на последний элемент
				СписокЭлементовМФ.ТекущаяСтрока(СписокЭлементовМФ.РазмерСписка());	
			КонецЕсли;        
			Если СписокЭлементовМФ.РазмерСписка()=0 Тогда
				ТаблицаМФ.ФлВкл=1;                           
			КонецЕсли;
		КонецЕсли;   

	ИначеЕсли Режим="ДобавитьПустое" Тогда		// добавляем пустое значение
		Если ТипЗначенияСтр(ТаблицаМФ.Тип) = "Строка" Тогда
			Попытка
				Значение = ПолучитьПустоеЗначение(СокрЛП(ТаблицаМФ.Тип)+"."+ТаблицаМФ.ВидДляПустого);
			Исключение
				Значение = ПолучитьПустоеЗначение(СокрЛП(ТаблицаМФ.Тип)+"."+ТаблицаМФ.Вид);
			КонецПопытки;
			
			Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
				СписокЭлементовМФ.ДобавитьЗначение(Значение, "<...>");
				ТаблицаМФ.ФлВкл=2;
			КонецЕсли;    
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	// глРаботаСТаблицейМФ()

// ===============================
// глОбработкаКликаПоТаблицеМФ(Конт)
//
// Параметры:
//  Конт
//
// Вызывается из формул элементов диалога:
//   Производит действие при двойном клике по таблице МФ
//
// Описание:
//    Производит действия с таблицей МФ в зависимости от текущей колонки таблицы
//
Процедура глОбработкаКликаПоТаблицеМФ(Конт) Экспорт
	
	ТаблицаМФ = Конт.ТаблицаМФ;
	
	ТекСтр	= ТаблицаМФ.ТекущаяСтрока();
	ТекКол	= СокрЛП(ТаблицаМФ.ТекущаяКолонка());
	
	Если ТекСтр = 0 Тогда Возврат КонецЕсли;
	         
	ТаблицаМФ.ПолучитьСтрокуПоНомеру(ТекСтр);
	
	Если ТекКол = "ФлВкл" Тогда
		
		Если ТаблицаМФ.ФлВкл = 1 Тогда
			ТаблицаМФ.ФлВкл = 2;
		Иначе
			ТаблицаМФ.ФлВкл = 1;
		КонецЕсли;	
		
	Иначе		
		глРаботаСТаблицейМФ("Добавить",Конт);
	КонецЕсли;
	
КонецПроцедуры // глОбработкаКликаПоТаблицеМФ()      

// ===============================
// глДобавитьВТаблицуМФ(ТаблицаМФ,Тип, Вид, ИмяПеременной, Представление) Экспорт
//
// Параметры:                    
//	 ТаблицаМФ - ссылка на таблицу МФ
//   Тип - текстовая строка, тип значения
//   Вид - текстовая строка, вид значения
//   Имя переменной - имя переменной запроса, к которой должен быть приложен фильтр
//   Представление - текстовая строка - описание фильтра для пользователя
//
// Описание:
//    Добавляет в таблицу МФ 1 строку.
//    Используется для инициализации таблицы МФ

Процедура глДобавитьВТаблицуМФ(ТаблицаМФ, Тип, Вид, ИмяПеременной, Представление, ВидДляПустого = 0) Экспорт
	ТаблицаМФ.НоваяСтрока();
	ТаблицаМФ.Тип=Тип;
	ТаблицаМФ.Вид=Вид;
	ТаблицаМФ.ИмяПеременной=ИмяПеременной;                
	ТаблицаМФ.СписокЭлементов=СоздатьОбъект("СписокЗначений");
	ТаблицаМФ.ТипМФ=1; // текущая строка списка ТипМФ
	ТаблицаМФ.ФлВкл=1; // фильтр включен ("1" или "2")
	ТаблицаМФ.Представление=Представление;	
	Попытка
		ТаблицаМФ.ВидДляПустого = ВидДляПустого;
	Исключение
	КонецПопытки;	
КонецПроцедуры // глДобавитьВТаблицуМФ()

// ===============================
// глПредставлениеПустогоЗначения(НазваниеГруппировки)
//
// Параметры:
//  НазваниеГруппировки - строка с названием группировки
//
// Возвращаемое значение:
//  Строка, представление пустого значения элемента группировки.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Для отчетов иногда требуется пустое значение какой - либо группировки
//   представить специфической фразой.
//
Функция глПредставлениеПустогоЗначения(НазваниеГруппировки,Язык) Экспорт

	Если НазваниеГруппировки = "Валюта" Тогда
		Возврат ?(Язык="у", "< не вибрано валюту >", "< валюта не выбрана >");

	ИначеЕсли НазваниеГруппировки = "ВидДеятельности" Тогда
		Возврат ?(Язык="у", "< не вибрано вид діяльності>", "< вид деятельности не выбран >");

	ИначеЕсли (НазваниеГруппировки = "ВидДеятельности8") Или (НазваниеГруппировки = "ВидДеятельности9") Тогда
		Возврат ?(Язык="у", "< не вибрано вид діяльності>", "< вид деятельности не выбран >");

	ИначеЕсли НазваниеГруппировки = "ВидЗатрат" Тогда
		Возврат ?(Язык="у", "< не вибрано вид затрат>", "< вид затрат не выбран >");

	ИначеЕсли (НазваниеГруппировки = "ВидЗатрат8") Или (НазваниеГруппировки = "ВидЗатрат9") Тогда
		Возврат ?(Язык="у", "< не вибрано вид затрат>", "< вид затрат не выбран >");

	ИначеЕсли НазваниеГруппировки = "Договор" Тогда
		Возврат ?(Язык="у", "< не вибрано договір >", "< договор не выбран >");

	ИначеЕсли НазваниеГруппировки = "Документ" Тогда
		Возврат ?(Язык="у", "< не вибрано документ рухів >", "< документ движения не выбран >");

	ИначеЕсли НазваниеГруппировки = "ДокументРезерва" Тогда
		Возврат ?(Язык="у", "< не вибрано документ резервування >", "< документ резервирования не выбран >");

	ИначеЕсли НазваниеГруппировки = "Заказ" Тогда
		Возврат ?(Язык="у", "< не вибрано замовлення >", "< заказ не выбран >");

	ИначеЕсли НазваниеГруппировки = "КредДокумент" Тогда
		Возврат ?(Язык="у", "< не вибрано документ кредиту >", "< документ кредита не выбран >");

	ИначеЕсли НазваниеГруппировки = "Контрагент" Тогда
		Возврат ?(Язык="у", "< не вибрано контрагента >", "< контрагент не выбран >");
        
	ИначеЕсли НазваниеГруппировки = "Материал" Тогда
		Возврат ?(Язык="у", "< не вибрано матеріал >", "< материал не выбран >");	
		
	ИначеЕсли НазваниеГруппировки = "МестоХранения" Тогда
		Возврат ?(Язык="у", "< не вибрано місце зберігання >", "< место хранения не выбрано >");

	ИначеЕсли НазваниеГруппировки = "Номенклатура" Тогда
		Возврат ?(Язык="у", "< не вибрано номенклатурну позицію >", "< номенклатурная позиция не выбрана >");
		
	ИначеЕсли НазваниеГруппировки = "Партия" Тогда
		Возврат ?(Язык="у", "< не вибрано партію >", "< партия не выбрана >");

	ИначеЕсли НазваниеГруппировки = "Подразделение" Тогда
		Возврат ?(Язык="у", "< не вибрано підрозділ>", "< подразделение не выбрано >");

	ИначеЕсли (НазваниеГруппировки = "Подразделение8") Или (НазваниеГруппировки = "Подразделение9") Тогда
		Возврат ?(Язык="у", "< не вибрано підрозділ>", "< подразделение не выбрано >");

	ИначеЕсли НазваниеГруппировки = "Покупатель" Тогда
		Возврат ?(Язык="у", "< не вибрано покупця >", "< покупатель не выбран >");

	ИначеЕсли НазваниеГруппировки = "Поставщик" Тогда
		Возврат ?(Язык="у", "< не вибрано постачальника >", "< поставщик не выбран >");

	ИначеЕсли НазваниеГруппировки = "ПрихДокумент" Тогда
		Возврат ?(Язык="у", "< не вибрано документ прибуткування >", "< приходный документ не выбран >");

	ИначеЕсли НазваниеГруппировки = "Продукция" Тогда
		Возврат ?(Язык="у", "< не вибрано позицію продукції >", "< позиция продукции не выбрана >");

	ИначеЕсли НазваниеГруппировки = "РегионПокупателя" Тогда
		Возврат ?(Язык="у", "< не вибрано регіон покупця >", "< регион покупателя не выбран >");

	ИначеЕсли НазваниеГруппировки = "РегионПоставщика" Тогда
		Возврат ?(Язык="у", "< не вибрано регіон постачальника >", "< регион поставщица не выбран >");

	ИначеЕсли НазваниеГруппировки = "СтавкаНДС" Тогда
		Возврат ?(Язык="у", "< не вибрано ставку ПДВ >", "< ставка НДС не выбрана >");
		
	ИначеЕсли НазваниеГруппировки = "СтатьяКалькуляции" Тогда
		Возврат ?(Язык="у", "< не вибрано статтю калькуляції >", "< статья калькуляции не выбрана >");

	ИначеЕсли НазваниеГруппировки = "Счет" Тогда
		Возврат ?(Язык="у", "< не вибрано рахунок >", "< счет не выбран >");

	ИначеЕсли (НазваниеГруппировки = "Счет8") Или (НазваниеГруппировки = "Счет9") Тогда
		Возврат ?(Язык="у", "< не вибрано рахунок >", "< счет не выбран >");

	ИначеЕсли НазваниеГруппировки = "Товар" Тогда
		Возврат ?(Язык="у", "< не вибрано номенклатурну позицію >", "< номенклатурная позиция не выбрана >");

	Иначе
		Возврат ?(Язык="у", "< не вибрано >", "< не выбран >");

	КонецЕсли;
	
КонецФункции // глПредставлениеПустогоЗначения()

// ===============================
// глИменаВПадежах(ИмяПерем,НазвВ_ЕдЧ_ПредлПадеже,НазвВ_МнЧ_ДатПадеже,НазвВ_МнЧ_РодитПадеже)
//
// Процедура по названию переменной формирует ее названия в 
//  1 - дат. падеже ед числе
//  2 - дат. падеже мн числе
//  3 - род. падеже мн числе
//
// Используется при формировании заголовка печатной формы.
//
Процедура глИменаВПадежах(ИмяПерем,НзвРВ_ЕдЧ_ПредлПадеже,НзвРВ_МнЧ_ПредлПадеже,НзвРВ_МнЧ_РодитПадеже,
								 НзвУВ_ЕдЧ_ПредлПадеже,НзвУВ_МнЧ_ПредлПадеже,НзвУВ_МнЧ_РодитПадеже) Экспорт
	
	Если ИмяПерем="Валюта" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "валюте";
		НзвРВ_МнЧ_ПредлПадеже 	= "валютам";
		НзвРВ_МнЧ_РодитПадеже 	= "валют";
	
		НзвУВ_ЕдЧ_ПредлПадеже	= "валюті";
		НзвУВ_МнЧ_ПредлПадеже	= "валютах";
		НзвУВ_МнЧ_РодитПадеже	= "валют";

	ИначеЕсли ИмяПерем="ВидДеятельности" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "виду деятельности";
		НзвРВ_МнЧ_ПредлПадеже 	= "видам деятельности";
		НзвРВ_МнЧ_РодитПадеже 	= "видов деятельности";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "виду діяльності";
		НзвУВ_МнЧ_ПредлПадеже	= "видах діяльності";
		НзвУВ_МнЧ_РодитПадеже	= "видів діяльності";

	ИначеЕсли ИмяПерем="ВидДеятельности8" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "виду деятельности 8 класса";
		НзвРВ_МнЧ_ПредлПадеже 	= "видам деятельности 8 класса";
		НзвРВ_МнЧ_РодитПадеже 	= "видов деятельности 8 класса";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "виду діяльності 8 класу";
		НзвУВ_МнЧ_ПредлПадеже	= "видах діяльності 8 класу";
		НзвУВ_МнЧ_РодитПадеже	= "видів діяльності 8 класу";

	ИначеЕсли ИмяПерем="ВидДеятельности9" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "виду деятельности 9 класса";
		НзвРВ_МнЧ_ПредлПадеже 	= "видам деятельности 9 класса";
		НзвРВ_МнЧ_РодитПадеже 	= "видов деятельности 9 класса";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "виду діяльності 9 класу";
		НзвУВ_МнЧ_ПредлПадеже	= "видах діяльності 9 класу";
		НзвУВ_МнЧ_РодитПадеже	= "видів діяльності 9 класу";

	ИначеЕсли ИмяПерем="ВидЗатрат" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "виду затрат";
		НзвРВ_МнЧ_ПредлПадеже 	= "видам затрат";
		НзвРВ_МнЧ_РодитПадеже 	= "видов затрат";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "виду витрат";
		НзвУВ_МнЧ_ПредлПадеже	= "видах витрат";
		НзвУВ_МнЧ_РодитПадеже	= "видів витрат";

	ИначеЕсли ИмяПерем="ВидЗатрат8" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "виду затрат 8 класса";
		НзвРВ_МнЧ_ПредлПадеже 	= "видам затрат 8 класса";
		НзвРВ_МнЧ_РодитПадеже 	= "видов затрат 8 класса";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "виду витрат 8 класу";
		НзвУВ_МнЧ_ПредлПадеже	= "видах витрат 8 класу";
		НзвУВ_МнЧ_РодитПадеже	= "видів витрат 8 класу";

	ИначеЕсли ИмяПерем="ВидЗатрат9" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "виду затрат 9 класса";
		НзвРВ_МнЧ_ПредлПадеже 	= "видам затрат 9 класса";
		НзвРВ_МнЧ_РодитПадеже 	= "видов затрат 9 класса";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "виду витрат 9 класу";
		НзвУВ_МнЧ_ПредлПадеже	= "видах витрат 9 класу";
		НзвУВ_МнЧ_РодитПадеже	= "видів витрат 9 класу";

	ИначеЕсли ИмяПерем="Договор" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "договору";
		НзвРВ_МнЧ_ПредлПадеже 	= "договорам";
		НзвРВ_МнЧ_РодитПадеже 	= "договоров";

		НзвУВ_ЕдЧ_ПредлПадеже	= "договору";
		НзвУВ_МнЧ_ПредлПадеже	= "договорах";
		НзвУВ_МнЧ_РодитПадеже	= "договорів";

	ИначеЕсли ИмяПерем="Заказ" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "заказу";
		НзвРВ_МнЧ_ПредлПадеже 	= "заказам";
		НзвРВ_МнЧ_РодитПадеже 	= "заказов";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "замовленню";
		НзвУВ_МнЧ_ПредлПадеже	= "замовленнях";
		НзвУВ_МнЧ_РодитПадеже	= "замовлень";

	ИначеЕсли ИмяПерем="КатегорияКонтрагента" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "категории контрагентов";
		НзвРВ_МнЧ_ПредлПадеже 	= "категориям контрагентов";
		НзвРВ_МнЧ_РодитПадеже 	= "категорий контрагентов";   
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "категорії контрагентів";
		НзвУВ_МнЧ_ПредлПадеже	= "категоріях контрагентів";
		НзвУВ_МнЧ_РодитПадеже	= "категорій контрагентів";

	ИначеЕсли ИмяПерем="КатегорияПок" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "категории покупателей";
		НзвРВ_МнЧ_ПредлПадеже 	= "категориям покупателей";
		НзвРВ_МнЧ_РодитПадеже 	= "категорий покупателей";   
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "категорії покупців";
		НзвУВ_МнЧ_ПредлПадеже	= "категоріях покупців";
		НзвУВ_МнЧ_РодитПадеже	= "категорій покупців";

	ИначеЕсли ИмяПерем="КатегорияПост" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "категории поставщиков";
		НзвРВ_МнЧ_ПредлПадеже 	= "категориям поставщиков";
		НзвРВ_МнЧ_РодитПадеже 	= "категорий поставщиков";   
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "категорії постачальників";
		НзвУВ_МнЧ_ПредлПадеже	= "категоріях постачальників";
		НзвУВ_МнЧ_РодитПадеже	= "категорій постачальників";

	ИначеЕсли ИмяПерем="КатегорияТМЦ" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "категории ТМЦ";
		НзвРВ_МнЧ_ПредлПадеже 	= "категориям ТМЦ";
		НзвРВ_МнЧ_РодитПадеже 	= "категорий ТМЦ";   
                                                   
		НзвУВ_ЕдЧ_ПредлПадеже	= "категорії ТМЦ";
		НзвУВ_МнЧ_ПредлПадеже	= "категоріях ТМЦ";
		НзвУВ_МнЧ_РодитПадеже	= "категорій ТМЦ";

	ИначеЕсли ИмяПерем="Контрагент" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "контрагенту";
		НзвРВ_МнЧ_ПредлПадеже 	= "контрагентам";
		НзвРВ_МнЧ_РодитПадеже 	= "контрагентов";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "контрагенту";
		НзвУВ_МнЧ_ПредлПадеже	= "контрагентах";
		НзвУВ_МнЧ_РодитПадеже	= "контрагентів";
                           
	ИначеЕсли ИмяПерем="Материал" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "материалу";
		НзвРВ_МнЧ_ПредлПадеже 	= "позициям материалов";
		НзвРВ_МнЧ_РодитПадеже 	= "позиций материалов";
	
		НзвУВ_ЕдЧ_ПредлПадеже	= "матеріалу";
		НзвУВ_МнЧ_ПредлПадеже	= "позиціях матеріалів";
		НзвУВ_МнЧ_РодитПадеже	= "позицій матеріалів";
	
	ИначеЕсли ИмяПерем="МестоХранения" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "месту хранения";
		НзвРВ_МнЧ_ПредлПадеже 	= "местам хранения";
		НзвРВ_МнЧ_РодитПадеже 	= "мест хранения";   
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "місцю зберігання";
		НзвУВ_МнЧ_ПредлПадеже	= "місцях зберігання";
		НзвУВ_МнЧ_РодитПадеже	= "місць зберігання";

	ИначеЕсли ИмяПерем="МОЛ" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "МОЛу";
		НзвРВ_МнЧ_ПредлПадеже 	= "МОЛам";
		НзвРВ_МнЧ_РодитПадеже 	= "МОЛов";   
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "МВО";
		НзвУВ_МнЧ_ПредлПадеже	= "МВО";
		НзвУВ_МнЧ_РодитПадеже	= "МВО";

	ИначеЕсли ИмяПерем="Номенклатура" Тогда
		НзвРВ_ЕдЧ_ПредлПадеже 	= "номенклатуре";
		НзвРВ_МнЧ_ПредлПадеже 	= "номенклатурным позициям";
		НзвРВ_МнЧ_РодитПадеже 	= "номенклатурных позиций";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "номенклатурі";
		НзвУВ_МнЧ_ПредлПадеже	= "номенклатурних позиціях";
		НзвУВ_МнЧ_РодитПадеже	= "номенклатурних позицій";
		
    ИначеЕсли ИмяПерем="Партия" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "партии";
		НзвРВ_МнЧ_ПредлПадеже 	= "партиям";
		НзвРВ_МнЧ_РодитПадеже 	= "партий";
	
		НзвУВ_ЕдЧ_ПредлПадеже	= "партії";
		НзвУВ_МнЧ_ПредлПадеже	= "партіях";
		НзвУВ_МнЧ_РодитПадеже	= "партій";

	ИначеЕсли ИмяПерем="Подразделение" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "подразделению";
		НзвРВ_МнЧ_ПредлПадеже 	= "подразделениям";
		НзвРВ_МнЧ_РодитПадеже 	= "подразделений";
	
		НзвУВ_ЕдЧ_ПредлПадеже	= "підрозділу";
		НзвУВ_МнЧ_ПредлПадеже	= "підрозділах";
		НзвУВ_МнЧ_РодитПадеже	= "підрозділів";

	ИначеЕсли ИмяПерем="Подразделение8" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "подразделению 8 класса";
		НзвРВ_МнЧ_ПредлПадеже 	= "подразделениям 8 класса";
		НзвРВ_МнЧ_РодитПадеже 	= "подразделений 8 класса";
	
		НзвУВ_ЕдЧ_ПредлПадеже	= "підрозділу 8 класу";
		НзвУВ_МнЧ_ПредлПадеже	= "підрозділах 8 класу";
		НзвУВ_МнЧ_РодитПадеже	= "підрозділів 8 класу";

	ИначеЕсли ИмяПерем="Подразделение9" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "подразделению 9 класса";
		НзвРВ_МнЧ_ПредлПадеже 	= "подразделениям 9 класса";
		НзвРВ_МнЧ_РодитПадеже 	= "подразделений 9 класса";
	
		НзвУВ_ЕдЧ_ПредлПадеже	= "підрозділу 9 класу";
		НзвУВ_МнЧ_ПредлПадеже	= "підрозділах 9 класу";
		НзвУВ_МнЧ_РодитПадеже	= "підрозділів 9 класу";

	ИначеЕсли ИмяПерем="Покупатель" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "покупателю";
		НзвРВ_МнЧ_ПредлПадеже 	= "покупателям";
		НзвРВ_МнЧ_РодитПадеже 	= "покупателей";
	
		НзвУВ_ЕдЧ_ПредлПадеже	= "покупцю";
		НзвУВ_МнЧ_ПредлПадеже	= "покупцях";
		НзвУВ_МнЧ_РодитПадеже	= "покупців";

	ИначеЕсли ИмяПерем="Поставщик" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "поставщику";
		НзвРВ_МнЧ_ПредлПадеже 	= "поставщикам";
		НзвРВ_МнЧ_РодитПадеже 	= "поставщиков";

		НзвУВ_ЕдЧ_ПредлПадеже	= "постачальнику";
		НзвУВ_МнЧ_ПредлПадеже	= "постачальниках";
		НзвУВ_МнЧ_РодитПадеже	= "постачальників";
                                  
	ИначеЕсли ИмяПерем="Продукция" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "продукции";
		НзвРВ_МнЧ_ПредлПадеже 	= "позициям продукции";
		НзвРВ_МнЧ_РодитПадеже 	= "позиций продукции";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "продукції";
		НзвУВ_МнЧ_ПредлПадеже	= "позиціях продукції";
		НзвУВ_МнЧ_РодитПадеже	= "позицій продукції";
		
	ИначеЕсли ИмяПерем="РегионПокупателя" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "региону покупателя";
		НзвРВ_МнЧ_ПредлПадеже 	= "регионам покупателя";
		НзвРВ_МнЧ_РодитПадеже 	= "регионов покупателя";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "регіону покупця";
		НзвУВ_МнЧ_ПредлПадеже	= "регіонах покупця";
		НзвУВ_МнЧ_РодитПадеже	= "регіонів покупця";
		
	ИначеЕсли ИмяПерем="РегионПоставщика" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "региону поставщика";
		НзвРВ_МнЧ_ПредлПадеже 	= "регионам поставщика";
		НзвРВ_МнЧ_РодитПадеже 	= "регионов поставщика";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "регіону постачальника";
		НзвУВ_МнЧ_ПредлПадеже	= "регіонах постачальника";
		НзвУВ_МнЧ_РодитПадеже	= "регіонів постачальника";
		
	ИначеЕсли ИмяПерем="Склад" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "складу";
		НзвРВ_МнЧ_ПредлПадеже 	= "складам";
		НзвРВ_МнЧ_РодитПадеже 	= "складов";
	
		НзвУВ_ЕдЧ_ПредлПадеже	= "складу";
		НзвУВ_МнЧ_ПредлПадеже	= "складах";
		НзвУВ_МнЧ_РодитПадеже	= "складів";
		
	ИначеЕсли ИмяПерем="СтавкаНДС" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "ставке НДС";
		НзвРВ_МнЧ_ПредлПадеже 	= "ставкам НДС";
		НзвРВ_МнЧ_РодитПадеже 	= "ставок НДС";

		НзвУВ_ЕдЧ_ПредлПадеже	= "ставці ПДВ";
		НзвУВ_МнЧ_ПредлПадеже	= "ставках ПДВ";
		НзвУВ_МнЧ_РодитПадеже	= "ставок ПДВ";
	
	ИначеЕсли ИмяПерем="СтатьяКалькуляции" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "статье калькуляции";
		НзвРВ_МнЧ_ПредлПадеже 	= "статьям калькуляции";
		НзвРВ_МнЧ_РодитПадеже 	= "статей калькуляции";
	
		НзвУВ_ЕдЧ_ПредлПадеже	= "статті калькуляції";
		НзвУВ_МнЧ_ПредлПадеже	= "статтях калькуляції";
		НзвУВ_МнЧ_РодитПадеже	= "статей калькуляції";

	ИначеЕсли ИмяПерем="Счет" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "счету";
		НзвРВ_МнЧ_ПредлПадеже	= "счетам";
		НзвРВ_МнЧ_РодитПадеже	= "счетов";

		НзвУВ_ЕдЧ_ПредлПадеже 	= "рахунку";
		НзвУВ_МнЧ_ПредлПадеже	= "рахунках";
		НзвУВ_МнЧ_РодитПадеже	= "рахунків";
		
	ИначеЕсли ИмяПерем="Счет8" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "счету 8 класса";
		НзвРВ_МнЧ_ПредлПадеже	= "счетам 8 класса";
		НзвРВ_МнЧ_РодитПадеже	= "счетов 8 класса";

		НзвУВ_ЕдЧ_ПредлПадеже 	= "рахунку 8 класу";
		НзвУВ_МнЧ_ПредлПадеже	= "рахунках 8 класу";
		НзвУВ_МнЧ_РодитПадеже	= "рахунків 8 класу";
		
	ИначеЕсли ИмяПерем="Счет9" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "счету 9 класса";
		НзвРВ_МнЧ_ПредлПадеже	= "счетам 9 класса";
		НзвРВ_МнЧ_РодитПадеже	= "счетов 9 класса";

		НзвУВ_ЕдЧ_ПредлПадеже 	= "рахунку 9 класу";
		НзвУВ_МнЧ_ПредлПадеже	= "рахунках 9 класу";
		НзвУВ_МнЧ_РодитПадеже	= "рахунків 9 класу"; 

	ИначеЕсли ИмяПерем="Товар" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "номенклатуре";
		НзвРВ_МнЧ_ПредлПадеже 	= "номенклатурным позициям";
		НзвРВ_МнЧ_РодитПадеже 	= "номенклатурных позиций";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "номенклатурі";
		НзвУВ_МнЧ_ПредлПадеже	= "номенклатурних позиціях";
		НзвУВ_МнЧ_РодитПадеже	= "номенклатурних позицій";

	ИначеЕсли ИмяПерем="Фирма" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "фирме";
		НзвРВ_МнЧ_ПредлПадеже 	= "фирмам";
		НзвРВ_МнЧ_РодитПадеже 	= "фирм";
	
		НзвУВ_ЕдЧ_ПредлПадеже	= "фірмі";
		НзвУВ_МнЧ_ПредлПадеже	= "фірмах";
		НзвУВ_МнЧ_РодитПадеже	= "фірм";
	
	ИначеЕсли ИмяПерем="Признак" Тогда

		НзвРВ_ЕдЧ_ПредлПадеже 	= "признаку";
		НзвРВ_МнЧ_ПредлПадеже 	= "признакам";
		НзвРВ_МнЧ_РодитПадеже 	= "признаков";
	
		НзвУВ_ЕдЧ_ПредлПадеже	= "ознаці";
		НзвУВ_МнЧ_ПредлПадеже	= "ознаках";
		НзвУВ_МнЧ_РодитПадеже	= "ознак";

	Иначе

		НзвРВ_ЕдЧ_ПредлПадеже 	= "";
		НзвРВ_МнЧ_ПредлПадеже 	= "";
		НзвРВ_МнЧ_РодитПадеже 	= "";
		
		НзвУВ_ЕдЧ_ПредлПадеже	= "";
		НзвУВ_МнЧ_ПредлПадеже	= "";
		НзвУВ_МнЧ_РодитПадеже	= "";

	КонецЕсли;
	
КонецПроцедуры // глИменаВПадежах()

// ===============================
// глФильтрПоСправочнику(ПолеЕФ,ИмяПоляЕФ,
//						 ПолеМФ,ИмяПоляМФ,ТипМФ,
//						 ТекстЗапроса,ТекстЗаголовка,
//						 ИмяПеремЗапроса) Экспорт 
// Параметры:
//  ПолеЕФ - если выбран, то единичный (простой) фильтр по позиции справочника 
//	ИмяПоляЕФ - строка - наименование поля ЕФ в отчете
//  ПолеМФ - если выбран, то множественный фильтр по позиции справочника
//	ИмяПоляМФ - строка - наименование переменной (списка) позиций МФ
//  ТипМФ - тип МФ. (соотв. номеру позиции в списке "Тип МФ" в диалогах отчетов)
//  ТекстЗапроса 	- текст запроса, в который надо добавить фильтр 
//  ТекстЗаголовка 	- заголовок отчета, в который надо добавить описание фильтра
//	ИмяПеремЗапроса - название переменной запроса, к которой применяем фильтр
//  
// Возвращаемое значение:
// 	Возвращает 0 ошибка, не 0 ОК.
// 
// Описание:
//	Универсальная функция для формирования заголовков и текстов запросов в отчетах.
//
Функция глФильтрПоСправочнику(ПолеЕФ,ИмяПоляЕФ,
							  ПолеМФ,ИмяПоляМФ,ТипМФ,
							  ТекстЗапроса,ТекстЗаголовка,
							  ИмяПеремЗапроса, Язык) Экспорт 
				                                                                             
	Перем НзвРВ_ЕдЧ_ПредлПадеже,НзвРВ_МнЧ_ПредлПадеже,НзвРВ_МнЧ_РодитПадеже;	
	Перем НзвУВ_ЕдЧ_ПредлПадеже,НзвУВ_МнЧ_ПредлПадеже,НзвУВ_МнЧ_РодитПадеже;	
	Перем ЕстьЕФ,ЕстьМФ;
	 
	глИменаВПадежах(ИмяПеремЗапроса,НзвРВ_ЕдЧ_ПредлПадеже,НзвРВ_МнЧ_ПредлПадеже,НзвРВ_МнЧ_РодитПадеже,
								  НзвУВ_ЕдЧ_ПредлПадеже,НзвУВ_МнЧ_ПредлПадеже,НзвУВ_МнЧ_РодитПадеже);

	ЕстьЕФ = 0;
	ЕстьМФ = 0;
	
	Если ТипЗначенияСтр(ПолеМФ)="СписокЗначений" Тогда
		Если (ПолеМФ.РазмерСписка()>0) Тогда
			ЕстьМФ = 1;
		КонецЕсли;
	КонецЕсли;	
	
	Если ПустоеЗначение(ПолеЕФ)=0 Тогда
		ЕстьЕФ = 1;
	КонецЕсли;	
	
	Если ЕстьМФ = 1 Тогда		// есть множественный фильтр по позициям справочника
		Если ТипМФ=1 Тогда // принадлежит списку
			ТекстЗапроса = ТекстЗапроса+"Условие ("+ИмяПеремЗапроса+" в "+ИмяПоляМФ+");";
		Иначе     
			ТекстЗапроса = ТекстЗапроса+"Условие (НЕ("+ИмяПеремЗапроса+" в "+ИмяПоляМФ+"));";
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьЕФ = 1 Тогда				// есть простой фильтр по позициям справочника
		Если ТипЗначенияСтр(ПолеЕФ)="Строка" Тогда
		    ТекстЗапроса= ТекстЗапроса+"Условие (Найти("+ИмяПеремЗапроса+", "+ИмяПоляЕФ+") <> 0);";
		Иначе
			ТекстЗапроса= ТекстЗапроса+"Условие ("+ИмяПеремЗапроса+" в "+ИмяПоляЕФ+");";
		КонецЕсли;
		
	КонецЕсли;
	                       
	Если ЕстьМФ=0 Тогда
		Если Язык="у" Тогда
			Если ЕстьЕФ=0 Тогда			
				ТекстЗаголовка=ТекстЗаголовка+"По всіх "+НзвУВ_МнЧ_ПредлПадеже;			
				
			ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Документ" Тогда
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_ЕдЧ_ПредлПадеже+" """+
				глДокументВОтчете(ПолеЕФ,"с номером","с датой",Язык)+"""";
				      
			ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Перечисление" Тогда
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+"""";
		
			ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Строка" Тогда
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+"""";
			
			ИначеЕсли ПолеЕФ.ЭтоГруппа()=1 Тогда
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_МнЧ_ПредлПадеже+" з групи """+Строка(ПолеЕФ)+"""";
				
			Иначе
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+"""";
				
			КонецЕсли;		
		Иначе
			Если ЕстьЕФ=0 Тогда			
				ТекстЗаголовка=ТекстЗаголовка+"По всем "+НзвРВ_МнЧ_ПредлПадеже;			
				
			ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Документ" Тогда
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+"""";
				      
			ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Перечисление" Тогда
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+"""";
				
			ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Строка" Тогда
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+"""";			

			ИначеЕсли ПолеЕФ.ЭтоГруппа()=1 Тогда
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_МнЧ_ПредлПадеже+" из группы """+Строка(ПолеЕФ)+"""";
				
			Иначе
				ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+"""";
				
			КонецЕсли;		
		КонецЕсли;
	Иначе
		Если Язык="у" Тогда
			Если ЕстьЕФ=0 Тогда			
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_МнЧ_ПредлПадеже+" зі списку";
				Иначе // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_МнЧ_ПредлПадеже+", окрім вказаних у списку";
				КонецЕсли;
			ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Документ" Тогда
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+"""";
				Иначе     // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_ЕдЧ_ПредлПадеже+" окрім """+Строка(ПолеЕФ)+"""";
				КонецЕсли;
			ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Перечисление" Тогда
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+"""";
				Иначе     // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_ЕдЧ_ПредлПадеже+" окрім """+Строка(ПолеЕФ)+"""";
				КонецЕсли;
	    	ИначеЕсли ПолеЕФ.ЭтоГруппа()=1 Тогда    
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_МнЧ_ПредлПадеже+" зі списку, які належать групі """+Строка(ПолеЕФ)+""""+",";
				Иначе     // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_МнЧ_ПредлПадеже+", окрім вказаних у списку, які належать групі """+Строка(ПолеЕФ)+""""+",";
				КонецЕсли;
			Иначе                                       
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+""" зі списку";
				Иначе     // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвУВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+""", окрім вказаних у списку";
				КонецЕсли;
			КонецЕсли;		
		Иначе
			Если ЕстьЕФ=0 Тогда			
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_МнЧ_ПредлПадеже+" из списка";
				Иначе // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_МнЧ_ПредлПадеже+", кроме указанных в списке";
				КонецЕсли;
			ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Документ" Тогда
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+"""";
				Иначе     // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_ЕдЧ_ПредлПадеже+" кроме """+Строка(ПолеЕФ)+"""";
				КонецЕсли;
			ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Перечисление" Тогда
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+"""";
				Иначе     // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_ЕдЧ_ПредлПадеже+" кроме """+Строка(ПолеЕФ)+"""";
				КонецЕсли;
	    	ИначеЕсли ПолеЕФ.ЭтоГруппа()=1 Тогда    
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_МнЧ_ПредлПадеже+" из списка, принадлежащим группе """+Строка(ПолеЕФ)+""""+",";
				Иначе     // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_МнЧ_ПредлПадеже+", кроме указанных в списке, принадлежащим группе """+Строка(ПолеЕФ)+""""+",";
				КонецЕсли;
			Иначе                                       
				Если ТипМФ=1 Тогда // принадлежит списку
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+""" из списка";
				Иначе     // задан список, в который не должно входить значение
					ТекстЗаголовка=ТекстЗаголовка+"По "+НзвРВ_ЕдЧ_ПредлПадеже+" """+Строка(ПолеЕФ)+""", кроме указанных в списке";
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;      
	КонецЕсли;      
	                          
	// убираем лишнюю запятую из конца заголовка
	Если Прав(ТекстЗаголовка,1)="," Тогда
		ТекстЗаголовка = Лев(ТекстЗаголовка,СтрДлина(ТекстЗаголовка)-1);
	КонецЕсли;	
	
    Если ПустаяСтрока(ТекстЗаголовка)=0 Тогда	// заголовок непуст
		// добавим точку в конец заголовка
		ТекстЗаголовка = ТекстЗаголовка + ". ";
	КонецЕсли;	
	
	Возврат 1;						
							
КонецФункции // глФильтрПоСправочнику()      

// ===============================
// глФильтрПоКатегориям(ВидСправочникаКатегорий,
//						ПолеМФ, ИмяПоляМФ, ТипМФ,
//						ТекстЗапроса, ТекстЗаголовка, ИмяПеремЗапроса) Экспорт 
// Параметры:
//  ВидСправочникаКатегорий - Строка, вид справочника свойств ("ВидыКатегории", ...)
//  ПолеМФ - если выбран, то множественный фильтр по позиции справочника
//	ИмяПоляМФ - строка - наименование переменной (списка) позиций МФ
//  ТипМФ - тип МФ. (соотв. номеру позиции в списке "Тип МФ" в диалогах отчетов)
//  ТекстЗапроса 	- текст запроса, в который надо добавить фильтр 
//  ТекстЗаголовка 	- заголовок отчета, в который надо добавить описание фильтра
//	ИмяПеремЗапроса - название переменной запроса, к которой применяем фильтр
//  
// Возвращаемое значение:
// 	Возвращает 0 ошибка, не 0 ОК.
// 
// Описание:
//	Универсальная функция для формирования заголовков и текстов запросов в отчетах.
//  Предназначена для установки фильтра по свойствам ТМЦ и контрагентов.
//
Функция глФильтрПоКатегориям(ВидСправочникаКатегорий,
							ПолеМФ, ИмяПоляМФ, ТипМФ,
							ТекстЗапроса, ТекстЗаголовка, ИмяПеремЗапроса, Язык) Экспорт 
				                                                                             
	Перем НзвРВ_ЕдЧ_ПредлПадеже,НзвРВ_МнЧ_ПредлПадеже,НзвРВ_МнЧ_РодитПадеже;
	Перем НзвУВ_ЕдЧ_ПредлПадеже,НзвУВ_МнЧ_ПредлПадеже,НзвУВ_МнЧ_РодитПадеже;
	Перем Запрос, ТекстЗапросаСвойств;
       
	ЕстьМФ = 0;
	Если ТипЗначенияСтр(ПолеМФ)="СписокЗначений" Тогда
		Если (ПолеМФ.РазмерСписка()>0) Тогда
			ЕстьМФ = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьМФ = 0 Тогда
		Возврат(1);
	КонецЕсли;

	глИменаВПадежах(ИмяПеремЗапроса,НзвРВ_ЕдЧ_ПредлПадеже,НзвРВ_МнЧ_ПредлПадеже,НзвРВ_МнЧ_РодитПадеже,
								  НзвУВ_ЕдЧ_ПредлПадеже,НзвУВ_МнЧ_ПредлПадеже,НзвУВ_МнЧ_РодитПадеже);
	
	Если (ТипМФ=1) или (ТипМФ=3) Тогда // принадлежит списку или одновременно все
		ТекстЗапроса= ТекстЗапроса+"Условие ("+ИмяПеремЗапроса+" в "+ИмяПоляМФ+");";
	Иначе     
		ТекстЗапроса= ТекстЗапроса+"Условие (НЕ("+ИмяПеремЗапроса+" в "+ИмяПоляМФ+"));";
	КонецЕсли;
	
	// убираем лишнюю точку из конца заголовка
	Если Прав(ТекстЗаголовка,2)=". " Тогда
		ТекстЗаголовка = Лев(ТекстЗаголовка,СтрДлина(ТекстЗаголовка)-2);
	КонецЕсли;	
	
	Если Язык="у" Тогда
		Если ТипМФ=1 Тогда // принадлежит списку
			ТекстЗаголовка = ТекстЗаголовка +", які належать до категорій """+ПолеМФ.ВСтрокуСРазделителями()+"""";
			
		ИначеЕсли ТипМФ=2 Тогда    // задан список, в который не должно входить значение
			ТекстЗаголовка = ТекстЗаголовка +", окрім тих, які належать до категорій """+ПолеМФ.ВСтрокуСРазделителями()+"""";
			
		Иначе //Если ТипМФ=3 Одновременно все свойства должны быть
			ТекстЗаголовка = ТекстЗаголовка +", які одночасно належать до категорій """+ПолеМФ.ВСтрокуСРазделителями()+"""";
		КонецЕсли;
	Иначе
		Если ТипМФ=1 Тогда // принадлежит списку
			ТекстЗаголовка = ТекстЗаголовка +", принадлежащим категориям """+ПолеМФ.ВСтрокуСРазделителями()+"""";
			
		ИначеЕсли ТипМФ=2 Тогда    // задан список, в который не должно входить значение
			ТекстЗаголовка = ТекстЗаголовка +", кроме принадлежащих категориям """+ПолеМФ.ВСтрокуСРазделителями()+"""";
			
		Иначе //Если ТипМФ=3 Одновременно все свойства должны быть
			ТекстЗаголовка = ТекстЗаголовка +", одновременно принадлежащих категориям """+ПолеМФ.ВСтрокуСРазделителями()+"""";
		КонецЕсли;
	КонецЕсли;
	                       
	// убираем лишнюю запятую из конца заголовка
	Если Прав(ТекстЗаголовка,1)="," Тогда
		ТекстЗаголовка = Лев(ТекстЗаголовка,СтрДлина(ТекстЗаголовка)-1);
	КонецЕсли;	
	
    Если ПустаяСтрока(ТекстЗаголовка)=0 Тогда	// заголовок непуст
		// добавим точку в конец заголовка
		ТекстЗаголовка = ТекстЗаголовка + ". ";
	КонецЕсли;	
	
	// теперь отбираем позиции по списку свойств
	ТекстЗапросаКатегорий = "      
	|Обрабатывать НеПомеченныеНаУдаление;
	|КатегорияПозиции 	= Справочник."+ВидСправочникаКатегорий+".ТекущийЭлемент;
	|Позиция 			= Справочник."+ВидСправочникаКатегорий+".Владелец;
	|КатегорияПоз 		= Справочник."+ВидСправочникаКатегорий+".Категория;
	|Группировка Позиция Без Групп;";
	Если ТипМФ=3 Тогда
		ТекстЗапросаКатегорий =ТекстЗапросаКатегорий +
	    "Группировка КатегорияПоз Без Групп;";
	КонецЕсли;
	ТекстЗапросаКатегорий =ТекстЗапросаКатегорий +
	"Условие (КатегорияПоз в ПолеМФ);
	|";                          
	
	// выполняем запрос
	Запрос = СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗапросаКатегорий)=0 Тогда
		Возврат 0;
	КонецЕсли;	               
	
	// Очищаем список. Теперь в него надо загрузить отобранные запросом элементы
	ВсегоКатегорий=ПолеМФ.РазмерСписка();
	
	ПолеМФ.УдалитьВсе();
	
	Пока Запрос.Группировка("Позиция")>0 Цикл
		Если (ТипМФ=1) или (ТипМФ=2) Тогда
			ПолеМФ.ДобавитьЗначение(Запрос.Позиция);
		Иначе // одновременно все, переберем категории каждого элемента (ТМЦ, контрагента)
			// условие "одновременно все" истинно, если категорий у элемента будет столько же,
			// сколько и в переданном списке категорий
			ВсегоСвойствУЭлемента=0;
			Пока Запрос.Группировка("КатегорияПоз")>0 Цикл
				Если ПустоеЗначение(Запрос.СвойствоПоз)=0 Тогда
					ВсегоКатегорийУЭлемента=ВсегоКатегорийУЭлемента+1;    
				КонецЕсли;                                        
			КонецЦикла;
			Если ВсегоКатегорийУЭлемента>=ВсегоКатегорий Тогда
				ПолеМФ.ДобавитьЗначение(Запрос.Позиция);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	Если (ПолеМФ.РазмерСписка()=0) и ((ТипМФ=1)или(ТипМФ=3)) Тогда
		// если запрос ничего не принес и тип фильтра = "входит в список"
		глПоказатьПредупреждение("Не найдено "+НзвРВ_МнЧ_РодитПадеже+" с заданными свойствами.");
		Возврат(0);
	КонецЕсли;
	Возврат 1;												
	
КонецФункции //глФильтрПоСвойствам()

// ===============================
// ПрисвоитьЗначениеУсловию(Номер, СписокЭлементов, Поле)
//
// Параметры: 
//  Номер           - число, номер условия множественного фильтра,
//  СписокЭлементов - список выбранных элементов для построения условия с данным номером,
//  Поле            - список значений для промежуточного запрос.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Служит для присвоения значения глобальной переменной условия по множественному фильтру
//  с нужным номером.
//
Процедура ПрисвоитьЗначениеУсловию(Номер, СписокЭлементов, Поле)
	
	Если      Номер = 1 Тогда
	 	глУсловие1 = СписокЭлементов;
	 	Поле       = глУсловие1;
	ИначеЕсли Номер = 2 Тогда    
	 	глУсловие2 = СписокЭлементов;
	 	Поле       = глУсловие2;
	ИначеЕсли Номер = 3 Тогда    
	 	глУсловие3 = СписокЭлементов;
	 	Поле       = глУсловие3;
	ИначеЕсли Номер = 4 Тогда    
	 	глУсловие4 = СписокЭлементов;
	 	Поле       = глУсловие4;
	ИначеЕсли Номер = 5 Тогда    
	 	глУсловие5 = СписокЭлементов;
	 	Поле       = глУсловие5;
	ИначеЕсли Номер = 6 Тогда    
	 	глУсловие6 = СписокЭлементов;
	 	Поле       = глУсловие6;
	ИначеЕсли Номер = 7 Тогда    
	 	глУсловие7 = СписокЭлементов;
	 	Поле       = глУсловие7;
	ИначеЕсли Номер = 8 Тогда    
	 	глУсловие8 = СписокЭлементов;
	 	Поле       = глУсловие8;
	ИначеЕсли Номер = 9 Тогда    
	 	глУсловие9 = СписокЭлементов;
	 	Поле       = глУсловие9;
	ИначеЕсли Номер = 10 Тогда    
	 	глУсловие10= СписокЭлементов;
	 	Поле       = глУсловие10;
   	ИначеЕсли Номер = 11 Тогда    
	 	глУсловие11= СписокЭлементов;
	 	Поле       = глУсловие11;
   	ИначеЕсли Номер = 12 Тогда    
	 	глУсловие12 = СписокЭлементов;
	 	Поле       = глУсловие12;
   	ИначеЕсли Номер = 13 Тогда    
	 	глУсловие13 = СписокЭлементов;
	 	Поле       = глУсловие13;
	Иначе
	 	Сообщить("Некорректный номер условия множественного фильтра.","!!");
	КонецЕсли;
	
КонецПроцедуры // ПрисвоитьЗначениеУсловию()

// ===============================
// глФильтрПоПеременнойЗапроса(...)
//
// Параметры:
//  ТаблицаМФ       - таблица значений множественного фильтра (не обязательный параметр),
//	ИмяПеремЗапроса - название переменной запроса, к которой применить фильтр
//	ПолеЕФ 			- значение элемента диалога, в котором вводится значение фильтра
//	ИмяПоляЕФ 		- название элемента диалога, в котором вводится значение фильтра
//  ТекстЗапроса 	- переменная, в которой содержится текст формируемого запроса
//	ТекстЗаголовка 	- переменная, в которой содержится заголовок отчета
//	Язык			- язык, на котором будет формироваться заголовок
//	ВидСправочникаКатегорий - название справочника категорий
//
// Возвращаемое значение:
//   0 - ошибка, 1 - успешно 
//
// Описание:
//  Дополняет текст запроса и заголовок отчета по переданному фильтру.
//
Функция глФильтрПоПеременнойЗапроса(ТаблицаМФ = "",ИмяПеремЗапроса,ПолеЕФ,ИмяПоляЕФ,ТекстЗапроса,ТекстЗаголовка, Язык, ВидСправочникаКатегорий="") Экспорт
    Перем ПолеМФ, 			ИмяПоляМФ, 			ВремТипМФ;
	Перем ПолеМФКатегорий, 	ИмяПоляМФКатегорий, ТипМФКатегорий;
	
	Если ПустоеЗначение(ТаблицаМФ) = 1 Тогда // нет множественного фильтра
		ПолеМФ = ""; ИмяПоляМФ = ""; ВремТипМФ = "";
		ПолеМФСвойств = ""; ИмяПоляМФСвойств = ""; ТипМФСвойств = "";
	Иначе
		ТаблицаМФ.ВыбратьСтроки();
		Пока ТаблицаМФ.ПолучитьСтроку()=1 Цикл
			Если (ТаблицаМФ.СписокЭлементов.РазмерСписка()>0) и
			(ТаблицаМФ.ИмяПеременной=ИмяПеремЗапроса) и
			(ТаблицаМФ.ФлВкл=2) Тогда
				
				Номер = ТаблицаМФ.НомерСтроки;
				Если (ТаблицаМФ.Вид<>"ВидыКатегорий") Тогда
					ИмяПоляМФ			= "глУсловие"+СокрЛП(Номер);
					ПрисвоитьЗначениеУсловию(Номер, ТаблицаМФ.СписокЭлементов, ПолеМФ);
					ВремТипМФ			= ТаблицаМФ.ТипМФ;
				Иначе // по категориям
					ИмяПоляМФКатегорий	= "глУсловие"+СокрЛП(Номер);
					ТипМФКатегорий		= ТаблицаМФ.ТипМФ;
					ПрисвоитьЗначениеУсловию(Номер, ТаблицаМФ.СписокЭлементов, ПолеМФКатегорий);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Рез1 = глФильтрПоСправочнику(ПолеЕФ,ИмяПоляЕФ,
						ПолеМФ,ИмяПоляМФ,ВремТипМФ,
						ТекстЗапроса,ТекстЗаголовка,
						ИмяПеремЗапроса,Язык);
	
	Рез2 = глФильтрПоКатегориям(ВидСправочникаКатегорий,
						ПолеМФКатегорий, ИмяПоляМФКатегорий, ТипМФКатегорий,
						ТекстЗапроса, ТекстЗаголовка, ИмяПеремЗапроса,Язык);
	Возврат Рез1*Рез2; // если хоть один = 0 - плохо

КонецФункции // ФильтрПоПеременнойЗапроса()

// ===============================
// глПозиционироватьЗапросПоПериодам(Запрос,ЗапросСПериодами,СписокГруппировок,КоличествоГруппировок,ТекущаяГруппировка,НачалоПериода)
//
// Назначение: получить в ЗапросПоПериодам значения группировок, установленных в Запросе за период, указанный в НачалоПериода
//		
// Аргументы:
//		
Процедура глПозиционироватьЗапросПоПериодам(Запрос,ЗапросСПериодами,СписокГруппировок,КоличествоГруппировок,ТекущаяГруппировка,НачалоПериода) Экспорт
// в запросе ЗапросСПериодами позиционируемся на итоги по текущим группировкам 
	Если ТекущаяГруппировка = 0 Тогда
		Если КоличествоГруппировок = 1 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,);
		ИначеЕсли КоличествоГруппировок = 2 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,,);
		ИначеЕсли КоличествоГруппировок = 3 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,,,);
		ИначеЕсли КоличествоГруппировок = 4 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,,,,);
		ИначеЕсли КоличествоГруппировок = 5 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,,,,,);
		ИначеЕсли КоличествоГруппировок = 6 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,,,,,,);
		ИначеЕсли КоличествоГруппировок = 7 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,,,,,,,);
		ИначеЕсли КоличествоГруппировок = 8 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,,,,,,,,);
		ИначеЕсли КоличествоГруппировок = 9 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,,,,,,,,,);
		ИначеЕсли КоличествоГруппировок = 10 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,,,,,,,,,,);
		КонецЕсли;                       
	ИначеЕсли ТекущаяГруппировка = 1 Тогда
		Если КоличествоГруппировок = 1 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)));
		ИначеЕсли КоличествоГруппировок = 2 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),);
		ИначеЕсли КоличествоГруппировок = 3 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),,);
		ИначеЕсли КоличествоГруппировок = 4 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),,,);
		ИначеЕсли КоличествоГруппировок = 5 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),,,,);
		ИначеЕсли КоличествоГруппировок = 6 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),,,,,);
		ИначеЕсли КоличествоГруппировок = 7 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),,,,,,);
		ИначеЕсли КоличествоГруппировок = 8 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),,,,,,,);
		ИначеЕсли КоличествоГруппировок = 9 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),,,,,,,,);
		ИначеЕсли КоличествоГруппировок = 10 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),,,,,,,,,);
		КонецЕсли;                       
	ИначеЕсли ТекущаяГруппировка = 2 Тогда
		Если КоличествоГруппировок = 2 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)));
		ИначеЕсли КоличествоГруппировок = 3 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),);
		ИначеЕсли КоличествоГруппировок = 4 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),,);
		ИначеЕсли КоличествоГруппировок = 5 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),,,);
		ИначеЕсли КоличествоГруппировок = 6 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),,,,);
		ИначеЕсли КоличествоГруппировок = 7 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),,,,,);
		ИначеЕсли КоличествоГруппировок = 8 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),,,,,,);
		ИначеЕсли КоличествоГруппировок = 9 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),,,,,,,);
		ИначеЕсли КоличествоГруппировок = 10 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),,,,,,,,);
		КонецЕсли;
	ИначеЕсли ТекущаяГруппировка = 3 Тогда
		Если КоличествоГруппировок = 3 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)));
		ИначеЕсли КоличествоГруппировок = 4 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),);
		ИначеЕсли КоличествоГруппировок = 5 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),,);
		ИначеЕсли КоличествоГруппировок = 6 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),,,);
		ИначеЕсли КоличествоГруппировок = 7 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),,,,);
		ИначеЕсли КоличествоГруппировок = 8 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),,,,,);
		ИначеЕсли КоличествоГруппировок = 9 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),,,,,,);
		ИначеЕсли КоличествоГруппировок = 10 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),,,,,,,);
		КонецЕсли; 
	ИначеЕсли ТекущаяГруппировка = 4 Тогда
		Если КоличествоГруппировок = 4 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)));
		ИначеЕсли КоличествоГруппировок = 5 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),);
		ИначеЕсли КоличествоГруппировок = 6 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),,);
		ИначеЕсли КоличествоГруппировок = 7 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),,,);
		ИначеЕсли КоличествоГруппировок = 8 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),,,,);
		ИначеЕсли КоличествоГруппировок = 9 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),,,,,);
		ИначеЕсли КоличествоГруппировок = 10 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),,,,,,);
		КонецЕсли; 
	ИначеЕсли ТекущаяГруппировка = 5 Тогда
		Если КоличествоГруппировок = 5 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)));
		ИначеЕсли КоличествоГруппировок = 6 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),);
		ИначеЕсли КоличествоГруппировок = 7 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),,);
		ИначеЕсли КоличествоГруппировок = 8 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),,,);
		ИначеЕсли КоличествоГруппировок = 9 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),,,,);
		ИначеЕсли КоличествоГруппировок = 10 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),,,,,);
		КонецЕсли; 
	ИначеЕсли ТекущаяГруппировка = 6 Тогда
		Если КоличествоГруппировок = 6 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)));
		ИначеЕсли КоличествоГруппировок = 7 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),);
		ИначеЕсли КоличествоГруппировок = 8 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),,);
		ИначеЕсли КоличествоГруппировок = 9 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),,,);
		ИначеЕсли КоличествоГруппировок = 10 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),,,,);
		КонецЕсли; 
	ИначеЕсли ТекущаяГруппировка = 7 Тогда
		Если КоличествоГруппировок = 7 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),
			Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(7)));
		ИначеЕсли КоличествоГруппировок = 8 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),
			Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(7)),);
		ИначеЕсли КоличествоГруппировок = 9 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),
			Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(7)),,);
		ИначеЕсли КоличествоГруппировок = 10 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),
			Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(7)),,,);
		КонецЕсли;
	ИначеЕсли ТекущаяГруппировка = 8 Тогда
		Если КоличествоГруппировок = 8 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),
			Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(7)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(8)));
		ИначеЕсли КоличествоГруппировок = 9 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),
			Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(7)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(8)),);
		ИначеЕсли КоличествоГруппировок = 10 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),
			Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(7)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(8)),,);
		КонецЕсли;
	ИначеЕсли ТекущаяГруппировка = 9 Тогда
		Если КоличествоГруппировок = 9 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),
			Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(7)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(8)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(9)));
		ИначеЕсли КоличествоГруппировок = 10 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),
			Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(7)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(8)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(9)),);
		КонецЕсли;
	ИначеЕсли ТекущаяГруппировка = 10 Тогда
		Если КоличествоГруппировок = 10 Тогда
			ЗапросСПериодами.Получить(НачалоПериода,Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(1)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(2)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(3)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(4)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(5)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(6)),
			Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(7)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(8)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(9)),Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(10)));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //

// ===============================
// глИзменениеПорядкаГрупп(Группировки,НаправлениеСдвига,НеподвижныхВКонце=0)
//
// Параметры:
//	Группировки		  = список группировок
//  НаправлениеСдвига = 	-1 - вниз
//							 1 - вверх
//  НеподвижныхВКонце = количество группировок в конце списка, которые не перемещаются
//
// Возвращаемое значение: 
//	Нет
//
// Вызывается из формул элементов диалога:
//  кнопки "вверх" и "вниз" рядом со списком группировок
//
// Описание:  
//	Процедура производит сдвиг текущей группировки в общем
// 	списке группировок на "НаправлениеСдвига" позиций
//
Процедура глИзменениеПорядкаГрупп(Группировки,НаправлениеСдвига,НеподвижныхВКонце=0) Экспорт
	Если Группировки.РазмерСписка()=0 Тогда
		Возврат;
	КонецЕсли;

	КвоСтр = Группировки.РазмерСписка();
	ТекСтр = Группировки.ТекущаяСтрока();



	Если ТекСтр > КвоСтр - НеподвижныхВКонце Тогда // последние не перемещаем
		Возврат;
	КонецЕсли;

	Если (ТекСтр = КвоСтр - НеподвижныхВКонце) И (НаправлениеСдвига = 1) Тогда // последние не перемещаем
		Возврат;
	КонецЕсли;
	Группировки.СдвинутьЗначение(НаправлениеСдвига, ТекСтр);
КонецПроцедуры // глИзменениеПорядкаГрупп()

// ===============================
// Процедура изменяет состояние отметок вывода таблицы группировок отчета
Процедура глПометкаТаблицыГруппировок(Группировки,Флаг) Экспорт
	
	Для индГруп = 1 По Группировки.РазмерСписка() Цикл
		Если Флаг = -1 Тогда
			Группировки.Пометка(индГруп, 1 - Группировки.Пометка(индГруп));
		Иначе
			Группировки.Пометка(индГруп, Флаг);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // глПометкаТаблицыГруппировок()

// ===============================
Процедура глПолучитьТаблицуПериодов(ТаблицаПериодов,ЗапросСПериодами,Периодичность) Экспорт
	// Таблица с периодами
	ТаблицаПериодов.НоваяКолонка("НачалоПериода");
	ТаблицаПериодов.НоваяКолонка("КонецПериода");
	ТаблицаПериодов.НоваяКолонка("РеалНачалоПериода");
	Пока ЗапросСПериодами.Группировка(1) = 1 Цикл
	    ТаблицаПериодов.НоваяСтрока();
		ТаблицаПериодов.НачалоПериода = ЗапросСПериодами.НачалоПериода();
		ТаблицаПериодов.КонецПериода = ЗапросСПериодами.КонецПериода();
		Если Периодичность="День" Тогда
			ТаблицаПериодов.РеалНачалоПериода = ТаблицаПериодов.НачалоПериода;
		ИначеЕсли Периодичность="Неделя" Тогда
			ТаблицаПериодов.РеалНачалоПериода = НачНедели(ТаблицаПериодов.НачалоПериода);
		ИначеЕсли Периодичность="Месяц" Тогда
			ТаблицаПериодов.РеалНачалоПериода = НачМесяца(ТаблицаПериодов.НачалоПериода);
		ИначеЕсли Периодичность="Квартал" Тогда
			ТаблицаПериодов.РеалНачалоПериода = НачКвартала(ТаблицаПериодов.НачалоПериода);
		ИначеЕсли Периодичность="Год" Тогда
			ТаблицаПериодов.РеалНачалоПериода = НачГода(ТаблицаПериодов.НачалоПериода);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //глПолучитьТаблицуПериодов

// ===============================
// Выделяет уровни элементов справочника пробелами
Функция глСмещениеГруппы(Значение,фБезГрупп) Экспорт
	// При включенной оптимизации по скорости, печатаем названия групп справочников без смещения 
	Если глОптимизацияОтчетов = 1 Тогда
		Возврат "";
	КонецЕсли;

	Если фБезГрупп = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустоеЗначение(Значение) = 1 Тогда
		Возврат "";
	КонецЕсли;
               
	ТипЗначение = ТипЗначенияСтр(Значение);
	Если (ТипЗначение <> "Справочник") и (ТипЗначение <> "Счет") Тогда
		Возврат "";
	КонецЕсли;	
	
	Возврат Формат("","С"+(Значение.Уровень()-1)*2);
КонецФункции

// ===============================
// Выполняет округление до заданной точности, корректируя результат
// с учетом ошибок предыдущих округлений.
Функция глОкрКорр(Ключ, Значение, Точность) Экспорт
Перем Ошибка, Округл;
	
	Если Значение = 0 Тогда // алгоритм некорректен, если Значение = 0, Ошибка = -0.5
	    Возврат 0;
	КонецЕсли;
	Ошибка = Число(глСписокОшибокОкругления.Получить(Ключ));
	Округл = Окр(Значение + Ошибка, Точность);
	глСписокОшибокОкругления.Установить(Ключ, Ошибка + Значение - Округл);
	
	Возврат Округл;
КонецФункции

// ===============================
Процедура глОчиститьКлючОкр(Ключ) Экспорт
	глСписокОшибокОкругления.Установить(Ключ, 0);
КонецПроцедуры

Процедура глВыбратьДок(ДокК, ДатаН, Знач ДатаК = "",ТипДок = 1) Экспорт
	Если ПустоеЗначение(ДатаК) = 1 Тогда
		ДатаК = ДатаН;
	КонецЕсли;
	
	Если ТипДок = 1 Тогда
		Док = СоздатьОбъект("Документ.НачДня");
	Иначе
		Док = СоздатьОбъект("Документ.УМК_СнятиеРезерва");
	КонецЕсли;

	Док.УстановитьФильтр(1,0);
	Док.ВыбратьДокументы(ДатаН, ДатаК);
	Сп = СоздатьОбъект("СписокЗначений");
	
	Пока Док.ПолучитьДокумент() = 1 Цикл
		СП.ДобавитьЗначение(Док.ТекущийДокумент());
	КонецЦикла;	
	
	Если СП.РазмерСписка() = 1 Тогда
		ДокК = СП.ПолучитьЗначение(1);
		ДатаН = ДокК.ДатаДок;
		Возврат;
	ИначеЕсли Сп.РазмерСписка() > 0 Тогда		
		Если Сп.ВыбратьЗначение(ДокК,,,,1) = 0 Тогда
			Возврат;
		Иначе
			ДатаН = ДокК.ДатаДок;
			Возврат;
		КонецЕсли;
	Иначе
		Если Док.Выбрать("Выберите документ нач. дня", "") = 1 Тогда
			ДокК = Док.ТекущийДокумент();
			ДатаН = ДокК.ДатаДок;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю, (07.07.15)
Процедура глВыбратьДокСнятиеСРезерва(ДокК, ДатаН, Знач ДатаК = "") Экспорт
	Если ПустоеЗначение(ДатаК) = 1 Тогда
		ДатаК = ДатаН;
	КонецЕсли;
	
	Док = СоздатьОбъект("Документ.УМК_СнятиеРезерва");
	Док.УстановитьФильтр(1,0);
	Док.ВыбратьДокументы(ДатаН, ДатаК);
	Сп = СоздатьОбъект("СписокЗначений");
	
	Пока Док.ПолучитьДокумент() = 1 Цикл
		СП.ДобавитьЗначение(Док.ТекущийДокумент());
	КонецЦикла;	
	
	Если СП.РазмерСписка() = 1 Тогда
		ДокК = СП.ПолучитьЗначение(1);
		ДатаН = ДокК.ДатаДок;
		Возврат;
	ИначеЕсли Сп.РазмерСписка() > 0 Тогда		
		Если Сп.ВыбратьЗначение(ДокК,,,,1) = 0 Тогда
			Возврат;
		Иначе
			ДатаН = ДокК.ДатаДок;
			Возврат;
		КонецЕсли;
	Иначе
		Если Док.Выбрать("Выберите документ нач. дня", "") = 1 Тогда
			ДокК = Док.ТекущийДокумент();
			ДатаН = ДокК.ДатаДок;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура глУстДатыОтчета(Д1, Д2, ДН, ДК, Дата1, Дата2) Экспорт
	Если ПустоеЗначение(ДН) = 0 Тогда
		Д1 = ДН;
	Иначе
		Д1 = Дата1;
	КонецЕсли;
	Если ПустоеЗначение(ДК) = 0 Тогда
		Д2 = ДК;
	Иначе
		Д2 = Дата2;
	КонецЕсли;
КонецПроцедуры

Функция глПолучитьДату(ДатаД, Док) Экспорт
	Если ПустоеЗначение(Док) = 1 Тогда
		Возврат Строка(ДатаД);
	Иначе
		Возврат "нач. раб. дня " + Строка(Док.ДатаДок);
	КонецЕсли;
КонецФункции

//******************************************************************************
// Функции Интернет-поддержки
//
// Редактировать содержимое функции глИдентификаторКонфигурации()запрещено!!!
Функция глИдентификаторКонфигурации() Экспорт
    Возврат "UManf";
КонецФункции // глИдентификаторКонфигурации()

Функция глПроверитьФирму(Конт, ВЗ) Экспорт
    Возврат 1;
КонецФункции // глИдентификаторКонфигурации()

Функция глПолучитьВУ(ТМЦ,ВУП, ДатаРекв) Экспорт //--- УМК Сандомирский В.Ю. (06.11.14) 
	
	Если (ПустоеЗначение(Константа.УМК_ДатаНачалаГрупУпаковок) <> 1) 
				И (Константа.УМК_ДатаНачалаГрупУпаковок <= РабочаяДата())  Тогда //--- УМК Сандомирский В.Ю, (06.11.14)
					
		Если (ПустоеЗначение(ВУП) = 1) или (ВУП.Код = 0) Тогда
			Возврат "";
		Иначе
			СпрВУП = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрВУП.ИспользоватьВладельца(ТМЦ);
			Если СпрВУП.НайтиПоРеквизиту("ВидУпаковки",ВУП,0) = 1 Тогда
				Возврат " " + СокрЛП(СпрВУП.ДляПечати.Получить(ДатаРекв));
			КонецЕсли;
		КонецЕсли;							
					
	Иначе				
		Если (ПустоеЗначение(ВУП) = 1) или (ВУП.Код = 0) Тогда
			Возврат "";
		Иначе
			Возврат " " + СокрЛП(ВУП.ДляПечати.Получить(ДатаРекв));
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура глФильтры(СтрФ, Спис, Имя, фНе = 0, Реквизит = "") Экспорт // Шамарин
	Если Спис.РазмерСписка() = 0 Тогда
	    Возврат;
	КонецЕсли;
	Если СтрФ <> "" Тогда
	    СтрФ = СтрФ + "
		|";
	КонецЕсли;
	СтрФ = СтрФ + " " + Имя + ?(фНе = 1, " (все кроме)", "") + ": ";
	Для Инд = 1 По Спис.РазмерСписка() Цикл
		СтрФ = СтрФ + ?(Реквизит= "", Спис.ПолучитьЗначение(Инд), СокрЛП(Строка(Спис.ПолучитьЗначение(Инд).ПолучитьАтрибут(Реквизит)))) + ", ";
	КонецЦикла;
	СтрФ = Лев(СтрФ, СтрДлина(СтрФ)-2);
	СтрФ = СтрФ + ";";
КонецПроцедуры

Функция глСпособ(ВидРабот) Экспорт
	Если ПустоеЗначение(ВидРабот) = 1 Тогда
		Возврат "";
	КонецЕсли;
	Если ВидРабот.Способ = 0 Тогда
		Если ВидРабот.База = Перечисление.ТипБазыВР.Реализовано Тогда
			Возврат "Все";
		Иначе
			Возврат "Период реальн.";
		КонецЕсли;
	Иначе
		Если (ВидРабот.База = Перечисление.ТипБазыВР.КвоФарша) или (ВидРабот.База = Перечисление.ТипБазыВР.Кутера) Тогда
			Возврат "По выпуску";
		ИначеЕсли ВидРабот.База = Перечисление.ТипБазыВР.Выпущено Тогда	    
			Возврат "По заказм";
		ИначеЕсли ВидРабот.База = Перечисление.ТипБазыВР.Реализовано Тогда	    
			Возврат "Только упак.";
		Иначе
			Возврат "";
		КонецЕсли;
		
	КонецЕсли;
КонецФункции

Функция глВыбратьНормыЗатрат(ДобТовар) Экспорт
	Док = СоздатьОбъект("Документ");
	Док.УстановитьФильтр(1,0);
	Док.ВыбратьПоЗначению(,,"Продукция", ДобТовар);
	СписДок = СоздатьОбъект("СписокЗначений");
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Действует = 1 Тогда
		    СписДок.ДобавитьЗначение(Док.ТекущийДокумент(), Строка(Док.ДатаДок) + " " + СокрЛП(Док.Примечание));
		КонецЕсли;		
	КонецЦикла;
	
	Если СписДок.РазмерСписка() = 1 Тогда
		Возврат СписДок.ПолучитьЗначение(1);
	ИначеЕсли СписДок.РазмерСписка() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	Зн = 0;
	Если СписДок.ВыбратьЗначение(Зн, Строка(ДобТовар)) = 0 Тогда
		Возврат 0;
	Иначе
		Возврат Зн;
	КонецЕсли;
КонецФункции

Процедура глУстОтборПоФирме(Конт, Параметр, Наим, НаимОтбора = "Автор") Экспорт
	Если ПустоеЗначение(Параметр) = 0 Тогда
	    Если ТипЗначенияСтр(Параметр) ="СписокЗначений" Тогда
	        Конт.УстановитьИнтервал(Параметр.Получить("НачДата"),Параметр.Получить("КонДата"));
			Конт.ВыбАвтор = Параметр.Получить("Фирма");
			Если ПустоеЗначение(Конт.ВыбАвтор) = 0 Тогда
			    Конт.УстановитьОтбор(НаимОтбора+Наим, Конт.ВыбАвтор);
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура глПриИзмененииАвтора(Конт, Наим, Фирма, Выбрать = 0, ИмСпр = "Пользователи", ИмяОтбора = "Автор") Экспорт
	ВыбФирма = "";
	Если Выбрать = 1 Тогда
		СпрФ = СоздатьОбъект("Справочник."+ИмСпр);
		Если СпрФ.Выбрать("Выберите пользователя", "ФормаСписка") = 0 Тогда
		    Возврат;
		Иначе
			ВыбФирма = СпрФ.ТекущийЭлемент();
		КонецЕсли;
	Иначе
		ВыбФирма = Фирма;
	КонецЕсли;
	
    спПараметры = СоздатьОбъект("СписокЗначений");
	спПараметры.ДобавитьЗначение(Конт.НачалоИнтервала(), "НачДата");
	спПараметры.ДобавитьЗначение(Конт.КонецИнтервала(), "КонДата");

	Если ПустоеЗначение(ВыбФирма) = 1 Тогда		
		ОткрытьФорму("Журнал."+Наим+".ФормаСписка", спПараметры);
		Конт.Форма.Закрыть();
	Иначе
		спПараметры.ДобавитьЗначение(ВыбФирма, "Фирма");
		Если ПустоеЗначение(Конт.ВыбАвтор) = 1 Тогда // открываем форму с отбором
			ОткрытьФорму("Журнал."+Наим+"З.ФормаСписка", спПараметры);
		    Конт.Форма.Закрыть();
		Иначе // просто устанавливаем новый отбор
			Конт.УстановитьОтбор(ИмяОтбора+Наим, ВыбФирма);
			Конт.ВыбАвтор = ВыбФирма;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура глСформироватьСписание(ДокОсн, ТЗСп, Склад) Экспорт
	Док = СоздатьОбъект("Документ");
	ДокСп = СоздатьОбъект("Документ.СписаниеТМЦ");
	
	Док.ВыбратьПодчиненныеДокументы(,,ДокОсн.ТекущийДокумент());
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если (Док.Вид() = "СписаниеТМЦ") ИЛИ (Док.Вид() = "ПереработкаМяса") Тогда
			Если Док.Вид() = "СписаниеТМЦ" Тогда
				Если Док.СозданоВручную = 1 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если (Док.Вид() = "СписаниеТМЦ") и (((ДокОсн.Вид() = "ПереработкаМяса") И (Док.МестоХранения = Склад)) ИЛИ (ДокОсн.Вид() <> "ПереработкаМяса")) Тогда
			    Если Док.ПометкаУдаления() = 1 Тогда
					Док.СнятьПометкуУдаления();
				КонецЕсли;
				ДокСп.НайтиДокумент(Док);
				Прервать;
			КонецЕсли;		    
		КонецЕсли;
	КонецЦикла;
	
	Если ДокСп.Выбран() = 0 Тогда
		Если (ТЗСп.Итог("КвоСписания") = 0) и (ТЗСп.Итог("ДопКвоСписания") = 0) Тогда
			Возврат;
		КонецЕсли;
				
	    ДокСп.Новый();
		ДокСп.Фирма = ДокОсн.Фирма;
		глУстановитьНомер(ДокСп);
	КонецЕсли;
	
	НачатьТранзакцию();
	Если ПустоеЗначение(ДокСп.СчетСписания) = 1 Тогда
		ДокСп.СчетСписания = ВосстановитьЗначение(ДокСп.Вид()+"_СчетСписания");
		Для Инд = 1 По 3 Цикл
			ДокСп.НазначитьТип("СубконтоСписания"+Инд,ДокСп.СчетСписания.ВидСубконто(Инд));
		КонецЦикла;		
		ДокСп.СубконтоСписания1 = ВосстановитьЗначение(ДокСп.Вид()+"_СубконтоСписания1");
		ДокСп.СубконтоСписания2 = ВосстановитьЗначение(ДокСп.Вид()+"_СубконтоСписания2");
		ДокСп.СубконтоСписания3 = ВосстановитьЗначение(ДокСп.Вид()+"_СубконтоСписания3");	    
	КонецЕсли;
	ДокСп.СубконтоСписания3 = Константа.ВЗСписаниеИзДок;
	ДокСп.УдалитьСтроки();
	ДокСп.МестоХранения = Склад;
	ДокСп.ВидНДС = Константа.БазНДС;
	ДокСп.БезСС = 1;	
	ДокСп.ДокОснование = ДокОсн.ТекущийДокумент();
	Если (ТЗСп.Итог("КвоСписания") = 0) и (ТЗСп.Итог("ДопКвоСписания") = 0) Тогда
		ДокСп.Записать();
		ДокСп.Удалить(0);
		ЗафиксироватьТранзакцию();
		Возврат;
	Иначе
		ТЗСп.ВыбратьСтроки();
		Пока ТЗСп.ПолучитьСтроку() = 1 Цикл
			Если (ТЗСп.КвоСписания = 0) и (ТЗСп.ДопКвоСписания = 0) Тогда
				Продолжить;
			КонецЕсли;
			ДокСп.НоваяСтрока();
			ДокСп.ТМЦ = ТЗСп.ТМЦ;
			ДокСп.Ед = ТЗСп.Ед;
			ДокСп.Кво = ТЗСп.КвоСписания;
			ДокСп.Коэффициент = 1;
			ДокСп.ДопКво = ТЗСп.ДопКвоСписания;
		КонецЦикла;		
	КонецЕсли;

	Если ДокСп.Проведен() = 0 Тогда
		ДокСп.ДатаДок = ДокОсн.ДатаДок;
	КонецЕсли;
	
	//Если дата списания больше константы НеУстанавливатьФлагБеЗСебестоимостиВДокСисание 
	//Тогда
	Если (ПустоеЗначение(Константа.НеУстанавливатьФлагБезСебестоимостиВДокСисание) = 0) 
	И (ДокСп.ДатаДок >=Константа.НеУстанавливатьФлагБезСебестоимостиВДокСисание) Тогда
		ДокСп.БезСС = 0;
		Если ПустоеЗначение(Константа.СчетСписанияТМЦПриПотерях) = 0 Тогда
			ДокСп.СчетСписания = Константа.СчетСписанияТМЦПриПотерях;
			Если ДокСп.СубконтоСписания2.Вид() = "Подразделения" Тогда
				Если ПустоеЗначение(ДокСп.МестоХранения.ПодразделениеПоУмолчанию) = 0 Тогда
					ДокСп.СубконтоСписания2 = ДокСп.МестоХранения.ПодразделениеПоУмолчанию;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Конец по флагу без с/с
	
	ДокСп.Записать();
	Если ДокСп.Проведен() = 0 Тогда
		Ч = 0; М = 0; С = 0;
		ДокОсн.ПолучитьВремя(Ч,М,С);
		ДокСп.УстановитьВремя(Ч,М,С+1);	
		Если ДокОсн.Вид() = "Перемещение" Тогда
			Если (ДокОсн.МестоХранения = Константа.СкладОбвалка) И (ДокОсн.НовоеМестоХранения = Константа.СкладМорозилка) Тогда
				ДокСп.УстановитьВремя(16,0,0);
			ИначеЕсли (ДокОсн.НовоеМестоХранения = Константа.СкладОбвалка) И (ДокОсн.МестоХранения = Константа.СкладМорозилка) Тогда
				ДокСп.УстановитьВремя(16,0,0);
			ИначеЕсли (ДокОсн.МестоХранения = Константа.СкладОбвалка) И (ДокОсн.НовоеМестоХранения = ДокОсн.Фирма.СкладМатериалов) Тогда
				ДокСп.УстановитьВремя(23,59,59);
			ИначеЕсли (ДокОсн.МестоХранения = Константа.СкладМорозилка) И (ДокОсн.НовоеМестоХранения = ДокОсн.Фирма.СкладМатериалов) Тогда
				ДокСп.УстановитьВремя(23,59,59);
			КонецЕсли;
		ИначеЕсли ДокОсн.Вид() <> "ПриходнаяНакладнаяЗапасы" Тогда
			ДокСп.УстановитьВремя(16,0,0);
		КонецЕсли;
		ДокСп.Записать();
		
	//ИначеЕсли ДокСп.ДатаДок <> ДокОсн.ДатаДок Тогда
	//	ДокСп.СделатьНеПроведенным();
	//	Ч = 0; М = 0; С = 0;
	//	ДокОсн.ПолучитьВремя(Ч,М,С);
	//	ДокСп.УстановитьВремя(Ч,М,С+1);	
	КонецЕсли;
	
	ОткрытьФормуМодально(ДокСп.ТекущийДокумент(), 1);
	ЗафиксироватьТранзакцию();
	Сообщить("Создано списание: " + Строка(ДокСп));	
КонецПроцедуры

Процедура глСформироватьСписаниеПоДатам(ДокОсн, ТЗСп, Подразделение, БезСС = 0) Экспорт
	Док = СоздатьОбъект("Документ");
	ДокСп = СоздатьОбъект("Документ.СписаниеТМЦ");
	
	НачатьТранзакцию();
	СписСписаний = СоздатьОбъект("СписокЗначений");
	Док.ВыбратьПодчиненныеДокументы(,,ДокОсн.ТекущийДокумент());
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если (Док.Вид() = "СписаниеТМЦ") Тогда
			Если Док.СозданоВручную = 1 Тогда
				Продолжить;
			Иначе
				Док.Удалить(0);
				СписСписаний.ДобавитьЗначение(Док.ТекущийДокумент());				
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;

	Если (ТЗСп.Итог("КвоСписания") = 0) и (ТЗСп.Итог("ДопКвоСписания") = 0) Тогда
		ЗафиксироватьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ПредДата = Дата(0);	СтарСклад = "";
	ТЗСп.Сортировать("ДатаСписания,Склад");
	ТЗСп.ВыбратьСтроки();
	Пока ТЗСп.ПолучитьСтроку() = 1 Цикл
		Если (ТЗСп.КвоСписания = 0) и (ТЗСп.ДопКвоСписания = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ПредДата <> ТЗСп.ДатаСписания) ИЛИ (СтарСклад <> ТЗСп.Склад) Тогда
			Если ДокСп.КоличествоСтрок() > 0 Тогда
			    ДокСп.Записать();
				Ч = 0; М = 0; С = 0;
				ДокОсн.ПолучитьВремя(Ч,М,С);
				//ДокСп.УстановитьВремя(Ч,М,С+1);
				Если ДокОсн.Вид() = "ПриходнаяНакладнаяЗапасы" Тогда
					ДокСп.УстановитьВремя(Ч,М,С+1);
				Иначе
					ДокСп.УстановитьВремя(16,0,0);
				КонецЕсли;		
				ДокСп.Записать();
				ОткрытьФормуМодально(ДокСп.ТекущийДокумент(), 1);
				Сообщить("Создано списание: " + Строка(ДокСп));	
			КонецЕсли;
			
			ДокСп = СоздатьОбъект("Документ.СписаниеТМЦ");
			
			Для Инд = 1 По СписСписаний.РазмерСписка() Цикл
				ДокСписания = СписСписаний.ПолучитьЗначение(Инд);
				Если (ДокСписания.ДатаДок = ТЗСп.ДатаСписания) И (ДокСписания.МестоХранения = ТЗСп.Склад) Тогда
				    ДокСп.НайтиДокумент(ДокСписания);
					ДокСп.СнятьПометкуУдаления();
					Если ДокСп.Проведен() = 1 Тогда
					    ДокСп.Удалить(0);
						ДокСп.СнятьПометкуУдаления();
					КонецЕсли;
					ДокСп.ДатаДок = ТЗСп.ДатаСписания;
				КонецЕсли;
			КонецЦикла;
			
			Если ДокСп.Выбран() = 0 Тогда					
			    ДокСп.Новый();
				ДокСп.Фирма = ДокОсн.Фирма;
			КонецЕсли;
			ДокСп.СчетСписания = СчетПоКоду("231");
			Для Инд = 1 По 3 Цикл
				ДокСп.НазначитьТип("СубконтоСписания"+Инд,ДокСп.СчетСписания.ВидСубконто(Инд));
			КонецЦикла;		
			ДокСп.УдалитьСтроки();
			ДокСп.БезСС = БезСС;
			ДокСп.СубконтоСписания1 = Константа.БазВидДеятельности;
			ДокСп.СубконтоСписания2 = Подразделение;
			ДокСп.УдалитьСтроки();
			ДокСп.МестоХранения = ТЗСп.Склад;
			ДокСп.ВидНДС = Константа.БазНДС;
			ДокСп.ДокОснование = ДокОсн.ТекущийДокумент();
			ДокСп.Автор = глПользователь;
			ПредДата = ТЗСп.ДатаСписания;
			СтарСклад = ТЗСп.Склад;
			
			ДокСп.ДатаДок = ТЗСп.ДатаСписания;
			Если ДокСп.Выбран() = 0 Тогда					
				глУстановитьНомер(ДокСп);
			КонецЕсли;			
		КонецЕсли;
		
		ДокСп.НоваяСтрока();
		ДокСп.ТМЦ = ТЗСп.ТМЦ;
		ДокСп.Ед = ТЗСп.Ед;
		ДокСп.Кво = ТЗСп.КвоСписания;
		ДокСп.Коэффициент = 1;
		ДокСп.ДопКво = ТЗСп.ДопКвоСписания;
	КонецЦикла;		

	Если ДокСп.КоличествоСтрок() > 0 Тогда		
	    ДокСп.Записать();
		Ч = 0; М = 0; С = 0;
		ДокОсн.ПолучитьВремя(Ч,М,С);
		//ДокСп.УстановитьВремя(Ч,М,С+1);
		Если ДокОсн.Вид() = "ПриходнаяНакладнаяЗапасы" Тогда
			ДокСп.УстановитьВремя(Ч,М,С+1);
		Иначе
			ДокСп.УстановитьВремя(16,0,0);
		КонецЕсли;		
		ДокСп.Записать();
		ОткрытьФормуМодально(ДокСп.ТекущийДокумент(), 1);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	Сообщить("Создано списание: " + Строка(ДокСп));	
КонецПроцедуры

Процедура глСформироватьОприходованиеПоДатам(ДокОсн, ТЗСп, Подразделение, БезСС = 0) Экспорт
	Док = СоздатьОбъект("Документ");
	ДокСп = СоздатьОбъект("Документ.ОприходованиеИзлишков");
	
	НачатьТранзакцию();
	СписСписаний = СоздатьОбъект("СписокЗначений");
	Док.ВыбратьПодчиненныеДокументы(,,ДокОсн.ТекущийДокумент());
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если (Док.Вид() = "ОприходованиеИзлишков") Тогда
			Если Док.СозданоАвтоматически = 0 Тогда
				Продолжить;
			Иначе
				Док.Удалить(0);
				СписСписаний.ДобавитьЗначение(Док.ТекущийДокумент());				
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;

	Если (ТЗСп.Итог("КвоСписания") = 0) и (ТЗСп.Итог("ДопКвоСписания") = 0) Тогда
		ЗафиксироватьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ПредДата = Дата(0);	СтарСклад = "";
	ТЗСп.Сортировать("ДатаСписания,Склад");
	ТЗСп.ВыбратьСтроки();
	Пока ТЗСп.ПолучитьСтроку() = 1 Цикл
		Если (ТЗСп.КвоСписания = 0) и (ТЗСп.ДопКвоСписания = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ПредДата <> ТЗСп.ДатаСписания) ИЛИ (СтарСклад <> ТЗСп.Склад) Тогда
			Если ДокСп.КоличествоСтрок() > 0 Тогда
			    ДокСп.Записать();
				Ч = 0; М = 0; С = 0;
				ДокОсн.ПолучитьВремя(Ч,М,С);
				ДокСп.УстановитьВремя(Ч,М,С+1);
				ДокСп.Записать();
				ОткрытьФормуМодально(ДокСп.ТекущийДокумент(), "Провести");
				Сообщить("Создано оприходование: " + Строка(ДокСп));	
			КонецЕсли;
			
			ДокСп = СоздатьОбъект("Документ.ОприходованиеИзлишков");			
			Для Инд = 1 По СписСписаний.РазмерСписка() Цикл
				ДокСписания = СписСписаний.ПолучитьЗначение(Инд);
				Если (ДокСписания.ДатаДок = ТЗСп.ДатаСписания) И (ДокСписания.МестоХранения = ТЗСп.Склад) Тогда
				    ДокСп.НайтиДокумент(ДокСписания);
					Если ДокСп.Проведен() = 1 Тогда
					    ДокСп.Удалить(0);
					КонецЕсли;
					ДокСп.СнятьПометкуУдаления();
					ДокСп.ДатаДок = ТЗСп.ДатаСписания;
				КонецЕсли;
			КонецЦикла;
			
			Если ДокСп.Выбран() = 0 Тогда					
			    ДокСп.Новый();
				ДокСп.Фирма = ДокОсн.Фирма;
			КонецЕсли;
			
			ДокСП.СчетДоходов = СчетПоКоду("719");
			Для Инд = 1 По 3 Цикл
				ДокСп.НазначитьТип("СубконтоДоходов"+Инд, ДокСп.СчетДоходов.ВидСубконто(Инд));
			КонецЦикла;
			ДокСП.СубконтоВалДох = Константа.БазВаловыйДоход;
			ДокСп.СубконтоДоходов1 = Константа.БазВидДеятельности;
			ДокСп.СубконтоДоходов2 = Подразделение;
			ДокСп.ДатаДок = ТЗСп.ДатаСписания;
			ДокСп.МестоХранения = ТЗСп.Склад;
			ДокСп.КатегорияЦен = Константа.ОсновнаяКатегорияЦен;
			ДокСп.ДокОснование = ДокОсн.ТекущийДокумент();
			ДокСп.СозданоАвтоматически = 1;
			ДокСп.Автор = глПользователь;
			ДокСп.УдалитьСтроки();
			ДокСп.ДокОснование = ДокОсн.ТекущийДокумент();
			ДокСп.Автор = глПользователь;
			
			ПредДата = ТЗСп.ДатаСписания;
			СтарСклад = ТЗСп.Склад;
			
			ДокСп.ДатаДок = ТЗСп.ДатаСписания;
			Если ДокСп.Выбран() = 0 Тогда					
				глУстановитьНомер(ДокСп);
			КонецЕсли;			
		КонецЕсли;
		
		ДокСп.НоваяСтрока();
		ДокСп.ТМЦ = ТЗСп.ТМЦ;
		ДокСп.Ед = ТЗСп.Ед;
		ДокСп.Кво = ТЗСп.КвоСписания;
		ДокСп.Коэффициент = 1;
		ДокСп.ДопКво = ТЗСп.ДопКвоСписания;
	КонецЦикла;		

	Если ДокСп.КоличествоСтрок() > 0 Тогда		
	    ДокСп.Записать();
		Ч = 0; М = 0; С = 0;
		ДокОсн.ПолучитьВремя(Ч,М,С);
		ДокСп.УстановитьВремя(Ч,М,С+1);
		ДокСп.Записать();
		ОткрытьФормуМодально(ДокСп.ТекущийДокумент(), "Провести");
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	Сообщить("Создано оприходование: " + Строка(ДокСп));	
КонецПроцедуры

Процедура глЗагрузитьДокументВСтруктуру(Конт, СтруктИзменений, КолонкиИсключения = "") Экспорт //--- УМК Сандомирский В.Ю. (10.07.14) добавил колонки таблицы исключаемые из проверки
	СтруктИзменений = СоздатьОбъект("ТаблицаЗначений");
	СтруктИзменений.НоваяКолонка("Ключ", "Строка");
	СтруктИзменений.НоваяКолонка("Значение");
	Для Инд = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
		Атр = Метаданные.ОбщийРеквизитДокумента(Инд).Идентификатор;
		СтруктИзменений.НоваяСтрока();
		СтруктИзменений.Ключ = Атр;
		СтруктИзменений.Значение = Конт.ПолучитьАтрибут(Атр);
	КонецЦикла;
	Для Инд = 1 По Метаданные.Документ(Конт.Вид()).РеквизитШапки() Цикл
		Атр = Метаданные.Документ(Конт.Вид()).РеквизитШапки(Инд).Идентификатор;
		СтруктИзменений.НоваяСтрока();
		СтруктИзменений.Ключ = Атр;
		СтруктИзменений.Значение = Конт.ПолучитьАтрибут(Атр);
	КонецЦикла;
	
	СтруктИзменений.НоваяСтрока();
	СтруктИзменений.Ключ = "ТабличнаяЧасть";
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	Конт.ВыгрузитьТабличнуюЧасть(ТЗ);
	
	//--- УМК Сандомирский В.Ю. (10.07.14)
	СписКолонокИсключений = глРазложитьСтрокуВСписок(КолонкиИсключения,",");
	Если СписКолонокИсключений.РазмерСписка() > 0 Тогда
		Для Инд = 1 По СписКолонокИсключений.РазмерСписка() Цикл
			НаимКолонкиИсключения = СписКолонокИсключений.ПолучитьЗначение(Инд);
			ТЗ.УдалитьКолонку(НаимКолонкиИсключения);
		КонецЦикла;	
	КонецЕсли;
	//... УМК Сандомирский В.Ю. (10.07.14)
	
	СтруктИзменений.Значение = ЗначениеВСтрокуВнутр(ТЗ);	
КонецПроцедуры

Функция глЕстьИзменения(Конт, СтруктИзменений, НеПроверяемыеПоля = "",КолонкиИсключения = "") Экспорт //--- УМК Сандомирский В.Ю. (10.07.14) добавил колонки таблицы исключаемые из проверки
	Если Конт.ТекущийДокумент().Выбран() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	ЕстьИзм = 0;
	СтруктИзменений.ВыбратьСтроки();
	Пока СтруктИзменений.ПолучитьСтроку() = 1 Цикл
		Если СтруктИзменений.Ключ = "ТабличнаяЧасть" Тогда
			ТЗ = СоздатьОбъект("ТаблицаЗначений");
			ТЗСтар = ЗначениеИзСтрокиВнутр(СтруктИзменений.Значение);
			Конт.ВыгрузитьТабличнуюЧасть(ТЗ);
			//--- УМК Сандомирский В.Ю. (10.07.14)
			СписКолонокИсключений = глРазложитьСтрокуВСписок(КолонкиИсключения,",");
			Если СписКолонокИсключений.РазмерСписка() > 0 Тогда
				Для Инд = 1 По СписКолонокИсключений.РазмерСписка() Цикл
					НаимКолонкиИсключения = СписКолонокИсключений.ПолучитьЗначение(Инд);
					ТЗ.УдалитьКолонку(НаимКолонкиИсключения);
					Попытка
						ТЗСтар.УдалитьКолонку(НаимКолонкиИсключения);
					Исключение
					КонецПопытки;
					
				КонецЦикла;	
			КонецЕсли;
			//... УМК Сандомирский В.Ю. (10.07.14)
			Если ЗначениеВСтрокуВнутр(ТЗСтар) <> ЗначениеВСтрокуВнутр(ТЗ) Тогда
				Возврат 1;
			КонецЕсли;
		ИначеЕсли Найти(НеПроверяемыеПоля, СтруктИзменений.Ключ + ",") = 0 Тогда
			Если СтруктИзменений.Значение <> Конт.ПолучитьАтрибут(СтруктИзменений.Ключ) Тогда
				Возврат 1;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
КонецФункции

Процедура глОтправитьУведомлениеЭП(ИмяОбъекта, Тема, ТекстСообщения, Адрес = "", attachment = "") Экспорт
	 	
	Спис = СоздатьОбъект("СписокЗначений");
	СпрПар = СоздатьОбъект("Справочник.ПараметрыЭП");
	СпрПар.ВыбратьЭлементы();
	СпрПар.ПолучитьЭлемент();
	Спис.Установить("ПараметрыЭП", СпрПар.ТекущийЭлемент());
	Спис.Установить("Текст", ТекстСообщения);
	Спис.Установить("Тема", Тема);
	Спис.Установить("ИмяОбъекта", ИмяОбъекта);
	Спис.Установить("Адрес", Адрес);
	Спис.Установить("attachment", attachment);
	ОткрытьФормуМодально("Обработка.РассылкаЭП", Спис);	
КонецПроцедуры

Функция глЭлементДоступенДляНабораПрав(Элт) Экспорт
	Спр = СоздатьОбъект("Справочник.ГруппыДоступаНП");
	Спр.ВыбратьЭлементыПоРеквизиту("ГруппаСпр", Элт, 0, 0);
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.ПометкаУдаления() = 0 Тогда
			Если СокрЛП(Спр.НазваниеНабора) = НазваниеНабораПрав() Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
КонецФункции

Функция глПроверитьДоступностьГруппы(Элт) Экспорт	
	Если глПроверяемыеНаборы.НайтиЗначение(НазваниеНабораПрав()) = 0 Тогда
		Возврат 1;
	КонецЕсли;
	Если Элт.Выбран() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	
	// проверим доступ
	Если глЭлементДоступенДляНабораПрав(Элт) = 1 Тогда
		Возврат 1;
	КонецЕсли;
	Род = Элт.Родитель;
	Пока Род.Выбран() = 1 Цикл
		Если глЭлементДоступенДляНабораПрав(Род) = 1 Тогда
			Возврат 1;
		КонецЕсли;
		Род = Род.Родитель;
	КонецЦикла;	
	
	Возврат 0;
КонецФункции

//======================================================================
Функция глПолучитьТМЦПоСпискуКодов(Стр) Экспорт
	СписокПП = СоздатьОбъект("СписокЗначений");
	СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
	
	Пока Стр <> "" Цикл
		Поз = Найти(Стр, ";");
		Если Поз = 0 Тогда
			ТекСтрока = Стр;
			Стр = "";
		Иначе
			ТекСтрока = Лев(Стр, Поз-1);
			Попытка
				Стр = Сред(Стр, Поз + 1);
			Исключение
				Стр = "";
			КонецПопытки;
		КонецЕсли;
		
		Если ТекСтрока <> "" Тогда
			Если СпрТМЦ.НайтиПоКоду(ТекСтрока, 0) = 1 Тогда
				СписокПП.ДобавитьЗначение(СпрТМЦ.ТекущийЭлемент());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат СписокПП;
КонецФункции

//======================================================================
Процедура глЗаполнитьСписокТоваров(СтрФильтр, списТовар, ПоПолномуКоду = 0, ИмяСправочника = "ТМЦ", РазвернутьДоЭлементов = 0) Экспорт
	СписФ = СоздатьОбъект("СписокЗначений");
    СписФ.ИзСтрокиСРазделителями(СокрЛП(СтрФильтр));
	СпрТМЦ = СоздатьОбъект("Справочник." + ИмяСправочника);
	
	Для Инд = 1 По СписФ.РазмерСписка() Цикл
		Если ПоПолномуКоду = 3 Тогда
			списТовар.ДобавитьЗначение(ЗначениеИзСтрокиВнутр(СписФ.ПолучитьЗначение(Инд)));
		Иначе
			Если СпрТМЦ.НайтиПоКоду(СписФ.ПолучитьЗначение(Инд), ПоПолномуКоду) = 1 Тогда
			    списТовар.ДобавитьЗначение(СпрТМЦ.ТекущийЭлемент());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РазвернутьДоЭлементов = 1 Тогда
		ПромСпис = СоздатьОбъект("СписокЗначений");	
		списТовар.Выгрузить(ПромСпис);
		списТовар.УдалитьВсе();
		Для Инд = 1 По ПромСпис.РазмерСписка() Цикл
			Зн = ПромСпис.ПолучитьЗначение(Инд);
			Если Зн.ЭтоГруппа() = 1 Тогда
				СпрТМЦ.ИспользоватьРодителя(Зн);
				СпрТМЦ.ВыбратьЭлементы();
				Пока СпрТМЦ.ПолучитьЭлемент() = 1 Цикл
					списТовар.ДобавитьЗначение(СпрТМЦ.ТекущийЭлемент());
				КонецЦикла;
			Иначе
				списТовар.ДобавитьЗначение(СпрТМЦ.ТекущийЭлемент());
			КонецЕсли;
			Род = Зн.Родитель;
			Пока ПустоеЗначение(Род) = 0 Цикл
				списТовар.ДобавитьЗначение(Род);
				Род = Род.Родитель;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // 

Процедура глЗаписатьСписокТоваров(СтрФильтр, списТовар, ПоПолномуКоду = 0) Экспорт
	СписФ = СоздатьОбъект("СписокЗначений");
	Для Инд = 1 По списТовар.РазмерСписка() Цикл
		Если ПоПолномуКоду = 2 Тогда
			СписФ.ДобавитьЗначение(списТовар.ПолучитьЗначение(Инд).ПолныйКод());
		ИначеЕсли ПоПолномуКоду = 3 Тогда
			СписФ.ДобавитьЗначение(ЗначениеВСтрокуВнутр(списТовар.ПолучитьЗначение(Инд)));
		Иначе
			СписФ.ДобавитьЗначение(списТовар.ПолучитьЗначение(Инд).Код);
		КонецЕсли;
	КонецЦикла;	
	СтрФильтр = СписФ.ВСтрокуСРазделителями();
КонецПроцедуры

//================Учет бонусов==========================================
Процедура глНачислитьБонусы(Конт, Контрагент, Договор, ЗнакУм, Знач СуммаОплаты = 0, ГоловнойКонтрагент = "",
	                                      МонетарныйДокумент = 0, СхемаРасчетаБонуса = "", ТолькоРасчетПоТЗ = 0) Экспорт	
	
	Если ПустоеЗначение(СхемаРасчетаБонуса) = 0 Тогда
		Схема = СхемаРасчетаБонуса;
	ИначеЕсли Конт.ФлРучногоИзмСхемыРБ = 1 Тогда //--- если РН и поменяли руками схему то не трогать ее //--- УМК Сандомирский В.Ю, (26.05.2014)
		//--- не меняем схему 
		Схема = Конт.СхемаРБ;
	Иначе
		// пробуем получить схему из договора
		Если ПустоеЗначение(Договор) = 0 Тогда
			Схема = Договор.СхемаРасчетаБонуса;
			Если ПустоеЗначение(Схема) = 0 Тогда
				Конт.ФлРучногоИзмСхемыРБ = 1;
			КонецЕсли;
		КонецЕсли;
		Если ПустоеЗначение(Схема) = 1 Тогда
			Схема = Контрагент.СхемаРасчетаБонуса.Получить(Конт.ДатаДок);
		КонецЕсли;
		Конт.СхемаРБ = Схема;	
	КонецЕсли;
	
	// + umk
	Попытка
		ТекущийДокумент = Конт.ТекущийДокумент();
	Исключение
		ТекущийДокумент = Конт.ТекущийДокумент; // Если Конт - Это тип ТЗ
	КонецПопытки;

	Попытка 
		Подразделение = Конт.Подразделение;
	Исключение
		Подразделение = Константа.БазПодразделениеПродажи;
	КонецПопытки;
	
	Если ПустоеЗначение(Схема) = 1 Тогда
		Возврат;	    
	КонецЕсли;
	
	ТЗДляНачислений = СоздатьОбъект("ТаблицаЗначений");
	Схема.ВыгрузитьТабличнуюЧасть(ТЗДляНачислений);
	ТЗДляНачислений.НоваяКолонка("Сумма");
	ТЗДляНачислений.НоваяКолонка("списТовар", "СписокЗначений");
	
	ТЗДляНачислений.ВыбратьСтроки();
	Пока ТЗДляНачислений.ПолучитьСтроку() = 1 Цикл
		ТЗДляНачислений.списТовар = СоздатьОбъект("СписокЗначений");		
		глЗаполнитьСписокТоваров(ТЗДляНачислений.СписТоваров, ТЗДляНачислений.списТовар);
	КонецЦикла;
	
	Если (СуммаОплаты = 0) И (МонетарныйДокумент = 0) Тогда // Справедливо только для немонетарных операций + umk
		
		СписНужныхКатЦен = СоздатьОбъект("ТаблицаЗначений");
		ТЗДляНачислений.Выгрузить(СписНужныхКатЦен,,,"КатЦен");
		СписНужныхКатЦен.НоваяКолонка("Сумма", "Число");
		СписНужныхКатЦен.Свернуть("КатЦен", "Сумма");
		ЭтоВозврат = ?(ТолькоРасчетПоТЗ = 1,0,
		?((Конт.Вид() = "ВозвратнаяНакладная") ИЛИ ((Конт.Вид() = "ПереоценкаРозницы") И (ЗнакУм = -1)), 1, 0));
		ЕстьНеНачислятьБонус = ?(ТолькоРасчетПоТЗ=1,0,глЕстьРеквизитМнЧ("НеНачислятьБонус", Конт.Вид()));
		ЕстьТара = ?(ТолькоРасчетПоТЗ=1,0,глЕстьРеквизитМнЧ("Тара", Конт.Вид()));
		
	КонецЕсли;

	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	Если (СуммаОплаты = 0) И (МонетарныйДокумент = 0) Тогда
		Если ТолькоРасчетПоТЗ = 0 Тогда
			Конт.ВыгрузитьТабличнуюЧасть(ТЗ);
		Иначе
			Конт.Выгрузить(ТЗ);
		КонецЕсли;
		
		Если ТолькоРасчетПоТЗ =0 Тогда
			Если глЕстьРеквизитМнЧ("СуммаБезСкидки", Конт.Вид()) = Нет Тогда
				ТЗ.НоваяКолонка("СуммаБезСкидки", "Число", 15, 3);
			КонецЕсли;
		КонецЕсли;
		
		ЕстьЦенаБезСкидки = ?(ТолькоРасчетПоТЗ =1,Да,глЕстьРеквизитМнЧ("ЦенаБезСкидки", Конт.Вид())); 
		
		Если ЕстьЦенаБезСкидки= Нет Тогда
			ТЗ.НоваяКолонка("ЦенаБезСкидки", "Число", 15, 2);		
		КонецЕсли;
		
		ТЗ.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСтроку() = 1 Цикл
			Если ТЗ.ЦенаБезСкидки = 0 Тогда
				ТЗ.ЦенаБезСкидки = ТЗ.ЦенаСНДС;
			КонецЕсли;
			ТЗ.СуммаБезСкидки = ?(ТЗ.ЦенаБезСкидки = ТЗ.ЦенаСНДС, ТЗ.СуммаСНДС, ТЗ.ЦенаБезСкидки * ТЗ.Кво);			
		КонецЦикла;
		
		Если ТолькоРасчетПоТЗ = 1 Тогда
			ТЗ.Свернуть("ТМЦ,Ед," + ?(ЕстьТара = Да, "Тара,", "") + "ВидУпаковки,Коэффициент" 
			+ ?(ЕстьНеНачислятьБонус = Да, ",НеНачислятьБонус", ""),"Кво,СуммаСНДС,СуммаБезСкидки");
		Иначе
			Если (Конт.Вид() = "ПереоценкаРозницы") И (ЗнакУм = 1) Тогда			
				ТЗ.НоваяКолонка("ВидУпаковки", "Справочник.ВидыУпаковки");
				ТЗ.ВыбратьСтроки();
				Пока ТЗ.ПолучитьСтроку() = 1 Цикл
					ТЗ.СуммаСНДС = ТЗ.НоваяСумма;
					ТЗ.СуммаБезСкидки = ТЗ.НоваяСумма;
				КонецЦикла;
			Иначе			
				Если ЭтоВозврат = 1 Тогда //--- УМК Сандомирский В.Ю, (возникли ошибки при определении бонуса в возвратной накладной) 01.05.14 
					ТЗ.НоваяКолонка("ВидУпаковки");
					ТЗ.ВыбратьСтроки();
					Пока ТЗ.ПолучитьСтроку() = 1 Цикл
						ТЗ.ВидУпаковки = ТЗ.ВУП;				
					КонецЦикла;						
					ТЗ.Свернуть("ТМЦ,ДокПродажи,ВидУпаковки,Коэффициент,Ед","Кво,СуммаСНДС,СуммаБезСкидки");
				Иначе
					ТЗ.Свернуть("ТМЦ,Ед," + ?(ЕстьТара = Да, "Тара,", "") + "ВидУпаковки,Коэффициент" + ?(ЕстьНеНачислятьБонус = Да, ",НеНачислятьБонус", ""),"Кво,СуммаСНДС,СуммаБезСкидки");
				КонецЕсли; //... УМК Сандомирский В.Ю, (возникли ошибки при определении бонуса в возвратной накладной) 01.05.14
			КонецЕсли;
		КонецЕсли; // ТолькоРасчетПоТЗ
			
		СписНужныхКатЦен.ВыбратьСтроки();
		Пока СписНужныхКатЦен.ПолучитьСтроку() = 1 Цикл
			Кол = "СЦП"+СписНужныхКатЦен.НомерСтроки;
			ТЗ.НоваяКолонка(Кол, "Число", 12, 2);
		КонецЦикла;
	Иначе
		ТЗ = СоздатьОбъект("ТаблицаЗначений");
		ТЗ.НоваяКолонка("ТМЦ", "Справочник.ТМЦ");
		ТЗ.НоваяКолонка("Тара", "Справочник.ТМЦ");
		ТЗ.НоваяКолонка("СуммаСНДС", "Число", 12, 2);
		ТЗ.НоваяКолонка("Кво", "Число", 15, 3);
		ТЗ.НоваяКолонка("СуммаБезСкидки", "Число", 15, 3);
		ТЗ.НоваяСтрока();
		ТЗ.ТМЦ = Константа.АвансовыйПлатеж;		
		ТЗ.СуммаСНДС = СуммаОплаты;
		ТЗ.СуммаБезСкидки = СуммаОплаты;
	КонецЕсли;
	ТЗСотрудники = СоздатьОбъект("ТаблицаЗначений");
	ТЗСотрудники.НоваяКолонка("Сотрудник", "Справочник.Сотрудники");
	ТЗСотрудники.НоваяКолонка("Счет", "Счет");
	ТЗСотрудники.НоваяКолонка("Сумма", "Число", 12, 2);
	ТЗСотрудники.НоваяКолонка("ЗакрыватьБонусНа_661", "Строка");// + umk
	ТЗСотрудники.НоваяКолонка("ф1");
	ВЗСК = Константа.ВидЗатратДляСкидокНаценок;
	БазВД = Константа.БазВидДеятельности;	
	
	ДДок = Конт.ДатаДок;
	
	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		Если ТЗ.ТМЦ.ВидТМЦ <> Перечисление.ВидыТМЦ.Тара Тогда
			НеначислятьБонусПоТМЦ = 0;
			Если ТЗ.ТМЦ.НеНачислятьБонусы.Получить(Конт.ДатаДок) = 1 Тогда
				НеначислятьБонусПоТМЦ = 1;
			КонецЕсли;
			Если ЕстьНеНачислятьБонус = Да Тогда
				Если ТЗ.НеНачислятьБонус = Да Тогда
					НеначислятьБонусПоТМЦ = 1;
				КонецЕсли;
			КонецЕсли;
			Если (СуммаОплаты = 0) И (НеначислятьБонусПоТМЦ = 0) И (МонетарныйДокумент = 0)  Тогда
				СписНужныхКатЦен.ВыбратьСтроки();
				Пока СписНужныхКатЦен.ПолучитьСтроку() = 1 Цикл
					
					Если (ЭтоВозврат = 1) И (Конт.ДатаДок >= '01.06.2014') Тогда //--- УМК Сандомирский В.Ю,  01.07.14  (возникли ошибки при определении бонуса в возвратной накладной связанные с определением цены на дату)
						Если ПустоеЗначение(ТЗ.ДокПродажи) = 0 Тогда
							ДатаЦен = ?(ПустоеЗначение(ТЗ.ДокПродажи.ДатаЦ) = 0, ТЗ.ДокПродажи.ДатаЦ, ТЗ.ДокПродажи.ДатаДок);
						Иначе
							ДатаЦен = Конт.ДатаДок;
						КонецЕсли;
					Иначе
						ДатаЦен = Конт.ДатаДок;
						Если ТолькоРасчетПоТЗ = 0 Тогда
							Если глЕстьРеквизитШапки("ДатаЦ", Конт.Вид()) = Да Тогда
								Если ПустоеЗначение(Конт.ДатаЦ) = 0 Тогда
									ДатаЦен = Конт.ДатаЦ;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли; //ТолькоРасчетПоТЗ = 0
					КонецЕсли;
					
					ЦенаВПрайс0 = глВернутьЦену(ТЗ.ТМЦ, СписНужныхКатЦен.КатЦен, ДатаЦен, Гривня) + глПолучитьЦенуВУП(ТЗ, СписНужныхКатЦен.КатЦен, ДатаЦен, Гривня, ДатаЦен, ТЗ.ТМЦ) + 
						?(ЕстьТара = Да, глВернутьЦену(ТЗ.Тара, ТЗ.Тара.БазоваяКатегорияЦены.Получить(ДатаЦен), ДатаЦен, Гривня) * ?(ТЗ.Ед.Единица = Константа.БазЕдиница, 1, ТЗ.Ед.Вес), 0);
					//--- УМК Сандомирский В.Ю, (Дата цен) 01.07.14 
					ТЗ.УстановитьЗначение(ТЗ.НомерСтроки, "СЦП"+СписНужныхКатЦен.НомерСтроки, ЦенаВПрайс0 * ТЗ.Кво * ТЗ.Коэффициент);
				КонецЦикла;			    
			КонецЕсли;
			
	
			// теперь начисляем по схеме
			ТЗДляНачислений.ВыбратьСтроки();
			Пока ТЗДляНачислений.ПолучитьСтроку() = 1 Цикл
				Если (ЭтоВозврат = 1) И (ТЗДляНачислений.НеУчитыватьПриВозврате = Перечисление.ДаНет.Да)
				     Тогда Продолжить;
				КонецЕсли;
				Сумма = 0; База = 0;
				Если НеначислятьБонусПоТМЦ = 0 Тогда
					НеначислятьБонус = 0;
					Если ТЗДляНачислений.списТовар.РазмерСписка() > 0 Тогда
						НеначислятьБонус = ТЗДляНачислений.списТовар.Принадлежит(ТЗ.ТМЦ);
					КонецЕсли;
					               
					// + umk 
					ЗакрыватьБонусНа_661 = "Нет";
					
					Если  ТЗДляНачислений.Объект.Вид() = "Сотрудники"  Тогда
						ЗакрыватьБонусНа_661 = ?(ПустоеЗначение(ТЗДляНачислений.Объект.Родитель.СчНачисленийБонусов) = 0,"Нет","Да"); // + umk 
					КонецЕсли;  
					// + umk 
					
					Если НеначислятьБонус = 0 Тогда
						СчНачисления = ?(ТЗДляНачислений.Объект.Вид() = "Сотрудники","3782", ?(ТЗДляНачислений.ф1 = Да,"631","3732"));// + umk
					   
						//СчБазы = ?(ТЗДляНачислений.Объект.Вид() = "Сотрудники", "РС", "РК");					
						СтрБаза = "";
						Если (ТЗДляНачислений.База = Перечисление.БазыДляРасчетаБонуса.СуммаНакладной) И (СуммаОплаты = 0) И (МонетарныйДокумент = 0) Тогда
							База = ТЗ.СуммаСНДС * ЗнакУм;
							СтрБаза = "Сумма накл.";
						ИначеЕсли (ТЗДляНачислений.База = Перечисление.БазыДляРасчетаБонуса.СуммаПоКЦ) И (СуммаОплаты = 0) И (МонетарныйДокумент = 0) Тогда
							Поз = 0;
							СписНужныхКатЦен.НайтиЗначение(ТЗДляНачислений.КатЦен, Поз, "КатЦен");
							Если Поз <> 0 Тогда
								База = ТЗ.ПолучитьЗначение(ТЗ.НомерСтроки, "СЦП"+Поз) * ЗнакУм;
								СтрБаза = "Сумма в ценах " + СписНужныхКатЦен.ПолучитьЗначение(Поз, "КатЦен");
							КонецЕсли;					
						ИначеЕсли (ТЗДляНачислений.База = Перечисление.БазыДляРасчетаБонуса.Разница) И (СуммаОплаты = 0) И (МонетарныйДокумент = 0) Тогда
							СчНачисления = ?(ТЗДляНачислений.Объект.Вид() = "Сотрудники","3781", ?(ТЗДляНачислений.ф1 = Да,"631","3731")); 
							Поз = 0;
							СписНужныхКатЦен.НайтиЗначение(ТЗДляНачислений.КатЦен, Поз, "КатЦен");
							Если Поз <> 0 Тогда
								База = (ТЗ.СуммаБезСкидки - ТЗ.ПолучитьЗначение(ТЗ.НомерСтроки, "СЦП"+Поз)) * ЗнакУм;
								СтрБаза = "Разница между суммой док. и суммой в ценах: " + СписНужныхКатЦен.ПолучитьЗначение(Поз, "КатЦен");
							КонецЕсли;					
						ИначеЕсли ((ТЗДляНачислений.База = Перечисление.БазыДляРасчетаБонуса.СуммаОплаты) И (СуммаОплаты <> 0))
						      ИЛИ ((ТЗДляНачислений.База = Перечисление.БазыДляРасчетаБонуса.СуммаОплаты) И (ТолькоРасчетПоТЗ = 1)) Тогда
							База = ТЗ.СуммаСНДС * ЗнакУм;
							СтрБаза = "Сумма оплаты";
						КонецЕсли;
						Сумма = База * (ТЗДляНачислений.Зн/100);
						Если ((СуммаОплаты = 0) И (ТЗДляНачислений.База = Перечисление.БазыДляРасчетаБонуса.СуммаОплаты) И (ТолькоРасчетПоТЗ = 0))
							ИЛИ ((СуммаОплаты <> 0) И (ТЗДляНачислений.База <> Перечисление.БазыДляРасчетаБонуса.СуммаОплаты) И (ТолькоРасчетПоТЗ = 0)) Тогда
							Продолжить;
						КонецЕсли;					
					КонецЕсли;
				
				СодержаниеПроводки = "Начисление бонусов." + ?(ТЗДляНачислений.ф1 = Да,": " + Строка(ТЗ.ТМЦ),"");
				
				ИначеЕсли (ПустоеЗначение(Константа.СторноБонусовВРН) = 0) И (Конт.ДатаДок >=Константа.СторноБонусовВРН) И (НеначислятьБонусПоТМЦ = 1) И (ТолькоРасчетПоТЗ = 0) Тогда //Если применять механизм сторнирования бонусов для оплат.
					// Считаем, что сумма отгрузки товара оплачена. По оплате начислены бонусы. Их нужно снять.
					Если ТЗДляНачислений.База = Перечисление.БазыДляРасчетаБонуса.СуммаОплаты  Тогда
						ЗакрыватьБонусНа_661 = "Нет";
					Если  ТЗДляНачислений.Объект.Вид() = "Сотрудники"  Тогда
						ЗакрыватьБонусНа_661 = ?(ПустоеЗначение(ТЗДляНачислений.Объект.Родитель.СчНачисленийБонусов) = 0,"Нет","Да"); // + umk 
					КонецЕсли;  
						СчНачисления = ?(ТЗДляНачислений.Объект.Вид() = "Сотрудники","3784", ?(ТЗДляНачислений.ф1 = Да,"631", "3733"));
						СодержаниеПроводки = "Сторнирование бонусов по отгрузке, для базы ""Сумма оплаты"".";
						База = -ТЗ.СуммаСНДС;
						СтрБаза = "Сумма оплаты";
						Сумма = База * (ТЗДляНачислений.Зн/100);					
					КонецЕсли;
				КонецЕсли;//По сторнированию бонусов.
				
				Если ТолькоРасчетПоТЗ = 0 Тогда
					
					Если Сумма <> 0 Тогда
						//Если проводим по ф1 то вместо бонусов начисляем долг контрагента поставщика по 
						//РН ВзаиморасчетыПоставщиков и по 631 счету в бух. учете.
						Если ТЗДляНачислений.ф1 = Да Тогда
							ВзаиморасчетыПоставщиков = Конт.Регистр.ВзаиморасчетыПоставщиков;
							ВзаиморасчетыПоставщиков.ПривязыватьСтроку(ТЗ.НомерСтроки);
							ВзаиморасчетыПоставщиков.Фирма = Конт.Фирма;
							ВзаиморасчетыПоставщиков.Контрагент = ТЗДляНачислений.Объект;
							ВзаиморасчетыПоставщиков.Валюта = Гривня;
							ВзаиморасчетыПоставщиков.СтавкаНДС = БезНДС;
							ВзаиморасчетыПоставщиков.Долг = Сумма;
							ВзаиморасчетыПоставщиков.ДолгОсн = Сумма;
							ВзаиморасчетыПоставщиков.ДвижениеРасходВыполнить();
						Иначе
							Конт.Регистр.Бонусы.ПривязыватьСтроку(ТЗ.НомерСтроки);
							Конт.Регистр.Бонусы.Движение(Контрагент, ТЗДляНачислений.Объект, ТЗ.ТМЦ, ТЗДляНачислений.База, ТЗДляНачислений.КатЦен, Схема, ТЗ.СуммаСНДС * ЗнакУм, База, Сумма, ТЗ.Кво * ЗнакУм);
						КонецЕсли;
						
						глПроводка(Конт, "93", СчНачисления, Сумма, СодержаниеПроводки, , БазВД, Подразделение, ВЗСК, ТЗДляНачислений.Объект, ТекущийДокумент, ТЗ.ТМЦ,,,"БО");
						
						Если ТЗДляНачислений.Объект.Вид() = "Сотрудники" Тогда
							ТЗСотрудники.НоваяСтрока();
							ТЗСотрудники.Сотрудник = ТЗДляНачислений.Объект;
							ТЗСотрудники.Счет = СчетПоКоду(СчНачисления);
							ТЗСотрудники.Сумма = Сумма;
							ТЗСотрудники.ЗакрыватьБонусНа_661 = ЗакрыватьБонусНа_661; // + umk 
						КонецЕсли;	
						
					КонецЕсли;
				КонецЕсли; //ТолькоРасчетПоТЗ
				
				Если ТолькоРасчетПоТЗ = 1 Тогда
					Конт.Бонусы = Конт.Бонусы + Сумма;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла; // По ТЗ
	
	Если ТолькоРасчетПоТЗ = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗСотрудники.Свернуть("Сотрудник,Счет,ЗакрыватьБонусНа_661", "Сумма");
	ТЗСотрудники.ВыбратьСтроки();
	
	Пока ТЗСотрудники.ПолучитьСтроку() = 1 Цикл
		Если ТЗСотрудники.ЗакрыватьБонусНа_661 = "Да" Тогда // + umk
			глПроводка(Конт, ТЗСотрудники.Счет, "661", ТЗСотрудники.Сумма, "Начисление з/п", ,ТЗСотрудники.Сотрудник, ТекущийДокумент, , ТЗСотрудники.Сотрудник, НачМесяца(Конт.ДатаДок),,,,"ЗП");
		Иначе
			глПроводка(Конт, ТЗСотрудники.Счет,ТЗСотрудники.Сотрудник.Родитель.СчНачисленийБонусов,  
			                 ТЗСотрудники.Сумма, "Начисление з/п", ,ТЗСотрудники.Сотрудник, ТекущийДокумент, , ТЗСотрудники.Сотрудник, НачМесяца(Конт.ДатаДок),,,,"ЗП");
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

//Снимает бонусы в документе возврат товара от контрагента
//
Процедура глСнятьБонусыПоВозвратуТовара(Конт) Экспорт
	перем Схема; // схема расчета бонусо
	
	//спис. созд. из смемы РБ для исключений сторно бонусов по возврату.
	СписокИсключений = СоздатьОбъект("СписокЗначений");
	// пробуем получить схему из договора
	Если ПустоеЗначение(Конт.Договор) = 0 Тогда
		Схема = Конт.Договор.СхемаРасчетаБонуса;
	КонецЕсли;
	Если ПустоеЗначение(Схема) = 1 Тогда
		Схема = Конт.Контрагент.СхемаРасчетаБонуса.Получить(Конт.ДатаДок);
	КонецЕсли;
	
	Если ПустоеЗначение(Схема) = 0 Тогда
		Схема.ВыбратьСтроки();
		Пока Схема.ПолучитьСтроку() = 1 Цикл
			Если Схема.НеУчитыватьПриВозврате = Перечисление.ДаНет.Да Тогда
			 СписокИсключений.ДобавитьЗначение(Схема.Объект);
            КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТабТоваровВозвр = СоздатьОбъект("ТаблицаЗначений");
	Конт.ВыгрузитьТабличнуюЧасть(ТабТоваровВозвр);
	
	ТабТоваровВозвр.Свернуть("ТМЦ, ДокПродажи", "Кво, СуммаСНДС");
	
	//Таблица для сторно зарплаты.
	ТЗСотрудники = СоздатьОбъект("ТаблицаЗначений");
	ТЗСотрудники.НоваяКолонка("Сотрудник", "Справочник.Сотрудники");
	ТЗСотрудники.НоваяКолонка("Счет", "Счет");
	ТЗСотрудники.НоваяКолонка("Сумма", "Число", 12, 2);
	ТЗСотрудники.НоваяКолонка("ЗакрыватьБонусНа_661", "Строка");
	
	//получим таблицы движений бонусов из документов отгрузки 
	ТабТоваровВозвр.ВыбратьСтроки();
	Пока ТабТоваровВозвр.ПолучитьСтроку() = 1 Цикл
		
		Документ = ТабТоваровВозвр.ДокПродажи; 
		
		Если ПустоеЗначение(Документ) = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		//Подготовим таблицы для сторнирования бонусов по каждой накладной 
		ТабБухОпераций = СоздатьОбъект("ИндексированнаяТаблица");
		ТабБухОпераций.НоваяКолонка("Дебет_счет");
		ТабБухОпераций.НоваяКолонка("Дебет_субконто1");
		ТабБухОпераций.НоваяКолонка("Дебет_субконто2");
		ТабБухОпераций.НоваяКолонка("Дебет_субконто3");
		ТабБухОпераций.НоваяКолонка("Кредит_счет");
		ТабБухОпераций.НоваяКолонка("Кредит_субконто1");
		ТабБухОпераций.НоваяКолонка("Кредит_субконто2");
		ТабБухОпераций.НоваяКолонка("Кредит_субконто3");
		ТабБухОпераций.НоваяКолонка("Валюта");
		ТабБухОпераций.НоваяКолонка("ВалСумма");
		ТабБухОпераций.НоваяКолонка("НашаФирма");
		ТабБухОпераций.НоваяКолонка("Сумма");
		ТабБухОпераций.НоваяКолонка("Количество");
		ТабБухОпераций.НоваяКолонка("ДатаОперации");
		
		ТабРегистрБонусы = СоздатьОбъект("ИндексированнаяТаблица");
		ТабРегистрБонусы.НоваяКолонка("КонтрагентБазы");
		ТабРегистрБонусы.НоваяКолонка("Контрагент");
		ТабРегистрБонусы.НоваяКолонка("ТМЦ");
		ТабРегистрБонусы.НоваяКолонка("ВидБазы");
		ТабРегистрБонусы.НоваяКолонка("КатЦен");
		ТабРегистрБонусы.НоваяКолонка("СхемаРБ");
		ТабРегистрБонусы.НоваяКолонка("СуммаДок");
		ТабРегистрБонусы.НоваяКолонка("База");
		ТабРегистрБонусы.НоваяКолонка("СуммаНач");
		ТабРегистрБонусы.НоваяКолонка("КвоДок");
		ТабРегистрБонусы.ДобавитьИндекс("Индекс", "ТМЦ");
		
		ТМЦ = ТабТоваровВозвр.ТМЦ;
		
		//бух. поводки
		Опер = СоздатьОбъект("Операция");
		Если Опер.НайтиОперацию(Документ)=1 Тогда
			КвоПроводок = Опер.КоличествоПроводок();
			Для НомПроводки=1 по КвоПроводок Цикл
				Опер.ПолучитьПроводкуПоНомеру(НомПроводки);
				
				Если ((Опер.Кредит.Счет = СчетПоКоду("3781")) ИЛИ (Опер.Кредит.Счет = СчетПоКоду("3782"))  ИЛИ (Опер.Кредит.Счет = СчетПоКоду("3784"))
				ИЛИ (Опер.Кредит.Счет = СчетПоКоду("3731")) ИЛИ (Опер.Кредит.Счет = СчетПоКоду("3732")) ИЛИ (Опер.Кредит.Счет = СчетПоКоду("3733"))) 
				И (ТМЦ = Опер.Кредит.Субконто(3)) 
				Тогда
					
					//Подстчитаем количество ТМЦ в расх. накладн.
					КолРН = 0;
					ТабТоваровРН = СоздатьОбъект("ТаблицаЗначений");
	                Документ.ВыгрузитьТабличнуюЧасть(ТабТоваровРН);
					ТабТоваровРН.Свернуть("ТМЦ", "Кво");
					
					//индексируем 
					ТабТоваровРН_индекс = СоздатьОбъект("ИндексированнаяТаблица");
					ТабТоваровРН_индекс.Загрузить(ТабТоваровРН);
					ТабТоваровРН_индекс.ДобавитьИндекс("Индекс", "ТМЦ");
				
					сзКлюч = СоздатьОбъект("СписокЗначений");
					сзКлюч.ДобавитьЗначение(ТМЦ);
					ТабТоваровРН_индекс.Подмножество(сзКлюч, 1,"Индекс");
					ТабТоваровРН_индекс.ВыбратьСтроки("Индекс");
					
					Пока ТабТоваровРН_индекс.ПолучитьСтроку("Индекс") = 1 Цикл
							КолРН = ТабТоваровРН_индекс.Кво;
					КонецЦикла;
					
					Если КолРН = 0 Тогда
						Сообщить("Документ основание " + Строка(Документ) + ". Для ТМЦ - " + Строка(ТМЦ) +  " не указано количество товара. Бонусы не сняты.");
						Продолжить;
					КонецЕсли;
								
					ТабБухОпераций.НоваяСтрока();
					// ДТ 	
					ТабБухОпераций.Дебет_счет = Опер.Дебет.Счет;
					//Добавим субконто Дт
					Для Инд = 1 По Опер.Дебет.Счет.КоличествоСубконто() Цикл
						ТабБухОпераций.Установить(ТабБухОпераций.НомерСтроки,"Дебет_субконто" + Строка(Инд), Опер.Дебет.Субконто(Инд));
					КонецЦикла;
			
					//КД
					ТабБухОпераций.Кредит_счет = Опер.Кредит.Счет; 
					//Добавим субконто кт
					Для Инд = 1 По Опер.Дебет.Счет.КоличествоСубконто() Цикл
						ТабБухОпераций.Установить(ТабБухОпераций.НомерСтроки,"Кредит_субконто" + Строка(Инд), Опер.Кредит.Субконто(Инд));
					КонецЦикла;	
				
					ТабБухОпераций.Валюта = Опер.Валюта;
					ТабБухОпераций.ВалСумма = Опер.ВалСумма;
					ТабБухОпераций.НашаФирма = Опер.НашаФирма;
					ТабБухОпераций.Сумма = Опер.Сумма;
					ТабБухОпераций.Количество = КолРН;
					ТабБухОпераций.ДатаОперации = Опер.ДатаОперации;
				КонецЕсли; // По условию проверки ТМЦ и Счета БУ
			КонецЦикла; // По операции
		КонецЕсли;		
		
		//Движение по регистру бонусы
		рег = СоздатьОбъект("регистр.Бонусы");
		Рег.ВыбратьДвиженияДокумента(Документ);
		Пока рег.получитьДвижение() =1 Цикл
			Если ТМЦ <>  рег.ТМЦ Тогда
				Продолжить;
			КонецЕсли;
			
			Если рег.ВидБазы = Перечисление.БазыДляРасчетаБонуса.СкидкаПоТМЦ Тогда
				Продолжить; // снимем в другой процедуре
			КонецЕсли;
			
			ТабРегистрБонусы.НоваяСтрока();
			ТабРегистрБонусы.КонтрагентБазы = рег.КонтрагентБазы;
			ТабРегистрБонусы.Контрагент = рег.Контрагент;
			ТабРегистрБонусы.ТМЦ = рег.ТМЦ;
			ТабРегистрБонусы.ВидБазы = рег.ВидБазы;
			ТабРегистрБонусы.КатЦен = рег.КатЦен;
			ТабРегистрБонусы.СхемаРБ = рег.СхемаРБ;
			ТабРегистрБонусы.СуммаДок = рег.СуммаДок;
			ТабРегистрБонусы.База = рег.База;
			ТабРегистрБонусы.СуммаНач = рег.СуммаНач;
			ТабРегистрБонусы.КвоДок = рег.КвоДок;	
			
		КонецЦикла;
		//Сгруппируем таблицы
		ТабБухОпераций.Свернуть("Дебет_счет, Дебет_субконто1, Дебет_субконто2, 
		|Дебет_субконто3, Кредит_счет, Кредит_субконто1, Кредит_субконто2,
		|Кредит_субконто3, Валюта, НашаФирма, ДатаОперации , Количество", "ВалСумма, Сумма");
		
		ТабРегистрБонусы.Свернуть("КонтрагентБазы, Контрагент, ТМЦ, ВидБазы, КатЦен, СхемаРБ", "СуммаДок,База,СуммаНач,КвоДок");
		
		//Сторнируем бух проводки.
		ТабБухОпераций.ВыбратьСтроки();
		Пока ТабБухОпераций.ПолучитьСтроку() = 1 Цикл
			//проверим исключения
			Если СписокИсключений.НайтиЗначение(ТабБухОпераций.Кредит_субконто1) <>  0 Тогда
				Продолжить
			КонецЕсли;
			
			КолСторно = Мин(ТабБухОпераций.Количество, ТабТоваровВозвр.Кво); //количество возврата д.б. не больше количества в расход. накл. 
			Если КолСторно = 0 Тогда
				Продолжить;
			КонецЕсли;
			коэфф = -ТабТоваровВозвр.Кво/ТабБухОпераций.Количество;
			глПроводка(Конт, ТабБухОпераций.Дебет_счет, ТабБухОпераций.Кредит_счет, коэфф*ТабБухОпераций.Сумма,"Сторно бонусов при возврате",,
			ТабБухОпераций.Дебет_субконто1,ТабБухОпераций.Дебет_субконто2,ТабБухОпераций.Дебет_субконто3,
			ТабБухОпераций.Кредит_субконто1,ТабБухОпераций.Кредит_субконто2,ТабБухОпераций.Кредит_субконто3,
			ТабБухОпераций.Валюта, коэфф*ТабБухОпераций.ВалСумма,"БО");		
		КонецЦикла;
		
		//Сторнируем бонусы по регистрам.
		ТабРегистрБонусы.ВыбратьСтроки();
		Пока ТабРегистрБонусы.ПолучитьСтроку() =  1 Цикл
			//проверим исключения
			Если СписокИсключений.НайтиЗначение(ТабРегистрБонусы.Контрагент) <>  0 Тогда
				Продолжить
			КонецЕсли;
			
			КолСторно = Мин(ТабРегистрБонусы.КвоДок, ТабТоваровВозвр.Кво); //количество возврата д.б. не больше количества в расход. накл. 
			Если КолСторно = 0 Тогда
				Продолжить;
			КонецЕсли;
			коэфф = -ТабТоваровВозвр.Кво/ТабРегистрБонусы.КвоДок;
			
			Конт.Регистр.Бонусы.ПривязыватьСтроку(ТабТоваровВозвр.НомерСтроки);
			
			Конт.Регистр.Бонусы.Движение(ТабРегистрБонусы.КонтрагентБазы, ТабРегистрБонусы.Контрагент, 
			ТабРегистрБонусы.ТМЦ, ТабРегистрБонусы.ВидБазы, ТабРегистрБонусы.КатЦен, ТабРегистрБонусы.СхемаРБ, 
			-ТабТоваровВозвр.СуммаСНДС, ТабРегистрБонусы.База*коэфф, ТабРегистрБонусы.СуммаНач*коэфф, -ТабТоваровВозвр.Кво);
			
			Если ТабРегистрБонусы.СуммаНач*коэфф <> 0 Тогда
				Если ТабРегистрБонусы.Контрагент.Вид() = "Сотрудники" Тогда
					СчНачисления = ?(ТабРегистрБонусы.ВидБазы = Перечисление.БазыДляРасчетаБонуса.Разница, "3781", 
					?(ТабРегистрБонусы.ВидБазы = Перечисление.БазыДляРасчетаБонуса.СуммаОплаты,"3784","3782")); 
					ТЗСотрудники.НоваяСтрока();
					ТЗСотрудники.Сотрудник = ТабРегистрБонусы.Контрагент;
					ТЗСотрудники.Счет = СчетПоКоду(СчНачисления);
					ТЗСотрудники.Сумма = ТабРегистрБонусы.СуммаНач * коэфф;
					ТЗСотрудники.ЗакрыватьБонусНа_661 = ?(ПустоеЗначение(ТЗСотрудники.Сотрудник.Родитель.СчНачисленийБонусов) = 0,"Нет","Да");
				КонецЕсли;		
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; // По документам
	
	ТЗСотрудники.Свернуть("Сотрудник,Счет,ЗакрыватьБонусНа_661", "Сумма");
	ТЗСотрудники.ВыбратьСтроки();
	
	Пока ТЗСотрудники.ПолучитьСтроку() = 1 Цикл
		//проверим исключения
		Если СписокИсключений.НайтиЗначение(ТЗСотрудники.Сотрудник) <>  0 Тогда
			Продолжить
		КонецЕсли;
		
		Если ТЗСотрудники.ЗакрыватьБонусНа_661 = "Да" Тогда 
			глПроводка(Конт, ТЗСотрудники.Счет, "661", ТЗСотрудники.Сумма, "Начисление з/п", ,ТЗСотрудники.Сотрудник, Конт.ТекущийДокумент(), , ТЗСотрудники.Сотрудник, НачМесяца(Конт.ДатаДок),,,,"ЗП");
		Иначе
			глПроводка(Конт, ТЗСотрудники.Счет,ТЗСотрудники.Сотрудник.Родитель.СчНачисленийБонусов,  
			ТЗСотрудники.Сумма, "Начисление з/п", ,ТЗСотрудники.Сотрудник,  Конт.ТекущийДокумент(), , ТЗСотрудники.Сотрудник, НачМесяца(Конт.ДатаДок),,,,"ЗП");
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры // глСнятьБонусыПоВозвратуТовара()
//======================================================================
Процедура глНачислитьБонусыПоТМЦ(Конт, ДокПродажи = "") Экспорт
	ЗнакУм = 1;
	Если Конт.Вид() = "ВозвратнаяНакладная" Тогда
		ЗнакУм = -1;
		Если ДокПродажи = "" Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДокПродажи = Конт.ТекущийДокумент();
	КонецЕсли;
	
	Если ПустоеЗначение(ДокПродажи.УстановкаСкидокТМЦ) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДокБонусов = глПолучитьДокументУстановкиСкидок(ДокПродажи.ДатаДок, ДокПродажи.Контрагент, 1);
	Если ДокБонусов <> "" Тогда
		ТЗТМЦ = СоздатьОбъект("ТаблицаЗначений");
		ТЗТМЦ.НоваяКолонка("ТМЦ", "Справочник.ТМЦ");
		ТЗТМЦ.НоваяКолонка("СуммаБезСкидки", "Число");
		ТЗТМЦ.НоваяКолонка("Скидка", "Число");
		ТЗТМЦ.НоваяКолонка("СкидкаСуммой");
		ТЗТМЦ.НоваяКолонка("Бонус", "Число");
		ТЗТМЦ.НоваяКолонка("БонусСуммой");
		ТЗТМЦ.НоваяКолонка("СуммаБонуса", "Число");
		ТЗТМЦ.НоваяКолонка("СуммаСНДС", "Число");
		ТЗТМЦ.НоваяКолонка("Кво", "Число");
		
		ИмяРеквВУП = ?(Конт.Вид() = "ВозвратнаяНакладная", "ВУП", "ВидУпаковки"); 
		// найдём по к-ту все действующие акции
		ТМЦДок = СоздатьОбъект("ТаблицаЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(ТМЦДок, "ТМЦ," + ИмяРеквВУП + ",Кво,ЦенаБезСкидки,СуммаСНДС,ЦенаСНДС" + ?(глЕстьРеквизитМнЧ("НеНачислятьБонус", Конт.Вид()) = Да, ",НеНачислятьБонус", ""));
		Если Конт.Вид() = "ВозвратнаяНакладная" Тогда
			ТМЦДок.УдалитьСтроки();
			Конт.ВыбратьСтроки();
			Пока Конт.ПолучитьСтроку() = 1 Цикл
				Если Конт.ДокПродажи = ДокПродажи Тогда
					ТМЦДок.НоваяСтрока();
					Для Инд = 1 По ТМЦДок.КоличествоКолонок() Цикл
						ИмяКол = ТМЦДок.ПолучитьПараметрыКолонки(Инд);
						ТМЦДок.УстановитьЗначение(ТМЦДок.НомерСтроки, Инд, Конт.ПолучитьАтрибут(ИмяКол));
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
		ТМЦДок.НоваяКолонка("Скидка", "Число", 15, 2);
		ТМЦДок.НоваяКолонка("СуммаБезСкидки", "Число", 15, 2);
		ТМЦДок.НоваяКолонка("КлючПоиска", "Число", 15, 2);

		Если глЕстьРеквизитМнЧ("НеНачислятьБонус", Конт.Вид()) = Да Тогда
			Инд = 1;
			Пока Инд <= ТМЦДок.КоличествоСтрок() Цикл
				Если ТМЦДок.ПолучитьЗначение(Инд, "НеНачислятьБонус") = Да Тогда
					ТМЦДок.УдалитьСтроку(Инд);
				Иначе
					Инд = Инд + 1;
				КонецЕсли;				
			КонецЦикла;			
		КонецЕсли;		
		
		//ТМЦДок.ВыбратьСтроки();
		//Пока ТМЦДок.ПолучитьСтроку() = 1 Цикл
		//	ТМЦДок.КлючПоиска = ЗначениеВСтрокуВнутр(ТМЦДок.ТМЦ) + "//" + ЗначениеВСтрокуВнутр(ТМЦДок.ПолучитьЗначение(ТМЦДок.НомерСтроки, ИмяРеквВУП));
		//КонецЦикла;
		ТМЦДок.Сортировать("ТМЦ");
		
		УстСк = ДокПродажи.УстановкаСкидокТМЦ;
		УстСк.ВыбратьСтроки();
		Пока УстСк.ПолучитьСтроку() = 1 Цикл
			Стр = 0;
			Если ТМЦДок.НайтиЗначение(УстСк.ТМЦ, Стр, "ТМЦ") = 1 Тогда
				ТМЦДок.ПолучитьСтрокуПоНомеру(Стр);
				Пока ТМЦДок.ТМЦ = УстСк.ТМЦ Цикл
					ТМЦДок.СуммаБезСкидки = ?(ТМЦДок.ЦенаБезСкидки = ТМЦДок.ЦенаСНДС, ТМЦДок.СуммаСНДС, ТМЦДок.ЦенаБезСкидки * ТМЦДок.Кво);
					ТМЦДок.Скидка = ТМЦДок.СуммаБезСкидки - ТМЦДок.СуммаСНДС;
					
					ТЗТМЦ.НоваяСтрока();
					ТЗТМЦ.ТМЦ = УстСк.ТМЦ;
					ТЗТМЦ.СуммаБезСкидки = ТМЦДок.СуммаБезСкидки;
					ТЗТМЦ.СуммаБонуса = ?(УстСк.СуммойБонус = Да, УстСк.Бонус * ТМЦДок.Кво, (УстСк.Бонус / 100) * ТМЦДок.СуммаБезСкидки);
					ТЗТМЦ.СуммаСНДС = ТМЦДок.СуммаСНДС;
					ТЗТМЦ.Кво = ТМЦДок.Кво;
					
					Стр = Стр + 1;
					Если Стр > ТМЦДок.КоличествоСтрок() Тогда
						Прервать;
					Иначе
						ТМЦДок.ПолучитьСтрокуПоНомеру(Стр);
					КонецЕсли;										
				КонецЦикла;				
			КонецЕсли;
		КонецЦикла;		
	
		//ТМЦДок.ВыбратьСтроки();
		//Пока ТМЦДок.ПолучитьСтроку() = 1 Цикл
		//КонецЦикла;
		ТМЦДок.Свернуть("ТМЦ", "СуммаСНДС,СуммаБезСкидки,Скидка");
		ТЗТМЦ.Свернуть("ТМЦ", "СуммаСНДС,СуммаБезСкидки,СуммаБонуса,Кво");
	
		БазВД = Константа.БазВидДеятельности;
		ВЗСК = Константа.ВидЗатратДляСкидокНаценок;
		Попытка 
			Подразделение = ДокПродажи.Подразделение;
		Исключение
			Подразделение = Константа.БазПодразделениеПродажи;
		КонецПопытки;
		
		ПроведеноПоСкидкам = 0;
		ДокБонусов.ВыбратьСтроки();
		Пока ДокБонусов.ПолучитьСтроку() = 1 Цикл
			Если (ДокБонусов.Контрагент = Конт.Контрагент) ИЛИ (Конт.Контрагент.ПринадлежитГруппе(ДокБонусов.Контрагент) = 1) Тогда
				// проведём по регистру Скидки
				Если ПроведеноПоСкидкам = 0 Тогда
					ТМЦДок.ВыбратьСтроки();
					Пока ТМЦДок.ПолучитьСтроку() = 1 Цикл
						Если ТМЦДок.Скидка <> 0 Тогда
							Конт.Регистр.СкидкиПоАкциям.Контрагент = Конт.Контрагент;
							Конт.Регистр.СкидкиПоАкциям.ТМЦ = ТМЦДок.ТМЦ;
							Конт.Регистр.СкидкиПоАкциям.СуммаБезСкидки = ТМЦДок.СуммаБезСкидки * ЗнакУм;
							Конт.Регистр.СкидкиПоАкциям.Скидка = ТМЦДок.Скидка * ЗнакУм;
							Конт.Регистр.СкидкиПоАкциям.ДвижениеВыполнить();
						КонецЕсли;																		
					КонецЦикла;
					ПроведеноПоСкидкам = 1;
				КонецЕсли;
				
				Если (ПустоеЗначение(ДокБонусов.ПолучательБонуса) = 0) Тогда 
					// начислим бонусы
					Счет = ?(ДокБонусов.ПолучательБонуса.Вид() = "Контрагенты", "3733", "3783");
					ТЗТМЦ.ВыбратьСтроки();
					Пока ТЗТМЦ.ПолучитьСтроку() = 1 Цикл
						Если ТЗТМЦ.СуммаБонуса <> 0 Тогда
							глПроводка(Конт, "93", Счет, ТЗТМЦ.СуммаБонуса * ЗнакУм, "Начисление бонуса по акц.", , БазВД, Подразделение, ВЗСК, ДокБонусов.ПолучательБонуса, ДокПродажи, ТЗТМЦ.ТМЦ,,,"БО");
							Конт.Регистр.Бонусы.ПривязыватьСтроку(ТЗТМЦ.НомерСтроки);
							Конт.Регистр.Бонусы.Движение(Конт.Контрагент, ДокБонусов.ПолучательБонуса, ТЗТМЦ.ТМЦ, Перечисление.БазыДляРасчетаБонуса.СкидкаПоТМЦ, Конт.КатегорияЦен, , ТЗТМЦ.СуммаСНДС * ЗнакУм, 
							 ТЗТМЦ.СуммаБезСкидки * ЗнакУм, ТЗТМЦ.СуммаБонуса * ЗнакУм, ТЗТМЦ.Кво * ЗнакУм);
						КонецЕсли;
					КонецЦикла;
					// если получатель бонуса - контрагент, то нужно сразу закрыть долг по РН
					Если ТЗТМЦ.Итог("СуммаБонуса") <> 0 Тогда
						Если (ДокБонусов.ПолучательБонуса.Вид() = "Контрагенты") Тогда
							Если (ДокБонусов.НеЗакрыватьВРН <> Да) Тогда
								
								Конт.Регистр.ВзаиморасчетыПокупателей.Фирма = Конт.Фирма;
								Конт.Регистр.ВзаиморасчетыПокупателей.Контрагент = Конт.Контрагент;
								Конт.Регистр.ВзаиморасчетыПокупателей.Договор = Конт.Договор;
								Конт.Регистр.ВзаиморасчетыПокупателей.СтавкаНДС = Конт.ВидНДС;
								Конт.Регистр.ВзаиморасчетыПокупателей.Валюта = Конт.Валюта;
								Конт.Регистр.ВзаиморасчетыПокупателей.Долг = ТЗТМЦ.Итог("СуммаБонуса") * ЗнакУм;
								Конт.Регистр.ВзаиморасчетыПокупателей.ДолгОсн = ТЗТМЦ.Итог("СуммаБонуса") * ЗнакУм;
								Конт.Регистр.ВзаиморасчетыПокупателей.КодОперации = ПостОплата;
								Конт.Регистр.ВзаиморасчетыПокупателей.ДвижениеРасходВыполнить();
								
								глПроводка(Конт, Счет, Конт.СчетКонтрагента, ТЗТМЦ.Итог("СуммаБонуса") * ЗнакУм, "Закрытие бонуса на контрагента", , ДокБонусов.ПолучательБонуса, ДокПродажи, , Конт.Контрагент, ДокПродажи.Договор, ,,,"БО");
							
							КонецЕсли;
						Иначе
							//+ umk
							СчетЗП = ?(ПустоеЗначение(ДокБонусов.ПолучательБонуса.Родитель.СчНачисленийБонусов) = 1,"661",ДокБонусов.ПолучательБонуса.Родитель.СчНачисленийБонусов);
							глПроводка(Конт, Счет, СчетЗП, ТЗТМЦ.Итог("СуммаБонуса") * ЗнакУм, "Закрытие бонуса на зарплаты", , ДокБонусов.ПолучательБонуса, ДокПродажи, , 
								ДокБонусов.ПолучательБонуса, НачМесяца(Конт.ДатаДок), ,,,"БО");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры // глНачислитьБонусыПоТМЦ(Контекст, Контрагент, Договор, 1)

//+umk 
//Возвращает остаток долга по начисленным бонусам при переъходе на кассовый метод расчета бонусов. 
//
Функция глОстатокДолгаВзаиморасчетыБонусы(ТекущийДокумент, Фирма, Контрагент, Знач Договор = "", Знач Валюта = "", СхемаРасчетаБонусов = "") Экспорт

	Перем НС;
	Перем тбДолгиБонусы;
	
	Долг = 0;
	НайденыСтроки = 0;  
	ИспользоватьДоговор = 0;//нет необходимости. 
	
	Если ИспользоватьДоговор = 0 Тогда
		Договор = "";
	КонецЕсли;
	
    ВремРегистры=СоздатьОбъект("Регистры");
	
	РегОстаткиБонусов=ВремРегистры.ОстаткиВзаиморасчетовБонусы;
	РегОстаткиБонусов.УстановитьЗначениеФильтра("Фирма",Фирма,2);
    РегОстаткиБонусов.УстановитьЗначениеФильтра("Контрагент",Контрагент,2);
	Если ПустоеЗначение(Договор) = 0 Тогда
		РегОстаткиБонусов.УстановитьЗначениеФильтра("Валюта",Договор,1);
	КонецЕсли;
	Если ПустоеЗначение(Валюта) = 0 Тогда
		РегОстаткиБонусов.УстановитьЗначениеФильтра("Валюта",Валюта,1);
	КонецЕсли;
	
	РегОстаткиБонусов.ВременныйРасчет();
	ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент);
	
	РегОстаткиБонусов.ВыгрузитьИтоги(тбДолгиБонусы,1,1);
	
	Если тбДолгиБонусы.НайтиЗначение(Контрагент,НС,"Контрагент") = 1 Тогда
		тбДолгиБонусы.ПолучитьСтрокуПоНомеру(НС);
		СхемаРасчетаБонусов = тбДолгиБонусы.СхемаРБ;
		Долг = тбДолгиБонусы.Долг;
		Долг = ?(Долг>0,Долг,0);
	КонецЕсли;
	
	Возврат Долг;
	
КонецФункции

//==================================+umk
Процедура глПолучитьСтоимостьОстаткаРозница(Конт, СтоимостьПродажи, Себестоимость, Номенклатура, Склад, Организация) Экспорт

	Перем ТбИтоги, НС;
	
	ВремРегистры=СоздатьОбъект("Регистры");
	
	РегОстатки = ВремРегистры.ТоварыВРознице;
	
	//фильтр 
	РегОстатки.УстановитьЗначениеФильтра("Организация",Организация,1);
	РегОстатки.УстановитьЗначениеФильтра("МестоХранения",Склад,1);
    РегОстатки.УстановитьЗначениеФильтра("Номенклатура",Номенклатура,1);
	
	РегОстатки.ВременныйРасчет();
	ВремРегистры.РассчитатьРегистрыНа(Конт.ТекущийДокумент());
	
	РегОстатки.ВыгрузитьИтоги(ТбИтоги,1,1);
	
	Если ТбИтоги.НайтиЗначение(Номенклатура,НС,"Номенклатура") = 1 Тогда
		ТбИтоги.ПолучитьСтрокуПоНомеру(НС);
		СтоимостьПродажи = ?(ТбИтоги.Кол = 0, 0, ТбИтоги.СтоимостьПродажи/ТбИтоги.Кол);
		Себестоимость = ?(ТбИтоги.Кол = 0, 0, ТбИтоги.Себестоимость/ТбИтоги.Кол);
	КонецЕсли;
	
КонецПроцедуры

//Формирует движение по регистру ОстаткиВзаиморасчетовБонусы
//
Процедура глПогаситьДолгОстаткиБонусов(Конт, КонтрагентРасчетов, Знач СуммаРасчетов, ВидДвижения, Знач Договор = "") Экспорт 
	
	СхемаРасчетаБонусов = "";
	
	ИспользоватьДоговор = 0;//нет необходимости. 
	
	Если ИспользоватьДоговор = 0 Тогда
		Договор = "";
	КонецЕсли;
	
	Долг =  глОстатокДолгаВзаиморасчетыБонусы(Конт.ТекущийДокумент(), Конт.Фирма, КонтрагентРасчетов,,,СхемаРасчетаБонусов);
		
	Если Долг = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммаКЗакритию = ?(Долг<СуммаРасчетов, Долг, СуммаРасчетов);
	
	Если ПустоеЗначение(СхемаРасчетаБонусов) = 0 Тогда
		глНачислитьБонусы(Конт, КонтрагентРасчетов, Договор, 1, СуммаКЗакритию, КонтрагентРасчетов,1,СхемаРасчетаБонусов);
	КонецЕсли;
    
	РегистрОстаткиВзаиморасчетовБонусы = Конт.Регистр.ОстаткиВзаиморасчетовБонусы;	
	РегистрОстаткиВзаиморасчетовБонусы.Фирма = Конт.Фирма;
    РегистрОстаткиВзаиморасчетовБонусы.Контрагент = КонтрагентРасчетов;
	РегистрОстаткиВзаиморасчетовБонусы.Договор = Договор; 
	РегистрОстаткиВзаиморасчетовБонусы.СхемаРБ = СхемаРасчетаБонусов; 
	Попытка
		РегистрОстаткиВзаиморасчетовБонусы.Валюта = Конт.Валюта;
	Исключение
		РегистрОстаткиВзаиморасчетовБонусы.Валюта = Гривня;
	КонецПопытки;
	РегистрОстаткиВзаиморасчетовБонусы.Долг = СуммаКЗакритию;
	
	Если ВидДвижения = 1 Тогда
		РегистрОстаткиВзаиморасчетовБонусы.ДвижениеРасходВыполнить();
	Иначе
		РегистрОстаткиВзаиморасчетовБонусы.ДвижениеПриходВыполнить();
	КонецЕсли;
	

КонецПроцедуры

//Функция возвращает итог. цену со стоимостью упаковки и тары на дату 
//
Функция глЦенаНоменклатурыСУпаковкой(Номенклатура, ВУП, Ед, КатегорияЦен, ДатаЦен = "", Тара="") Экспорт
	
	Если ПустоеЗначение(ДатаЦен) = 1 Тогда
		ДатаЦен = ТекущаяДата();
	КонецЕсли;
	
	Возврат глВернутьЦену(Номенклатура, КатегорияЦен, ДатаЦен, Гривня) + глПолучитьЦенуУпаковки(Номенклатура,ВУП, ДатаЦен, КатегорияЦен) + 
						?(ПустоеЗначение(Тара) = 0, глВернутьЦену(Тара, Тара.БазоваяКатегорияЦены.Получить(ДатаЦен), ДатаЦен, Гривня) * ?(Ед.Единица = Константа.БазЕдиница, 1, Ед.Вес), 0);
					
	
КонецФункции
//-umk

//================Конец Учет бонусов====================================

//====================================================================== //--- УМК Сандомирский В.Ю, (Схемы ценообразования) 18.03.14
Функция глАвтоПересчетЦены(СпрЦены, ТекБазЦена, ТекДата = "", Схема = "") Экспорт    //--- СпрЦены = расчитываемый справочник цены , ТекБазЦена = Базовая цена суммой	
	УстанавливаемаяЦена = ТекБазЦена;

	Если Схема <> "" Тогда
		ТекСхема = Схема;	
	Иначе
		Если ТекДата <>  "" Тогда
			ТекСхема = СпрЦены.СхемаЦенообразования.Получить(ТекДата);	
		Иначе
			ТекСхема = СпрЦены.СхемаЦенообразования;    //--- УМК Сандомирский В.Ю, 05 04 14	 
		КонецЕсли;
	КонецЕсли;
	Если ТекДата <>  "" Тогда
		БылаЦена = СпрЦены.Цена.Получить(ТекДата); //--- УМК Сандомирский В.Ю, 05 04 14
	Иначе
		БылаЦена = СпрЦены.Цена;
	КонецЕсли;
	
	Если ТекСхема.фПредопределенныйЭлементФиксированнаяЦена = 2 Тогда //--- УМК Сандомирский В.Ю, 05 04 14
		Возврат БылаЦена;
	ИначеЕсли ТекСхема.фПредопределенныйЭлементФиксированнаяЦена = 3 Тогда
		Возврат СпрЦены.Владелец.Цена_Прод.Получить(ТекДата);
	КонецЕсли;	
			
	Если ПустоеЗначение(ТекСхема.ДокументСхемаЦенообразования) <> 1 Тогда		   
		ТекДокументСхемаЦенообразования = ТекСхема.ДокументСхемаЦенообразования.ТекущийДокумент();
		
		ТекДокументСхемаЦенообразования.ВыбратьСтроки();
		Пока ТекДокументСхемаЦенообразования.ПолучитьСтроку() = 1 Цикл
			Если ТекДокументСхемаЦенообразования.ВидРасчетаЦеновыхСхем = Перечисление.ВидРасчетаЦеновыхСхем.Процент Тогда
				
				УстанавливаемаяЦена = УстанавливаемаяЦена 
						+ (УстанавливаемаяЦена * ТекДокументСхемаЦенообразования.ВыбЗначение / 100); //--- УМК Сандомирский В.Ю, Процент
			ИначеЕсли ТекДокументСхемаЦенообразования.ВидРасчетаЦеновыхСхем = Перечисление.ВидРасчетаЦеновыхСхем.Сумма Тогда
				//--- итерация сумма;						
				УстанавливаемаяЦена = УстанавливаемаяЦена + ТекДокументСхемаЦенообразования.ВыбЗначение;	//--- УМК Сандомирский В.Ю, Сумма	
			КонецЕсли;					
		КонецЦикла;
		
		Если ТекСхема.фОкруглятьЦены = 1 Тогда   // --- Округляем
			УстанавливаемаяЦена = глОкруглить(УстанавливаемаяЦена, ТекСхема.КратностьОкругления, ТекСхема.Способ);	
		КонецЕсли;			
	КонецЕсли;
			
	Возврат УстанавливаемаяЦена;	
КонецФункции// глАвтоПересчетЦены

//====================================================================== //--- УМК Сандомирский В.Ю, (универсальная обработка изменения строки ТЗ) 21.03.14
Функция глВвестиЗначениеВТаблицу(Таб,НомСтр=0,НомКол=0,ТипЗнач="",Подсказка="Введите значение") Экспорт
   //***** Ввод значения в текущую ячейку таблицы значений
   //***** Таб: Таблица значений
   //***** НомСтр: Номер строки (0 текущая строка, -1 Новая строка, т.е. строка может быть добавлена)
   //***** НомКол: Номер (ИД) колонки (0 - текущая колонка)
   //***** ТипЗнач: Тип вводимого значения (если не задан, то определяется типом колонки)
   //***** Подсказка: Подсказка для ввода
   //***** 0 Запись не выполнена
   //***** 1 Запись выполнена
   //*****
   Перем ФлВвода,ЗначВвода,ФлДобавл;
   Перем Тип,Длина,Точность;
   Перем СтрШаб;
   Перем ВыходИзЦикла;
   Перем Справ,Счет;
   Если НомСтр=0 Тогда
       НомСтр=Таб.ТекущаяСтрока();
   КонецЕсли;
   Если НомКол=0 Тогда
       НомКол=Таб.ТекущаяКолонка();
   КонецЕсли;
   ФлДобавл=?(НомСтр=-1,1,0);
   Таб.ПолучитьПараметрыКолонки(НомКол,Тип,Длина,Точность);
   Если ПустаяСтрока(ТипЗнач)=1 Тогда
       ТипЗнач=Тип;
   КонецЕсли;
   ВыполнениеЦикла=1;
   Пока ВыполнениеЦикла=1 Цикл
       ЗначВвода=?(ФлДобавл=1,ПолучитьПустоеЗначение(Тип),Таб.ПолучитьЗначение(НомСтр,НомКол));
       Если Лев(ТипЗнач,5)="Справ" Тогда
           Справ=СоздатьОбъект(ТипЗнач);
           Справ.НайтиЭлемент(ЗначВвода);
           Справ.ВыборГруппы(0);
           ФлВвода=Справ.Выбрать(Подсказка,"ФормаСписка");
           Если ФлВвода=1 Тогда
               ЗначВвода=Справ.ТекущийЭлемент();
           КонецЕсли;
       ИначеЕсли Лев(ТипЗнач,4)="Счет" Тогда
           Счет=СоздатьОбъект(ТипЗнач);
           Счет.НайтиСчет(ЗначВвода);
           Счет.ВыборГруппы(0);
           ФлВвода=Счет.Выбрать(Подсказка,"Краткая");
           Если ФлВвода=1 Тогда
               ЗначВвода=Счет.ТекущийСчет();
           КонецЕсли;
       Иначе
           ФлВвода=ВвестиЗначение(ЗначВвода,Подсказка,ТипЗнач,Длина,Точность);
       КонецЕсли;
       ВыполнениеЦикла=0;
   КонецЦикла;
   Если ФлВвода=1 Тогда
       Если ФлДобавл=1 Тогда
           Таб.НоваяСтрока();
           НомСтр=Таб.КоличествоСтрок();
           Таб.ТекущаяСтрока(НомСтр);
       КонецЕсли;
       Таб.УстановитьЗначение(НомСтр,НомКол,ЗначВвода);
   КонецЕсли;
   Возврат(ФлВвода);
КонецФункции //глВвестиЗначениеВТаблицу
	
//====================================================================== //--- УМК Сандомирский В.Ю, 21.03.14
// ===============================
// Процедура глИзменениеПорядкаСтрокВТЗ(ТекТЗ,НаправлениеСдвига,НеподвижныхВКонце=0) 
//
// Параметры:
//	ТекТЗ		  = передаваемая таблица значений
//  НаправлениеСдвига = 	-1 - вниз
//							 1 - вверх
//  НеподвижныхВКонце = количество группировок в конце списка, которые не перемещаются
//
// Возвращаемое значение: 
//	Нет
//
// Вызывается из формул элементов диалога:
//  кнопки "вверх" и "вниз" рядом со списком группировок
//
// Описание:  
//	Процедура производит сдвиг текущей группировки в общем
// 	списке группировок на "НаправлениеСдвига" позиций
//
Процедура глИзменениеПорядкаСтрокВТЗ(ТекТЗ,НаправлениеСдвига,НеподвижныхВКонце=0) Экспорт
	Если ТекТЗ.КоличествоСтрок()=0 Тогда
		Возврат;
	КонецЕсли;

	КвоСтр = ТекТЗ.КоличествоСтрок();
	ТекСтр = ТекТЗ.ТекущаяСтрока();

	Если ТекСтр > КвоСтр - НеподвижныхВКонце Тогда // последние не перемещаем
		Возврат;
	КонецЕсли;

	Если (ТекСтр = КвоСтр - НеподвижныхВКонце) И (НаправлениеСдвига = 1) Тогда // последние не перемещаем
		Возврат;
	КонецЕсли;
	
	ТекТЗ.СдвинутьСтроку(НаправлениеСдвига, ТекСтр);
	ТекТЗ.ТекущаяСтрока(ТекСтр+НаправлениеСдвига);
	
КонецПроцедуры // глИзменениеПорядкаГрупп()

//====================================================================== //--- УМК Сандомирский В.Ю, 21.03.14 ОкруглитьВБольшую
Функция глОкруглить(Числ, ПорядокОкругления, Способ = 3) Экспорт    
	//--- Округлить в большую	
	Перем Рез;
    
	Если ПорядокОкругления = 0 Тогда
		Возврат Числ;
	КонецЕсли;
	Если Способ = 1 Тогда
		Если ПорядокОкругления < 0.1 Тогда
			КвоЗнаков = 2;
		ИначеЕсли ПорядокОкругления < 1 Тогда			
			КвоЗнаков = 1;
		Иначе
			КвоЗнаков = 0;
		КонецЕсли;
		Рез = Окр(Числ, КвоЗнаков);
	Иначе		
	    // округление к верхней границе по заданному порядку 
	    // преобразуем порядок округления число
	    Порядок            = ПорядокОкругления; 
	    // вычислим количество интервалов, входящих в число
	    КолвоИнтервал    = Числ / Порядок;   
	    // вычислим целое количество интервалов.
	    КолвоИнтервалЦел= Цел(КолвоИнтервал);  
	    Если КолвоИнтервал = КолвоИнтервалЦел Тогда
	        // Числа поделились нацело. Округлять не нужно.
	        Рез    = Числ;
	    Иначе
	        Рез    = Порядок * (КолвоИнтервалЦел + (Способ - 2));
	    КонецЕсли;		
	КонецЕсли;
         
    Возврат Рез;
КонецФункции // глОкруглить()

//====================================================================== //--- УМК Сандомирский В.Ю, (15.12.14)
Функция глОкруглитьВМеньшую(Числ, ПорядокОкругления) Экспорт
    Перем Рез;
    
	Если ПорядокОкругления = 0 Тогда
		Возврат Числ;
	КонецЕсли;
    // округление к верхней границе по заданному порядку 
    // преобразуем порядок округления число
    Порядок            = ПорядокОкругления; 
    // вычислим количество интервалов, входящих в число
    КолвоИнтервал    = Числ / Порядок;   
    // вычислим целое количество интервалов.
    КолвоИнтервалЦел= Цел(КолвоИнтервал);  
    Если КолвоИнтервал = КолвоИнтервалЦел Тогда
        // Числа поделились нацело. Округлять не нужно.
        Рез    = Числ;
    Иначе
        Рез    = Порядок * КолвоИнтервалЦел;
    КонецЕсли;
         
    Возврат Рез;
КонецФункции // глОкруглить()

//====================================================================== //--- УМК Сандомирский В.Ю, 07.04.14
Процедура глРеквизитыШапкиДокумента(Конт, СтрокаРеквизитов) Экспорт
	
	СтрокаРеквизитов = "";
	
	Для Инд = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
		Атр = Метаданные.ОбщийРеквизитДокумента(Инд).Идентификатор;
		СтрокаРеквизитов = СтрокаРеквизитов + Атр + ",";
	КонецЦикла;
	Для Инд = 1 По Метаданные.Документ(Конт.Вид()).РеквизитШапки() Цикл
		Атр = Метаданные.Документ(Конт.Вид()).РеквизитШапки(Инд).Идентификатор;
		СтрокаРеквизитов = СтрокаРеквизитов + Атр + ",";
	КонецЦикла;
	
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю, 21.04.14 из бухгалтерии
Функция глПолучитьКвоПрДней(ДНач,ДКон,СписПрДней = 0) Экспорт // Шамарин
	Если ДКон < ДНач Тогда
		Возврат 0;
	КонецЕсли;
	
	СпрПрДни = СоздатьОбъект("Справочник.ПрДни");
	
	КвоПрДней = 0;
	СпрПрДни.ПорядокРеквизита("ДатаП");
	СпрПрДни.ВыбратьЭлементы();
	Пока (СпрПрДни.ПолучитьЭлемент() = 1) и (СпрПрДни.ДатаП <= ДКон) Цикл
		Если (СпрПрДни.ДатаП >= ДНач) и (СпрПрДни.ДатаП <= ДКон) Тогда
			КвоПрДней = КвоПрДней + 1;
			Если ТипЗначенияСтр(СписПрДней) = "СписокЗначений" Тогда
				СписПрДней.ДобавитьЗначение(СпрПрДни.ТекущийЭлемент(), Строка(СпрПрДни.ДатаП));
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат КвоПрДней;
КонецФункции

//====================================================================== //--- УМК Сандомирский В.Ю, 21.04.14 из бухгалтерии
Функция глПолучитьКвоРабДней(ДНач,ДКон, Часов = 0, МасДней[]) Экспорт // Шамарин
	Если ДКон < ДНач Тогда
		Возврат 0;
	КонецЕслИ;
	списПрДней = СоздатьОбъект("СписокЗначений");
	КвоПрДней = глПолучитьКвоПрДней(ДНач, ДКон, СписПрДней);
	РабГрафик = Константа.РабочийГрафик;
	КвоДней = 0;
	Часов = 0;
	ТДата = ДНач;
	Пока ТДата <= ДКон Цикл
		ЧасовВДне = Сред(РабГрафик, НомерДняНедели(ТДата), 1);		
		Если ЧасовВДне <> "0" Тогда
			КвоДней = КвоДней + 1;
			ПрДень = списПрДней.Получить(Строка(ТДата));
			Если ПустоеЗначение(ПрДень) = 0 Тогда
				ЧасовВДне = ПрДень.Часов;
			КонецЕсли;
			Часов = Часов + Число(ЧасовВДне);
			МасДней[ДатаЧисло(ТДата)] = ЧасовВДне;
		КонецЕсли;
		ТДата = ТДата + 1;		
	КонецЦикла;
	
	Возврат КвоДней - КвоПрДней;
КонецФункции

//====================================================================== //--- УМК Сандомирский В.Ю, (28.05.14)
Функция глСхемаВШаблоне(ТекЦена,ТекШаблон) Экспорт
	Если ПустоеЗначение(ТекШаблон) = 0 Тогда
		ТекШаблон.ВыбратьСтроки();
		Пока ТекШаблон.ПолучитьСтроку() = 1 Цикл
			Если (ТекЦена.КатегорияЦены = ТекШаблон.КатегорияЦен) И (ТекЦена.СхемаЦенообразования = ТекШаблон.СхемаЦенообразования) Тогда
				Возврат 1;			
			КонецЕсли;		
		КонецЦикла;	
	КонецЕсли;	
КонецФункции //  СхемаВШаблоне  //... УМК Сандомирский В.Ю, (28.05.14)

//====================================================================== //--- УМК Сандомирский В.Ю, (19.06.14) заполняем реестр Автоперевозок 
Процедура глЗаполнитьРеетсрАвтоперевозок(Конт,Удалить = 0) Экспорт
	Если (ПустоеЗначение(Конт.УМК_Автомобиль) <> 1) И (ПустоеЗначение(Конт.Водитель) <> 1) Тогда
		
		ДокРеестрАвтоперевозок = СоздатьОбъект("Документ.УМК_РеестрАвтоперевозок");
		ДокРеестрАвтоперевозок.ВыбратьДокументы(Конт.ДатаДок,Конт.ДатаДок); //--- реестр за день расходок
		ЕстьДокументРеестрАвтоперевозок = 0;
		НашлиСтроку = 0;
		НомерСтроки = 0;
		Пока ДокРеестрАвтоперевозок.ПолучитьДокумент() = 1 Цикл
			Если ДокРеестрАвтоперевозок.ПометкаУдаления() <> 1 Тогда
				ДокРеестрАвтоперевозок.ВыбратьСтроки();
				НашлиСтроку = 0;
				Пока ДокРеестрАвтоперевозок.ПолучитьСтроку() = 1 Цикл
					Если ДокРеестрАвтоперевозок.Накладная = Конт.ТекущийДокумент() Тогда
						НашлиСтроку = 1;
						НомерСтроки = ДокРеестрАвтоперевозок.НомерСтроки;
						Прервать;																						
					КонецЕсли;			
				КонецЦикла;
				ЕстьДокументРеестрАвтоперевозок = 1;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		Если ЕстьДокументРеестрАвтоперевозок = 0 Тогда
			ДокРеестрАвтоперевозок.Новый();
			ДокРеестрАвтоперевозок.ДатаДок = Конт.ДатаДок;
			ДокРеестрАвтоперевозок.Фирма = Конт.Фирма;;
			ДокРеестрАвтоперевозок.Записать();
		КонецЕсли;
		
		Если НашлиСтроку = 0 Тогда //--- заполняем только если не находим в реестре
			ДокРеестрАвтоперевозок.НоваяСтрока();
			ДокРеестрАвтоперевозок.Накладная						= Конт.ТекущийДокумент();
			ДокРеестрАвтоперевозок.Водитель							= Конт.Водитель;
			ДокРеестрАвтоперевозок.Автомобиль						= Конт.УМК_Автомобиль; 
			ДокРеестрАвтоперевозок.ОсновноеТопливо					= Конт.УМК_Автомобиль.ВидОсновногоТоплива;
			ДокРеестрАвтоперевозок.ДополнительноеТопливо			= Конт.УМК_Автомобиль.ВидДополнительногоТоплива;
			ДокРеестрАвтоперевозок.РасходОсновногоТоплива			= Конт.УМК_Автомобиль.РасходОсновногоТоплива;
			ДокРеестрАвтоперевозок.РасходДополнительногоТоплива		= Конт.УМК_Автомобиль.РасходДополнительногоТоплива;
			ДокРеестрАвтоперевозок.Расстояние						= Конт.Контрагент.Расстояние;
			ДокРеестрАвтоперевозок.ПотраченоОсновногоТоплива		= ДокРеестрАвтоперевозок.РасходОсновногоТоплива * ДокРеестрАвтоперевозок.Расстояние / 100;	
			ДокРеестрАвтоперевозок.ПотраченоДополнительногоТоплива	= ДокРеестрАвтоперевозок.РасходДополнительногоТоплива * ДокРеестрАвтоперевозок.Расстояние / 100;						
			ДокРеестрАвтоперевозок.Записать();
		ИначеЕсли Удалить = 1 Тогда //--- УМК Сандомирский В.Ю. (23.10.14) В момент пометки документа РН на удаление --- удалить строку с РН из документа "Реестр автоперевозок"
			ДокРеестрАвтоперевозок.ПолучитьСтрокуПоНомеру(НомерСтроки);
			ДокРеестрАвтоперевозок.УдалитьСтроку();
			ДокРеестрАвтоперевозок.Записать();
		КонецЕсли;
						
	КонецЕсли;

КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю. (10.07.14) раскладываем строку в список значений
Функция глРазложитьСтрокуВСписок(ТекСтрока,ТекРазделитель) Экспорт	
	списИзСтроки = СоздатьОбъект("СписокЗначений");
	
	Если ТекСтрока = "" Тогда
		Возврат списИзСтроки;
	КонецЕсли;
	
	ДлинаРазделителя = СтрДлина(ТекРазделитель);
	Пока 1=1 Цикл
		Поз = Найти(ТекСтрока,ТекРазделитель);
		Если Поз=0 Тогда			
			списИзСтроки.ДобавитьЗначение(ТекСтрока,ТекСтрока);			
			Возврат списИзСтроки;		
		КонецЕсли;
		
		списИзСтроки.ДобавитьЗначение(Лев(ТекСтрока,Поз-1),Лев(ТекСтрока,Поз-1));		
		ТекСтрока = Сред(ТекСтрока,Поз+ДлинаРазделителя);		
	КонецЦикла;
	
КонецФункции // глРазложитьСтрокуВСписок()

//====================================================================== //--- УМК Сандомирский В.Ю. (10.07.14) Сандомирский В.Ю, функция получения верхнего родителя с рекурсией 
Функция глДайПапу(Элемент) Экспорт
	Если Элемент.Родитель.Выбран() = 1 Тогда
	   Возврат глДайПапу(Элемент.Родитель);
	КонецЕсли;
	Возврат Элемент;
КонецФункции

//====================================================================== //--- УМК Сандомирский В.Ю. (17.07.14) Сандомирский В.Ю, доступ к сотруднику 
Функция глДоступСотрудник(Сотрудник) Экспорт
	
	Если НазваниеНабораПрав() = "Администратор" Тогда
		Возврат 1;
	КонецЕсли;
	
	СтрокаГрупСотрудников = глПользователь.ГруппаПользователя.СписокДоступностиГрупСотрудников;
	СписокГрупСотрудников = глРазложитьСтрокуВСписок(СтрокаГрупСотрудников,";");
	
	ВерхнийРодитель = глДайПапу(Сотрудник);
	Если ПустоеЗначение(ВерхнийРодитель) <> 1 Тогда
		Если СписокГрупСотрудников.НайтиЗначение(ВерхнийРодитель.Код) <> 0 Тогда
			Возврат 1;	
		КонецЕсли;	
	КонецЕсли;
	
	Если ПустоеЗначение(Сотрудник) = 1 Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ДоступСотрудник(Сотрудник)

//====================================================================== //---УМК Сандомирский В.Ю, (05.08.14) получаем дату когда менялся реквизит
Функция глПолучитьПоследнююДатуВводаПериодическогоРеквизита(ИмяРеквизита,спрЭлементСправочника,НаДату) Экспорт 
	ДатаПерЗначения = ПолучитьПустоеЗначение("Дата");
	Пер = СоздатьОбъект("Периодический");
	Пер.ИспользоватьОбъект(ИмяРеквизита,спрЭлементСправочника);
	Пер.ОбратныйПорядок(1);
	Если Пер.ВыбратьЗначения() = 1 Тогда
		Пока Пер.ПолучитьЗначение() = 1  Цикл
			ДатаПерЗначения = Пер.ДатаЗнач;
			Если ДатаПерЗначения <= НаДату Тогда
			   	Пер = 0;
				Возврат ДатаПерЗначения; 
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;
	Пер = 0;
	Возврат ДатаПерЗначения;
КонецФункции

//===================================== //---УМК Сандомирский В.Ю, (01.09.14) // ------------------- Передача параметра в форму из отчетов -------------------
Функция глПередатьПараметр(ТекПараметр, ОткудаПередаем)  Экспорт
	ТекКонтекстФормы = СоздатьОбъект("СписокЗначений");
	ТекКонтекстФормы.ДобавитьЗначение(ОткудаПередаем,"ОткудаПередаем");
	//--- можно еще кучу параметров
	ОткрытьФорму(ТекПараметр,ТекКонтекстФормы); 
	
	Возврат "";
	
КонецФункции//глРасшифровкаОбновить

//====================================================================== //---УМК Сандомирский В.Ю, (09.10.14) контролируем наличие ТМЦДляСписания в ТМЦ табличной части контектста
Функция глКонтрольНаличияТМЦДляСписания(Конт,СписТМЦ=0) Экспорт	
	Если (ПустоеЗначение(Константа.УМК_ДатаНачалаПартииОстатки) <> 1) //--- УМК Сандомирский В.Ю, (09.10.14) (проверка действует с момента разделения регистров)
				И (Константа.УМК_ДатаНачалаПартииОстатки <= Конт.ДатаДок)  Тогда 
		//--- продолжаем функцию			
	Иначе				
		Возврат 0;
	КонецЕсли;	
	
	ЕстьТМЦДляСписания = 0;
	
	Если СписТМЦ <> 0 Тогда //--- приоритет передаваемого списка ТМЦ		
		ТЗ_ТМЦ = СоздатьОбъект("ТаблицаЗначений");		
		стр = "";
		Для Номер = 1 По СписТМЦ.РазмерСписка() Цикл			
			Значение = СписТМЦ.ПолучитьЗначение(Номер, стр); //получить значение и представление
			Если ПустоеЗначение(Значение.ТМЦДляСписания.Получить(Конт.ДатаДок)) <> 1 Тогда
				//Сообщить("В строке № " + Конт.НомерСтроки + " у ТМЦ " + Конт.ТМЦ +  " есть ТМЦ для списания - " +  Конт.ТМЦ.ТМЦДляСписания.Получить(Конт.ДатаДок) );	
				Сообщить(" у ТМЦ " + Значение +  " есть ТМЦ для списания - " +  Значение.ТМЦДляСписания.Получить(Конт.ДатаДок));
				ЕстьТМЦДляСписания = 1;				
			КонецЕсли;			
		КонецЦикла; 
	Иначе //--- смотрим ТМЦ в табличной части документа
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку() = 1 Цикл
			Если глЕстьРеквизитМнЧ("ТМЦ", Конт.Вид()) = Да Тогда
				Если ПустоеЗначение(Конт.ТМЦ.ТМЦДляСписания.Получить(Конт.ДатаДок)) <> 1 Тогда
					Сообщить("В строке № " + Конт.НомерСтроки + " у ТМЦ " + Конт.ТМЦ +  " есть ТМЦ для списания - " +  Конт.ТМЦ.ТМЦДляСписания.Получить(Конт.ДатаДок) + " это не допустимо !", "!" );				
					ЕстьТМЦДляСписания = 1;				
				КонецЕсли;		
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ЕстьТМЦДляСписания;
	
КонецФункции // КонтрольНаличияТМЦДляСписания

//====================================================================== 	//--- УМК Сандомирский В.Ю. (24.10.2014)
Функция глПолучитьСхемуЦенообразования(ТМЦ,Категория,ДатаПериодики) Экспорт

	СпрЦены = СоздатьОбъект("Справочник.Цены");
	СпрЦены.ИспользоватьВладельца(ТМЦ);
	Если СпрЦены.НайтиПоРеквизиту("КатегорияЦены",Категория,0) = 1 Тогда
		Возврат СпрЦены.СхемаЦенообразования.Получить(ДатаПериодики);	    
	КонецЕсли;
	
КонецФункции	

//======================================================================	//--- УМК Сандомирский В.Ю. (05.11.2014) возвращаем маршрут
Функция глВернутьМаршрут(ТекКонтрагент, Договор = "", ДатаД = "", МаршуртЭтогоДоговора = "", ДокМаршрута = "") Экспорт	
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	ТекМаршрутСПустымДоговором = ""; ТекМаршрут = "";
	СпрМ = СоздатьОбъект("Справочник.Маршруты");
	СпрМ.ВыбратьЭлементы();
	Пока СпрМ.ПолучитьЭлемент() = 1 Цикл
		Если СпрМ.ПометкаУдаления() = 0 Тогда
			ДокМаршрут = СпрМ.ДокМаршрута.Получить(?(ПустоеЗначение(ДатаД) = 1, ТекущаяДата(), ДатаД)); 
			ДокМаршрут.ВыгрузитьТабличнуюЧасть(ТЗ, "Контрагент,Договор");		
			НомСтр = 0;
			// вначале ищем по договору
			Если ПустоеЗначение(Договор) = 0 Тогда
		        Если ТЗ.НайтиЗначение(Договор, НомСтр, "Договор") = 1 Тогда
					ДокМаршрута = ДокМаршрут.ТекущийДокумент();
					МаршуртЭтогоДоговора = СпрМ.ТекущийЭлемент();
					Возврат СпрМ.ТекущийЭлемент();
		        КонецЕсли;					
			КонецЕсли;

			// теперь ищем по контрагенту. 
			// фиксируем найденные строки с контрагентом вообще и контрагентом и пустым договором
			Пока (ТЗ.НайтиЗначение(ТекКонтрагент, НомСтр, "Контрагент") = 1) И (ПустоеЗначение(ТекМаршрутСПустымДоговором) = 1) Цикл
				Если ПустоеЗначение(ТекМаршрут) = 1 Тогда
					ТекМаршрут = СпрМ.ТекущийЭлемент();
				КонецЕсли;

				Если ПустоеЗначение(ТЗ.ПолучитьЗначение(НомСтр, "Договор")) = 1 Тогда
					ТекМаршрутСПустымДоговором = СпрМ.ТекущийЭлемент();
					ТекМаршрут = СпрМ.ТекущийЭлемент();
				КонецЕсли;
				ТЗ.УдалитьСтроку(НомСтр);
				НомСтр = 0;
			КонецЦикла;
			
			// договор не был передан, возвращаем первый попавшийся маршрут с пустым договором
			Если (ПустоеЗначение(ТекМаршрутСПустымДоговором) = 0) И (ПустоеЗначение(Договор) = 0) Тогда
				Возврат ТекМаршрутСПустымДоговором;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекМаршрут;	
КонецФункции // глВернутьМаршрут

//======================================================================	//--- УМК Сандомирский В.Ю. (18.11.2014)
Функция глПолучитьРазрешенныйВидУпаковки(ТекТМЦ,ТекВидУпаковки) Экспорт
	
	//Если глПрямыеЗапросы = 1 Тогда
	//	рс = СоздатьОбъект("ODBCRecordset");
	//	//Данный фрагмент построен конструктором.
	//	//При повторном использовании конструктора внесенные вручную изменения будут потеряны!!!
	//	ТекстЗапроса = "-- qryMaker:Отчет1.2023.07.20.21.25.40
	//	|SELECT УМК_РазрешенныеВидыУпаковкиТМЦ.ID [Ссылка $Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ]
	//	|FROM $Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ AS УМК_РазрешенныеВидыУпаковкиТМЦ
	//	|WHERE (УМК_РазрешенныеВидыУпаковкиТМЦ.PARENTEXT = :Владелец)
	//	|	AND ($УМК_РазрешенныеВидыУпаковкиТМЦ.ВидУпаковки = :ВидУпаковки)
	//	|";
	//	рс.УстановитьТекстовыйПараметр("Владелец", ТекТМЦ);
	//	рс.УстановитьТекстовыйПараметр("ВидУпаковки", ТекВидУпаковки);
	//	
	//	Результат = рс.ВыполнитьИнструкцию(ТекстЗапроса);
	//	Результат.ВыбратьСтроки();
	//	Если Результат.ПолучитьСтроку() = 1 Тогда
	//		Возврат Результат.Ссылка;
	//	КонецЕсли;	
	//Иначе 
		СпрРазрешенныеУпаковкиТМЦ = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");	
		СпрРазрешенныеУпаковкиТМЦ.ИспользоватьВладельца(ТекТМЦ.ТекущийЭлемент());
		Если СпрРазрешенныеУпаковкиТМЦ.НайтиПоРеквизиту("ВидУпаковки",ТекВидУпаковки,0) = 1 Тогда
			Возврат СпрРазрешенныеУпаковкиТМЦ.ТекущийЭлемент();
		КонецЕсли;
	//КонецЕсли;
	
КонецФункции // гл

//====================================================================== //--- УМК Сандомирский В.Ю, (23.12.14)
Функция глДатаБезТочек(ТекДата) Экспорт

	Если ПустоеЗначение(ТекДата) = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрЗаменить(Строка(ТекДата),".","");

КонецФункции // глДатаБезТочек(ДатаПрайса)

//====================================================================== //--- УМК Сандомирский В.Ю, (25.03.15)
Функция глЕстьКодС(ТекТМЦ, НеНачислятьБонус = 0) Экспорт
	Если ТипЗначенияСтр(НеНачислятьБонус) = "Перечисление" Тогда
		Если НеНачислятьБонус = Да Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(ТекТМЦ) <> 1 Тогда
		Возврат ТекТМЦ.ЕстьКодС.Получить(РабочаяДата());
	КонецЕсли;
КонецФункции // глЕстьКодС()

//====================================================================== // --- УМК Сандомирский В.Ю. (09.11.14)
Процедура СделатьРеквизитДоступным(вхФорма,ИменаРекв)  Экспорт   
        //ЗАПОМИНАЕМ СОСТОЯНИЕ ДОСТУПНОСТИ ПРИ ТОЛЬКОПРОСМОТР(1)
 
    ТЗ_Рекв=СоздатьОбъект("ТаблицаЗначений"); 
    ТЗ_Рекв.НоваяКолонка("Реквизит");
    ТЗ_Рекв.НоваяКолонка("ИмяРекв");
    ТЗ_Рекв.НоваяКолонка("Доступность");
    рф = СоздатьОбъект("РасширениеФормы"); 
    рф.УстановитьФорму(вхФорма);
    Для Сч=0 По рф.КоличествоАтрибутов() - 1 Цикл
        Рекв=рф.ПолучитьАтрибут(Сч);
        ТЗ_Рекв.НоваяСтрока();
        ТЗ_Рекв.Реквизит=Рекв;
        ТЗ_Рекв.ИмяРекв=Рекв.Идентификатор;
        ТЗ_Рекв.Доступность=Рекв.Доступность;
    КонецЦикла;     
        //ВОССТАНАВЛИВАЕМ ДОСТУПНОСТЬ ВСЕЙ ФОРМЫ
 
    //вхФорма.ТолькоПросмотр(1);
        //ВОССТАНАВЛИВАЕМ ДОСТУПНОСТЬ РЕКВИЗИТОВ ИМИТИРУЯ ТОЛЬКОПРОСМОТР(1)
 
    ТЗ_Рекв.ВыбратьСтроки();
    Пока ТЗ_Рекв.ПолучитьСтроку()=1 Цикл
        Рекв=ТЗ_Рекв.Реквизит;
        Рекв.Доступность=ТЗ_Рекв.Доступность;
        Если Найти(ИменаРекв,Рекв.Идентификатор)>0 Тогда
       		Рекв.Доступность=1;  //НУЖНЫЙ МНЕ ФЛАЖОК ЗДЕСЬ      
	   	Иначе
	   		Рекв.Доступность=1;  //НУЖНЫЙ МНЕ ФЛАЖОК ЗДЕСЬ   
 
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

//====================================================================== // --- УМК Сандомирский В.Ю. (19.05.15)
Функция глПолучитьДляПечатиУпаковки(ТМЦ, ВидУпаковки, ДатаРекв) Экспорт
	СпрРазрешенныеВидыУпаковкиТМЦ = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
	Если (ПустоеЗначение(ВидУпаковки) = 1) ИЛИ (ВидУпаковки = НетУп) Тогда 
		Возврат "";	
	Иначе	
		СпрРазрешенныеВидыУпаковкиТМЦ.ИспользоватьВладельца(ТМЦ);
		Если СпрРазрешенныеВидыУпаковкиТМЦ.НайтиПоРеквизиту("ВидУпаковки",ВидУпаковки,0) = 1 Тогда			
			Возврат СокрЛП(СпрРазрешенныеВидыУпаковкиТМЦ.ДляПечати.Получить(ДатаРекв));
		КонецЕсли;			
	КонецЕсли;	
				
КонецФункции // глПолучитьДляПечатиУпаковки(ТМЦ,ВидУпаковки)

//====================================================================== // --- УМК Сандомирский В.Ю. (01.06.15)
Процедура глВыбратьДокСнятиеРезерва(ТекДок, ДатаН) Экспорт
		
	Док = СоздатьОбъект("Документ.УМК_СнятиеРезерва");
	Док.УстановитьФильтр(1,0);
	Док.ВыбратьДокументы(ДатаН, ДатаН);
	Сп = СоздатьОбъект("СписокЗначений");
	
	Пока Док.ПолучитьДокумент() = 1 Цикл
		СП.ДобавитьЗначение(Док.ТекущийДокумент());
	КонецЦикла;	
	
	Если СП.РазмерСписка() = 1 Тогда
		ДокК = СП.ПолучитьЗначение(1);
		ДатаН = ДокК.ДатаДок;
		Возврат;
	ИначеЕсли Сп.РазмерСписка() > 0 Тогда		
		Если Сп.ВыбратьЗначение(ДокК,,,,1) = 0 Тогда
			Возврат;
		Иначе
			ДатаН = ДокК.ДатаДок;
			Возврат;
		КонецЕсли;
	Иначе
		Если Док.Выбрать("Выберите документ нач. дня", "") = 1 Тогда
			ДокК = Док.ТекущийДокумент();
			ДатаН = ДокК.ДатаДок;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьДоговорПоУмолчанию(Конт, Период = "") Экспорт
	
	Перем Договор;
	ВыбКонтрагент = Конт.ТекущийЭлемент();
	
	Если ПустоеЗначение(Период) = 1 Тогда
		Период = РабочаяДата() - 1;
	КонецЕсли;
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|ОбрабатыватьДокументы все;
	|ТекущийДокумент = Документ.Договор.ТекущийДокумент;
	|ДатаДок = Документ.Договор.ДатаДок;
	|Контрагент = Документ.Договор.Контрагент;
	|Группировка ТекущийДокумент упорядочить по ТекущийДокумент.ДатаДок;
	|Условие(Контрагент = ВыбКонтрагент);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	// Подготовка к заполнению выходных форм данными запроса
	Пока Запрос.Группировка(1) = 1 Цикл
		Договор = Запрос.ТекущийДокумент;
		Прервать;
	КонецЦикла;
	
	Если ПустоеЗначение(Договор) = 1  Тогда 
		ДоговорОбъект = СоздатьОбъект("Документ.Договор");	
		ДоговорОбъект.Новый();
		ДоговорОбъект.ДатаДок = Период;
		ДоговорОбъект.Валюта = Гривня;
		ДоговорОбъект.ВидТорговли = Перечисление.ВидыТорговли.Кредит;
		ДоговорОбъект.ДатаНачала = Период;
		ДоговорОбъект.Контрагент = ВыбКонтрагент;
		ДоговорОбъект.КонтрагентПокупатель = ВыбКонтрагент;
		ДоговорОбъект.Курс = 1;
		ДоговорОбъект.НазваниеДоговора = "##По умолчанию##";
		ДоговорОбъект.Фирма = Константа.БазФирма;
		ДоговорОбъект.НомерДоговора = "##По умолчанию##";
	    ДоговорОбъект.ВидНДС = БезНДС;
		ДоговорОбъект.СубконтоВалДохРасх = Константа.БазВаловыйДоход;
		ДоговорОбъект.Записать();
		Договор= ДоговорОбъект.ТекущийДокумент();
		Сообщить("Создан договор по умолчанию.");
	КонецЕсли;
	
	
	Конт.БазДоговор = Договор;
		
КонецПроцедуры

//======================================================================
//Процедура глОборотыУпаковок(Конт,флРасходВозврат); //--- УМК Сандомирский В.Ю, (10.02.14) оборот суммы упаковок // --- 1 расход //--- 2 Возврат
//	
//	Если флРасходВозврат = 1 Тогда // --- РН 
//		Конт.ВыбратьСтроки();
//		Пока Конт.ПолучитьСтроку() = 1 Цикл
//			Если Конт.СуммаУпаковки > 0  Тогда
//				
//				
//				
//				
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	
//	
//КонецПроцедуры // гл


//---------------------------- Formex.dll -------------------------------

//====================================================================== //--- УМК Сандомирский В.Ю, (01.06.14) получиь цвет для Formex.dll 
Функция глПолучитьЦвет(Красный = 0,Зеленый = 0,Синий = 0) Экспорт    
    Возврат Макс(0,Синий)*65536+Макс(0,Зеленый)*256+Макс(0,Красный);
КонецФункции

//====================================================================== УМК Сандомирский В.Ю. (*) //--- заголовок FormEx_ПланРаскраски глРаскраска()
Функция глРаскраска() Экспорт
	ТекстПлана = "(BRUSH_S[" + глПолучитьЦвет(255,255,198) + "])"; //--- добавляя колонку вначало документа до "раскрашек" часов добавить "()"
	Возврат  ТекстПлана;	
КонецФункции

//====================================================================== //--- УМК Сандомирский В.Ю, (08.07.15) 
Процедура ПослеОткрытия(Конт)
	ЗаголовокСистемы(" рабочая дата: " + РабочаяДата());		
КонецПроцедуры

//======================================================================
Функция глПолучитьСписокВидовУпаковкиДляТМЦ(ТМЦ, ПроверятьНетУпаковки = 0, ВернутьТЗ = 0, ПорядокКодов = 0, ВыбиратьПомеченные = 0, НеПроверятьАктивность = 0) Экспорт
	// --- Строю локальный , разрешенный список для конкретного элемента
	ТекРазрешенныеВидыУпаковки = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
	СпВидыУпаковки = СоздатьОбъект("ТаблицаЗначений");
	СпВидыУпаковки.НоваяКолонка("ВидУпаковки", "Справочник.ВидыУпаковки");
	СпВидыУпаковки.НоваяКолонка("ФормаУпаковки", "Справочник.ФормыУпаковки");

	СпВидыУпаковкиЛокальный = СоздатьОбъект("СписокЗначений");
	
	ТекРазрешенныеВидыУпаковки.ИспользоватьВладельца(ТМЦ);
	Если ПорядокКодов = 1 Тогда
		ТекРазрешенныеВидыУпаковки.ПорядокКодов();
	КонецЕсли;
	ТекРазрешенныеВидыУпаковки.ВыбратьЭлементы();
	Пока ТекРазрешенныеВидыУпаковки.ПолучитьЭлемент() = 1 Цикл
		Если (ТекРазрешенныеВидыУпаковки.ПометкаУдаления() = 1) И (ВыбиратьПомеченные = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НеПроверятьАктивность = 0 Тогда
			Если ТекРазрешенныеВидыУпаковки.ВидУпаковки.Активна <> Перечисление.ДаНет.Да Тогда //--- пропускаем не активные
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СпВидыУпаковки.НоваяСтрока();
		СпВидыУпаковки.ВидУпаковки = ТекРазрешенныеВидыУпаковки.ВидУпаковки;
		СпВидыУпаковки.ФормаУпаковки = ТекРазрешенныеВидыУпаковки.ФормаУпаковки.Получить(ТекущаяДата());
	КонецЦикла;

	Если ((ПроверятьНетУпаковки = 1) И (ТМЦ.НетБезУпаковки = 0)) ИЛИ (ПроверятьНетУпаковки = 0) Тогда
		СпВидыУпаковки.НоваяСтрока();
		СпВидыУпаковки.ВидУпаковки = НетУп;
		СпВидыУпаковки.ФормаУпаковки = ПолучитьПустоеЗначение("Справочник.ФормыУпаковки");
	КонецЕсли;	

	Если ВернутьТЗ = 1 Тогда
		Возврат СпВидыУпаковки;
	Иначе
		СпВидыУпаковки.Выгрузить(СпВидыУпаковкиЛокальный,,,"ВидУпаковки");
		Возврат СпВидыУпаковкиЛокальный;
	КонецЕсли;
КонецФункции // гл

Процедура глВыбратьВидУпаковки(Конт, ФлагСтандОбр, СпВидыУпаковкиГлобальный, ПроверятьНетУпаковки = 0, ИмяРекв = "ТМЦ", ИмяРеквУпаковки = "ВидУпаковки") Экспорт
	ФлагСтандОбр = 0;		
	Попытка
		ДДок = Конт.ДатаДок;
	Исключение
		ДДок = ТекущаяДата();
	КонецПопытки;
	
	Если (ПустоеЗначение(Константа.УМК_ДатаНачалаГрупУпаковок) <> 1) 
			И (Константа.УМК_ДатаНачалаГрупУпаковок <= ДДок)  Тогда //--- УМК Сандомирский В.Ю. (01.09.14)

		СпВидыУпаковкиЛокальный = глПолучитьСписокВидовУпаковкиДляТМЦ(Конт.ПолучитьАтрибут(ИмяРекв));
		СтрВидУпаковки = "";
		Если СпВидыУпаковкиЛокальный.ВыбратьЗначение(СтрВидУпаковки,,,,2) = 1 Тогда
		    Конт.УстановитьАтрибут(ИмяРеквУпаковки, СтрВидУпаковки);
		КонецЕсли;						
	Иначе 					
		СтрВидУпаковки = "";
		Если СпВидыУпаковкиГлобальный.ВыбратьЗначение(СтрВидУпаковки,,,,2) = 1 Тогда
			Конт.УстановитьАтрибут(ИмяРеквУпаковки, СтрВидУпаковки);
		КонецЕсли;			
	КонецЕсли;	
КонецПроцедуры

Функция глПолучитьСписокУпаковкиГлобальный() Экспорт
	ТекВидУпаковки = СоздатьОбъект("Справочник.ВидыУпаковки");
	СпВидыУпаковкиГлобальный = СоздатьОбъект("СписокЗначений");
	ТекВидУпаковки.ВыбратьЭлементы();
	Пока ТекВидУпаковки.ПолучитьЭлемент() = 1 Цикл
		Если ТекВидУпаковки.ПометкаУдаления() = 1 Тогда //--- пропускаем помеченные на удаление
			Продолжить;
		КонецЕсли;
		
		Если ТекВидУпаковки.Активна <> Перечисление.ДаНет.Да Тогда //--- пропускаем не активные
			Продолжить;
		КонецЕсли;
	
		Если ТекВидУпаковки.ЭтоГруппа() = 1 Тогда //--- пропускаем группы
			Продолжить;
		КонецЕсли;
		СпВидыУпаковкиГлобальный.ДобавитьЗначение(ТекВидУпаковки.ТекущийЭлемент());		
	КонецЦикла;
	
	Возврат СпВидыУпаковкиГлобальный;
КонецФункции
	
Функция глПолучитьСписокОшибокExcel() Экспорт
	спОшибки=СоздатьОбъект("СписокЗначений");
    спОшибки.ДобавитьЗначение("#ПУСТО!");
    спОшибки.ДобавитьЗначение("#ДЕЛ/0!");
    спОшибки.ДобавитьЗначение("#ЗНАЧ!");
    спОшибки.ДобавитьЗначение("#ССЫЛКА!");
    спОшибки.ДобавитьЗначение("#ИМЯ?");
    спОшибки.ДобавитьЗначение("#ЧИСЛО!");
    спОшибки.ДобавитьЗначение("#Н/Д");
    //Для англ. версии
    спОшибки.ДобавитьЗначение("#NULL!");
    спОшибки.ДобавитьЗначение("#DIV/0!");
    спОшибки.ДобавитьЗначение("#VALUE!");
    спОшибки.ДобавитьЗначение("#REF!");
    спОшибки.ДобавитьЗначение("#NAME?");
    спОшибки.ДобавитьЗначение("#NUM!");
    спОшибки.ДобавитьЗначение("#N/A");
	спОшибки.ДобавитьЗначение("######");
	
	Возврат спОшибки;
КонецФункции

Функция глПрочитатьФильтр(ИмяФайла, фСохрСорт = 0) Экспорт
	//--- читаю из файла в список - фильтр
	фСохрСорт = 0;
	СписокВыбТМЦ = СоздатьОбъект("СписокЗначений");		
	СпрТМЦ1 = СоздатьОбъект("Справочник.ТМЦ");	
	НазваниеФайла1 = ИмяФайла;
	ОбъектФайла1=СоздатьОбъект("Scripting.FileSystemObject");
	Файле1 = ОбъектФайла1.OpenTextFile(НазваниеФайла1);
	Пока Файле1.atendofstream=0 цикл
		Код = СокрЛП(Файле1.readline());     
		Если Лев(Код, 11) = "Сортировка:" Тогда
			фСохрСорт = Число(Прав(Код, 1));
		Иначе
			Если СпрТМЦ1.НайтиПоКоду(Код,0) = 1 Тогда
				СписокВыбТМЦ.ДобавитьЗначение(СпрТМЦ1.ТекущийЭлемент(),СпрТМЦ1.Наименование);
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	Файле1.close(); 	
	
	Возврат СписокВыбТМЦ;
КонецФункции

Функция глПолучитьЗапросПоТоварамДляЗаказа(СписокВыбТМЦ, СписокВыбТМЦИсключение, ТекстЗапроса) Экспорт
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(СпрТМЦ)
	|Период с ДатаЗаказа по ДатаЗаказа;
	|Обрабатывать НеПомеченныеНаУдаление;
	|Товар 					= Справочник.ТМЦ.ТекущийЭлемент;
	|Группировка Товар;
	|Условие(Товар в СписокВыбТМЦ);
	|";
	Если СписокВыбТМЦИсключение.РазмерСписка() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|Условие (НЕ (Товар в СписокВыбТМЦИсключение));
		|
		|";	
	КонецЕсли;
	
	Возврат Запрос;
КонецФункции

//======================================================================
Процедура глЗаполнитьСписокМатериаловУпаковки(СписокМатериаловУпаковки, Владелец, ИмяСправочника, ДатаП, ДополнятьИзФормы = 0, ВУ_ТМЦ = "", ДобавлятьНорму = 0, ЭтоФормаУпаковки = 1, ОтображатьНеактивные = 0) Экспорт
	Если ДополнятьИзФормы <> 2 Тогда
		СписокМатериаловУпаковки.УдалитьСтроки();
	КонецЕсли;
	
	Если ДобавлятьНорму = 1 Тогда
		СписокМатериаловУпаковки.НоваяКолонка("НормаСписанияМатериалов");
	КонецЕсли;
	
	спрМатериалов = СоздатьОбъект("Справочник.УМК_НормыСписанияМатериаловУпаковок" + ИмяСправочника);
	спрМатериалов.ИспользоватьВладельца(?(ТипЗначенияСтр(Владелец) = "Справочник", Владелец, Владелец.ТекущийЭлемент()));
	спрМатериалов.ПорядокКодов();
	спрМатериалов.ВыбратьЭлементы();
	
	Пока спрМатериалов.ПолучитьЭлемент()=1 Цикл
		
		Если спрМатериалов.ПометкаУдаления()=1 Тогда
		    Продолжить;
		КонецЕсли;	
		
		Если (спрМатериалов.Неактивен.Получить(ДатаП) = 1) И (ОтображатьНеактивные = 0) Тогда
		    Продолжить;
		КонецЕсли;	
		
		СписокМатериаловУпаковки.НоваяСтрока();
		СписокМатериаловУпаковки.Ссылка = спрМатериалов.ТекущийЭлемент();
		СписокМатериаловУпаковки.МатериалУпаковки = спрМатериалов.Материал.Получить(ДатаП);		//--- УМК Сандомирский В.Ю, (26.03.15)
		СписокМатериаловУпаковки.НормаСписания = спрМатериалов.НормаСписания.Получить(ДатаП);
		СписокМатериаловУпаковки.Неактивен = спрМатериалов.Неактивен.Получить(ДатаП) ;
		
		Если ИмяСправочника = "" Тогда
			СписокМатериаловУпаковки.НормаСписанияУп = спрМатериалов.НормаСписанияУп.Получить(ДатаП);
			СписокМатериаловУпаковки.Сумма = спрМатериалов.Сумма.Получить(ДатаП);
		КонецЕсли;
		Если ИмяСправочника <> "Групп" Тогда
			СписокМатериаловУпаковки.Цена = спрМатериалов.Цена.Получить(ДатаП);
		КонецЕсли;
		Если ДополнятьИзФормы = 2 Тогда
			СписокМатериаловУпаковки.ИзФормы = 1;
			Попытка
				СписокМатериаловУпаковки.НормаСписанияУп = СписокМатериаловУпаковки.НормаСписания / Владелец.Кратность; 
			Исключение
				СписокМатериаловУпаковки.НормаСписанияУп = СписокМатериаловУпаковки.НормаСписания; 
			КонецПопытки;
			Попытка
				СписокМатериаловУпаковки.НормаСписания = СписокМатериаловУпаковки.НормаСписанияУп / ?(ЭтоФормаУпаковки = 1,ВУ_ТМЦ.ВесУпаковки,ВУ_ТМЦ.ВесУпаковки.Получить(ДатаП));
			Исключение
				СписокМатериаловУпаковки.НормаСписания = СписокМатериаловУпаковки.НормаСписанияУп;
			КонецПопытки;
			СписокМатериаловУпаковки.Сумма = СписокМатериаловУпаковки.НормаСписания * СписокМатериаловУпаковки.Цена;
		КонецЕсли;
		
		Если ДобавлятьНорму = 1 Тогда
			СписокМатериаловУпаковки.НормаСписанияМатериалов = спрМатериалов.ТекущийЭлемент();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнятьИзФормы = 1 Тогда
		ФормаУпаковки = ?(ТипЗначенияСтр(Владелец) = "Справочник", Владелец.ФормаУпаковки.Получить(ТекущаяДата()), Владелец.ФормаУпаковки);
		Если ФормаУпаковки.Выбран() = 1 Тогда
			глЗаполнитьСписокМатериаловУпаковки(СписокМатериаловУпаковки, ФормаУпаковки, "Форм", ДатаП, 2, Владелец, ДобавлятьНорму,ЭтоФормаУпаковки, ОтображатьНеактивные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // глЗаполнитьСписокМатериаловУпаковки

//======================================================================
Процедура глПолучитьТаблицуМатериаловДляФормы(СписокМатериаловУпаковки, ИмяСпр, БратьИзФормы = 0) Экспорт
	СписокМатериаловУпаковки.НоваяКолонка("Ссылка","Справочник.УМК_НормыСписанияМатериаловУпаковок" + ИмяСпр,,,,0);
	СписокМатериаловУпаковки.НоваяКолонка("МатериалУпаковки","Справочник.ТМЦ",,,"Материал",20);
	Если БратьИзФормы = 1 Тогда
		СписокМатериаловУпаковки.НоваяКолонка("ИзФормы","Число",1,,"Из форм.",3);
		СписокМатериаловУпаковки.ВыводитьПиктограммы("ИзФормы");
	КонецЕсли;
	
	СписокМатериаловУпаковки.НоваяКолонка("Неактивен","Число",1,,"не актив.",3);
	СписокМатериаловУпаковки.ВыводитьПиктограммы("Неактивен");
	
	Если ИмяСпр = "" Тогда
		СписокМатериаловУпаковки.НоваяКолонка("НормаСписанияУп","Число",15,5,"Н. уп.",5);
	КонецЕсли;
	СписокМатериаловУпаковки.НоваяКолонка("НормаСписания","Число",15,5,"Н. " + ?(ИмяСпр = "", "кг.", "уп."), 5);	
	
	Если ИмяСпр <> "Групп" Тогда
		СписокМатериаловУпаковки.НоваяКолонка("Цена","Число",15,2,"Цена",5);
	КонецЕсли;
	Если ИмяСпр = "" Тогда
		СписокМатериаловУпаковки.НоваяКолонка("Сумма","Число",15,2,"Сумма",5);
	КонецЕсли;
	СписокМатериаловУпаковки.ВидимостьКолонки("Ссылка",0);	
КонецПроцедуры // 

Функция глВернутьПревышениеДекларирования(Конт) Экспорт
	РазрешеноПревышение = Константа.НеКонтролироватьДекл.Получить(Конт.ДатаДок);
	
	Если РазрешеноПревышение <> Да Тогда
		Если ПустоеЗначение(Конт.ТМЦ) <> 1 Тогда	
			Если Конт.ТМЦ.ЕстьКодС.Получить(Конт.ДатаДок) = 1 Тогда		
				Если Конт.ТМЦ.ПечататьВДекларацию.Получить(Конт.ДатаДок) = 1 Тогда			
					Если Конт.ЦенаСНДС > 0 ТОгда 
						РасчетнаяДекларируемаяЦена = Конт.ТМЦ.Цена_Прод.Получить(Конт.ДатаДок) + ?(ПустоеЗначение(Конт.ВидУпаковки)=1,0,Константа.УМК_ЦенаВУП_Ф1);
						Если Конт.ЦенаСНДС > РасчетнаяДекларируемаяЦена Тогда
							Возврат 4;
						КонецЕсли;	
					КонецЕсли;			
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецФункции //

//======================================================================
Функция глИтКол(Конт, ВернутьТолькоКво = 0)	Экспорт
	ЕдВеса = Константа.ЕдиницаВеса;
	ИтКво = 0;
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1 Цикл		
		ВычитатьВес = ?((Конт.СоздатьПеремещение <> Да) ИЛИ (Конт.Контроль = Да), 0, 1);
		Если Конт.ТМЦ.ВычитатьВесУпаковки.Получить(Конт.ДатаДок) = 1 Тогда
			ВычитатьВес = 1;
		КонецЕсли;		
		
		Если Конт.Ед.Единица = ЕдВеса Тогда
			ИтКво = ИтКво + Конт.Кол + Конт.ВесУп * ВычитатьВес;
		Иначе
			ИтКво = ИтКво + Конт.Кол * Конт.ТМЦ.Вес + Конт.ВесУп * ВычитатьВес;
		КонецЕсли;
	КонецЦикла;
	
	Если ВернутьТолькоКво = 1 Тогда
		Возврат ИтКво;
	Иначе
		Возврат "Ит. вес: " + Строка(ИтКво);
	КонецЕсли;
КонецФункции // гл

//======================================================================
Процедура глПолучитьСкладСписания(Конт, Продукция, ТМЦ) Экспорт
	Конт.СкладСписания = "";
	Спр = СоздатьОбъект("Справочник.СкладыСписанияДляПродукцииИМатериалов");
	Спр.ИспользоватьВладельца(Продукция);
	Спр.ВыбратьЭлементыПоРеквизиту("Материал", ТМЦ, 1, 0);
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если (Спр.ПометкаУдаления() = 0) Тогда
			Конт.СкладСписания = Спр.СкладСписания;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //

//======================================================================
Процедура глПолучитьОтборПоМестамХранения(Конт, спОтбор) Экспорт
	спМестаХранения = СоздатьОбъект("СписокЗначений");	
	спМестаХранения.ДобавитьЗначение(Конт.МестоХранения);
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(Конт.СкладСписания) = 0 Тогда
			Если спМестаХранения.НайтиЗначение(Конт.СкладСписания) = 0 Тогда
				спМестаХранения.ДобавитьЗначение(Конт.СкладСписания);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	спОтбор.Установить("МестоХранения", спМестаХранения);	
КонецПроцедуры // гл

//======================================================================
Функция глПолучитьСклад(Конт) Экспорт
	Возврат ?(ПустоеЗначение(Конт.СкладСписания) = 1, Конт.МестоХранения, Конт.СкладСписания);	
КонецФункции // 

Функция глПробелы(ТМ) Экспорт
	Урн = ТМ.Уровень();
	Стр = "";
	Для Инд = 1 По Урн Цикл
		Стр = Стр + "  ";
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

Процедура ВывестиРодителей(ТЗВ, СписокВыведенныхРодителей, Таб)
	Род = ТЗВ.ТМЦ.Родитель;
	Выводимые = СоздатьОбъект("СписокЗначений");
	Пока ПустоеЗначение(Род) = 0 Цикл
		Если СписокВыведенныхРодителей.НайтиЗначение(Род) = 0 Тогда
			Выводимые.ДобавитьЗначение(Род);
			СписокВыведенныхРодителей.ДобавитьЗначение(Род);
		КонецЕсли;
		
		Род = Род.Родитель;
	КонецЦикла;
	
	Инд = Выводимые.РазмерСписка();
	Пока Инд > 0 Цикл
		Группа = Выводимые.ПолучитьЗначение(Инд);
		Таб.ВывестиСекцию("Группа");
		Инд = Инд - 1;		
	КонецЦикла;
КонецПроцедуры

Процедура глСводПоНормам(СПродукцией = 0, Конт, ИмяАтрНормы = "НормыЗатрат", Делитель = 1, ТЗВоз = "") Экспорт
	ТЗМат = СоздатьОбъект("ТаблицаЗначений");
	ТЗМат.НоваяКолонка("ТМЦ", "Справочник.ТМЦ");	
	ТЗМат.НоваяКолонка("Продукция", "Справочник.ТМЦ");
	ТЗМат.НоваяКолонка("Кво", "Число", 15, 3);

	ТЗВ = СоздатьОбъект("ТаблицаЗначений");
	ТЗВ.НоваяКолонка("ТМЦ", "Справочник.ТМЦ");
	ТЗВ.НоваяКолонка("Продукция", "Справочник.ТМЦ");
	ТЗВ.НоваяКолонка("Кво", "Число", 15, 3);
	ТЗВ.НоваяКолонка("ПолныйПуть", "Строка");
	
	
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1 Цикл
		Если Конт.Вид() = "УстановкаСкидокТМЦ" Тогда
			Продукция = Конт.ТМЦ;
			Нрм = глПолучитьНормыДляЗаказа(Продукция, Конт.ДатаДок);
		Иначе
			Продукция = Конт.Продукция;
			Нрм = Конт.ПолучитьАтрибут(ИмяАтрНормы);
		КонецЕсли;
		
		Если глПроверитьДоступКНормам(Продукция) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НКво = "";
		тбНормы = СоздатьОбъект("ТаблицаЗначений");
		ТЗМат.УдалитьСтроки();		
		
		Если глПолучитьНормы(Продукция, , Нрм.КвоПродукции, Конт.ДатаДок, Конт.ТекущийДокумент(), тбНормы,,НКво,,Нрм) = 1 Тогда
			тбНормы.ВыбратьСтроки();
			Пока тбНормы.ПолучитьСтроку() = 1 Цикл
				Если тбНормы.Кво > 0 Тогда
					ТЗМат.НоваяСтрока();
					ТЗМат.ТМЦ = тбНормы.Материал;
					ТЗМат.Продукция = Продукция;
					Если Конт.Вид() = "УМК_ЗаданиеНаПроизводство" Тогда
						ТЗМат.Кво = тбНормы.Кво * Макс(Конт.КвоКутеров, Конт.КвоФаршаИзКутеров) / Делитель;
					ИначеЕсли Конт.Вид() = "УстановкаСкидокТМЦ" Тогда
						ТЗМат.Кво = тбНормы.Кво * Конт.Кво / Делитель;
					Иначе
						ТЗМат.Кво = тбНормы.Кво * Конт.КвоКутеров / Делитель;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КвоФ = 0;
		ТЗМат.ВыбратьСтроки();
		Пока ТЗМат.ПолучитьСтроку() = 1 Цикл
			Если (ТЗМат.ТМЦ.НеУчитыватьВОбщемВесе = 0) Тогда
				КвоФ = КвоФ + ТЗМат.Кво;
			КонецЕсли;
		КонецЦикла;

		ТЗМат.ВыбратьСтроки();
		Пока ТЗМат.ПолучитьСтроку() = 1 Цикл
			Если ТЗМат.ТМЦ.НормаКГФарша.Получить(Конт.ДатаДок) <> 0 Тогда
				ТЗМат.Кво = КвоФ * ТЗМат.ТМЦ.НормаКГФарша.Получить(Конт.ДатаДок);
			КонецЕсли;
			
			ТЗВ.НоваяСтрока();
			ТЗВ.ТМЦ = ТЗМат.ТМЦ;
			ТЗВ.Продукция = ТЗМат.Продукция;
			ТЗВ.Кво = ТЗМат.Кво;
			ТЗВ.ПолныйПуть = ТЗМат.ТМЦ.ПолноеНаименование();
		КонецЦикла;
	КонецЦикла;
	
	Если СПродукцией = 6 Тогда
		ТЗП = СоздатьОбъект("ТаблицаЗначений");
		ТЗП.Загрузить(ТЗВ);
		ТЗП.Свернуть("ТМЦ,Продукция", "Кво");
		ТЗП.Сортировать("ТМЦ,Продукция");
	КонецЕсли;
	
	ТЗВ.Свернуть("ТМЦ,ПолныйПуть", "Кво");
	ТЗВ.Сортировать("ПолныйПуть");
	
	СписокВыведенныхРодителей = СоздатьОбъект("СписокЗначений");
	
	//списТМЦ = СоздатьОбъект("СписокЗначений");
	//ТЗВ.Выгрузить(списТМЦ,,,"ТМЦ");
	//РегОст = СоздатьОбъект("Регистр.Остатки");
	//РегОст.УстановитьЗначениеФильтра("ТМЦ", списТМЦ, 2);
	//Если СравнитьТА() = -1 Тогда
	//	РегОст.ВременныйРасчет(1);
	//	РассчитатьРегистрыНа(ТекущийДокумент());
	//ИначеЕсли СравнитьТА() = -2 Тогда
	//	Если ДатаДок < ПолучитьДатуТА() Тогда
	//		РегОст.ВременныйРасчет(1);
	//		РассчитатьРегистрыПо(ДатаДок);
	//	КонецЕсли;		
	//КонецЕсли;
	//
	//РегОст.ВыгрузитьИтоги(ТЗВ, 1, 0);
	//ТЗВ.Свернуть("ТМЦ", "Кво,ОстатокТовара");

	Если ТипЗначенияСтр(ТЗВоз) = "ТаблицаЗначений" Тогда
		ТЗВоз.Загрузить(ТЗВ);
		Возврат;
	КонецЕсли;

	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Потребн");	
	СтарыйПолныйПуть = "";
	Таб.ВывестиСекцию("Шапка");
	ТЗВ.ВыбратьСтроки();
	Пока ТЗВ.ПолучитьСтроку() = 1 Цикл
		Если ТЗВ.ПолныйПуть <> СтарыйПолныйПуть Тогда
			ВывестиРодителей(ТЗВ, СписокВыведенныхРодителей, Таб);
		КонецЕсли;
		
		Таб.ВывестиСекцию("Строка");
		
		Если Конт.Вид() = "УМК_ЗаданиеНаПроизводство" Тогда
			//Материал дляя полуфабрикатов + umk
			НормаПФ = ТЗВ.ТМЦ.НормыЗатрат.Получить(Конт.ДатаДок); 
			Если ПустоеЗначение(НормаПФ) = 0 Тогда
				НормаПФ.ВыбратьСтроки();
				Пока НормаПФ.ПолучитьСтроку() = 1 Цикл
					Если НормаПФ.Элемент.Вид() = "ТМЦ" Тогда
						МатериалПФ = НормаПФ.Элемент;
						КолПФ = ((НормаПФ.Кво* НормаПФ.Коэффициент)/(НормаПФ.КвоПродукции*НормаПФ.КоэффициентПродукции) 
						+ ((НормаПФ.Кво* НормаПФ.Коэффициент)/(НормаПФ.КвоПродукции*НормаПФ.КоэффициентПродукции))/100 * ТЗВ.ТМЦ.ПроцПотерь.Получить(Конт.ДатаДок)) * ТЗВ.Кво;
						Таб.ВывестиСекцию("Секция_Материалы_пф");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СПродукцией = 6 Тогда
		    Стр = 0;
			ТЗП.НайтиЗначение(ТЗВ.ТМЦ, Стр, "ТМЦ");
			Если Стр <> 0 Тогда
				ТЗП.ПолучитьСтрокуПоНомеру(Стр);
				Пока ТЗП.ТМЦ = ТЗВ.ТМЦ Цикл
					Таб.ВывестиСекцию("Продукция");
					Стр = Стр + 1;
					Если Стр > ТЗП.КоличествоСтрок() Тогда
					    Прервать;
					Иначе
						ТЗП.ПолучитьСтрокуПоНомеру(Стр);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	

	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	таб.Показать("Потребность в материалах");
КонецПроцедуры

//======================================================================
Процедура глПолучитьСуммуПросроченногоДолгаКонтрагента(Контр, ДолгКонОст, ТЗДолг = 0, КонДата, фВсе, МаксДнейОтгрузки = 0, ГлубинаПоУмолчанию = -1, Поставщик = 0, Договор = "", ФДоговор = 0, ДниОплаты = "") Экспорт
Перем Мас[7];	

	Если ТипЗначенияСтр(ТЗДолг)	<> "ТаблицаЗначений" Тогда
		ТЗДолг = СоздатьОбъект("ТаблицаЗначений");
		ТЗДолг.НоваяКолонка("Док", "Документ");
		ТЗДолг.НоваяКолонка("СуммаП", "Число", 12, 2);
		ТЗДолг.НоваяКолонка("Сумма", "Число", 12, 2);
		ТЗДолг.НоваяКолонка("СуммаДок", "Число", 15, 2);
		ТЗДолг.НоваяКолонка("Глубина", "Число");
		ТЗДолг.НоваяКолонка("МаксДатаОпл", "Дата");		
	КонецЕсли;

	Если ДолгКонОст < 0 Тогда
		Возврат;
	КонецЕсли;
	
	БратьГлубинуПоУмолчанию = ?(ДниОплаты = "", 0, 1);
	Если ДниОплаты = "" Тогда
		Если ГлубинаПоУмолчанию = -1 Тогда
			ГлубинаПоУмолчанию = Константа.ГлубинаПоУмолчанию;
		КонецЕсли;
	
		ДниОплаты = Контр.ДниОплаты;
	КонецЕсли;
	
	Для Инд = 1 По СтрДлина(ДниОплаты) Цикл
		Мас[Инд] = Число(Сред(ДниОплаты, Инд, 1));
	КонецЦикла;	
	ТЗДолг.УдалитьСтроки();
	ОстСумма = ДолгКонОст;
	Док = СоздатьОбъект("Документ");
	Док.УстановитьФильтр(1, 0);
	Док.ОбратныйПорядок(1);
	Док.ВыбратьПоЗначению(,, ?(Поставщик = 0, "РНКонтрагентов", "ВсеДокументыПрихода"), Контр);
	//Рег = СоздатьОбъект("Регистр.Взаиморасчеты" + ?(Поставщик = 0, "Покупателей", "Поставщиков"));
	//Рег.УстановитьЗначениеФильтра("Контрагент", Контр);
	//Рег.ВыбратьДвижения(,, "Контрагент");
	СписДнейОтгрузки = СоздатьОбъект("СписокЗначений");
	МаксДнейОтгрузки = Контр.ДнейОтгрузки;

	//Пока (Рег.ПолучитьДвижение() = 1) И (ОстСумма > 0) Цикл
	//	Если (?(Поставщик = 0, Рег.Приход, Рег.Расход) = 1) И (Рег.Долг > 0) Тогда
	//		СуммаДок = Рег.Долг;
	//		Док = Рег.ТекущийДокумент();
	//	Иначе
	//		Продолжить;
	//	КонецЕсли;
	Пока (Док.ПолучитьДокумент() = 1) и (ОстСумма > 0) Цикл
		// уберём накладные с тарой
		Если фДоговор = 1 Тогда
			Если (Док.Договор <> Договор) ИЛИ ((ПустоеЗначение(Док.Договор) = 0) И (ПустоеЗначение(Договор) = 1)) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если Док.Вид() = "ВводОстатковКредита" Тогда
			Если (Док.ВидКонтрагента <> Перечисление.ВидыКлиентов.Поставщик) ИЛИ (Док.ФлагОтгрузки <> 1) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ТолькоТара = 1;
		Попытка
			Если Док.ВидТары = Перечисление.ВидыТары.Залоговая Тогда
				Док.ВыбратьСтроки();
				Пока Док.ПолучитьСтроку() = 1 Цикл
					Если Док.ТМЦ.ВидТМЦ <> Перечисление.ВидыТМЦ.Тара Тогда
						ТолькоТара = 0;						    
					КонецЕсли;
				КонецЦикла;
			Иначе
				ТолькоТара = 0;
			КонецЕсли;			
		Исключение
			ТолькоТара = 0;
		КонецПопытки;
		Если ТолькоТара = 1 Тогда
			Продолжить;
		КонецЕсли;

		СуммаДок = Док.Итог("СуммаСНДС");
		СуммаДолгаДок = Мин(ОстСумма, СуммаДок);
		Если БратьГлубинуПоУмолчанию = 1 Тогда
			Глубина = ГлубинаПоУмолчанию;
		Иначе
			Если Поставщик = 1 Тогда
				Глубина = Контр.ГлубинаКредитаПоставщика.Получить(Док.ДатаДок);
			Иначе
				Глубина = Контр.Глубина.Получить(Док.ДатаДок);
			КонецЕсли;
		
			Если Глубина = 0 Тогда
				Глубина = ГлубинаПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		МаксДатаОпл = Док.ДатаДок + Глубина;
		ДеньНедели = НомерДняНедели(МаксДатаОпл);
		КвоДнейПлюс = 0;
		ЕстьДень = 0;
		Если СписДнейОтгрузки.НайтиЗначение(Док.ДатаДок) = 0 Тогда
			СписДнейОтгрузки.ДобавитьЗначение(Док.ДатаДок);
		КонецЕсли;
		
		// теперь посмотрим, по каким дня идёт оплата. Вначале едем от дня недели предполагаемой
		// даты оплаты до воскр. Если день оплаты не найден, идём от понедельника до дня недели
		
		Для Инд = ДеньНедели По 7 Цикл
			Если Мас[Инд] = 0 Тогда
				КвоДнейПлюс=КвоДнейПлюс+1;
			Иначе
				ЕстьДень = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьДень = 0 Тогда
			Для Инд = 1 По ДеньНедели - 1 Цикл
				Если Мас[Инд] = 0 Тогда
					КвоДнейПлюс=КвоДнейПлюс+1;
				Иначе
					ЕстьДень = 1;
					Прервать;
				КонецЕсли;						
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьДень = 1 Тогда
			МаксДатаОпл = МаксДатаОпл + КвоДнейПлюс;
		КонецЕсли;
		
		Если (МаксДатаОпл < КонДата) или (фВсе = 1) ИЛИ ((МаксДнейОтгрузки <> 0) И (СписДнейОтгрузки.РазмерСписка() > МаксДнейОтгрузки)) Тогда
			ТЗДолг.НоваяСтрока();
			ТЗДолг.Док = Док.ТекущийДокумент();
			Если (МаксДатаОпл < КонДата) ИЛИ ((МаксДнейОтгрузки <> 0) И (СписДнейОтгрузки.РазмерСписка() > МаксДнейОтгрузки)) Тогда
				ТЗДолг.СуммаП = СуммаДолгаДок;
			КонецЕсли;
			ТЗДолг.Сумма = СуммаДолгаДок;
			ТЗДолг.Глубина = Глубина;
			ТЗДолг.МаксДатаОпл = МаксДатаОпл;
			ТЗДолг.СуммаДок = СуммаДок * ?(Док.Вид() = "ВозвратнаяНакладная", -1, 1);
		КонецЕсли;
		
		ОстСумма = ОстСумма - СуммаДолгаДок;
	КонецЦикла;
	
КонецПроцедуры // 

Функция глПолучитьСтУпак(Прод, ТекРасшифровка = "", КонДата, ЦенаУпаковки = 0, ТекВУП = "") Экспорт
	СтУпак = 0;
	Если Прод.НетБезУпаковки = 1 Тогда
		СпрРВУ = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
		СпрРВУ.ИспользоватьВладельца(Прод);
		Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", Прод.ВидУпаковкиПоУмолчанию, 0) = 1 Тогда
			Если СпрРВУ.ПометкаУдаления() = 0 Тогда
				СтУпак = СпрРВУ.Себестоимость.Получить(КонДата) - ?(ЦенаУпаковки = -1, СпрРВУ.Цена.Получить(КонДата), 0);
				ТекВУП = СпрРВУ.ВидУпаковки;
				ТекРасшифровка = СпрРВУ.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтУпак;
КонецФункции

//======================================================================
Процедура глРассчитатьКвоПродукции(Конт, НомСтр = 0) Экспорт
	СписНСтр = СоздатьОбъект("СписокЗначений");
	Конт.ВыбратьСтроки();
	Конт.КвоПродукции = 0;
	Пока Конт.ПолучитьСтроку() = 1 Цикл
		Если НомСтр <> 0 Тогда
		    Если Конт.НомерСтроки = НомСтр Тогда
		        Продолжить;
		    КонецЕсли;
		КонецЕсли;
		Если Конт.Элемент.Вид() = "ТМЦ" Тогда
			Если Конт.Элемент.НеУчитыватьВОбщемВесе = 0 Тогда
				Конт.КвоПродукции = Конт.КвоПродукции + Конт.Кво;
			Иначе
				СписНСтр.ДобавитьЗначение(Конт.НомерСтроки);
			КонецЕсли;		    
		КонецЕсли;
	КонецЦикла;	
	
	Для Инд = 1 По СписНСтр.РазмерСписка() Цикл
		Конт.ПолучитьСтрокуПоНомеру(СписНСтр.ПолучитьЗначение(Инд));
		Если Конт.НеПересчитыватьКво <> Да Тогда				
			НормаФ = Конт.Элемент.НормаКгФарша.Получить(ТекущаяДата());
			Если (НормаФ <> 0) Тогда
				// посчитаем сколько нужно данного ТМЦ
				Если Конт.Элемент.СписыватьПриВыпуске.Получить(ТекущаяДата()) = 0 Тогда
					Конт.Кво = Конт.КвоПродукции * НормаФ;
				Иначе // если слисывать при выпуске
					Конт.Кво = ?(Конт.Элемент.БазаДляНормы = перечисление.БазаДляНормы.Продукция,
					(Конт.КвоПродукции - Конт.КвоПродукции * Конт.ПроцПотерь/100) * НормаФ, //расчет на продукцию
					Конт.КвоПродукции * НормаФ); //расчет на фарш
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры // гл

//======================================================================
Процедура глЗаполнитьСкладВСтроках(Конт, ИмяРекв = "Склад") Экспорт
	Если Вопрос("Заполнить склад в строках документа?", "Да+Нет") = "Да" Тогда
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку() = 1 Цикл
			Конт.УстановитьАтрибут(ИмяРекв, Конт.МестоХранения);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // глЗаполнитьСкладВСтроках(Конт)

Функция глУрнПередела(ТекДок) Экспорт
	Если ПустоеЗначение(ТекДок) = 0 Тогда
		Если ТекДок.КоличествоСтрок() > 0 Тогда
			ТекДок.ПолучитьСтрокуПоНомеру(1);
			Урн = ТекДок.Продукция.УровеньПередела.Получить(ТекДок.ДатаДок);
			Если Урн = 0 Тогда
				Возврат "Продукция";
			ИначеЕсли Урн = 1 Тогда
				Возврат "Фарш";
			ИначеЕсли Урн = 2 Тогда
				Возврат "Эмульсия";
			Иначе
				Возврат Урн;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
КонецФункции

//======================================================================
Процедура глУстДоступностьКолонокТЧ(Конт, Дост) Экспорт
	Для Инд = 1 По Метаданные.Документ(Конт.Вид()).РеквизитТабличнойЧасти() Цикл
		ИмяР = Метаданные.Документ(Конт.Вид()).РеквизитТабличнойЧасти(Инд).Идентификатор;
		Попытка
			Конт.Форма.ПолучитьАтрибут(ИмяР).Доступность(Дост);
		Исключение
		КонецПопытки;		
	КонецЦикла;
КонецПроцедуры // 

//======================================================================
Процедура глУстановитьДоступностьПолейШапки(Конт, СписПолей, Дост) Экспорт
	Пока СписПолей <> "" Цикл
		Поз = Найти(СписПолей, ",");
		Если Поз <> 0 Тогда
			ИмяПоля = Лев(СписПолей, Поз-1);
			СписПолей = Сред(СписПолей, Поз+1);			
		Иначе
			ИмяПоля = СписПолей;
			СписПолей = "";
		КонецЕсли;
		
		Конт.Форма.ПолучитьАтрибут(ИмяПоля).Доступность(Дост);
	КонецЦикла;
КонецПроцедуры // 

//======================================================================
Функция глПолучитьПромПереработку(ТМЦ) Экспорт
	ТМЦПП = ТМЦ.ТМЦПП;
	Если ПустоеЗначение(ТМЦПП) = 0 Тогда
		Возврат ТМЦПП;
	КонецЕсли;
	
	Р = ТМЦ.Родитель;
	Пока ПустоеЗначение(Р) = 0 Цикл
		Если ПустоеЗначение(Р.ТМЦПП) = 0 Тогда
			Возврат Р.ТМЦПП;
		КонецЕсли;
		Р = Р.Родитель;
	КонецЦикла;
	
	Возврат Константа.ТоварыВАссортименте;	
КонецФункции // глПолучитьПромПереработку(ТМЦ)

Функция глПроверитьДоступКНормам(Продукция) Экспорт
	Если ПустоеЗначение(Продукция) = 1 Тогда
		Возврат 1;
	ИначеЕсли глГруппыДоступаПродукции.РазмерСписка() = 0 Тогда
		Возврат 1;
	ИначеЕсли глГруппыДоступаПродукции.Принадлежит(Продукция) = 1 Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Процедура глВывестиРодителей(ТЗВ, СписокВыведенныхРодителей, Выводимые) Экспорт
	Род = ТЗВ.ТМЦ.Родитель;
	СпВыводимые = СоздатьОбъект("СписокЗначений");
	Пока ПустоеЗначение(Род) = 0 Цикл
		Если СписокВыведенныхРодителей.НайтиЗначение(Род) = 0 Тогда
			СпВыводимые.ДобавитьЗначение(Род);
			СписокВыведенныхРодителей.ДобавитьЗначение(Род);
		КонецЕсли;
		
		Род = Род.Родитель;
	КонецЦикла;
	
	Инд = СпВыводимые.РазмерСписка();
	Пока Инд > 0 Цикл
		Род = СпВыводимые.ПолучитьЗначение(Инд); 
		Выводимые.ДобавитьЗначение(Род, глПробелы(Род) + Строка(Род));
		Инд = Инд - 1;		
	КонецЦикла;
КонецПроцедуры

Функция  глПолучитьСписокДопустимыхВидовУпаковкиДляВакуума(ТекВладелец) Экспорт
	СписДопустимыхУпаковок = СоздатьОбъект("СписокЗначений");
	СпрСтроки = СоздатьОбъект("Справочник.УМК_СтрокиПрайсЛиста");
	СпрСтроки.ИспользоватьВладельца(ТекВладелец);
	СпрВУР = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
	СпрСтроки.ВыбратьЭлементы();
	Пока СпрСтроки.ПолучитьЭлемент() = 1 Цикл
		Если СпрСтроки.ПометкаУдаления() = 0 Тогда
			СпрВУР.ИспользоватьВладельца(СпрСтроки.ТМЦ);
			СпрВУР.ВыбратьЭлементы();
			Пока СпрВУР.ПолучитьЭлемент() = 1 Цикл
				Если СпрВУР.ПометкаУдаления() = 0 Тогда
					Если СписДопустимыхУпаковок.НайтиЗначение(СпрВУР.ВидУпаковки) = 0 Тогда
						СписДопустимыхУпаковок.ДобавитьЗначение(СпрВУР.ВидУпаковки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СписДопустимыхУпаковок.Сортировать();
	Возврат  СписДопустимыхУпаковок;
КонецФункции

Процедура глСортироватьТабличнуюЧасть(Конт, ИмяАтр = "ТМЦ") Экспорт
	Тз_Сортировка = СоздатьОбъект("ТаблицаЗначений");
	Конт.ВыгрузитьТабличнуюЧасть(Тз_Сортировка);
	Тз_Сортировка.НоваяКолонка("ГруппаТМЦ");
	Тз_Сортировка.НоваяКолонка("ТМЦНаименование");
	Тз_Сортировка.ВыбратьСтроки();
	Пока Тз_Сортировка.ПолучитьСтроку() = 1 Цикл
		ТМЦ = Тз_Сортировка.ПолучитьЗначение(Тз_Сортировка.НомерСтроки, ИмяАтр);
		Тз_Сортировка.ГруппаТМЦ 		= ТМЦ.Родитель.Наименование;
		Тз_Сортировка.ТМЦНаименование 	= ТМЦ.Наименование;
		Если ПустоеЗначение(Тз_Сортировка.ВидУпаковки) = 1 Тогда
			Тз_Сортировка.ВидУпаковки = НетУп;
		КонецЕсли;
	КонецЦикла;
	
	Тз_Сортировка.Сортировать("ГруппаТМЦ+," + ИмяАтр + "+,ВидУпаковки-");  //--- УМК Сандомирский В.Ю. (08.11.14)	
	Конт.УдалитьСтроки();	
	Конт.ЗагрузитьТабличнуюЧасть(Тз_Сортировка);
КонецПроцедуры // СортироватьТабличнуюЧасть

Процедура глСортироватьТаблицуПоСкладу(ТаблТМЦ, Конт, НеЗагружатьТЧ = 0) Экспорт
	СпрРВ = СоздатьОбъект("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
		
	ТаблТМЦ.НоваяКолонка("СкладСорт", "Справочник.МестаХранения");
	ТаблТМЦ.НоваяКолонка("ЭтоВакуум", "Число");
	ТаблТМЦ.НоваяКолонка("ФормаУпаковки", "Справочник.ФормыУпаковки");
	ТаблТМЦ.НоваяКолонка("ТМЦНаименование");
	ТаблТМЦ.НоваяКолонка("ГруппаТМЦ");
	
	ТаблТМЦ.ВыбратьСтроки();
	Пока ТаблТМЦ.ПолучитьСтроку() = 1 Цикл			
		ТаблТМЦ.ТМЦНаименование 	= ТаблТМЦ.ТМЦ.Наименование;
		ТаблТМЦ.СкладСорт = ТаблТМЦ.ТМЦ.СкладСборки;
		Если НЕ ((ПустоеЗначение(ТаблТМЦ.ВидУпаковки) = 1) ИЛИ (ТаблТМЦ.ВидУпаковки = НетУп)) Тогда
			СпрРВ.ИспользоватьВладельца(ТаблТМЦ.ТМЦ);
			Если СпрРВ.НайтиПоРеквизиту("ВидУпаковки", ТаблТМЦ.ВидУпаковки, 0) = 1 Тогда
				Если СпрРВ.СобиратьНаСкладеВак = 1 Тогда
					ТаблТМЦ.СкладСорт = "";
					ТаблТМЦ.ЭтоВакуум = 1;
				ИначеЕсли (СпрРВ.СобиратьНаСкладеВак = 0) И (ПустоеЗначение(ТаблТМЦ.СкладСорт) = 1) Тогда
					глПоказатьПредупреждение("У продукции: " + Строка(ТаблТМЦ.ТМЦ) + " в строке: " + Строка(ТаблТМЦ.НомерСтроки) + " не задан ни один склад сборки");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ТаблТМЦ.ГруппаТМЦ 		= ТаблТМЦ.ТМЦ.Родитель.Наименование;
		ТаблТМЦ.ТМЦНаименование = ТаблТМЦ.ТМЦ.Наименование;
	КонецЦикла;
	
	ТаблТМЦ.Сортировать("ЭтоВакуум,СкладСорт+,ФормаУпаковки,ГруппаТМЦ,ТМЦНаименование");  //--- УМК Сандомирский В.Ю. (08.11.14)	
	Если НеЗагружатьТЧ = 0 Тогда
		Конт.ЗагрузитьТабличнуюЧасть(ТаблТМЦ);
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура глСкопироватьОдинВОдин(Конт, ДокОсн) Экспорт
	Для Инд = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
		Конт.УстановитьАтрибут(Метаданные.ОбщийРеквизитДокумента(Инд).Идентификатор, 
			ДокОсн.ПолучитьАтрибут(Метаданные.ОбщийРеквизитДокумента(Инд).Идентификатор));
	КонецЦикла;
	Для Инд = 1 По Метаданные.Документ(Конт.Вид()).РеквизитШапки() Цикл
		Конт.УстановитьАтрибут(Метаданные.Документ(Конт.Вид()).РеквизитШапки(Инд).Идентификатор, 
			ДокОсн.ПолучитьАтрибут(Метаданные.Документ(Конт.Вид()).РеквизитШапки(Инд).Идентификатор));
	КонецЦикла;
	ДокОсн.ВыбратьСтроки();
	Пока ДокОсн.ПолучитьСтроку() = 1 Цикл
		Конт.НоваяСтрока();
		Для Инд = 1 По Метаданные.Документ(Конт.Вид()).РеквизитТабличнойЧасти() Цикл
			Конт.УстановитьАтрибут(Метаданные.Документ(Конт.Вид()).РеквизитТабличнойЧасти(Инд).Идентификатор, 
				ДокОсн.ПолучитьАтрибут(Метаданные.Документ(Конт.Вид()).РеквизитТабличнойЧасти(Инд).Идентификатор));
		КонецЦикла;
	КонецЦикла;		
КонецПроцедуры // гл

////======================================================================
Процедура глСброситьФлагМодифицированности(Конт) Экспорт
	НачатьТранзакцию();
	Конт.Записать();
	ОтменитьТранзакцию();	
КонецПроцедуры // 

Функция глВзятьКонтекст(Конт) Экспорт
	Возврат Конт;
КонецФункции

Процедура глЗаполнитьСборочныйЛист(ТЗСб, Д) Экспорт
	ТЗСб.Свернуть("ТМЦ,ВУ,Склад,Стикеровать", "Кво");
	ТЗСб.Сортировать("Склад,ТМЦ,ВУ");
	НачатьТранзакцию();
	
	СтарСк = "";
	ДокСб = СоздатьОбъект("Документ.СборочныйЛист");
	ТЗСб.ВыбратьСтроки();
	Пока ТЗСб.ПолучитьСтроку() = 1 Цикл
		Если СтарСк <> ТЗСб.Склад Тогда
			Если ДокСб.КоличествоСтрок() > 0 Тогда
				ДокСб.Записать();
				Сообщить(ДокСб);
			КонецЕсли;
			
			ДокСб.Новый();
			ДокСб.Фирма = Константа.БазФирма;
			глУстановитьНомер(ДокСб);
			ДокСб.ДатаДок = Д;
			ДокСб.ВремяСоздания = ТекущееВремя();
			ДокСб.ДатаСоздания = ТекущаяДата();
			ДокСб.МестоХранения = ТЗСб.Склад;			
			ДокСб.Автор = глПользователь;
			
			СтарСк = ТЗСб.Склад;
		КонецЕсли;
		
		ДокСб.НоваяСтрока();
		ДокСб.Продукция = ТЗСб.ТМЦ;
		ДокСб.Кво = ТЗСб.Кво;
		ДокСб.ВидУпаковки = ТЗСб.ВУ;
		ДокСб.Стикеровать = ТЗСб.Стикеровать;
	КонецЦикла;

	Если ДокСб.КоличествоСтрок() > 0 Тогда
		ДокСб.Записать();
		Сообщить(ДокСб);
	КонецЕсли;	
	
	Если Вопрос("Записать созданные сборочные?", "Да+Нет") = "Да" Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;	
КонецПроцедуры

Процедура глСоздатьСборочныеЛистыДляЗаказа() Экспорт
	Д = ТекущаяДата();
	Если ВвестиДату(Д, "Введите дату для формирования сборочных") = 1 Тогда
		ТЗСб = СоздатьОбъект("ТаблицаЗначений");
		ТЗСб.НоваяКолонка("ТМЦ", "Справочник.ТМЦ");
		ТЗСб.НоваяКолонка("ВУ", "Справочник.ВидыУпаковки");
		ТЗСб.НоваяКолонка("Склад", "Справочник.МестаХранения");
		ТЗСб.НоваяКолонка("Стикеровать", "Перечисление.ДаНет");	
		ТЗСб.НоваяКолонка("Кво", "Число", 15, 1);
		ОснСклад = Константа.БазФирма.ОсновнойСклад;
		СкладВУП = Константа.СкладВУП;		
		
		Док = СоздатьОбъект("Документ.УМК_ЗаказКлиента");
		Док.УстановитьФильтр(1,0);
		Док.ВыбратьДокументы(Д, Д);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл
				ТЗСб.НоваяСтрока();
				ТЗСб.ТМЦ = Док.ТМЦ;
				ТЗСб.ВУ = Док.ВидУпаковки;
				Если (ПустоеЗначение(ТЗСб.ВУ) = 0) И (ТЗСб.ВУ <> НетУп) Тогда
					ТЗСб.Склад = СкладВУП;
				ИначеЕсли ПустоеЗначение(ТЗСб.ТМЦ.СкладСборки) = 0 Тогда
					ТЗСб.Склад = ТЗСб.ТМЦ.СкладСборки;
				Иначе
					ТЗСб.Склад = ОснСклад;
				КонецЕсли;
					
				ТЗСб.Стикеровать = Док.Стикеровать;
				ТЗСб.Кво = Док.Кво;
			КонецЦикла;			
		КонецЦикла;
	КонецЕсли;	
	
	глЗаполнитьСборочныйЛист(ТЗСб, Д);	
КонецПроцедуры

//======================================================================
Функция глУстановитьДоговорПоСкладу(Конт) Экспорт
	Если (ПустоеЗначение(Конт.МестоХранения) = 0) И (ПустоеЗначение(Конт.Контрагент) = 0) Тогда
		Дог = СоздатьОбъект("Документ");
		Дог.ОбратныйПорядок(1);
		Дог.УстановитьФильтр(1, 0);
		Дог.ВыбратьПоЗначению(,, "ДоговораКонтрагентов", Конт.Контрагент);
		Пока Дог.ПолучитьДокумент() = 1 Цикл
			Если Дог.Вид() = "Договор" Тогда
				Если (Дог.фДоговорЗакрыт = 0) И (Дог.Склад = Конт.МестоХранения) Тогда
					Возврат Дог.ТекущийДокумент();
					Прервать;					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат "";
КонецФункции

// =======================Документ списание в производство==============

//Процедура пересчитывае количество материала но норме указанной в реквизите ТМЦ
//Документ - СписаниеТМЦВПроизводство
Процедура глСписаниеПересчитатьКоличествоПоНормеТМЦ(Конт)  Экспорт
	
	Если Конт.ТМЦ.НормаКГФарша.Получить(Конт.ДатаДок) <> 0 Тогда
				
		Если Конт.ТМЦ.СписыватьПриВыпуске.Получить(Конт.ДатаДок) = 0 Тогда
		    Конт.Кво = Конт.КвоФарша * Конт.ТМЦ.НормаКГФарша.Получить(Конт.ДатаДок);
		Иначе // + umk
		    Конт.Кво = ?(Конт.ТМЦ.БазаДляНормы = Перечисление.БазаДляНормы.Продукция,
				(Конт.КвоФарша - Конт.КвоФарша * Конт.НормаОснование.ПроцПотерь/100) * Конт.ТМЦ.НормаКГФарша.Получить(Конт.ДатаДок), //фарш минус потери (продукция)
				Конт.КвоФарша * Конт.ТМЦ.НормаКГФарша.Получить(Конт.ДатаДок)); //расчет на фарш
		КонецЕсли;
				
	    Конт.КвоНаЗамес = Конт.Кво;
				
	КонецЕсли;

КонецПроцедуры

//======================================================================
Процедура глРассчитатьКвоФаршаСписание(Конт, НомСтр) Экспорт
	Конт.КвоФарша = 0;
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1 Цикл
		Если (Конт.ТМЦ.НеУчитыватьВОбщемВесе = 0) и (Конт.НомерСтроки <> НомСтр) Тогда
			Конт.КвоФарша = Конт.КвоФарша + Конт.Кво * Конт.Коэффициент;
		КонецЕсли;
	КонецЦикла;	
	Если Конт.НеПересчитыватьДоп = 0 Тогда
	    Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку() = 1 Цикл
			глСписаниеПересчитатьКоличествоПоНормеТМЦ(Конт);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // гл

Функция глПолучитьВычитатьВес(ТаблТМЦ, ДатаДок) Экспорт
	ТМЦР = ТаблТМЦ.ТМЦ;
	СоздПеремещение = ТаблТМЦ.СоздатьПеремещение;
	Попытка
		Контроль = ТаблТМЦ.Контроль;
	Исключение
	КонецПопытки;	
	
	ВычитатьВес = ?((СоздПеремещение <> Да) ИЛИ (Контроль = Да), 1, 0);
	Если ТМЦР.ВычитатьВесУпаковки.Получить(ДатаДок) = 1 Тогда
		ВычитатьВес = 1;
	КонецЕсли;
	
	Возврат ВычитатьВес;
КонецФункции // ПолучитьВычитатьВес()

Процедура глУстановитьЦеныПоСписку(Конт, СписДляУстановкиЦен, Валюта) Экспорт
	СпрЦ = СоздатьОбъект("Справочник.Цены");
	СписДляУстановкиЦен.ВыбратьСтроки();
	Пока СписДляУстановкиЦен.ПолучитьСтроку() = 1 Цикл			
		СпрЦ.ИспользоватьВладельца(СписДляУстановкиЦен.ТМЦ);
		Если СпрЦ.НайтиПоРеквизиту("КатегорияЦены", Конт.КатегорияЦен, 0) = 0 Тогда
			СпрЦ.Новый();
			СпрЦ.Наименование = Строка(Конт.КатегорияЦен);
			СпрЦ.Владелец = СписДляУстановкиЦен.ТМЦ;
			СпрЦ.КатегорияЦены = Конт.КатегорияЦен;
			СпрЦ.Записать();
			Ц = 0;
			Конт.УстановитьРеквизитСправочника(СпрЦ.ТекущийЭлемент(), "Единица", СписДляУстановкиЦен.Ед, Конт.ДатаДок);
			Конт.УстановитьРеквизитСправочника(СпрЦ.ТекущийЭлемент(), "Цена", СписДляУстановкиЦен.Цена, Конт.ДатаДок);
			Конт.УстановитьРеквизитСправочника(СпрЦ.ТекущийЭлемент(), "Валюта", Валюта, Конт.ДатаДок);
		Иначе
			Ц = СпрЦ.Цена.Получить(Конт.ДатаДок);
			Вал = СпрЦ.Валюта.Получить(Конт.ДатаДок);
			Едц = СпрЦ.Единица.Получить(Конт.ДатаДок);
			Если (СписДляУстановкиЦен.Цена <> Ц) Тогда
				Конт.УстановитьРеквизитСправочника(СпрЦ.ТекущийЭлемент(), "Цена", СписДляУстановкиЦен.Цена, Конт.ДатаДок);
			КонецЕсли;
			Если Вал <> Валюта Тогда			
				Конт.УстановитьРеквизитСправочника(СпрЦ.ТекущийЭлемент(), "Валюта", Валюта, Конт.ДатаДок);
			КонецЕсли;
			Если СписДляУстановкиЦен.Ед <> Едц Тогда			
				Конт.УстановитьРеквизитСправочника(СпрЦ.ТекущийЭлемент(), "Единица", СписДляУстановкиЦен.Ед, Конт.ДатаДок);
			КонецЕсли;				
		КонецЕсли;			
	КонецЦикла;
КонецПроцедуры

Функция глПолучитьТекстАдреса(Договор, Контрагент) Экспорт
	Если Договор.Выбран() = 1 Тогда
		Возврат ?(СокрЛП(Договор.НазваниеДоговора) = "", "", СокрЛП(Договор.НазваниеДоговора) + ", ") + глАдресСтрокой(Договор.Адрес);
	Иначе
		Возврат глАдресСтрокой(Контрагент.ФизическийАдрес);
	КонецЕсли;
КонецФункции

//======================================================================
// процедура актуализации списков значений в формах. Если в программе была, например добавлена группировка, а форме есть сохранённая настройка
// то этой группировки не будет, при открытии с настройкой. Процедура актуалзирует список уже после того, как была открыта настройка
Процедура глАктуализироватьСписок(ИсхСписок, СписокДобавления) Экспорт
	Инд = 1;
	Пока Инд <= СписокДобавления.РазмерСписка() Цикл
		Зн = СписокДобавления.ПолучитьЗначение(Инд);
		Если ИсхСписок.НайтиЗначение(Зн) = 0 Тогда
			СписокДобавления.УдалитьЗначение(Инд);
		Иначе
			Инд = Инд + 1;
		КонецЕсли;		
	КонецЦикла;
	
	Для Инд = 1 По ИсхСписок.РазмерСписка() Цикл
		Представление = "";
		Зн = ИсхСписок.ПолучитьЗначение(Инд, Представление);
		Поз = СписокДобавления.НайтиЗначение(Зн);
		Если Поз = 0 Тогда
			СписокДобавления.ДобавитьЗначение(Зн, Представление);
		Иначе
			СписокДобавления.УстановитьЗначение(Поз, Зн, Представление);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //

// процедура актуализации таблиц значений в формах. Если в программе была, например добавлена группировка, а форме есть сохранённая настройка
// то этой группировки не будет, при открытии с настройкой. Процедура актуалзирует таблицу значений уже после того, как была открыта настройка
Процедура глАктуализироватьТаблицу(ИсхТаблица, ТаблицаДобавления, ИмяАтрибута) Экспорт
	Инд = 1;
	Пока Инд <= ТаблицаДобавления.КоличествоСтрок() Цикл
		Стр = 0;
		Если ИсхТаблица.НайтиЗначение(ТаблицаДобавления.ПолучитьЗначение(Инд, ИмяАтрибута), Стр, ИмяАтрибута) = 0 Тогда
			ТаблицаДобавления.УдалитьСтроку(Инд);
		Иначе
			Инд = Инд + 1;
		КонецЕсли;
	КонецЦикла;

	ИсхТаблица.ВыбратьСтроки();
	Пока ИсхТаблица.ПолучитьСтроку() = 1 Цикл
		Стр = 0;
		Если ТаблицаДобавления.НайтиЗначение(ИсхТаблица.ПолучитьЗначение(ИсхТаблица.НомерСтроки, ИмяАтрибута), Стр, ИмяАтрибута) = 0 Тогда
			ТаблицаДобавления.НоваяСтрока();
			Для Инд = 1 По ТаблицаДобавления.КоличествоКолонок() Цикл
				ТаблицаДобавления.УстановитьЗначение(ТаблицаДобавления.НомерСтроки, Инд, ИсхТаблица.ПолучитьЗначение(ИсхТаблица.НомерСтроки, Инд));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры //

//======================================================================
Процедура глДобавитьЗначениеСохранения(Сп, Значение, Имя) Экспорт
	НЗН = СоздатьОбъект(ТипЗначенияСтр(Значение));
	
	Если ТипЗначенияСтр(Значение) = "СписокЗначений" Тогда
		Значение.Выгрузить(НЗН);
	Иначе
		НЗН.Загрузить(Значение);
	КонецЕсли;
	
	Сп.Установить(Имя, НЗН);
КонецПроцедуры // 

//======================================================================
Процедура глУстановитьСкладПоТМЦ(ТМЦ, Конт) Экспорт
	Если ПустоеЗначение(ТМЦ) = 0 Тогда
		Если ПустоеЗначение(ТМЦ.НГруппа) = 0 Тогда
			Если ПустоеЗначение(ТМЦ.НГруппа.МХ) = 0 Тогда
				Конт.МестоХранения = ТМЦ.НГруппа.МХ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // 

//======================================================================
Функция глПолучитьСписИсключений() Экспорт
	Спис = СоздатьОбъект("СписокЗначений");
	Если НазваниеНабораПрав() = "ПрочиеЗаказ" Тогда
		СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
		СпрТМЦ.ВыбратьЭлементыПоРеквизиту("ЗапретитьПрочиеЗаказ", 1, 1, 1);
		Пока СпрТМЦ.ПолучитьЭлемент() = 1 Цикл
			Спис.ДобавитьЗначение(СпрТМЦ.ТекущийЭлемент());
		КонецЦикла;
	КонецЕсли;
	
	Возврат Спис;
КонецФункции // глПолучитьСписИсключений

Процедура глПроверитьОграниченияНаОтгрузкуПоКонтрагенту(Конт) Экспорт
	Если глВсеВыбрано = 0 Тогда
		// есть другие ошибки, ничего не делаем
		Возврат;
	КонецЕсли;
	// вначале проверим, есть ли в принципе ограничений. Они есть, если первый попавшийся элемент справочника Контрагенты продукции не равен контрагенту документа или контрагент документа не в группе из
	// первого элемента справочника
	ЕстьОграничения = 0;
	СпрКК = СоздатьОбъект("Справочник.КонтрагентыПродукции");
	СпрКК.ИспользоватьВладельца(Конт.ТМЦ);
	СпрКК.ВыбратьЭлементы();
	Пока СпрКК.ПолучитьЭлемент() = 1 Цикл
		Если СпрКК.ПометкаУдаления() = 0 Тогда
			Если ?(СпрКК.Контрагент.ЭтоГруппа() = 0, СпрКК.Контрагент, Конт.Контрагент.ПринадлежитГруппе(СпрКК.Контрагент)) <> ?(СпрКК.Контрагент.ЭтоГруппа() = 0, Конт.Контрагент, 1) Тогда
				ЕстьОграничения = 1;
			КонецЕсли;			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОграничения = 1 Тогда
		// ограничения есть. Попробуем найти контрагента прям0
		глВсеВыбрано = 0;
		Если СпрКК.НайтиПоРеквизиту("Контрагент", Конт.Контрагент, 0) = 1 Тогда
			// нашли, можем отгружать
			глВсеВыбрано = 1;
		КонецЕсли;
		
		// не нашли, поищем среди разрешенных групп к-тов вдруг контрагент входит в одну из них
		Если глВсеВыбрано = 0 Тогда
			СпрКК.ВыбратьЭлементыПоРеквизиту("Группа", 1, 1, 0);
			Пока СпрКК.ПолучитьЭлемент() = 1 Цикл
				Если СпрКК.ПометкаУдаления() = 0 Тогда
					Если Конт.Контрагент.ПринадлежитГруппе(СпрКК.Контрагент) = 1 Тогда
						// нашли, можем отгружать
						глВсеВыбрано = 1;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Если глВсеВыбрано = 0 Тогда
				// ничего не нашли, не даём отгружать
				Сообщить("Для ТМЦ: " + Строка(Конт.ТМЦ) + " есть ограничения по продаже. Этому контрагенту продавать запрещено");
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция глПолучитьНормыДляЗаказа(ТМЦ, ДатаД = '') Экспорт
	Док = СоздатьОбъект("Документ");
	Док.ОбратныйПорядок(1);
	Док.УстановитьФильтр(1);
	Если ДатаД = '' Тогда
		Док.ВыбратьПоЗначению(,,"Продукция", ТМЦ);
	Иначе
		Док.ВыбратьПоЗначению(,ДатаД,"Продукция", ТМЦ);
	КонецЕсли;
	
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Вид() = "НормыЗатрат" Тогда
			Если Док.фДляЗаказа = 1 Тогда
				Возврат Док.ТекущийДокумент();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";	
КонецФункции

Функция глСравнитьНормы(ТМЦПодч, ТМЦРодитель, НормыП, НормыР, СравнениеТакойЖеМаркировки = 0, ДатаД = "") Экспорт
	ТЗТМЦ = СоздатьОбъект("ТаблицаЗначений");
	ТЗТМЦ.НоваяКолонка("ТМЦ1", "Справочник.ТМЦ");
	ТЗТМЦ.НоваяКолонка("Кво1", "Число");
	ТЗТМЦ.НоваяКолонка("Кво2", "Число");
	
	ТЗТМЦ2 = СоздатьОбъект("ТаблицаЗначений");
	ТЗТМЦ2.НоваяКолонка("ТМЦ", "Справочник.ТМЦ");
	ТЗТМЦ2.НоваяКолонка("Кво", "Число");

	ЕстьОтличия = "";
	Хвост = ?(СравнениеТакойЖеМаркировки = 1, " для такой же продукции с другой маркировкой", "");
	
	Если ПустоеЗначение(НормыП) = 1 Тогда
		ЕстьОтличия = "Не заданы нормы затрат для заказа" + Хвост;
	ИначеЕсли (ПустоеЗначение(НормыР) = 1) Тогда
		ЕстьОтличия = "Не заданы нормы затрат (ТМЦ для заказа)" + Хвост;
	ИначеЕсли (НормыП.КвоПродукции <> НормыР.КвоПродукции) И (СравнениеТакойЖеМаркировки = 0) Тогда
		ЕстьОтличия = "Отличается к-во фарша";
	Иначе
		НормыП.ВыбратьСтроки();
		Пока НормыП.ПолучитьСтроку() = 1 Цикл
			Если ?(СравнениеТакойЖеМаркировки = 0, НормыП.Элемент.НеУчитыватьВОбщемВесе, НормыП.Элемент.СписыватьПриВыпуске.Получить(ДатаД)) = 0 Тогда
				ТЗТМЦ.НоваяСтрока();
				ТЗТМЦ.ТМЦ1 = НормыП.Элемент;
				ТЗТМЦ.Кво1 = НормыП.Кво * НормыП.Коэффициент;
				Если СравнениеТакойЖеМаркировки = 1 Тогда
					Если НормыП.Элемент.НормаКГФарша.Получить(ДатаД) <> 0 Тогда
						ТЗТМЦ.Кво1 = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТЗТМЦ.Свернуть("ТМЦ1", "Кво1,Кво2");

		НормыР.ВыбратьСтроки();
		Пока НормыР.ПолучитьСтроку() = 1 Цикл
			Если ?(СравнениеТакойЖеМаркировки = 0, НормыР.Элемент.НеУчитыватьВОбщемВесе, НормыР.Элемент.СписыватьПриВыпуске.Получить(ДатаД)) = 0 Тогда
				ТекКво = НормыР.Кво * НормыР.Коэффициент;
				Если СравнениеТакойЖеМаркировки = 1 Тогда
					Если НормыР.Элемент.НормаКГФарша.Получить(ДатаД) <> 0 Тогда
						ТекКво = 1;
					КонецЕсли;					
				КонецЕсли;
				
				ТЗТМЦ2.НоваяСтрока();
				ТЗТМЦ2.ТМЦ = НормыР.Элемент;
				ТЗТМЦ2.Кво = ТекКво;
			КонецЕсли;
		КонецЦикла;
		
		ТЗТМЦ2.Свернуть("ТМЦ", "Кво");
		ТЗТМЦ2.ВыбратьСтроки();
		Пока ТЗТМЦ2.ПолучитьСтроку() = 1 Цикл				
			Поз = 0;
			Если ТЗТМЦ.НайтиЗначение(ТЗТМЦ2.ТМЦ, Поз, "ТМЦ1") = 0 Тогда
				ЕстьОтличия = ЕстьОтличия + ?(ЕстьОтличия = "", "","
				|") + "Нет ТМЦ в родителе: " + Строка(ТЗТМЦ2.ТМЦ) + Хвост;
			ИначеЕсли ТЗТМЦ.ПолучитьЗначение(Поз, "Кво1") <> ТЗТМЦ2.Кво Тогда
				ЕстьОтличия = ЕстьОтличия + ?(ЕстьОтличия = "", "","
				|") +"Отличается количество в строках. В ТМЦ родителя: " + Строка(ТЗТМЦ2.ТМЦ) + Хвост;
			Иначе
				ТЗТМЦ.УстановитьЗначение(Поз, "Кво2", ТЗТМЦ2.Кво);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	ТЗТМЦ.ВыбратьСтроки();
	Пока ТЗТМЦ.ПолучитьСтроку() = 1 Цикл
		Если ТЗТМЦ.Кво1 <> ТЗТМЦ.Кво2 Тогда
			ЕстьОтличия = ЕстьОтличия + ?(ЕстьОтличия = "", "","
				|") +"Нет ТМЦ в подчинённом: " + Строка(ТЗТМЦ.ТМЦ1) + Хвост;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОтличия;
КонецФункции

//======================================================================
Процедура ДокументПоАкциям(ТЗТ, Док, Будущее = 0)
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	Док.ВыгрузитьТабличнуюЧасть(ТЗ);
	ТЗТ.ВыбратьСтроки();
	Пока ТЗТ.ПолучитьСтроку() = 1 Цикл
		Стр = 0;
		Если ТЗ.НайтиЗначение(ТЗТ.ТМЦ, Стр, "ТМЦ") <> 0 Тогда
			Сообщить("Для ТМЦ: " + Строка(ТЗТ.ТМЦ) + ?(Будущее = 1, " в будущем периоде", "") + " есть акционная установка цен: " + Строка(Док.ТекущийДокумент()) + ". Период акции: " + ПериодСтр(Док.ДатаНачалаАкции, Док.ДатаКонцаАкции));
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры // 

Процедура глПроверитьПериодВАкцииДляУЦ(Категория, ТЗ, Конт) Экспорт
	// проверяем вот что
	// 1. Есть ли акционные установки цен на эту категорию цен по нужным нам товарам, где дата этого документа попадает в период действия акции
	// 2. Есть ли акции в будущем периоде для этих товаров
	
	Док = СоздатьОбъект("Документ");
	Док.ОбратныйПорядок(1);	
	Док.УстановитьФильтр(1, 0);
	Док.ВыбратьПоЗначению(, , "АкцииКатегорияЦен", Категория);
	Пока Док.ПолучитьДокумент() = 1 Цикл		
		Если (Док.Вид() = "УстановкаЦенТМЦ") И (Док.ТекущийДокумент() <> глОтменяемыйДок) Тогда
			Если Док.ТекущийДокумент() <> Конт.ТекущийДокумент() Тогда
				Если (ПустоеЗначение(Док.ДатаНачалаАкции) = 0) И (ПустоеЗначение(Док.ДатаКонцаАкции) = 0) И (Конт.ДатаДок >= Док.ДатаНачалаАкции)			
				И (Конт.ДатаДок <= Док.ДатаКонцаАкции) Тогда
					ДокументПоАкциям(ТЗ, Док.ТекущийДокумент());
				ИначеЕсли (ПустоеЗначение(Док.ДатаНачалаАкции) = 0) И (ПустоеЗначение(Док.ДатаКонцаАкции) = 0) И (Конт.ДатаДок < Док.ДатаНачалаАкции) Тогда 
					ДокументПоАкциям(ТЗ, Док.ТекущийДокумент(), 1);
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//======================================================================
Процедура глДобавитьИИ(ТекЭл, списТоварНЕ) Экспорт
	// найдём всех к-тов для этой схемы упаковки
	СписК = СоздатьОбъект("СписокЗначений");
	
	Если ТекЭл.Выбран() = 1 Тогда
		СпрК = СоздатьОбъект("Справочник.Контрагенты");
		СпрК.ВыбратьЭлементы();
		Пока СпрК.ПолучитьЭлемент() = 1 Цикл
			Если (СпрК.ЭтоГруппа() = 0) И (СпрК.ПометкаУдаления() = 0) Тогда
				Если СпрК.СхемаЭкспортаУпаковок = ТекЭл Тогда
					СписК.ДобавитьЗначение(СпрК.ТекущийЭлемент());
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
	СпрТМЦ.ВыбратьЭлементы(0);
	Пока СпрТМЦ.ПолучитьЭлемент() = 1 Цикл
		Если (СпрТМЦ.ЭтоГруппа() = 0) И (СпрТМЦ.ПометкаУдаления() = 0) Тогда
			Если СпрТМЦ.НеВыгружатьВЗаказник = 1 Тогда
				НеДобавлять = 0;
				СпрКК = СоздатьОбъект("Справочник.КонтрагентыПродукции");
				СпрКК.ИспользоватьВладельца(СпрТМЦ.ТекущийЭлемент());
				СпрКК.ВыбратьЭлементы();
				//КвоКК = 0;
				Пока СпрКК.ПолучитьЭлемент() = 1 Цикл					
					Если СпрКК.ПометкаУдаления() = 0 Тогда
						//КвоКК = 1;
						Если СпрКК.Контрагент.ЭтоГруппа() = 1 Тогда
							Для ИндК = 1 По СписК.РазмерСписка() Цикл
								ТекКонтр = СписК.ПолучитьЗначение(ИндК);
								Если ТекКонтр.ПринадлежитГруппе(СпрКК.Контрагент) = 1 Тогда
									НеДобавлять = 1;
									Прервать;									
								КонецЕсли;
							КонецЦикла;
						Иначе
							Если СписК.НайтиЗначение(СпрКК.Контрагент) <> 0 Тогда
								НеДобавлять = 1;
								Прервать;
							КонецЕсли;							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если (НеДобавлять = 0) Тогда //И (КвоКК <> 0) Тогда
					Если списТоварНЕ.Принадлежит(СпрТМЦ.ТекущийЭлемент()) = 0 Тогда
						списТоварНЕ.ДобавитьЗначение(СпрТМЦ.ТекущийЭлемент());
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ДобавитьИИ()

//======================================================================
Функция глОтобратьДоступныеЭлементы(Родитель) Экспорт
	Спис = СоздатьОбъект("СписокЗначений");
	Спис.ДобавитьЗначение(Родитель);
	Спр = СоздатьОбъект("Справочник." + Родитель.Вид());
	Спр.ИспользоватьРодителя(Родитель);
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если (Спр.Родитель = Родитель) И (глГруппыДоступаКонтрагенты.Принадлежит(Спр.ТекущийЭлемент()) = 1) Тогда
			Спис.ДобавитьЗначение(Спр.ТекущийЭлемент());
		КонецЕсли;
	КонецЦикла;
	
	Возврат Спис;
КонецФункции // гл

//======================================================================
Процедура глУстановитьНачальнуюГруппуПользователя(Конт, Спис) Экспорт
	Если глПользователь.НакладыватьФильтрыПриОткрытии = 1 Тогда
		Конт.ИерархическийСписок(1, 0);
		// найдём первую попавшуюся группы и войдём в неё
		Элт = Спис.ПолучитьЗначение(1);
		Конт.ИспользоватьРодителя(Элт);
	КонецЕсли;	
КонецПроцедуры // 

Процедура глВыполнитьДействияПередЗаписью(Конт) Экспорт
	Конт.СуммаЗаказа = Конт.Итог("СуммаСНДС");
	
	ИтогПечКг = 0;
	Конт.ЕстьСтикеровать = 0;
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1 Цикл
		глРассчитатьПересчетКво(Конт);
		//Если Конт.КвоШт > 0 Тогда
		//	Если (ПустоеЗначение(Конт.ВидУпаковки) = 1) ИЛИ (Конт.ВидУпаковки = НетУп)  Тогда
		//		ТекКг = Конт.Кво + 	Конт.КвоШт * Конт.ТМЦ.Вес;
		//	Иначе	
		//		РазрешенныйВидУпаковкиТМЦ =  глПолучитьРазрешенныйВидУпаковки(Конт.ТМЦ, Конт.ВидУпаковки);
		//		Если ПустоеЗначение(РазрешенныйВидУпаковкиТМЦ) <> 1 Тогда
		//			ТекКг = Конт.Кво + Конт.КвоШт * РазрешенныйВидУпаковкиТМЦ.ВесУпаковки * глПолучитьВычитатьВес(Контекст, ДатаДок);
		//		КонецЕсли;		
		//	КонецЕсли;
		//Иначе
		//	ТекКг = Конт.Кво;	
		//КонецЕсли;
		
		ИтогПечКг = ИтогПечКг + Конт.КвоПересчет;
		Если Конт.Стикеровать = Да Тогда
			Конт.ЕстьСтикеровать = 1;
		КонецЕсли;		
	КонецЦикла;
	
	Конт.ОбщийВесЗаказа = ИтогПечКг;	
	Конт.ДокументВзвешен = 1;	
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1 Цикл
		Если (Конт.СтрокаВзвешена = Нет) ИЛИ (ПустоеЗначение(Конт.СтрокаВзвешена) = 1) Тогда
			Конт.ДокументВзвешен = 0;
			Конт.ДатаВзвешен = Дата(0);
			Конт.ВремяВзвешен = "";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если (Конт.ДокументВзвешен = 1) И (Конт.ДатаВзвешен = Дата(0)) Тогда
		Конт.ДатаВзвешен = ТекущаяДата();
		Ч = 0; М = 0; С = 0;
		ТекущееВремя(Ч, М, С);
		Конт.ВремяВзвешен = Формат(Ч, "Ч(0)2") + ":" + Формат(М, "Ч(0)2") + ":" + Формат(С, "Ч(0)2");
	КонецЕсли;
	
	Если ПустоеЗначение(Конт.Маршрут) = 1 Тогда
		Спр = СоздатьОбъект("Справочник.Маршруты");
		Спр.НайтиПоКоду(0);
		Маршрут = Спр.ТекущийЭлемент();
	КонецЕсли;	
КонецПроцедуры

//======================================================================
Функция глЗаполнитьТЗАкций(ДатаЗаказа, СписокТМЦ) Экспорт
	ТЗАкций = СоздатьОбъект("ТаблицаЗначений");
	ТЗАкций.НоваяКолонка("ТМЦ", "Справочник.ТМЦ");
	ТЗАкций.НоваяКолонка("Родитель", "Справочник.ТМЦ");
	ТЗАкций.НоваяКолонка("СписДок", "СписокЗначений");
	ТЗАкций.НоваяКолонка("Кво", "Число", 15, 3);

	ДокАкц = СоздатьОбъект("Документ.УстановкаСкидокТМЦ");
	ДокАкц.УстановитьФильтр(1, 0);
	ДокАкц.ВыбратьДокументы(ДобавитьМесяц(ДатаЗаказа, -2));
	ТЗАкций.УдалитьСтроки();

	//выбираем акции, заполняем таблицу акций для ТМЦ	
	Пока ДокАкц.ПолучитьДокумент() = 1 Цикл
		Если ДокАкц.ДатаПо >= ДатаЗаказа Тогда 
			ДокАкц.ВыбратьСтроки();
			Пока ДокАкц.ПолучитьСтроку() = 1 Цикл
				Если СписокТМЦ.РазмерСписка() > 0 Тогда
					Если СписокТМЦ.Принадлежит(ДокАкц.ТМЦ) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// проверим дату акции, справним с периодом производства, если акция начинаеися раньше чем ТекущаяДата + период производства, учтём её также
					ПерПр = ДокАкц.ТМЦ.ПериодПроизводства;
					Если ДокАкц.ДатаДок <= ДатаЗаказа + ДокАкц.ТМЦ.ПериодПроизводства Тогда
						Стр = 0;
						Если ТЗАкций.НайтиЗначение(ДокАкц.ТМЦ, Стр, "ТМЦ") = 1 Тогда
							ТЗАкций.ПолучитьСтрокуПоНомеру(Стр);
						Иначе
							ТЗАкций.НоваяСтрока();
							ТЗАкций.ТМЦ = ДокАкц.ТМЦ;
							ТЗАкций.Родитель = ТЗАкций.ТМЦ.Родитель;
							ТЗАкций.СписДок = СоздатьОбъект("СписокЗначений");							
						КонецЕсли;
						ТЗАкций.Кво = ТЗАкций.Кво + ДокАкц.Кво;
						ТЗАкций.СписДок.ДобавитьЗначение(ДокАкц.ТекущийДокумент(), ?(ДокАкц.Кво <> 0, Строка(ДокАкц.Кво) + " - ", "") + СокрЛП(ДокАкц.КомментСтр) + " / " + Формат(ДокАкц.ДатаДок, "ДДДММГГ") + " по " + 
							Формат(ДокАкц.ДатаПо, "ДДДММГГ"));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ДокУЦ = СоздатьОбъект("Документ.УстановкаЦенТМЦ");
	ДокУЦ.УстановитьФильтр(1, 0);
	ДокУЦ.ВыбратьДокументы(ДобавитьМесяц(ДатаЗаказа, -2));
	Пока ДокУЦ.ПолучитьДокумент() = 1 Цикл
		Если (ПустоеЗначение(ДокУЦ.ДатаНачалаАкции) = 0) И (ДокУЦ.ДатаКонцаАкции >= ДатаЗаказа) Тогда
			ДокУЦ.ВыбратьСтроки();
			Пока ДокУЦ.ПолучитьСтроку() = 1 Цикл
				Если СписокТМЦ.РазмерСписка() > 0 Тогда
					Если СписокТМЦ.Принадлежит(ДокУЦ.ТМЦ) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// проверим дату акции, справним с периодом производства, если акция начинаеися раньше чем ТекущаяДата + период производства, учтём её также
					ПерПр = ДокУЦ.ТМЦ.ПериодПроизводства;
					Если ДокУЦ.ДатаНачалаАкции <= ДатаЗаказа + ДокУЦ.ТМЦ.ПериодПроизводства Тогда
						Стр = 0;
						Если ТЗАкций.НайтиЗначение(ДокУЦ.ТМЦ, Стр, "ТМЦ") = 1 Тогда
							ТЗАкций.ПолучитьСтрокуПоНомеру(Стр);
						Иначе
							ТЗАкций.НоваяСтрока();
							ТЗАкций.ТМЦ = ДокУЦ.ТМЦ;
							ТЗАкций.Родитель = ТЗАкций.ТМЦ.Родитель;
							ТЗАкций.СписДок = СоздатьОбъект("СписокЗначений");
						КонецЕсли;
						ТЗАкций.СписДок.ДобавитьЗначение(ДокУЦ.ТекущийДокумент(), СокрЛП(ДокУЦ.Примечание) + " / " + Формат(ДокУЦ.ДатаНачалаАкции, "ДДДММГГ") + " по " + 
							Формат(ДокУЦ.ДатаКонцаАкции, "ДДДММГГ"));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗАкций;
КонецФункции

Процедура глПроверитьАкции(ТЗАкций, ДокЗадание, ДатаЗадания, ВыдаватьПредупреждение = 1, ЗаписыватьДвойника = 1) Экспорт
	СписРодителейЗадания = СоздатьОбъект("СписокЗначений");
	ДокЗадание.ВыбратьСтроки();
	Пока ДокЗадание.ПолучитьСтроку() = 1 Цикл
		РодТМЦ = ДокЗадание.Продукция.Родитель;
		Если СписРодителейЗадания.НайтиЗначение(РодТМЦ) = 0 Тогда
			СписРодителейЗадания.ДобавитьЗначение(РодТМЦ);
		КонецЕсли;
		
		Если ЗаписыватьДвойника = 1 Тогда
			Если ПустоеЗначение(ДокЗадание.Продукция) <> 1 Тогда
				СпрДвойник = СоздатьОбъект("Справочник.УМК_ДвойникГруппыТМЦ");	
				Если СпрДвойник.НайтиПоКоду(РодТМЦ.Код,0) = 1 Тогда
					ДокЗадание.ДвойникГруппТМЦСтроки =  СпрДвойник.ТекущийЭлемент();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// нужно создать отдельную ТЗ по акциям по родителям. 
	// далее нам нужно будет вывести все акции, по родителям
	ТЗА = СоздатьОбъект("ТаблицаЗначений");
	ТЗА.НоваяКолонка("Родитель", "Справочник.ТМЦ");
	ТЗА.НоваяКолонка("СписДок", "СписокЗначений");
	
	ТЗАкций.ВыбратьСтроки();
	Пока ТЗАкций.ПолучитьСтроку() = 1 Цикл
		СписДокАкции = СоздатьОбъект("СписокЗначений");
		ПП = ТЗАкций.ТМЦ.ПериодПроизводства;
		
		Для Инд = 1 По ТЗАкций.СписДок.РазмерСписка() Цикл
			Представление = "";
			Зн = ТЗАкций.СписДок.ПолучитьЗначение(Инд, Представление);
			КрайняяДата = ДатаЗадания + ПП;
			Если Зн.Вид() = "УстановкаСкидокТМЦ" Тогда
				Если ((КрайняяДата - Зн.ДатаДок > 2) И (Зн.ДатаПо - КрайняяДата > 2))
					ИЛИ (Зн.ДатаДок > КрайняяДата) 
					ИЛИ (ЗН.ДатаПо < КрайняяДата) Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли Зн.Вид() = "УстановкаЦенТМЦ" Тогда
				Если (КрайняяДата - Зн.ДатаНачалаАкции > 2) И (Зн.ДатаКонцаАкции - КрайняяДата > 2) 
					ИЛИ (Зн.ДатаНачалаАкции > КрайняяДата) 
					ИЛИ (ЗН.ДатаКонцаАкции < КрайняяДата) Тогда						
					Продолжить;
				КонецЕсли;					
			КонецЕсли;
			
			СписДокАкции.ДобавитьЗначение(Зн, Представление);
		КонецЦикла;

		Если СписДокАкции.РазмерСписка() > 0 Тогда
			СтрАкц = 0;
			Если ТЗА.НайтиЗначение(ТЗАкций.Родитель, СтрАкц, "Родитель") = 0 Тогда
				ТЗА.НоваяСтрока();
				ТЗА.Родитель = ТЗАкций.Родитель;
				ТЗА.СписДок = СоздатьОбъект("СписокЗначений");
			Иначе
				ТЗА.ПолучитьСтрокуПоНомеру(СтрАкц);
			КонецЕсли;			
		
			Для ИндАкц = 1 По СписДокАкции.РазмерСписка() Цикл
				Представление = "";
				Зн = СписДокАкции.ПолучитьЗначение(ИндАкц, Представление);
				Если ТЗА.СписДок.НайтиЗначение(Зн) = 0 Тогда
					ТЗА.СписДок.ДобавитьЗначение(Зн, Представление);
				КонецЕсли;					
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Сообщение = "Обнаружены акции для видов продукции из групп задания (список продукции внизу): ";
	Текст = СоздатьОбъект("Текст");
	Для Инд = 1 По СписРодителейЗадания.РазмерСписка() Цикл
		Поз = 0;
		Род = СписРодителейЗадания.ПолучитьЗначение(Инд);
		Если ТЗА.НайтиЗначение(Род, Поз, "Родитель") = 1 Тогда
			Текст.ДобавитьСтроку("Группа: " + Строка(ТЗА.Родитель));
			ТЗА.ПолучитьСтрокуПоНомеру(Поз);
			Для ИндСпис = 1 По ТЗА.СписДок.РазмерСписка() Цикл
				Представление = "";
				Док = ТЗА.СписДок.ПолучитьЗначение(ИндСпис, Представление); 
				Текст.ДобавитьСтроку("  Документ: " + Представление + " (" + Строка(Док) + ")");
				Сообщение = Сообщение + ?(Сообщение = "", "", "
				|") + Представление;
				Док.ВыбратьСтроки();
				Пока Док.ПолучитьСтроку() = 1 Цикл
					Если Док.ТМЦ.ПринадлежитГруппе(ТЗА.Родитель) = 1 Тогда
						Текст.ДобавитьСтроку("    Продукция: " + Строка(Док.ТМЦ));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Сообщение <> "Обнаружены акции для видов продукции из групп задания (список продукции внизу): " Тогда
		Если ВыдаватьПредупреждение = 1 Тогда
			глПоказатьПредупреждение(Сообщение);
		Иначе
			Сообщить(Сообщение);
		КонецЕсли;
		
		Для Инд = 1 По Текст.КоличествоСтрок() Цикл
			Сообщить(Текст.ПолучитьСтроку(Инд));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура ПриЗаписиИстории(ТипОбъекта, Объект, Значение, ДатаИстории)
	Если ПустоеЗначение(Объект) = 0 Тогда
		Если (Объект.Вид() = "Контрагенты") И (ТипОбъекта = "Справочник.Контрагенты.ДатаЦ") Тогда
			Если (НазваниеНабораПрав() <> "Администратор") И (НазваниеНабораПрав() <> "АдминистраторМладший") И (НазваниеНабораПрав() <> "ПроизводствоКасса") Тогда  // права на ДатаЦ
				СтатусВозврата(0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // гл

//======================================================================
Процедура ПриУдаленииИстории(ТипОбъекта, Объект, Значение, ДатаИстории)
	Если ПустоеЗначение(Объект) = 0 Тогда
		Если (Объект.Вид() = "Контрагенты") И (ТипОбъекта = "Справочник.Контрагенты.ДатаЦ") Тогда
			Если (НазваниеНабораПрав() <> "Администратор") И (НазваниеНабораПрав() <> "АдминистраторМладший") И (НазваниеНабораПрав() <> "ПроизводствоКасса") Тогда  // права на ДатаЦ
				СтатусВозврата(0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // 

//======================================================================
Функция глВернутьВерхнегоРодителя(Элт) Экспорт
	Род = Элт.Родитель;
	Пока 1 = 1 Цикл
		Если ПустоеЗначение(Род.Родитель) = 1 Тогда
			Возврат Род;
		Иначе
			Род = Род.Родитель;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Род;
КонецФункции // ВернутьРодителяВУ(ВидУп)

Процедура ПлюсоватьРеквизит(СтрК, КСумма, Смещение)
	ДлинаСтр = СтрДлина(СтрК); 
	Для Инд = 1 По ДлинаСтр Цикл
		Символ = Сред(СтрК, Инд, 1);
		КодСимвола = КодСимв(Символ);
		КСумма = КСумма + (КодСимвола / 100000) * (Инд + Смещение);
	КонецЦикла;	
	Смещение = Смещение + ДлинаСтр;
	//Сообщить(Смещение);
КонецПроцедуры

Функция РассчитатьКРК(ОбъектС) Экспорт
	Если ТипЗначенияСтр(ОбъектС) = "Строка" Тогда
		Объект = ЗначениеИзСтрокиВнутр(ОбъектС);
	Иначе
		Объект = ОбъектС;
	КонецЕсли;
	
	КСумма = 0;
	СтрК = "";
	Смещение = 0;
	Если ТипЗначенияСтр(Объект) = "Справочник" Тогда
		//СтрК = Строка(Объект.Код);
		//ПлюсоватьРеквизит(СтрК, КСумма, Смещение);
		СтрК = Объект.Наименование;
		ПлюсоватьРеквизит(СтрК, КСумма, Смещение);
		СтрК = Объект.ПолныйКод();
		ПлюсоватьРеквизит(СтрК, КСумма, Смещение);
		СтрК = Объект.ПометкаУдаления();
		ПлюсоватьРеквизит(СтрК, КСумма, Смещение);
		Для Инд = 1 По Метаданные.Справочник(Объект.Вид()).Реквизит() Цикл
			ИмяРекв = Метаданные.Справочник(Объект.Вид()).Реквизит(Инд).Идентификатор;
			СтрК = ИмяРекв + ":" + ЗначениеВСтрокуВнутр(Объект.ПолучитьАтрибут(ИмяРекв));
			ПлюсоватьРеквизит(СтрК, КСумма, Смещение);
		КонецЦикла;		
	Иначе
		СтрК = Строка(Объект.ДатаДок);
		ПлюсоватьРеквизит(СтрК, КСумма, Смещение);
		СтрК = Объект.НомерДок;
		ПлюсоватьРеквизит(СтрК, КСумма, Смещение); 
		СтрК = Объект.ПометкаУдаления();
		ПлюсоватьРеквизит(СтрК, КСумма, Смещение);
		СтрК = Объект.Проведен();
		ПлюсоватьРеквизит(СтрК, КСумма, Смещение);
			
		Для Инд = 1 По Метаданные.Документ(Объект.Вид()).РеквизитШапки() Цикл
			ИмяРекв = Метаданные.Документ(Объект.Вид()).РеквизитШапки(Инд).Идентификатор;
			СтрК = ИмяРекв + ":" + ЗначениеВСтрокуВнутр(Объект.ПолучитьАтрибут(ИмяРекв));
			ПлюсоватьРеквизит(СтрК, КСумма, Смещение);
		КонецЦикла;
		Для Инд = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
			ИмяРекв = Метаданные.ОбщийРеквизитДокумента(Инд).Идентификатор;
			СтрК = ИмяРекв + ":" + ЗначениеВСтрокуВнутр(Объект.ПолучитьАтрибут(ИмяРекв));
			ПлюсоватьРеквизит(СтрК, КСумма, Смещение);
		КонецЦикла;
		
		СРекв = СоздатьОбъект("СписокЗначений");
		Для Инд = 1 По Метаданные.Документ(Объект.Вид()).РеквизитТабличнойЧасти() Цикл
			СРекв.ДобавитьЗначение(Метаданные.Документ(Объект.Вид()).РеквизитТабличнойЧасти(Инд).Идентификатор);
		КонецЦикла;
		
		Объект.ВыбратьСтроки();		
		Пока Объект.ПолучитьСтроку() = 1 Цикл
			Для Инд = 1 По СРекв.РазмерСписка() Цикл
				СтрК = ИмяРекв + ":" + Строка(Объект.НомерСтроки) + ":" + ЗначениеВСтрокуВнутр(Объект.ПолучитьАтрибут(СРекв.ПолучитьЗначение(Инд)));
				ПлюсоватьРеквизит(СтрК, КСумма, Смещение);
			КонецЦикла;			
		КонецЦикла;
	КонецЕсли;
	
	Возврат КСумма;
КонецФункции

//======================================================================
Функция глПолучитьКодыИзСпецификации(Контрагент, ДатаДок, КвоСимв = 5) Экспорт
	Спец = СоздатьОбъект("ТаблицаЗначений");
	
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		ДокСпец = Контрагент.Спецификация.Получить(ДатаДок);
		Если ПустоеЗначение(ДокСпец) = 0 Тогда
			Если ДокСпец.Проведен() = 1 Тогда
				ДокСпец.ВыгрузитьТабличнуюЧасть(Спец);
				Спец.НоваяКолонка("ТМЦУпаковка");
				Спец.ВыбратьСтроки();
				Пока Спец.ПолучитьСтроку() = 1 Цикл
					Спец.ТМЦУпаковка = ЗначениеВСтрокуВнутр(Спец.ТМЦ) + "//" + ЗначениеВСтрокуВнутр(?(Спец.ВидУпаковки = НетУп, ПолучитьПустоеЗначение("Справочник.ВидыУпаковки"), Спец.ВидУпаковки));
					Если КвоСимв <> 0 Тогда
						Спец.КодДляШК = Прав(СокрЛП(Спец.КодДляШК), 5);
					КонецЕсли;					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат  Спец;	
КонецФункции

//возвращает сумму долга контрагента из таблицы долгов, 
//либо уменшаетзначение значение на сумму погашения долга.
// + umk
Функция глДолгКонтрагента_тбДолги(Контрагент, тбДолги, СуммаКПогашению = 0, Установить = 0) Экспорт
	
	Перем НС;
	
	Долг = 0;
	НайденыСтроки = 0; 
	
	Если  тбДолги.КоличествоКолонок() = 9  Тогда //свернем строки по Контрагенту 
		
		тбДолги.ВыбратьСтроки();

		текСтр=1;
		
		Пока ТекСтр <= тбДолги.КоличествоСтрок() Цикл
			тбДолги.ПолучитьСтрокуПоНомеру(ТекСтр);
			Если тбДолги.Контрагент = Контрагент Тогда
				НайденыСтроки = 1;
				Долг = тбДолги.Долг + Долг;	
				тбДолги.УдалитьСтроку(ТекСтр);
			Иначе
				ТекСтр = ТекСтр + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденыСтроки = 1 Тогда
			тбДолги.НоваяСтрока();
			тбДолги.Контрагент = Контрагент;
			тбДолги.Долг= Долг;
			тбДолги.ДолгОсн = Долг;
			ТбДолги.НоваяКолонка("ИтоговаяКолонка");
		КонецЕсли;
		
	КонецЕсли;
	// конец свернем строки
	
	
	Если тбДолги.НайтиЗначение(Контрагент,НС,"Контрагент") = 1 Тогда
		тбДолги.ПолучитьСтрокуПоНомеру(НС);
		Долг = тбДолги.Долг;
		Если Установить =  1 Тогда 
			тбДолги.ПолучитьСтрокуПоНомеру(НС);
			Долг = Долг - СуммаКПогашению;
			тбДолги.УстановитьЗначение(НС,"Долг", Долг);
			тбДолги.УстановитьЗначение(НС,"ДолгОсн", Долг);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Долг;
	
КонецФункции

Процедура глИзмДатаУКШ(Конт, ИмяРекв = "ТМЦ") Экспорт
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1 Цикл
		Конт.ДатаУК = глПолучитьДатуИзУК(?(ПустоеЗначение(Конт.ДатаУКШ) = 1, Конт.ДатаДок, Конт.ДатаУКШ), Конт.ПолучитьАтрибут(ИмяРекв))
	КонецЦикла;	
КонецПроцедуры   

//============Загрузка_заказа_клиента_из_УНФ============================
//+umk 

Процедура глЗагрузитьПризнакЗаказаПечать_из_V83(V8,Дата1,Дата2) Экспорт 
	
	Выборка = V8.ЗаказКлиентаПризнакПечать(Дата1, Дата2);
	
	НачатьТранзакцию();	
	
	Пока Выборка.Следующий() = -1 Цикл  
		
		Распечатан = ?(Выборка.Распечатан = -1, 1,0);   
		
		Если Выборка.Дата >='03.08.2021' Тогда
			НомерЗаказа77 = Выборка.Номер;
		Иначе
			НомерЗаказа77 = Лев(Выборка.Номер,4) + Прав(Выборка.Номер,6);  
		КонецЕсли;
		
		//НомерЗаказа77 = Лев(Выборка.Номер,4) + Прав(Выборка.Номер,6);  
		
		Если Распечатан = 0 Тогда
			Продолжить
		КонецЕсли;
		
		Заказ77 = CreateObject("Документ.УМК_ЗаказКлиента");
		Заказ77.НайтиПоНомеру(НомерЗаказа77, Выборка.Дата);
		
		Если  Заказ77.Выбран()= 1 Тогда
			Если Заказ77.Распечатана = 1 Тогда
				Продолжить
			КонецЕсли;
			Заказ77.Распечатана = Распечатан;
			Заказ77.Записать();	
		КонецЕсли; 
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры // глЗагрузитьПризнакЗаказаПечать_из_V83

// авто - загрузка ч/з обработку ожидания
Процедура глЗагрузитьЗаказИз_v_83(V8,Дата1,Дата2, авто = 0) Экспорт 
	
	фПодключились = 0;    
	Дата1 = ?(ПустоеЗначение(Дата1)=1,ТекущаяДата(),Дата1); 
	Дата2 = ?(ПустоеЗначение(Дата2)=1,ТекущаяДата(),Дата2);
	ПутьКБазе = Константа.Путь_к_УНФ; 
	Склад = "";
	НетУп =  "";
	
	СпрТМЦ      = СоздатьОбъект("Справочник.ТМЦ");
	Фирмы       = СоздатьОбъект("Справочник.Фирмы");
	Контрагенты   = СоздатьОбъект("Справочник.Контрагенты");
	ШкалаСтавок   = СоздатьОбъект("Справочник.ШкалаСтавок");
	ВидыУпаковки  = СоздатьОбъект("Справочник.ВидыУпаковки"); 
	МестаХранения = СоздатьОбъект("Справочник.МестаХранения");
	Единицы       = СоздатьОбъект("Справочник.Единицы"); 
	ВидыЗатрат    = СоздатьОбъект("Справочник.ВидыЗатрат");
	
	Если МестаХранения.НайтиПоКоду(1) = 1 Тогда 
		Склад = МестаХранения.ТекущийЭлемент();
	КонецЕсли;
	
	Если  ВидыУпаковки.НайтиПоКоду(0) = 1 Тогда
		НетУп  = ВидыУпаковки.ТекущийЭлемент();
	КонецЕсли;
	
	//Если ВвестиПериод(Дата1, Дата2, "Введите период для документов") <> 1 Тогда
	//	Возврат ;
	//Иначе  
	Если V8 = "" Тогда    
		Сообщить("Подключение к базе 1с8.3" + РазделительСтрок + "Ожидайте.");
		V8 = глПодключитьComV8(фПодключились, ПутьКБазе);
		Если фПодключились = 0 Тогда
			Сообщить("Не удалось подключить базу 1с8.3");
			Возврат
		КонецЕсли; 
	КонецЕсли; 
	
	Сообщить("Загрузка...");
	
	ВыборкаПоШапке = V8.ЗаказКлиентаШапка(Дата1, Дата2);
	
	//НачатьТранзакцию();	
	
	Пока ВыборкаПоШапке.Следующий() = -1 Цикл  
			
		ПометкаУдаления_v8 = ?(ВыборкаПоШапке.ПометкаУдаления = -1, 1,0); 
		Проведен_v8 = ?(ВыборкаПоШапке.Проведен = -1, 1,0);  
		
		ОтличияВЗаписиДокумента = 0;
		                    
		//По шапке документа  
		
		Если ВыборкаПоШапке.Дата >='03.08.2021' Тогда
			НомерЗаказа77 = ВыборкаПоШапке.Номер;
		Иначе
			НомерЗаказа77 = Лев(ВыборкаПоШапке.Номер,4) + Прав(ВыборкаПоШапке.Номер,6); 
		КонецЕсли;
		
        Контр_Код77 = ВыборкаПоШапке.КонтрагентКод;   
		СкладКод83 = ВыборкаПоШапке.КодСтрЕдиницы;
		ВидЗатрат_код = ВыборкаПоШапке.ЗатратаКод;
		
		Попытка
			СкладКод77 = Число(Прав(СкладКод83,6));
		Исключение
			СкладКод77 = 1;
		КонецПопытки;
		
		Если МестаХранения.НайтиПоКоду(СкладКод77) = 1 Тогда 
			Склад = МестаХранения.ТекущийЭлемент();
		КонецЕсли;
			
		ПримечаниеСтроки = ""; 
		
		Заказ77 = CreateObject("Документ.УМК_ЗаказКлиента");
		Заказ77.НайтиПоНомеру(НомерЗаказа77, ВыборкаПоШапке.Дата);
		
		Если  Заказ77.Выбран()= 1 Тогда   
			    
			///временно убираем-------------------------
			////нашли но пометки проведен отличаются
			//Если Проведен_v8 <> Заказ77.Проведен() Тогда
			//	
			//	Если Проведен_v8 = 1 Тогда 
			//		Если Заказ77.ПометкаУдаления() = 1 Тогда
			//			Заказ77.СнятьПометкуУдаления();//уберем пометку	
			//		КонецЕсли;
			//		Заказ77.Провести();
			//	Иначе
			//		Заказ77.СделатьНепроведенным();
			//	КонецЕсли; 
			//	
			//	ОтличияВЗаписиДокумента = 1;
			//	
			//КонецЕсли;
			//	
			////нашли но пометки удаления отличаются
			//Если ПометкаУдаления_v8 <> Заказ77.ПометкаУдаления() Тогда
			//	Если ПометкаУдаления_v8 = 1 Тогда 
			//		Заказ77.Удалить(0);
			//	Иначе         
			//		Заказ77.СнятьПометкуУдаления();
			//	КонецЕсли;
			//	ОтличияВЗаписиДокумента = 1;
			//КонецЕсли; 
			//
			//Если ОтличияВЗаписиДокумента = 1 Тогда
			//	Продолжить //изменили режим записи
			//КонецЕсли;
			//
			
			Если авто = 0 Тогда
				Сообщить("Заказ №" +(НомерЗаказа77) + " от " + Строка(ВыборкаПоШапке.Дата) + " был загружен ранее." ); 
			КонецЕсли;
			
			Продолжить; //Документ не изменен			
		КонецЕсли; // Если документ найден    
		
             
	    Заказ83 = ВыборкаПоШапке.Ссылка;
		                
		НачатьТранзакцию();	
	
		Заказ77.Новый();
		Заказ77.НомерДок    = НомерЗаказа77;   
		Заказ77.ДатаДок     = ВыборкаПоШапке.Дата;
		Заказ77.Фирма       = Константа.БазФирма;
		Заказ77.Ф1          = ?(ВыборкаПоШапке.ф1 = -1,1,0); 
		Заказ77.Распечатана = ?(ВыборкаПоШапке.Распечатан = -1,1,0); 
	    Заказ77.СтикероватьШ = ВыборкаПоШапке.СтикероватьШ; 	
		Заказ77.ДатаВх      = ВыборкаПоШапке.ДатаВх;
		Заказ77.ДатаНа      = ВыборкаПоШапке.ДатаНа;
		Заказ77.НомерЗаказа = ВыборкаПоШапке.НомерЗаказа;
		
		
		Попытка
			Контр_Код77 = Число(Прав(Контр_Код77,4));
		Исключение
			Контр_Код77 ="";
		КонецПопытки;   
		
		Если  Контрагенты.НайтиПоКоду(Контр_Код77) = 1 Тогда
			Заказ77.Контрагент = Контрагенты.ТекущийЭлемент();
		КонецЕсли; 
		
		//при изменении контрагента
		Если ПустоеЗначение(Заказ77.Контрагент) = 0 Тогда
			
			Если ПустоеЗначение(Заказ77.Контрагент.КатегорияЦен.Получить(Заказ77.ДатаДок)) = 0 Тогда
				Заказ77.КатегорияЦен = Заказ77.Контрагент.КатегорияЦен.Получить(Заказ77.ДатаДок);
			Иначе	
				Заказ77.КатегорияЦен = глВосстановитьЗначение(,"ОсновнаяКатегорияЦен");
			КонецЕсли;      						
			
			Заказ77.Регион = Заказ77.Контрагент.Регион;		
			Заказ77.ДатаЦ = Заказ77.Контрагент.ДатаЦ.Получить(Заказ77.ДатаДок);
			Если ПустоеЗначение(Заказ77.ДатаЦ) = 1 Тогда
				Заказ77.ДатаЦ = Заказ77.ДатаДок;
			КонецЕсли;		
		КонецЕсли;   
		//конец при изменении контрагента 
		
		Если ПустоеЗначение(Заказ77.ДатаЦ) = 1 Тогда
			Заказ77.ДатаЦ = ВыборкаПоШапке.ДатаЦен;
		КонецЕсли;
		//Заказ77.ДатаЦ           = ВыборкаПоШапке.ДатаЦен;//??
		
		
		Если  ШкалаСтавок.НайтиПоКоду("НДС20") = 1 Тогда
			Заказ77.ВидНДС = ШкалаСтавок.ТекущийЭлемент();
		КонецЕсли;
		       
		Заказ77.ДатаExcel       = ВыборкаПоШапке.ДатаExcel; 
		Заказ77.ВремяExcel      = ВыборкаПоШапке.ВремяExcel;
		Заказ77.ТорговыйExcel   = ВыборкаПоШапке.ТорговыйExcel;
		Заказ77.ФормаExcel      = ВыборкаПоШапке.ФормаExcel;
		Заказ77.КлиентExcel     = ВыборкаПоШапке.КлиентExcel;
		Заказ77.ПримечаниеExcel = ВыборкаПоШапке.ПримечаниеExcel;
		Заказ77.ДатаСоздания    = ВыборкаПоШапке.ДатаСоздания;
		Заказ77.ВремяЗаказа     = ВыборкаПоШапке.ВремяЗаказа;
		Заказ77.ПолученИзExcel  = ВыборкаПоШапке.ПолученИзExcel;
		Заказ77.ВесЗаказаExcel  = ВыборкаПоШапке.ВесЗаказаExcel;
		Заказ77.МестоХранения   = Склад;
		Заказ77.Примечание      = "#1с8#" + ВыборкаПоШапке.Комментарий;  
		
		//Маршрут, договор   
		КодМаршрута = Строка(Число(ВыборкаПоШапке.КодМаршрута));
		Маршруты = СоздатьОбъект("Справочник.Маршруты");
        Маршруты.НайтиПоКоду(КодМаршрута);
		Заказ77.Маршрут = Маршруты.ТекущийЭлемент(); 
		
		Договор = СоздатьОбъект("Документ.Договор");
		Если Договор.НайтиПоНомеру(ВыборкаПоШапке.НомерДоговора77,ВыборкаПоШапке.ДатаДоговора77) = 1 Тогда
			Заказ77.Договор = Договор.ТекущийДокумент();
		КонецЕсли;  
		
		//Затрата
		Если ВидыЗатрат.НайтиПоКоду(ВидЗатрат_код) = 1 Тогда
			Заказ77.ВидЗатрат = ВидыЗатрат.ТекущийЭлемент();
		КонецЕсли;
		
				
		//По строкам  документа    
		ВыборкаПоСтрокам = V8.ЗаказКлиентаСтроки(ВыборкаПоШапке.Ссылка);
		
		Пока ВыборкаПоСтрокам.Следующий() = -1 Цикл
			
			Заказ77.НоваяСтрока();
			
			Номенклатура_Код           = Прав(ВыборкаПоСтрокам.НоменклатураКод,5); 
			НоменклатураНабора_Код	   = Прав(ВыборкаПоСтрокам.НоменклатураНабораКод,5);
			Характеристика_Наимен      = ВыборкаПоСтрокам.Характеристика.Наименование;
			Характеристика_ВидУпаковки = ВыборкаПоСтрокам.Характеристика.umk_ВидУпаковки; 
			Характеристика_ВидУпаковки_Код = Характеристика_ВидУпаковки.Код; 
			
			Если Характеристика_ВидУпаковки_Код <> "" Тогда
				Попытка 
					Характеристика_ВидУпаковки_Код = Число(Характеристика_ВидУпаковки_Код);
				Исключение
					Характеристика_ВидУпаковки_Код = "";
				КонецПопытки
			КонецЕсли;
			
			Ед_Наимен =ВыборкаПоСтрокам.ЕдиницаИзмерения.Наименование;
			Ед_Наимен = СокрЛП(Ед_Наимен)+".";
			
			Если СпрТМЦ.НайтиПоКоду(Номенклатура_Код) = 1  Тогда
				Заказ77.ТМЦ = СпрТМЦ.ТекущийЭлемент();
			КонецЕсли; 
			
			Если НоменклатураНабора_Код <> "" Тогда
				Если СпрТМЦ.НайтиПоКоду(НоменклатураНабора_Код) = 1  Тогда
					Заказ77.Набор = СпрТМЦ.ТекущийЭлемент();
				КонецЕсли; 
			КонецЕсли;
			
			Если Характеристика_ВидУпаковки_Код <> "" Тогда
				
				Если ВидыУпаковки.НайтиПоКоду(Характеристика_ВидУпаковки_Код) = 1 Тогда
					Заказ77.ВидУпаковки = ВидыУпаковки.ТекущийЭлемент();  
				Иначе
					Сообщить(Характеристика_Наимен + ". Не найдена упаковка в заказе " + Строка(Заказ77.НомерЗаказа));
					ПримечаниеСтроки = Характеристика_Наимен + ". Не найдена.";
				КонецЕсли;;
			Иначе
				Заказ77.ВидУпаковки = НетУп;
			КонецЕсли;
			
			Заказ77.Коэффициент = 1;
			
			Если Ед_Наимен <>"" Тогда  
				
				Единицы.ИспользоватьВладельца(Заказ77.ТМЦ);
				Единицы.ВыбратьЭлементы();
				
				Пока Единицы.ПолучитьЭлемент() = 1 Цикл
					Если Единицы.Наименование = Ед_Наимен Тогда  
						Заказ77.Ед =  Единицы.ТекущийЭлемент();
					КонецЕсли;		
				КонецЦикла;	
			КонецЕсли;
			Заказ77.Кво = ВыборкаПоСтрокам.Колво; 
			Заказ77.КвоНаборов = ВыборкаПоСтрокам.ДоляСтоимости;	
			Заказ77.ПримечаниеСтроки = ПримечаниеСтроки + ВыборкаПоСтрокам.ПримечаниеСтроки;
			Заказ77.КвоШт = ВыборкаПоСтрокам.КвоШт; 
			Заказ77.Стикеровать = ?(ВыборкаПоСтрокам.Стикеровать = -1, Перечисление.ДаНет.Да,Перечисление.ДаНет.Нет);
			Заказ77.ДатаУК = глПолучитьДатуИзУК(Заказ77.ДатаДок, Заказ77.ТМЦ);
		    //+EDIN
			Заказ77.ШКEDI = ВыборкаПоСтрокам.ШКEDI; 
			Заказ77.ККEDI = ВыборкаПоСтрокам.ККEDI;
			Заказ77.АртикулEDI = ВыборкаПоСтрокам.АртикулEDI;
			//-EDIN
			глРассчитатьПересчетКво(Заказ77);
			глПриИзмененииТовара(Заказ77, 1);
		КонецЦикла;//По строкам    
		
		глВыполнитьДействияПередЗаписью(Заказ77);
		Если ПустоеЗначение(Заказ77.ВремяЗаказа) = 0 Тогда
			Попытка
				Заказ77.АвтоВремяОтключить();
				Заказ77.УстановитьВремя(Число(Заказ77.ВремяЗаказа),0,0);
			Исключение КонецПопытки;
		КонецЕсли;
		
		//автор
		Если ПустоеЗначение(ВыборкаПоШапке.Автор) = 0 Тогда
			Пользователи = СоздатьОбъект("Справочник.Пользователи");
			Если  Пользователи.НайтиПоНаименованию(ВыборкаПоШапке.Автор) = 1 
			Тогда
				Заказ77.Автор = Пользователи.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;

		Попытка		
			Заказ77.Записать();  
			ЗафиксироватьТранзакцию(); 	
		Исключение  
			ОтменитьТранзакцию();
			Сообщить("Заказ №" +(НомерЗаказа77) + " от " + Строка(ВыборкаПоШапке.Дата) + ". Ошибка загрузки. Документ не записан в базу 1с7.7." );
			Продолжить;
		КонецПопытки;
		
		Попытка
			Заказ77.Провести();
		Исключение
	    КонецПопытки;
	
		
		 V8.УстановитьФлагВыгружен(Заказ83);
		
		//Заказ77.Записать();
		
		//V8.УстановитьФлагВыгружен(Заказ83);
		
		  
		//---------------временно убираем
		//Если ПометкаУдаления_v8 = 1 Тогда 
		//	Заказ77.Удалить(0);
		//КонецЕсли;
		//                                                 8 = 1 Тогда
		//Попытка
		//	Заказ77.Провести();
		//Исключение
	    //КонецПопытки;
		//Если Проведен_v
		//КонецЕсли;
		//
		
		Сообщить("Загружен заказ " + Строка(Заказ77.НомерДок) + " от " + Строка(Заказ77.ДатаДок));
		
		
	КонецЦикла;//По документам 
	
	//ЗафиксироватьТранзакцию(); 
	
	глЗагрузитьПризнакЗаказаПечать_из_V83(V8,Дата1,Дата2);
	
	Сообщить("Загрузка окончена.");
КонецПроцедуры //глЗагрузитьЗаказИз_v_83

//Возвращает основного партнера группировки контрагентов
//
Функция глОсновнойКонтрагентИерархии(Родитель, ТекущийКонтрагент, Создавать = 1) Экспорт

	Перем Запрос, ТекстЗапроса;
	
	ОсновнойПартнер = "";
	
	Если (ПустоеЗначение(Родитель) = 1) ИЛИ (Родитель.СоздаватьПартнера = 0) Тогда
		Возврат ОсновнойПартнер;
	КонецЕсли;
	
	Если ПустоеЗначение(ТекущийКонтрагент) = 0 Тогда
		Если ПустоеЗначение(ТекущийКонтрагент.ОсновнойПартнер) = 0 Тогда
			Возврат ТекущийКонтрагент.ОсновнойПартнер;	
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийКонтрагент.ЭтоОсновнойПартнер = 1 Тогда
		Возврат  ТекущийКонтрагент;
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Обрабатывать все;
	|ТекущийЭлемент = Справочник.Контрагенты.ТекущийЭлемент;
	|Условие(ТекущийЭлемент.Родитель = Родитель);
	|Условие(ТекущийЭлемент.ЭтоОсновнойПартнер = 1);
	|Условие(ТекущийЭлемент <> ТекущийКонтрагент);
	|"//}}ЗАПРОС
	;
	Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
		ОсновнойПартнер = Запрос.ТекущийЭлемент;
	КонецЕсли;
	
	Если (Создавать = 1) И (Родитель.СоздаватьПартнера = 1) И (ПустоеЗначение(ОсновнойПартнер) = 1) Тогда
		СправочникПартнер = СоздатьОбъект("Справочник.Контрагенты");
		СправочникПартнер.Новый();
		СправочникПартнер.Родитель = Родитель;
		СправочникПартнер.Наименование = Родитель.Наименование + " (Основной партнер)";
		СправочникПартнер.ПолнНаименование = СправочникПартнер.Наименование;
		СправочникПартнер.ВидКонтрагента = Перечисление.ВидыКонтрагентов.Организация;
		СправочникПартнер.ВалютаКредита = Гривня;
		СправочникПартнер.ВалютаКредитаПоставщика = Гривня;
		СправочникПартнер.ГлубинаВКалендарныхДнях = Константа.БазГлубинаКредитаВКалендарныхДнях;
		СправочникПартнер.ГлубинаКредитаПоставщикаВКалендарныхДнях = Константа.БазГлубинаКредитаВКалендарныхДнях;
		СправочникПартнер.ЭтоОсновнойПартнер = 1;
		СправочникПартнер.Записать();
		ОсновнойПартнер = СправочникПартнер.ТекущийЭлемент();
		Сообщить("Создан новый элемент - партнер "  + СправочникПартнер.Наименование);
	КонецЕсли;

	Возврат ОсновнойПартнер;

КонецФункции

//Функция возвращает стоимость ед. номенклатуры по регистру Партии для движений Текущего документа
//
Функция глСебестоимостьРеализованойПартииТовара(Номенклатура, ТекущийДокумент) Экспорт
	
	СтоимостьЕд = 0;
	Стоимость = 0;
	Количество = 0;
	
	
	Рег = СоздатьОбъект("Регистр.Партии");
	Рег.ВыбратьДвиженияДокумента(ТекущийДокумент);

	
	Пока Рег.ПолучитьДвижение() =1 Цикл
		Если (Рег.Приход = 0) И (Рег.ТМЦ = Номенклатура) Тогда
			Стоимость = Стоимость + Рег.Стоимость;
			Количество =Количество + Рег.ОстатокТовара;
		КонецЕсли;
	КонецЦикла;
	
	Если Количество <> 0 Тогда
		СтоимостьЕд = Стоимость / Количество;
	КонецЕсли;
	
	Возврат СтоимостьЕд;
	
КонецФункции

Функция глПроизводственныеЗатратыПоДокументу(Номенклатура, ТекущийДокумент, Расход = 1) Экспорт
	Перем ТЗ;
	ПЗ_Затраты = 0;
	
	Если ПустоеЗначение(ТекущийДокумент) = 1 Тогда
		Возврат ПЗ_Затраты
	КонецЕсли;
	
	Если глПрямыеЗапросы = 1 Тогда
		Период = ТекущийДокумент.ДатаДок;
		рс = СоздатьОбъект("ODBCRecordset");
		ТекстЗапроса = "SELECT RIGHT(ПроизводственныеЗатратыОбороты.ПозицияДокумента,9)  [Док $Документ]
		|, ПроизводственныеЗатратыОбороты.ВидДокумента as Док_вид
		|, ПроизводственныеЗатратыОбороты.Продукция [Продукция $Справочник.ТМЦ]
		|, Sum(ПроизводственныеЗатратыОбороты.СуммаРасход) СуммаСуммаРасход
		|, Sum(ПроизводственныеЗатратыОбороты.СуммаПриход) СуммаСуммаПриход
		|FROM $РегистрОбороты.ПроизводственныеЗатраты(:НачДата,
		|		:КонДата,
		|		Документ,,
		|		(Продукция IN (:Номенклатура)),
		|		Продукция,
		|		(Сумма)) AS ПроизводственныеЗатратыОбороты
		| WHERE  RIGHT(ПроизводственныеЗатратыОбороты.ПозицияДокумента,9)  = :Документ
		|GROUP BY ПроизводственныеЗатратыОбороты.Продукция
		|	, ПроизводственныеЗатратыОбороты.ПозицияДокумента
		|	, ПроизводственныеЗатратыОбороты.ВидДокумента";
		рс.УстановитьТекстовыйПараметр("НачДата", Период);
		рс.УстановитьТекстовыйПараметр("КонДата", Период+1);
		рс.УстановитьТекстовыйПараметр("Номенклатура", Номенклатура);
		рс.УстановитьТекстовыйПараметр("Документ", ТекущийДокумент);
		Результат = рс.ВыполнитьИнструкцию(ТекстЗапроса);
		ПЗ_Затраты = ?(Расход = 1,Результат.Итог("СуммаСуммаРасход"),Результат.Итог("СуммаСуммаПриход"));
	Иначе 
		РегистрЗатраты = СоздатьОбъект("Регистр.ПроизводственныеЗатраты");
		РегистрЗатраты.ВыбратьДвиженияДокумента(ТекущийДокумент);	
		Пока  РегистрЗатраты.ПолучитьДвижение() = 1 Цикл
			Если РегистрЗатраты.Продукция = Номенклатура Тогда
				ПЗ_Затраты = ПЗ_Затраты + РегистрЗатраты.Сумма;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; // по прямые запросы.
	

	Возврат ПЗ_Затраты;
	
КонецФункции

//==============================================Внешнее соединение===================================

//Функция используется при создании com-объектов
Function StringToDate(str) Export
	Return Date(str);
EndFunction

//Функция используется при создании com-объектов
Function ExcQuery(Query, TextQuery, Cont) Export
	Return Query.Execute(TextQuery)
EndFunction

//Функция используется при создании com-объектов
Function GetTableValueFromQuery(Query,tabeleValue) Export
	Return Query.Unload(tabeleValue,,0)
EndFunction

//Функция возвращает список значений gui объектов базы поставщика загруженных
//в текущую базу
Function GetDocumentsList(id_session) Export
	Перем ТЗ; //:ТаблицаЗначений
	
	Результат = "";
	
	рс = СоздатьОбъект("ODBCRecordset");
	ТекстЗапроса = 
	"SELECT $ОбъектыИнформационныхБаз.ИДПоставщика ИДПоставщика
	|FROM $Справочник.ОбъектыИнформационныхБаз AS ОбъектыИнформационныхБаз
	|WHERE (ОбъектыИнформационныхБаз.ISMARK = 0)
	|	AND ($ОбъектыИнформационныхБаз.ИДСессии = :id_session)
	|";
	рс.УстановитьТекстовыйПараметр("id_session", id_session);
	ТЗ = рс.ВыполнитьИнструкцию(ТекстЗапроса);
	ТЗ.ВыбратьСтроки();
	
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		Результат = Результат + СокрЛП(ТЗ.ИДПоставщика) + ";";
	КонецЦикла;
	
	Возврат Результат;
	
EndFunction
//==============================================Конец Внешнее соединение===================================

//==============================================Работа со скриптами =======================================

Function run_script(script_txt, file_name) Export
	
	wshshell= CreateObject("WScript.shell");
	script_file = КаталогВременныхФайлов() + "\" + file_name + ".bat";
	
	txt = СоздатьОбъект("Текст");
	txt.ДобавитьСтроку(script_txt);
	txt.Записать(script_file);
	
	Возврат wshshell.run(script_file);

EndFunction

//==============================================Конец работа со скриптами==================================


//-umk

Процедура глПроверитьДокументСкидки(ТекДок) Экспорт
    // проверим не участвует ли этот контрагент в другой установке скидок
	СписП = СоздатьОбъект("СписокЗначений");
	ТекДок.ВыбратьСтроки();
	Пока ТекДок.ПолучитьСтроку() = 1 Цикл
		Если СписП.НайтиЗначение(ТекДок.Контрагент) = 0 Тогда
			СписП.ДобавитьЗначение(ТекДок.Контрагент);
		КонецЕсли;
	КонецЦикла;
	СписСообщений = СоздатьОбъект("СписокЗначений");
	
	ДокПС = СоздатьОбъект("Документ.ПолучателиСкидки");
	ДокПС.УстановитьФильтр(1, 0);
	ДокПС.ВыбратьДокументы();
	УстановкаСкидокТМЦ = ТекДок.УстановкаСкидокТМЦ;
	ДатаНачалаСкидок = УстановкаСкидокТМЦ.ДатаДок;
	ДатаКонцаСкидок = ?(ПустоеЗначение(ТекДок.УстановкаСкидокТМЦ.ДатаПо) = 1, '01.01.2100', УстановкаСкидокТМЦ.ДатаПо);
	
	Пока ДокПС.ПолучитьДокумент() = 1 Цикл
		Если ДокПС.ТекущийДокумент() <> ТекДок Тогда
			Если (ПустоеЗначение(ДокПС.УстановкаСкидокТМЦ) = 0) Тогда
				ДокУС = ДокПС.УстановкаСкидокТМЦ;
				УстДатаКонцаСкидок = ?(ПустоеЗначение(ДокУС.ДатаПо) = 1, '01.01.2100', ДокУС.ДатаПо);
				//тут нужно условие по перекрывающимся периодам
				Если (ДокУС.Проведен() = 1) 
					И (
						(ДатаНачалаСкидок >= ДокУС.ДатаДок) И (ДатаНачалаСкидок <= УстДатаКонцаСкидок)
						ИЛИ (ДатаКонцаСкидок >= ДокУС.ДатаДок) И (ДатаКонцаСкидок <= УстДатаКонцаСкидок) 
						ИЛИ (ДатаНачалаСкидок <= ДокУС.ДатаДок) И (ДатаКонцаСкидок >= УстДатаКонцаСкидок) 
					) Тогда
					ДокПС.ВыбратьСтроки();
					Пока ДокПС.ПолучитьСтроку() = 1 Цикл
						// проверяем есть ли в этом списке контрагент из документа
						Если СписП.Принадлежит(ДокПС.Контрагент) = 1 Тогда
							Сооб = "В документе: " + Строка(ДокПС.ТекущийДокумент()) + " есть получатель скидки: " + Строка(ДокПС.Контрагент) + ", который присутствует в этом документе";
							Если СписСообщений.НайтиЗначение(Сооб) = 0 Тогда
								Сообщить(Сооб);
								СписСообщений.ДобавитьЗначение(Сооб);
							КонецЕсли;
						КонецЕсли;						
					КонецЦикла;
					
					СписД = СоздатьОбъект("СписокЗначений");
					ДокПС.ВыгрузитьТабличнуюЧасть(СписД, "Контрагент");
					ТекДок.ВыбратьСтроки();
					Пока ТекДок.ПолучитьСтроку() = 1 Цикл
						Если СписД.Принадлежит(ТекДок.Контрагент) = 1 Тогда
							Сооб = "В документе: " + Строка(ДокПС.ТекущийДокумент()) + " есть получатель скидки: " + Строка(ТекДок.Контрагент) + ", который присутствует в этом документе";
							Если СписСообщений.НайтиЗначение(Сооб) = 0 Тогда
								Сообщить(Сооб);
								СписСообщений.ДобавитьЗначение(Сооб);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура глПрисвоитьКодИзДиапазона(Родитель, Элемент, РеквКод, РеквМинКод, РеквМаксКод, ВыдаватьПредупреждения = 1, ТекстКод) Экспорт
	Если ПустоеЗначение(Родитель) = 0 Тогда
		МинКод = Число(Родитель.ПолучитьАтрибут(РеквМинКод));
		МаксКод = Число(Родитель.ПолучитьАтрибут(РеквМаксКод));
		
		Если МаксКод <> 0 Тогда
			СписУже = СоздатьОбъект("СписокЗначений");
			СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
			СпрТМЦОбщий = СоздатьОбъект("Справочник.ТМЦ");
			СпрТМЦ.ИспользоватьРодителя(Родитель);
			СпрТМЦ.ВыбратьЭлементы();			
			Пока СпрТМЦ.ПолучитьЭлемент() = 1 Цикл
				Если (СпрТМЦ.Родитель = Родитель) И (СпрТМЦ.ТекущийЭлемент() <> Элемент.ТекущийЭлемент()) Тогда
					СписУже.ДобавитьЗначение(Число(СпрТМЦ.ПолучитьАтрибут(РеквКод)));
				КонецЕсли;
			КонецЦикла;
			
			Найдено = 0;
			Для Инд = МинКод По МаксКод Цикл
				Если СписУже.НайтиЗначение(Инд) = 0 Тогда
					Если СпрТМЦ.НайтиПоРеквизиту(РеквКод, Инд, 1) = 0 Тогда
						Найдено = 1;
						Элемент.УстановитьАтрибут(РеквКод, Инд);
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если (Найдено = 0) Тогда
				Если (ВыдаватьПредупреждения = 1) Тогда
					глПоказатьПредупреждение("Не удалось присвоить новый: " + ТекстКод);
				Иначе
					Сообщить("Не удалось присвоить новый код: " + ТекстКод);
				КонецЕсли;
			КонецЕсли;
		Иначе
			глПоказатьПредупреждение("Нужно задать диапазон в группе - родителе");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  

Процедура ПоказатьТЗ(ТаблицаЗначений, Заголовок = "") Экспорт
    Перем Таб, ИИ, ЖЖ, НазваниеКолонки, ТипКолонки, Ширина, Значение, Сообщение;
    Таб = СоздатьОбъект("Таблица");
    Если ТипЗначенияСтр(ТаблицаЗначений) <> "ТаблицаЗначений" Тогда
        Сообщение = "В процедуру ""ПоказатьТЗ()"" передана переменная не типа ""ТаблицаЗначений"", "+
        "а типа """+СокрЛП(ТипЗначенияСтр(ТаблицаЗначений))+"""";
        Таб.Область(1, 1, 1, 1).Текст = Сообщение;
        Таб.Область(1, 1, 1, 1).ШиринаСтолбца(СтрДлина(Сообщение));
        Таб.ТолькоПросмотр(1);
        Таб.Показать("Не таблица значений: "+Заголовок);
        Возврат;
    КонецЕсли;
    Для ЖЖ = 1 по ТаблицаЗначений.КоличествоКолонок() цикл
        ТаблицаЗначений.ПолучитьПараметрыКолонки(ЖЖ,,,, НазваниеКолонки);
        Таб.Область(1, ЖЖ, 1, ЖЖ).Текст = СокрЛП(НазваниеКолонки);
        Таб.Область(1, ЖЖ, 1, ЖЖ).РамкаОбвести(5, 5, 5, 5);
        Таб.Область(1, ЖЖ, 1, ЖЖ).ВертикальноеПоложение(3);
        Таб.Область(1, ЖЖ, 1, ЖЖ).ГоризонтальноеПоложение(3);
        Таб.Область(1, ЖЖ, 1, ЖЖ).РазмерШрифта(7);
        Таб.Область(1, ЖЖ, 1, ЖЖ).Полужирный(1);
        Ширина = Таб.Область(1, ЖЖ, 1, ЖЖ).ШиринаСтолбца();
        Ширина = Макс(Ширина, СтрДлина(СокрЛП(НазваниеКолонки)));
        Таб.Область(1, ЖЖ, 1, ЖЖ).ШиринаСтолбца(Ширина);
    КонецЦикла;
    Для ИИ = 1 по ТаблицаЗначений.КоличествоСтрок() цикл
        Для ЖЖ = 1 по ТаблицаЗначений.КоличествоКолонок() цикл
            Значение = ТаблицаЗначений.ПолучитьЗначение(ИИ, ЖЖ);
            Таб.Область(ИИ+1, ЖЖ, ИИ+1, ЖЖ).Текст = Значение;
            Таб.Область(ИИ+1, ЖЖ, ИИ+1, ЖЖ).Расшифровка(Значение, 0);
            Таб.Область(ИИ+1, ЖЖ, ИИ+1, ЖЖ).РамкаОбвести(3, 0, 3, 0);
            Ширина = Таб.Область(1, ЖЖ, 1, ЖЖ).ШиринаСтолбца();
            Ширина = Макс(Ширина, СтрДлина(СокрЛП(Строка(Значение))));
            Таб.Область(1, ЖЖ, 1, ЖЖ).ШиринаСтолбца(Ширина);
            ТаблицаЗначений.ПолучитьПараметрыКолонки(ЖЖ, ТипКолонки); ;
            Если ТипКолонки = "Число" тогда
                Таб.Область(ИИ+1, ЖЖ, ИИ+1, ЖЖ).ГоризонтальноеПоложение(2);
            КонецЕсли;
            Если ИИ = ТаблицаЗначений.ТекущаяСтрока() тогда
                Таб.Область(ИИ+1, ЖЖ, ИИ+1, ЖЖ).ЦветФона(255, 0, 0);
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;
    Таб.ТолькоПросмотр(1);
    Таб.Показать("Таблица значений: "+Заголовок);
КонецПроцедуры

//==============================================Обмены данными==============================================
Процедура глЗаписатьВРегисрОбъектИБ(ОбъектИБДокумент="", ОбъектИБСправочник="", ИДСессии, ИДПоставщика, КодУзлаИБ, ДопИнформация="") Экспорт
	
	УзелИБ = СоздатьОбъект("Справочник.УзлыОбмена");
	
	Если УзелИБ.НайтиПоКоду(КодУзлаИБ) = 0 Тогда
		Возврат;
	КонецЕсли;		
	
	Запись = СоздатьОбъект("Справочник.ОбъектыИнформационныхБаз");
	
	Если Запись.НайтиПоРеквизиту("ИДПоставщика", ИДПоставщика,1) = 0  Тогда
		Запись.Новый();
	КонецЕсли;

	Запись.Дата = ТекущаяДата();
	Запись.Время = ТекущееВремя();
	Запись.ИДСессии = ИДСессии;
	Запись.ИДПоставщика = ИДПоставщика;
	Запись.ОбъектБазыДокумент = ОбъектИБДокумент;
	Запись.ОбъектБазыСправочник = ОбъектИБСправочник;
	Запись.УзелПоставщика = УзелИБ.ТекущийЭлемент();
	Запись.ДопИнформация = ДопИнформация;
	Запись.Записать();
	
КонецПроцедуры

//======================================================================
// ===============================
// Инициализация переменной правовой поддержки
Если ЗагрузитьВнешнююКомпоненту("1CRtInf.dll") = 1 Тогда
	глКомпонентаПравовойПоддержки = СоздатьОбъект("AddIn.DBExtension");
КонецЕсли;


// Правовая система запускается из диалогов специальной кнопкой.
// Видимость кнопки регулируется глобальной переменной глВидимостьПравовойПоддержки
глВидимостьПравовойПоддержки = ?(ПустоеЗначение(глКомпонентаПравовойПоддержки) = 1, 0, 1);
                        
// ===============================
Да = Перечисление.ДаНет.Да;
Нет = Перечисление.ДаНет.Нет;
Истина = 1;
Ложь = 0;
Класс8 = Перечисление.КлассыСчетовРасходов.Класс8;
Класс9 = Перечисление.КлассыСчетовРасходов.Класс9;
Класс89 = Перечисление.КлассыСчетовРасходов.Класс89;
ОсновнаяЗП = Перечисление.ВидыНачисленияЗП.ОсновнаяЗП;
ПогашениеЗайма = Перечисление.ВидыНачисленияЗП.ПогашениеЗайма; 	//--- УМК Сандомирский В.Ю, (17.07.14)

АвансоваяВыплата = Перечисление.ВидыНачисленияЗП.Аванс; 		//--- УМК Сандомирский В.Ю, (04.12.14)

Склады = Перечисление.ТипыМестХранения.Склад;
МОЛы = Перечисление.ТипыМестХранения.МОЛ;
Оптовый = Перечисление.ВидыСкладов.Оптовый;
Розничный = Перечисление.ВидыСкладов.Розничный;
ОсновныеСредства = Перечисление.ВидыНеоборотныхАктивов.ОсновныеСредства;
НМА = Перечисление.ВидыНеоборотныхАктивов.НематериальныеАктивы;
ИспользоватьСчетаРасходов = Константа.ИспользоватьСчетаРасходов;

глПартионныйУчетПоСкладам = Перечисление.ДаНет.Нет; 

глФлагРасшифровки = 0;
глОбновить = 0;
глБИ = СоздатьОбъект("БухгалтерскиеИтоги");
глОбщиеУстановки = глВосстановитьЗначение(,"ОбщиеУстановки",1);
            
// таблица операции, сдержит список проводок одной операции
глТбОперация = СоздатьОбъект("ТаблицаЗначений");
глТбОперация.НоваяКолонка("ПризнакПроводки");
глТбОперация.НоваяКолонка("ПризнакГлавнойПроводки");
глТбОперация.НоваяКолонка("ДебетСчет","Счет.Основной");
глТбОперация.НоваяКолонка("ДебетСубконто1");	
глТбОперация.НоваяКолонка("ДебетСубконто2");	
глТбОперация.НоваяКолонка("ДебетСубконто3");
глТбОперация.НоваяКолонка("КредитСчет","Счет.Основной");
глТбОперация.НоваяКолонка("КредитСубконто1");
глТбОперация.НоваяКолонка("КредитСубконто2");
глТбОперация.НоваяКолонка("КредитСубконто3");
глТбОперация.НоваяКолонка("Сумма","Число",14,2);
глТбОперация.НоваяКолонка("Количество","Число",14,3);
глТбОперация.НоваяКолонка("Валюта","Справочник.Валюты");
глТбОперация.НоваяКолонка("ВалСумма","Число",14,2);
глТбОперация.НоваяКолонка("НомерЖурнала","Строка",2);
глТбОперация.НоваяКолонка("Комментарий","Строка",64);

// ===============================
// для расчета курсовых разниц и переоценки валютных счетов
// для выполнения переоценки разделим счета на группы
глСчетаОстатковВВалюте = СоздатьОбъект("СписокЗначений");
глСчетаОстатковВВалюте.ИзСтрокиСРазделителями("302,312,314,332,334,3512"); //,1032,1042,1052,1062,1092
глСчетаЗадолженностейВВалюте = СоздатьОбъект("СписокЗначений");
глСчетаЗадолженностейВВалюте.ИзСтрокиСРазделителями("342,362,3712,3722,3773,3774,502,504,506,512,602,604,606,612,622,632,6812,6853,6854");
// все немонетарные счета - это задолженность, потому что остатки валюты по определению монетарные
глНемонетарныеСчета = СоздатьОбъект("СписокЗначений");
глНемонетарныеСчета.ИзСтрокиСРазделителями("3712,6812");

глСчетаПоставщиковПокупателей = СоздатьОбъект("СписокЗначений");
глСчетаПоставщиковПокупателей.ИзСтрокиСРазделителями("361,362,631,632,3772,3774,6852,6854,634");

глСчетаУчетаТоваров = СоздатьОбъект("СписокЗначений");
глСчетаУчетаТоваров.ИзСтрокиСРазделителями("024,0232,281,2821,283,2841,2842,2843");
глСчетаУчетаЗапасов = СоздатьОбъект("СписокЗначений");
глСчетаУчетаЗапасов.ИзСтрокиСРазделителями("022, 201,202,203,204,205,206,207,208,2091,22,МЦ");
глСчетаУчетаПродукции = СоздатьОбъект("СписокЗначений");
глСчетаУчетаПродукции.ИзСтрокиСРазделителями("0235,0236,232,25,26,2822");

глТаблицаСчетов = СоздатьОбъект("ТаблицаЗначений");
глТаблицаСчетов.НоваяКолонка("Счет");
глТаблицаСчетов.НоваяКолонка("Субконто1");
глТаблицаСчетов.НоваяКолонка("Субконто2");
глТаблицаСчетов.НоваяКолонка("Субконто3");
глТаблицаСчетов.НоваяКолонка("Валюта");
глТаблицаСчетов.НоваяКолонка("ОперационнаяКР");
глТаблицаСчетов.НоваяКолонка("ВидДеятельности");
                                       
// ===============================
// имена опций печати
ПарСтрСпр ="ДляСправ"; 			// имя опций печати отчетов по справочникам (Пр-лст, Товары)
ПарСтрДок ="ДляДокум"; 			// имя опций печати документов
ПарСтрОтчДлинн ="ДляОтчДлинн";  // имя опций печати узких отчетов
ПарСтрОтчШирок ="ДляОтчШирок";  // имя опций печати широких отчетов

ДвиженияДокумента = "Движения документа";
СтруктураПодчиненности = "Структура подчиненности";
ОбновлениеЦен = "Обновление цен в справочнике";
ВводНаОсновании = "Ввести на основании";
ОткрытьВЖурнале = "Открыть  в журнале";
Подчиненные = "Подчиненные документы";
ТоварныйСостав = "Изменение товарного состава";
Экспорт_dbf = "Экспорт_и_отправка_@_dbf";

глФлагРасшифровки = 0;
глРасшифровка = СоздатьОбъект("СписокЗначений");
глТаблица = 0;
глОбновить = 0;

// ===============================   
глФорматКоличестваВформах	= "Ч15.3"; // не подавляем пустые значения
глФорматКоличестваВОтчетах = "Ч015.3";
глДлинаСуммы		= Метаданные.Справочник("Цены").Реквизит("Цена").Длина;
глТочностьСуммы		= Метаданные.Справочник("Цены").Реквизит("Цена").Точность;
глФорматСуммы		= "Ч"+Строка(глДлинаСуммы)+"."+Строка(глТочностьСуммы);

// Значения кодов операций регистра Партии и Обороты
Закупка="З"; 
ПриходованиеАкциз = "А";
ПриходованиеПошлина = "Б";
ПриходованиеПеревозка = "И";
ПриходованиеУслугиТаможни = "Т";
ВыпускПродукции = "Ь";
ВводОстатков = "О";
ВводОстатковДавальческихЗапасов = "о";
ВводОстатковТарыВозвратной = "Я";
ВводОстатковТарыЗалоговой = "я";
Продажа = "П";
ВозвратПоставщику ="п";
РозничнаяПродажа = "Р";
ВозвратРозничный = "р"; // от покупателя
ПродажаОтсутствующих = "Г";
ВозвратОтПокупателя = "г";
ПеремещениеВРозницу = "Ы";
ПеремещениеИзРозницы = "ы";  
ПеремещениеМеждуСкладами = "Д";
ПереоценкаНаСкладеДооценка = "ц";
ПереоценкаНаСкладеУценка = "э";
ПереоценкаВРознице = "Ц";
СписаниеИзлишков = "Й";
ОприходованиеИзлишков = "й";     
ПередачаТарыВозвратнойПокупателю = "Ё";
ВозвратТарыВозвратнойОтПокупателя = "ё";
ПолучениеТарыВозвратнойОтПоставщика = "Ж";
ВозвратТарыВозвратнойПоставщику = "ж";
ПередачаТарыЗалоговойПокупателю = "Л";
ВозвратТарыЗалоговойОтПокупателя = "л";
ПолучениеТарыЗалоговойОтПоставщика = "М";
ВозвратТарыЗалоговойПоставщику = "м";
СписаниеВПроизводство = "ь";
ВозвратИзПроизводства = "з";     
ПолучениеДавальческогоСырья  = "а";      
ВозвратДавальческогоСырья = "б";     
ОтгрузкаДавальческойПродукции = "и";
ВводВЭксплуатациюМБП = "т";
ПередачаВДавальческуюПереработку = "A";
ВозвратИзДавальческойПереработки = "a";
СписаниеСкидокНаВес = "f";

// ===============================
// Значения кодов операций только регистра Обороты
ПокупкаУслуги = "Ъ";
СторноПокупкаУслуги = "ъ";
ПродажаУслуги = "Ф";
СторноПродажаУслуги = "ф";
ДоходОтКурсовойРазницы = "х";     

// ===============================
// Значения кодов операций регистров ВзаиморасчетыПокупателей и ВзаиморасчетыПоставщиков
ПерезачетВзаиморасчетов = "Ё";  //--- УМК Сандомирский В.Ю. (04.12.14) 
ВводОстатковОплата="В";
ВводОстатковОтгрузка="в";
АвансоваяОплата="О";  // Аванс
ВозвратАвансовойОплаты="о";
ПостОплата="П";
ВозвратПостОплаты="п";
АвансоваяОтгрузка="Г";
ВозвратАвансовойОтгрузки="г";
ПостОтгрузка="Р";
ВозвратПостОтгрузки="р";
ПервоеСобытиеБартерПриход = "Е";
ПервоеСобытиеБартерРасход = "е";
ВтороеСобытиеБартерПриход = "Э";
ВтороеСобытиеБартерРасход = "э";
ВозвратПервоеСобытиеБартерПриход = "И";
ВозвратПервоеСобытиеБартерРасход = "и";
ВозвратВтороеСобытиеБартерПриход = "Й";
ВозвратВтороеСобытиеБартерРасход = "й";
КурсоваяРазницаДоход = "К";
КурсоваяРазницаУбыток = "к";

// ===============================
// Значения кодов операций учета НДС
НачислениеАкциза = "Ъ";
НачислениеНДСнаИмпорт = "Ь";
НачислениеПошлины = "Ы";
НачислениеТаможенныхУслуг = "ы";

// ===============================
// Значения кодов операций для регистра ПроизводственныеЗатраты 
ОтражениеЗатрат = "а";
ПерераспрЗатрат = "б";
ФормирСебестоимости = "в";
          
// Значения типов норм для регистра НормативныеЗатраты 
НормыНаВыпуск = "а";
НормыНаНезаверш = "б";
НормыНаНезавершПрош = "в";

// ===============================
// Флаги налогового учета
НУ_ВозникновениеНОиВДВР = "1";
НУ_СторноНОиВДВР = "3";
НУ_ВозникновениеНО = "6";
НУ_СторноНО = "7";
НУ_ВозникновениеВДВР = "8";
НУ_СторноВДВР = "9";

// Флаг ускоренного формирования отчетов
// При включенном флаге жертвуем некоторой "красотой" отчетов, выигрывая в скорости формирования. Не будет 
// - вывода пользовательского представления названия документов (глДокументВОтчете());
// - пересчета количества в единицы по умолчанию печатаемого ТМЦ (глФРМКоличествоВОтчете());
// - выделения уровня элементов справочника пробелами (глСмещениеГруппы()).
// - Группировки в запросах по измерениям регистров с типами Счет и Документ идут без упорядочивания (УстановитьГруппировкиЗапроса()).
глОптимизацияОтчетов = 0;

глТочностьСуммВДок = 3;
глТочностьЦенВДок = 5;
ДлинаКодаТМЦ = Метаданные.Справочник("ТМЦ").ДлинаКода;

глСписокОшибокОкругления = СоздатьОбъект("СписокЗначений");

//--- Параиетры сеанса //--- УМК Сандомирский В.Ю. (14.04.15)
СпрВУ = СоздатьОбъект("Справочник.ВидыУпаковки");
СпрВУ.НайтиПоКоду(0);
НетУп = СпрВУ.ТекущийЭлемент();

СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
СпрТМЦ.НайтиПоКоду("00017",0);
ГотоваяПродукция = СпрТМЦ.ТекущийЭлемент();


глВыборИзЗаказа = 0;

глПроверяемыеНаборы = СоздатьОбъект("СписокЗначений");
СпрНГ = СоздатьОбъект("Справочник.ГруппыДоступаНП");
СпрНГ.ВыбратьЭлементы();
Пока СпрНГ.ПолучитьЭлемент() = 1 Цикл
	Если СпрНГ.ПометкаУдаления() = 0 Тогда
		Если глПроверяемыеНаборы.НайтиЗначение(СокрЛП(СпрНГ.НазваниеНабора)) = 0 Тогда
			глПроверяемыеНаборы.ДобавитьЗначение(СокрЛП(СпрНГ.НазваниеНабора));
		КонецЕсли;
	КонецЕсли;
КонецЦикла;

//--- УМК Сандомирский В.Ю. (22.08.14) Список групп исключений для почтовой рассылки
глСписокИсключенийРассылки = СоздатьОбъект("СписокЗначений");
глСписокИсключенийРассылки.ДобавитьЗначение("23892");  //--- "Товары для розн. торг."

//... УМК Сандомирский В.Ю. (22.08.14) Список групп исключений для почтовой рассылки

глПравильныйСимволПереноса = Симв(13)+Симв(10);		//--- УМК Сандомирский В.Ю. (13.07.14) символ возврата каретки

//ЗагрузитьВнешнююКомпоненту("Formex.dll"); //--- УМК Сандомирский В.Ю. (22.08.14) внешние компоненты теперь "ПриначалеРаботы"
глДатаНачалаРаботыСУпаковкой = Константа.ДатаНачалаРаботыСУпаковкой;
глПоказыватьОстатки = Константа.ПоказыватьОстаткиТМЦ;
ЗагрузитьВнешнююКомпоненту("SpreadSheet.dll");
//глДатаПереходаНСТМЦСп = Константа.ДатаНачалаРаботыНовойСхемыТМЦСписания;
глКонтрольОстатков = 0;
глСпособРедактированияНаименованийПрайса = 2;
глГруппыДоступаПродукции = СоздатьОбъект("СписокЗначений");	
глГруппыДоступаКонтрагенты = СоздатьОбъект("СписокЗначений");	
СпрКлЕд = СоздатьОбъект("Справочник.КлассификаторЕдИзм");
СпрКлЕд.НайтиПоНаименованию("кг.");
глКилограмм = СпрКлЕд.ТекущийЭлемент();

глКэшУдостоверенийКачества = СоздатьОбъект("ТаблицаЗначений");
глКэшУдостоверенийКачества.НоваяКолонка("Дата", "Дата");
глКэшУдостоверенийКачества.НоваяКолонка("ТТМЦ", "ТаблицаЗначений");

глПрямыеЗапросы = ?(Константа.УМК_ИспользоватьПрямыеЗапросы = Перечисление.ДаНет.Да,1,0); 
	
