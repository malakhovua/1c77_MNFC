Перем фДавальческаяПродукция, ПоЗаказу;
Перем ВремРег, ФлагОтгрузки, ЗнакОплаты, ФлагВозврата;
Перем тбПартии, тбОстаткиПартий;

Перем СуммаУчБезНДС;
Перем СчетНДС,СубконтоНДС1,СубконтоНДС2; // для бартера

// прерменные для выпуска продукции
Перем тбПродукции, спМатериалы, спМатериалыДляОстатков, спСчета, спПредпочтения;
Перем СуммаПоПродукции,СуммаПоМатериалу;
Перем НДСПервоеСобытие, НДСВтороеСобытие, ВзаиморасчетыГрн; // для исправления ошибок округления реализации
Перем ПострСуммаБезНДС, ПострСуммаСНДС, ПострНДС, ПострНДСПерв;

// ===========================
Функция ПроверкаШапки()
	глВсеВыбрано = 1;
	глПроверкаДатыДок(Контекст,"Проведение");
	глВыбранЛи(Фирма,"Фирма");
	глВыбранЛи(Контрагент,"Контрагент");
	глВыбранЛи(Валюта,"Валюта");
	глВыбранЛи(СчетКонтрагента,"Счет контрагента");
	Если глВсеВыбрано=1 Тогда
		Если глПроверитьСчетВзаиморасчетов(СчетКонтрагента)=0 Тогда
			глКомментарий("Выбран не корректный счет контрагента !",0,,"!");
			глВсеВыбрано = 0;
		ИначеЕсли (Валюта = Гривня) и (СчетКонтрагента.Валютный = 1) Тогда
			глКомментарий("Нельзя выбирать валютный счет, если валюта документа "+Валюта+" !",1,,"!");
			глВсеВыбрано = 0;       
		ИначеЕсли (Валюта <> Гривня) и (СчетКонтрагента.Валютный = 0) Тогда
			глКомментарий("Нельзя выбирать не валютный счет, если валюта документа "+Валюта+" !",1,,"!");
			глВсеВыбрано = 0;
		КонецЕсли;
	КонецЕсли;
	глВыбранЛи(ВидТорговли,"Вид торговли");
	глВыбранЛи(СубконтоВалДох,"Субконто валовых доходов");
	глВсеВыбрано = ?(глВсеВыбрано = 0, 0, глПроверкаДублейСтрок(Контекст));
	Если ВидТорговли = Перечисление.ВидыТорговли.Нал Тогда
		глВыбранЛи(Касса,"Касса");
	КонецЕсли;
	глВыбранЛи(Подразделение,"Подразделение сбыта");
	глВыбранЛи(ПодразделениеПроизв,"Подразделение производства");
	глПроверитьТипПодразделения(ПодразделениеПроизв,"подразделения производства");
	Если фДавальческаяПродукция = 1 Тогда
		глВыбранЛи(МестоХраненияПродукции,"Место хранения продукции");
	Иначе
		Если СписыватьМатериалы = 1 Тогда
			глВыбранЛи(МестоХраненияМатериалов,"Место хранения материалов");
			глВыбранЛи(МестоХраненияПолуфабрикатов,"Место хранения полуфабрикатов");
			глВыбранЛи(МестоХраненияВозвратныхОтходов,"Место хранения возвратных отходов");
		КонецЕсли;
		Если ПустоеЗначение(Константа.СпособПриходованияПродукции)=1 Тогда
			глКомментарий("Не заполнена константа ""Способ приходования продукции""!",0,,"!");
			глВсеВыбрано = 0;
		КонецЕсли;
	КонецЕсли;
	Если Валюта <> Гривня Тогда
	    Если ВидТорговли <> Перечисление.ВидыТорговли.Предоплата Тогда
			глКомментарий("Продавать за валюту можно только на условиях предоплаты!",0,,"!");
    		глВсеВыбрано = 0;
		КонецЕсли;
        Если Итог("НДС")<>0 Тогда
        	глКомментарий("При продаже за валюту нельзя указывать НДС!",0,,"!");
        	глВсеВыбрано = 0;
        КонецЕсли; 
    КонецЕсли;    
	глПроверкаНДСВДокументе(Контекст, Итог("СуммаБезНДС"), Итог("СуммаСНДС"), Итог("НДС"));
    Возврат глВсеВыбрано;
КонецФункции

// ===========================
Функция ПроверкаСтроки()
    глВсеВыбрано = 1;
    глВыбранЛи(Услуга,"Услуга",НомерСтроки);
	глВыбранЛи(ВидДеятельности,"Вид деятельности",НомерСтроки);
	Если глВсеВыбрано = 1 Тогда
	    глВсеВыбрано = ?(глПроверкаТовараВДокументе(Контекст,Услуга,НомерСтроки,1)=Да, глВсеВыбрано, 0);
		Если Услуга.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
			Если глПолучитьНормы(Услуга,,1,ДатаДок,ПоЗаказу,,1)=1 Тогда // калькулируемая услуга
				Если глВсеВыбрано = 1 Тогда
					Если (ВидДеятельности.ПозаказноеПроизводство = Да) И (ПустоеЗначение(ПоЗаказу) = 1) Тогда
						глКомментарий("В строке "+НомерСтроки+" выбран вид деятельности с позаказным производством!",0,,"!");
						глВсеВыбрано = 0;                         
					ИначеЕсли (ВидДеятельности.ПозаказноеПроизводство = Нет) И (ПустоеЗначение(ПоЗаказу) = 0) Тогда
						глКомментарий("В строке "+НомерСтроки+" выбран вид деятельности с непозаказным производством!",0,,"!");
						глВсеВыбрано = 0;                         
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат глВсеВыбрано;
КонецФункции

// ===============================
//Вызывается рекурсивно
//Добавляется материал в спМатериалы, счет в спСчета из норм затрат
Функция ДобавитьСтрокуВТаблицуПродукции(Продукция,НаЗаказ,Единица,Коэф,Кво,КвоБрака,Уровень)
Перем тбНормы;

	//Получаем нормы по этому же ЗАКАЗУ, если в заказе их нет то берем на ДатаДок
	Если глПолучитьНормы(Продукция,Единица,Кво,ДатаДок,НаЗаказ,тбНормы) =0 Тогда
		Если Продукция.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
			// это некалькулируемая услуга, тбПродукции не заполняется
			Возврат 1;                                                
		Иначе
			глКомментарий("Не указаны нормы для "+Продукция+?(ПустоеЗначение(НаЗаказ)=0," по заказу "+НаЗаказ,""),0);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	тбПродукции.НоваяСтрока();
	тбПродукции.НСтр = НомерСтроки;
	тбПродукции.Продукция = Продукция;
	тбПродукции.Заказ = НаЗаказ;
	тбПродукции.Кво = Кво * Коэф;
	тбПродукции.КвоБрака = КвоБрака * Коэф;
	тбПродукции.Уровень = Уровень;
	тбПродукции.Нормы = тбНормы;     
	
	тбНормы.ВыбратьСтроки();
	Пока тбНормы.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(тбНормы.Материал) = 0 Тогда  //тбНормы.Материал = ВозвратныйОтход или Материал или Продукция или Полуфабрикат
			//Добавляем материал по норме на продукцию в СПИСОК МАТЕРИАЛОВ
		    Если НЕ ((тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.ВозвратныйОтход) или 
			((ПроизводитьПолуфабрикаты = 1) и (тбНормы.Материал.ВидТМЦ <> Перечисление.ВидыТМЦ.Материал))) Тогда
				
				//Если производим полуфабрикаты, то в список МАТЕРИАЛОВ добавляем только материалы,
				//т.к. по полуфабрикатам и продукции не надо будет проверять остатки по партиям
				
				// добавляем пару (Материал,Предпочтение) без повторения
				// в качестве предпочтения выступает заказ
				фНашли = 0;
				Для НомСтр = 1 по спМатериалы.РазмерСписка() Цикл
					Если (спМатериалы.ПолучитьЗначение(НомСтр)=тбНормы.Материал) и (спПредпочтения.ПолучитьЗначение(НомСтр)=тбПродукции.Заказ) Тогда
						фНашли = 1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если фНашли = 0 Тогда
					// если такой пары в списках еще нет
					спМатериалы.ДобавитьЗначение(тбНормы.Материал);
					спПредпочтения.ДобавитьЗначение(тбПродукции.Заказ);
				КонецЕсли;
				
				//В этот список добавляем все ТМЦ, которые будут списывать из регистра остатки
				глДобавитьЗначениеБезПовторения(спМатериалыДляОстатков,тбНормы.Материал);
				
				//Добавляем счет учета сырья в СПИСОК СЧЕТОВ
				глДобавитьЗначениеБезПовторения(СпСчета,тбНормы.Материал.Счет);
			ИначеЕсли НЕ (тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.ВозвратныйОтход) Тогда
				//В этот список добавляем все ТМЦ, которые будут списывать из регистра остатки
				глДобавитьЗначениеБезПовторения(спМатериалыДляОстатков,тбНормы.Материал);
			КонецЕсли;
			
			//Если в продукцию входят ПОЛУФАБРИКАТЫ, получаем нормы для них 
			Если (тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.Полуфабрикат) и (ПроизводитьПолуфабрикаты = 1) Тогда
				Уровень = Уровень + 1;
				
				Если ДобавитьСтрокуВТаблицуПродукции(тбНормы.Материал,НаЗаказ,0,1,тбНормы.Кво,0,Уровень) = 0 Тогда
					Возврат 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 1;
КонецФункции //ДобавитьСтрокуТаблицыПродукции

// ===============================
Функция ЗаполнитьТбПродукции()
	//Таблица ПРОДУКЦИИ содержит информацию о продукции и полуфабрикатах всех уровней из которых она состоит 
	тбПродукции = СоздатьОбъект("ТаблицаЗначений");
	тбПродукции.НоваяКолонка("НСтр","Число",4,0);
	тбПродукции.НоваяКолонка("Продукция","Справочник.ТМЦ");
	тбПродукции.НоваяКолонка("Заказ");
	тбПродукции.НоваяКолонка("Кво","Число",10,3);
	тбПродукции.НоваяКолонка("КвоБрака","Число",10,3);
	тбПродукции.НоваяКолонка("Уровень","Число",3,0);
	тбПродукции.НоваяКолонка("Нормы");
	
	спМатериалы = СоздатьОбъект("СписокЗначений");
	спМатериалыДляОстатков = СоздатьОбъект("СписокЗначений");
	спПредпочтения = СоздатьОбъект("СписокЗначений");
	спСчета = СоздатьОбъект("СписокЗначений");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если Услуга.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
			Если ДобавитьСтрокуВТаблицуПродукции(Услуга,ПоЗаказу,Ед,Коэффициент,Кво,0,0) = 0 Тогда
				Возврат 0 ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Сортируем таблицу ПРОДУКЦИИ в порядке убывания глубины передела
	тбПродукции.Сортировать("НСтр+,Уровень-");
	Возврат 1;
КонецФункции //ЗаполнитьТбПродукции

// ===============================
Процедура РассчитатьШапку()
	
	Если (Константа.НДСпоВходящимНН = Да) и (Валюта = Гривня) Тогда
		// проводку по налоговому кредиту сделаем в
		// документе ЗаписьКнигиПриобретения
		СчетНДС = СчетПоКоду("64.4.2");
		СубконтоНДС1 = Контрагент;
		СубконтоНДС2 = Договор;
	Иначе
		// сразу налоговый кредит
		СчетНДС = СчетПоКоду("64.1.5");
		СубконтоНДС1 = ВидНДС;
		СубконтоНДС2 = 0;
	КонецЕсли;
	
	ВремРег = СоздатьОбъект("Регистры");
	
	Если фДавальческаяПродукция = 1 Тогда
		// будем списывать давальческую продукцию, нужно рассчитать регистры партий и остатков
		спОтбор = СоздатьОбъект("СписокЗначений");
		спСчета = СоздатьОбъект("СписокЗначений");
	
		// сформируем список счетов для отбора
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если Услуга.ВидТМЦ <> Перечисление.ВидыТМЦ.Услуга Тогда
				Счет = ГлПолучитьСчетУчетаТМЦ("ДавПродукция",Услуга);
				Если спСчета.НайтиЗначение(Счет) = 0 Тогда
					спСчета.ДобавитьЗначение(Счет);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
		спОтбор.Установить("Фирма",Фирма);
		спОтбор.Установить("Счет",спСчета);
		глРассчитатьОстаткиИРезервы(Контекст, ВремРег, спОтбор, 1, 1, 1);
		Если глПартионныйУчетПоСкладам = Да Тогда
			спСклады = СоздатьОбъект("СписокЗначений");
			спСклады.ДобавитьЗначение(МестоХраненияПродукции);
		    спОтбор.Установить("МестоХранения", спСклады);
		КонецЕсли;
		глРассчитатьОстаткиПартий(Контекст, ВремРег, Фирма, спОтбор, 1);
	Иначе
		// будем списывать материалы и/или полуфабрикаты
		
		спОтбор = СоздатьОбъект("СписокЗначений");
		спОтбор.Установить("Фирма",Фирма);
		спОтбор.Установить("Товар",спМатериалы);
		спОтбор.Установить("Счет",спСчета);
		
		спОтбор.Установить("Товар",спМатериалыДляОстатков);
		глРассчитатьОстаткиИРезервы(Контекст, ВремРег, спОтбор, 1, 1, 1);
		спОтбор.Установить("Товар",спМатериалы);
		Если глПартионныйУчетПоСкладам = Да Тогда
			спСклады = СоздатьОбъект("СписокЗначений");
			спСклады.ДобавитьЗначение(МестоХраненияМатериалов);
			спСклады.ДобавитьЗначение(МестоХраненияПолуфабрикатов);
		    спОтбор.Установить("МестоХранения", спСклады);
		КонецЕсли;
		глРассчитатьОстаткиПартий(Контекст, ВремРег, Фирма, спОтбор, 1);
	КонецЕсли;
	
	ФлагОтгрузки = 1;
	ЗнакОплаты = -1;
	ФлагВозврата = 0;
	
	глРассчитатьИтогиВзаиморасчетов(Контекст,ВремРег,Фирма,?(ВидТорговли = Перечисление.ВидыТорговли.Бартер,-ЗнакОплаты,ЗнакОплаты),Контрагент, Договор, Валюта, 0);
	
	глСформироватьТаблицуПартий(Контекст, ВремРег, Фирма, спОтбор, спПредпочтения, тбПартии, тбОстаткиПартий, 0, 0);
	
	НДСпсОкругленный =0;
	НДСвсОкругленный =0;
	НДСНеОкругленный =0;
	РеализацияГрнОкр =0;
КонецПроцедуры

// ===============================
Процедура ДвиженияВзаиморасчеты()
	тбСуммыПогашения = глПолучитьСуммыДляПогашения(Контекст, Фирма, Валюта);
	тбДолги = глПолучитьИтогиВзаиморасчетов(Контекст,ВремРег, Фирма,?(ВидТорговли = Перечисление.ВидыТорговли.Бартер,-ЗнакОплаты,ЗнакОплаты), Контрагент, Договор, Валюта);
	// Проверяем возможность кредита 
	//Если (ВидТорговли = Перечисление.ВидыТорговли.Кредит ) и (Константа.РазрешитьПревышениеКредита = Нет) Тогда
	//	// для проверки кредита нужно анализировать долги по всем договорам		
	//	ВремРегКред = СоздатьОбъект("Регистры");
	//	глРассчитатьИтогиВзаиморасчетов(Контекст,ВремРегКред,Фирма,ЗнакОплаты,Контрагент,0);
	//	тбДолгиКред = глПолучитьИтогиВзаиморасчетов(Контекст, ВремРегКред, Фирма, ЗнакОплаты, Контрагент, 0);
	//	ДолгКонтрагента = 0;
	//	ВалютаДолга = Гривня;
	//	Просрочено = 0;
	//	ПросроченныйДолг = 0;
	//	тбДолгиКред.ВыбратьСтроки();
	//	Пока тбДолгиКред.ПолучитьСтроку()=1 Цикл
	//		Если тбДолгиКред.ДолгОсн <= 0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		текКредДок = тбДолгиКред.КредДокумент;
	//		ВидДокКред = текКредДок.Вид();
	//		Если глЕстьРеквизитШапки("ВидТорговли",ВидДокКред)=Да Тогда              
	//			// учитываем только документы по торговому кредиту
	//			Если текКредДок.ВидТорговли <> Перечисление.ВидыТорговли.Кредит Тогда
	//				Продолжить;
	//			КонецЕсли;
	//		КонецЕсли;
	//		ДолгКонтрагента = ДолгКонтрагента + глПересчет(тбДолгиКред.ДолгОсн,ВалютаДолга,ДатаДок,Контрагент.ВалютаКредита,ДатаДок,);
	//		Если глЕстьРеквизитШапки("ДатаОплаты",ВидДокКред)=Да Тогда
	//			ДатаОплаты = текКредДок.ДатаОплаты;
	//			Если ПустоеЗначение(ДатаОплаты)=1 Тогда
	//				ДатаОплаты = текКредДок.ДатаДок;
	//			КонецЕсли;
	//		Иначе 
	//			ДатаОплаты = текКредДок.ДатаДок + Контрагент.Глубина.Получить(текКредДок.ДатаДок);
	//		КонецЕсли;
	//		Если ДатаДок > ДатаОплаты Тогда
	//			ПросроченныйДолг = ПросроченныйДолг + тбДолгиКред.ДолгОсн;
	//			Если Просрочено<(ДатаДок-ДатаОплаты) Тогда
	//				Просрочено = ДатаДок-ДатаОплаты;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//	ДолгКонтрагента = ДолгКонтрагента + глПересчет(Итог("СуммаСНДС"),Валюта,ДатаДок,Контрагент.ВалютаКредита,ДатаДок,);
	//	СуммаКредита = Контрагент.СуммаКредита.Получить(ДатаДок);
	//	Если ДолгКонтрагента > СуммаКредита Тогда
	//		глНеПроводить(Контекст,Шаблон("Сумма накладной вместе с текущим долгом клиента ([глФРМ(ДолгКонтрагента,Контрагент.ВалютаКредита,1)]) превышает сумму кредита ([глФРМ(СуммаКредита,Контрагент.ВалютаКредита,1)]). "));
	//		Возврат;
	//	КонецЕсли;
	//	Если Просрочено>0 Тогда
	//		глНеПроводить(Контекст,Шаблон("Просрочена оплата [глФРМ(ПросроченныйДолг,ВалютаДолга,1)] на [Просрочено] дней."));
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;		       
	
	глПровестиПоВзаиморасчетам(Контекст, ФлагОтгрузки, ЗнакОплаты, ФлагВозврата, Фирма, тбДолги, тбСуммыПогашения, Валюта,Контрагент, Договор, ВидТорговли, ДокументОснование);
	НДСПервоеСобытие = 0;
	НДСВтороеСобытие = 0;
	ВзаиморасчетыГрн = 0;
	
	РегПоставщики=ВремРег.ВзаиморасчетыПоставщиков;	
	РегПокупатели=ВремРег.ВзаиморасчетыПокупателей;	

	РегПокупатели.ВыбратьДвиженияДокумента(ТекущийДокумент());
	Пока РегПокупатели.ПолучитьДвижение() = 1 Цикл
		
		Если (ВидТорговли = Перечисление.ВидыТорговли.Нал) и (РегПокупатели.Расход = 1) Тогда
			//При оплате наличными формируются 2 движения, надо взять только одно. Возьмем приход, расход пропускаем
			Продолжить;
		КонецЕсли;
		
		Если (Найти(АвансоваяОтгрузка+ПостОтгрузка+ПервоеСобытиеБартерРасход+ВтороеСобытиеБартерРасход,РегПокупатели.КодОперации) = 0) Тогда
			// для формирования проводок по взаиморасчетам нам нужны только эти коды операций
			Продолжить;	
		КонецЕсли;
		
		// первая часть сложной проводки по доходам
		Если Валюта = Гривня Тогда
			глПроводка(Контекст,СчетКонтрагента,,РегПокупатели.Долг,"Реализация",, Контрагент,Договор,,
			,,, ,,"ОУ",1,"Реализация",1);
		Иначе
			глПроводка(Контекст,СчетКонтрагента,,РегПокупатели.ДолгОсн,"Реализация",, Контрагент,Договор,,
			,,, РегПокупатели.Валюта,РегПокупатели.Долг,"ОУ",1,"Реализация",1);
		КонецЕсли;
		ВзаиморасчетыГрн = ВзаиморасчетыГрн + РегПокупатели.ДолгОсн;
		
		// погашение аванса
		Если (РегПокупатели.КодОперации = ПостОтгрузка) И (глВыделятьЛиАвансыПоСчету(СчетКонтрагента) = 1) Тогда
			Если Валюта=Гривня Тогда
				глПроводка(Контекст,"6811",СчетКонтрагента,РегПокупатели.Долг,"Реализация: погашен авансовый платеж",, Контрагент,Договор,,
				Контрагент,Договор,, ,,"ОУ",1);
			Иначе
				глПроводка(Контекст,"6812",СчетКонтрагента,РегПокупатели.ДолгОсн,"Реализация за валюту: погашен авансовый платеж",, Контрагент,Договор,,
				Контрагент,Договор,, РегПокупатели.Валюта,РегПокупатели.Долг,"ОУ",1);
			КонецЕсли;
		КонецЕсли;
		// проводки по НДС
        Если глДелатьПроводкиПоНалогам(РегПокупатели,"НДС") = 1 Тогда
			Если (РегПокупатели.КодОперации = АвансоваяОтгрузка) Или (РегПокупатели.КодОперации = ПервоеСобытиеБартерРасход) Тогда     					
				// для первого события
				глПроводка(Контекст,,"6415",РегПокупатели.НДС,"НДС: первое событие",, ,,,
				ВидНДС,,, ,,"ОУ",1,"НДС ПС",1);
				НДСПервоеСобытие = НДСПервоеСобытие + РегПокупатели.НДС;
			ИначеЕсли РегПокупатели.КодОперации = ВтороеСобытиеБартерРасход Тогда     					
				// для второго события
				глПроводка(Контекст,,"6415",РегПокупатели.НДС,"НДС: второе событие",, ,,,
				ВидНДС,,, ,,"ОУ",1,"НДС ВС",1);
				// посчитаем НДС предварительной оплаты
				НДСВтороеСобытие = НДСВтороеСобытие + РегПокупатели.НДС;
			ИначеЕсли РегПокупатели.КодОперации = ПостОтгрузка Тогда     					
				// для второго события
				глПроводка(Контекст,,"643",РегПокупатели.НДС,"НДС: второе событие",, ,,,
				Контрагент,Договор,, ,,"ОУ",1,"НДС ВС",1);
				// посчитаем НДС предварительной оплаты
				НДСВтороеСобытие = НДСВтороеСобытие + РегПокупатели.НДС;
			КонецЕсли;
		КонецЕсли;
		
		// --- УМК Сандомирский В.Ю, (30.07.14) убираем проводки по ВЛ , ВД\ВР
		// сформируем проводки по ВД/ВР
		//Если глДелатьПроводкиПоНалогам(РегПокупатели,"ВД/ВР") = 1 Тогда
		//	Если СубконтоВалДох <> Константа.НиДоходНиРасход Тогда
		//		глПроводка(Контекст,"ВД","ВД",РегПокупатели.СуммаСНДС_НУ-РегПокупатели.НДС,"Валовые доходы",, Контрагент,Договор,СубконтоВалДох,
		//		Контрагент,Договор,СубконтоВалДох, ,,"ОУ",1);
		//	КонецЕсли;
		//КонецЕсли;
		// ... УМК Сандомирский В.Ю, (30.07.14) убираем проводки по ВЛ , ВД\ВР
		
		
		Если ВидТорговли = Перечисление.ВидыТорговли.Нал Тогда
			// сформируме проводки по кассе, если они нужны
			Если Константа.ПроводкиПоКассеТолькоОрдерами = Нет Тогда
				глПроводка(Контекст,Касса.СчетУчета,СчетКонтрагента,РегПокупатели.Долг,"Оплата наличными",, Касса,,,
				Контрагент,Договор,, ,,"ОУ",1,0);
			КонецЕсли;
		ИначеЕсли ВидТорговли = Перечисление.ВидыТорговли.Бартер Тогда
			// первое событие по бартеру показываем как аванс в счет встречной поставки
			Если глВыделятьЛиАвансыПоСчету(СчетКонтрагента) = 1 Тогда
				Сч = ?(Валюта=Гривня, "3711", "3712");
			Иначе
				Сч = ?(Валюта=Гривня, "631", "632");
			КонецЕсли;
			Если РегПокупатели.КодОперации = ПервоеСобытиеБартерРасход Тогда
				глПроводка(Контекст,Сч,СчетКонтрагента,РегПокупатели.Долг,"Бартер: первое событие",, Контрагент,Договор,,
				Контрагент,Договор,, ,,"ОУ",1);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	// для бартера просмотрим другой регистр		
	Если ВидТорговли = Перечисление.ВидыТорговли.Бартер Тогда
		РегПоставщики.ВыбратьДвиженияДокумента(ТекущийДокумент());
		Пока РегПоставщики.ПолучитьДвижение() = 1 Цикл
			Если Найти(ПервоеСобытиеБартерРасход+ВтороеСобытиеБартерРасход,РегПоставщики.КодОперации) = 0 Тогда
				// для формирования проводок по взаиморасчетам нам нужен только этот код операций
				Продолжить;
			КонецЕсли;
			// первая часть сложной проводки по доходам
			Если Валюта = Гривня Тогда
				глПроводка(Контекст,СчетКонтрагента,,РегПоставщики.Долг,"Реализация",, Контрагент,Договор,,
				,,, ,,"ОУ",1,"Реализация",1);
			Иначе
				глПроводка(Контекст,СчетКонтрагента,,РегПоставщики.ДолгОсн,"Реализация",, Контрагент,Договор,,
				,,, РегПоставщики.Валюта,РегПоставщики.Долг,"ОУ",1,"Реализация",1);
			КонецЕсли;
			ВзаиморасчетыГрн = ВзаиморасчетыГрн + РегПоставщики.ДолгОсн;
			// сформируем проводки по НДС
			Если (глБартерНаОбщихОснованиях(РегПоставщики.Договор,РегПоставщики.Счет,РегПоставщики.КредДокумент) = 0) 
					И (глДелатьПроводкиПоНалогам(РегПоставщики,"НДС") = 1) Тогда
				глПроводка(Контекст,СчетНДС,"64.4.1",РегПоставщики.НДС,"НДС: второе событие",, СубконтоНДС1,СубконтоНДС2,,
				Контрагент,Договор,, ,,"ОУ",1);
				// для второго события
				глПроводка(Контекст,,"64.3",РегПоставщики.НДС,"НДС: второе событие",, ,,,
				Контрагент,Договор,, ,,"НК",1,"НДС ВС",1);
				// посчитаем НДС предварительной оплаты
				НДСВтороеСобытие = НДСВтороеСобытие + РегПоставщики.НДС;
			КонецЕсли;
			Если глВыделятьЛиАвансыПоСчету(СчетКонтрагента) = 1 Тогда
				Сч = ?(Валюта=Гривня, "6811", "6812");
				// закрываем долг по бартеру
				глПроводка(Контекст,Сч,СчетКонтрагента,РегПоставщики.Долг,"Бартер: первое событие",, Контрагент,Договор,,
				Контрагент,Договор,, ,,"ОУ",1);
			КонецЕсли;
			
			// --- УМК Сандомирский В.Ю, (30.07.14) убираем проводки по ВЛ , ВД\ВР
			//// сформируем проводки по ВД/ВР для бартера
			//Если глДелатьПроводкиПоНалогам(РегПоставщики,"ВД/ВР") = 1 Тогда
			//	Если Константа.БартерВалРасх <> Константа.НиДоходНиРасход Тогда
			//		глПроводка(Контекст,"ВР","ВР",РегПоставщики.СуммаСНДС_НУ-РегПоставщики.НДС,"Бартер: валовые издержки",, Контрагент,Договор,Константа.БартерВалРасх,
			//		Контрагент,Договор,Константа.БартерВалРасх, ,,"ОУ",1);
			//	Конецесли;
			//Конецесли;
			// --- УМК Сандомирский В.Ю, (30.07.14) убираем проводки по ВЛ , ВД\ВР
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры           

// ===============================
// Добавляем производимый полуфабрикат в тбПартии, иначе не сможем его списать
Процедура ДобавитьПолуфабрикатВТаблицы(Партия,СчетП,Склад,Стоимость,ПродСтоимость,ОстатокТовара)
	
	фНашли = 0;
	Для НомСтр = 1 по спМатериалы.РазмерСписка() Цикл
		Если (спМатериалы.ПолучитьЗначение(НомСтр)=тбПродукции.Продукция) и (спПредпочтения.ПолучитьЗначение(НомСтр)=тбПродукции.Заказ) Тогда
			фНашли = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если фНашли = 0 Тогда
		// если такой пары в списках еще нет
		спМатериалы.ДобавитьЗначение(тбПродукции.Продукция);
		спПредпочтения.ДобавитьЗначение(тбПродукции.Заказ);
		НомСтр = спМатериалы.РазмерСписка();
	КонецЕсли;
	
	тбПартии.НоваяСтрока();
	тбПартии.НомерСтрокиДокумента = НомСтр;
	тбПартии.ТМЦ=тбПродукции.Продукция;
	тбПартии.ПрихДокумент=Партия;
	тбПартии.Счет=СчетП;
	тбПартии.МестоХранения=Склад;
	
	Ключ = глПолучитьКлючТбОстатков(Партия,тбПартии.Поставка,Строка(тбПродукции.Продукция.Код),СчетП,Склад);
	НС = 0;
	Если тбОстаткиПартий.НайтиЗначение(Ключ,НС,"Ключ")=0 Тогда
		тбОстаткиПартий.НоваяСтрока();
		тбОстаткиПартий.Ключ=Ключ;
		//тбОстаткиПартий.ТМЦ=тбПродукции.Продукция;
		//тбОстаткиПартий.МестоХранения=Склад;
		//тбОстаткиПартий.ПрихДокумент=Партия;
		тбОстаткиПартий.Стоимость=Стоимость;
		тбОстаткиПартий.ПродСтоимость=ПродСтоимость;
		тбОстаткиПартий.ОстатокТовара=ОстатокТовара;
	Иначе   
		тбОстаткиПартий.ПолучитьСтрокуПоНомеру(НС);
		тбОстаткиПартий.ОстатокТовара = тбОстаткиПартий.ОстатокТовара + ОстатокТовара;
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура ДвижениеПроизводственныеЗатраты(Материал, ВидЗатрат, СписываемоеКво,СписываемаяСумма,СписываемаяСуммаДав,КодОперации)
	Регистр.ПроизводственныеЗатраты.ПривязыватьСтроку(тбПродукции.НСтр);
	Регистр.ПроизводственныеЗатраты.Фирма = Фирма;
	Регистр.ПроизводственныеЗатраты.ВидДеятельности = ВидДеятельности;
	Регистр.ПроизводственныеЗатраты.Подразделение = ПодразделениеПроизв;
	Регистр.ПроизводственныеЗатраты.Продукция = тбПродукции.Продукция;
	Регистр.ПроизводственныеЗатраты.ВидЗатрат =  ВидЗатрат;
	Регистр.ПроизводственныеЗатраты.Заказ = тбПродукции.Заказ;
	Регистр.ПроизводственныеЗатраты.Материал = Материал;
	Регистр.ПроизводственныеЗатраты.Количество = СписываемоеКво;
	Регистр.ПроизводственныеЗатраты.Сумма = СписываемаяСумма; 
	Регистр.ПроизводственныеЗатраты.СуммаДав = СписываемаяСуммаДав; 
	Регистр.ПроизводственныеЗатраты.КодОперации = КодОперации;
	Регистр.ПроизводственныеЗатраты.ДвижениеПриходВыполнить();
КонецПроцедуры
                               
// ===============================
Процедура ДвижениеНормативныеЗатраты(СтатьяКалькуляции, Материал, СписываемоеКво, СписываемаяСумма)
	Регистр.НормативныеЗатраты.ПривязыватьСтроку(тбПродукции.НСтр);
	Регистр.НормативныеЗатраты.Фирма = Фирма;
	Регистр.НормативныеЗатраты.ВидДеятельности = ВидДеятельности;
	Регистр.НормативныеЗатраты.Подразделение = ПодразделениеПроизв;
	Регистр.НормативныеЗатраты.Продукция = тбПродукции.Продукция;
	Регистр.НормативныеЗатраты.СтатьяКалькуляции = СтатьяКалькуляции;
	Регистр.НормативныеЗатраты.Заказ = тбПродукции.Заказ;
	Регистр.НормативныеЗатраты.Материал = Материал;
	Регистр.НормативныеЗатраты.ТипЗатрат = НормыНаВыпуск;
	Регистр.НормативныеЗатраты.Количество = СписываемоеКво;
	Регистр.НормативныеЗатраты.Сумма = СписываемаяСумма; 
	Регистр.НормативныеЗатраты.ДвижениеВыполнить();
КонецПроцедуры

// ===============================
Процедура ДвижениеВыпускПродукции(КвоПродукции,КвоБрака,СуммаПродукции,СуммаДавПродукции,Партия) 
	Регистр.ВыпускПродукции.ПривязыватьСтроку(тбПродукции.НСтр);
	Регистр.ВыпускПродукции.Фирма = Фирма;
	Регистр.ВыпускПродукции.ВидДеятельности = ВидДеятельности;
	Регистр.ВыпускПродукции.Подразделение = ПодразделениеПроизв;
	Регистр.ВыпускПродукции.Заказ = тбПродукции.Заказ;
	Регистр.ВыпускПродукции.Продукция = тбПродукции.Продукция;
	Регистр.ВыпускПродукции.Партия = Партия; 
	Регистр.ВыпускПродукции.Количество = КвоПродукции;  
	Регистр.ВыпускПродукции.КоличествоБрака = КвоБрака;  
	Регистр.ВыпускПродукции.Сумма = СуммаПродукции; 
	Регистр.ВыпускПродукции.СуммаДав = СуммаДавПродукции; 
	Регистр.ВыпускПродукции.ДвижениеВыполнить();
КонецПроцедуры      

// ===============================
Процедура ДвиженияСписаниеМатериалов(ВсегоСписатьКво=0,ТМЦ, Склад) 
	
	ВсегоСписаноКво = 0;
	ВсегоСписаноСум = 0;
	ВсегоСписаноДав = 0;
	
	ОсталосьСписать = ВсегоСписатьКво;
	
	НС=0;
	// ищем номер пары (Материал,Предпочтение) в списках
	Для Позиция = 1 по спМатериалы.РазмерСписка() Цикл
		Если (спМатериалы.ПолучитьЗначение(Позиция)=ТМЦ) и (спПредпочтения.ПолучитьЗначение(Позиция)=тбПродукции.Заказ) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// тбПартии.НомерСтрокиДокумента совпадает с позицией в спМатериалы
	Если тбПартии.НайтиЗначение(Позиция,НС,"НомерСтрокиДокумента")=1 Тогда
		тбПартии.ПолучитьСтрокуПоНомеру(НС);
	Иначе
		тбПартии.ВыбратьСтроки();
		тбПартии.ПолучитьСтроку();
	КонецЕсли;
	
	Пока тбПартии.НомерСтрокиДокумента = Позиция Цикл
		МестоХраненияП = тбПартии.МестоХранения;
		ПоставщикП = тбПартии.Поставщик;
		ПоставкаП = тбПартии.Поставка;
		ПрихДокументП = тбПартии.ПрихДокумент;
		СчетП = тбПартии.Счет;
		//Пропускаем партии по другим складам
		Если МестоХраненияП <> Склад  Тогда
			Если тбПартии.ПолучитьСтроку()=0 Тогда
				Прервать;
			КонецЕсли;
		    Продолжить;
		КонецЕсли;
		// проверяем соответствие партиии заказу
		Если глПартияСоответствуетЗаказу(ПрихДокументП,тбПродукции.Заказ)=0 Тогда
			Если тбПартии.ПолучитьСтроку()=0 Тогда
				Прервать;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		НС = 0;
		Если тбОстаткиПартий.НайтиЗначение(глПолучитьКлючТбОстатков(ПрихДокументП,ПоставкаП,ТМЦ.Код,СчетП,МестоХраненияП),НС,"Ключ")=1 Тогда
			тбОстаткиПартий.ПолучитьСтрокуПоНомеру(НС);
			ОстатокТовара = тбОстаткиПартий.ОстатокТовара;
			Если ОстатокТовара = 0 Тогда
				Если тбПартии.ПолучитьСтроку() = 0 Тогда
					Прервать;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			СписываемыйОстатокТовара = Мин(ОсталосьСписать, ОстатокТовара);
			КоэфСписания = СписываемыйОстатокТовара / ОстатокТовара;
			СписываемаяСтоимость = тбОстаткиПартий.Стоимость * КоэфСписания;
			СписываемаяПродСтоимость = тбОстаткиПартий.ПродСтоимость * КоэфСписания;
			ВсегоСписаноКво = ВсегоСписаноКво + СписываемыйОстатокТовара;
			ВсегоСписаноСум = ВсегоСписаноСум + СписываемаяСтоимость;
			
			//Списываем партию оприходовавшую материал, полуфабрикат
			КодОперации = СписаниеВПроизводство;
			глПровестиПартию(Контекст, 0, 0, Фирма, ТМЦ, СчетП, МестоХраненияП, ПоставщикП, 
				ПоставкаП, ПрихДокументП,СписываемыйОстатокТовара, СписываемаяСтоимость, СписываемаяПродСтоимость,
				КодОперации, 0 ,0, 0,тбПродукции.НСтр);       
			глПроводкаПоЗатратам(Контекст,"231",СчетП,СписываемаяСтоимость,"Списание материалов в производство: уч. сумма",СписываемыйОстатокТовара, ВидДеятельности,ПодразделениеПроизв,ТМЦ.ВидЗатрат,
				МестоХраненияП,ТМЦ,ПрихДокументП,,,"ОУ",1);
			глУчестьСписание(тбОстаткиПартий,СписываемыйОстатокТовара,СписываемаяСтоимость,СписываемаяПродСтоимость);
			ОсталосьСписать = ОсталосьСписать - СписываемыйОстатокТовара;
		КонецЕсли;
		Если ОсталосьСписать = 0 Тогда
			Прервать;
		КонецЕсли;   
		Если тбПартии.ПолучитьСтроку()=0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОсталосьСписать > 0 Тогда
		глСообщитьОбОтсутствииПартии(0, Фирма, ТМЦ, НомерСтроки);
		Если Константа.РазрешитьОтрицОстатки = Нет Тогда
			глНеПроводить(Контекст);
			Возврат;
		Иначе
			СписываемыйОстатокТовара = ОсталосьСписать;
			СписываемаяСтоимость = ТМЦ.УчетнаяЦена.Получить(ДатаДок) * СписываемыйОстатокТовара;
			СписываемаяПродСтоимость = 0;
			ВсегоСписаноКво = ВсегоСписаноКво + СписываемыйОстатокТовара;
			ВсегоСписаноСум = ВсегоСписаноСум + СписываемаяСтоимость;
			Если глПартионныйУчетПоСкладам = Да Тогда
				МестоХраненияП = Склад;
			КонецЕсли;
			СчетП = ТМЦ.Счет;
			Если ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Товар тогда
				МетодРасчетаСебест = Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаДок);
			Иначе
				МетодРасчетаСебест = Константа.МетодРасчетаСебестоимостиПроизводственныхЗапасов.Получить(ДатаДок);
			КонецЕсли;
			Если МетодРасчетаСебест = Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
				ПоставщикП = 0;
				ПоставкаП = 0;
				ПрихДокументП = 0;
			Иначе
				ПоставщикП = 0;
				ПоставкаП = ТекущийДокумент();
				ПрихДокументП = ТекущийДокумент();
			КонецЕсли;
			//Списываем партию оприходовавшую материал, полуфабрикат
			КодОперации = СписаниеВПроизводство;
			глПровестиПартию(Контекст, 0, 0, Фирма, ТМЦ, СчетП, МестоХраненияП, ПоставщикП, 
				ПоставкаП, ПрихДокументП,СписываемыйОстатокТовара, СписываемаяСтоимость, СписываемаяПродСтоимость,
				КодОперации, 0 ,0, 0,тбПродукции.НСтр);       
			глПроводкаПоЗатратам(Контекст,"231",СчетП,СписываемаяСтоимость,"Списание материалов в производство: уч. сумма",СписываемыйОстатокТовара, ВидДеятельности,ПодразделениеПроизв,ТМЦ.ВидЗатрат,
				МестоХраненияП,ТМЦ,ПрихДокументП,,,"ОУ",1);
			глУчестьСписание(тбОстаткиПартий,СписываемыйОстатокТовара,СписываемаяСтоимость,СписываемаяПродСтоимость);
			ОсталосьСписать = ОсталосьСписать - СписываемыйОстатокТовара;
			глСообщитьОСозданииПартии(ТМЦ, СписываемыйОстатокТовара);
		КонецЕсли;
	КонецЕсли;
	// получаем себестоимость списанного материала, полуфабриката
	СуммаПоМатериалу = ВсегоСписаноСум;
	//Накапливаем общую учетную стоимость использованного собственного и давальческого сырья
	СуммаПоПродукции = СуммаПоПродукции + СуммаПоМатериалу;
КонецПроцедуры

// ===============================
Процедура ДвиженияСтрокаПроизводство()
	СуммаУчБезНДС = 0;
	НомерСтр = 0;
	Если тбПродукции.НайтиЗначение(НомерСтроки,НомерСтр,"НСтр")=0 Тогда
		// это некалькулируемая услуга
		Возврат;
	КонецЕсли;
	тбПродукции.ПолучитьСтрокуПоНомеру(НомерСтр);
	
	Если ПустоеЗначение(тбПродукции.Заказ) = 0 Тогда
		Если (тбПродукции.Заказ.Вид() =  "Заказ") Тогда
			Партия = тбПродукции.Заказ;
		ИначеЕсли (Константа.МетодРасчетаСебестоимостиПроизводственныхЗапасов.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСреднему) Тогда
			Партия = ПолучитьПустоеЗначение("Документ");
		Иначе
			Партия = ТекущийДокумент();
		КонецЕсли;
	ИначеЕсли Константа.МетодРасчетаСебестоимостиПроизводственныхЗапасов.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
		Партия = ПолучитьПустоеЗначение("Документ");
	Иначе
		Партия = ТекущийДокумент();
	КонецЕсли;
	Пока тбПродукции.НСтр = НомерСтроки Цикл
		СуммаПоМатериалу = 0; 			//Себест. материала (полуфабриката)
		СуммаПоПродукции = 0; 			//Сумма использованного собственного сырья при выпуске продукции
		СуммаМатЗатратПоПродукции = 0;	//Сумма материальных затрат по нормам на продукцию
		СуммаНеМатЗатратПоПродукции = 0;//Сумма нематериальных затрат по нормам на продукцию
		СуммаВозврОтходовПоПродукции = 0;//Сумма возвратных отходов по нормам на продукцию
		
		тбНормы = тбПродукции.Нормы;
		тбНормы.ВыбратьСтроки();
		Пока тбНормы.ПолучитьСтроку() = 1 Цикл
			Если СписыватьМатериалы = 1 Тогда
				Если тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.ВозвратныйОтход Тогда
					//возвратный отход
					СчетП = тбНормы.Материал.Счет;
					глПровестиОстатки(Контекст, ВремРег, Фирма, МестоХраненияВозвратныхОтходов, тбНормы.Материал,, тбНормы.Кво, 1, 0);
					//В качестве партии используем текущий документ т.к. возвратные отходы не являются продукцией, а просто обычными материалами.
					глПровестиПартию(Контекст, 1, 0, Фирма, тбНормы.Материал, СчетП, МестоХраненияВозвратныхОтходов,,ТекущийДокумент(),ТекущийДокумент(),
					тбНормы.Кво, -тбНормы.Сумма, 0, ВыпускПродукции, 0 ,0, 0);
					//Отражаем в регистре производственные затраты, как затрату с отрицательной суммой
					//ДвижениеПроизводственныеЗатраты(,тбНормы.Материал.ВидЗатрат,,тбНормы.Сумма,0,ОтражениеЗатрат);
					
					ДвижениеПроизводственныеЗатраты(тбНормы.Материал,тбНормы.Материал.ВидЗатрат,-тбНормы.Кво,тбНормы.Сумма,0,ОтражениеЗатрат);
					
					
					
					глПроводка(Контекст,СчетП,"231",-тбНормы.Сумма,"Возвратный отход, полученный при выпуске продукции",тбНормы.Кво, МестоХраненияВозвратныхОтходов,тбНормы.Материал,,
					ВидДеятельности,ПодразделениеПроизв,, ,,"СП",1,0);
				ИначеЕсли (тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.Материал)
				или (тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.Полуфабрикат) Тогда
					//материал или полуфабрикат
					Если (тбНормы.Материал.ВидТМЦ = Перечисление.ВидыТМЦ.Материал) Тогда
						Склад = МестоХраненияМатериалов;
					Иначе //Полуфабрикат
						Склад = МестоХраненияПолуфабрикатов;
					КонецЕсли;
					глПровестиОстатки(Контекст, ВремРег, Фирма, Склад, тбНормы.Материал,, тбНормы.Кво, 0, 0, , , 1);
					//Формируем проводки и движения, Накапливаем СуммаПоПродукции,СуммаДавПоПродукции
					//Получаем СуммаПоМатериалу и СуммаДавПоМатериалу
					ДвиженияСписаниеМатериалов(тбНормы.Кво,тбНормы.Материал, Склад);
					//Отражаем производственные затраты
					ДвижениеПроизводственныеЗатраты(тбНормы.Материал,тбНормы.Материал.ВидЗатрат,тбНормы.Кво,СуммаПоМатериалу,0,ОтражениеЗатрат);
				КонецЕсли;
			КонецЕсли; //СписыватьМатериалы = 1 
			// показываем нормативные затраты
			ДвижениеНормативныеЗатраты(тбНормы.СтатьяКалькуляции,тбНормы.Материал,тбНормы.Кво * ?(тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.ВозвратныйОтход,-1,1),тбНормы.Сумма);
			
			Если тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.ВозвратныйОтход Тогда
				СуммаВозврОтходовПоПродукции = СуммаВозврОтходовПоПродукции + тбНормы.Сумма;
			ИначеЕсли (тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.Материал)
			или (тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.Полуфабрикат) Тогда
				СуммаМатЗатратПоПродукции = СуммаМатЗатратПоПродукции + тбНормы.Сумма;
			ИначеЕсли (тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.СтатьяКалькуляции) Тогда
				СуммаНеМатЗатратПоПродукции = СуммаНеМатЗатратПоПродукции + тбНормы.Сумма;
			КонецЕсли;
		КонецЦикла;
		// Определяем себестоимость заданного количества продукции
		СебестоимостьПродукции = 0;
		Если Константа.СпособПриходованияПродукции = Перечисление.СпособыПриходованияПродукции.ПоПлановойСебестоимости  Тогда
			//Плановую себестоимость берем из справочинка ТМЦ, УчетнаяЦена
			СебестоимостьПродукции = тбПродукции.Продукция.УчетнаяЦена.Получить(ДатаДок) * тбПродукции.Кво;
		ИначеЕсли Константа.СпособПриходованияПродукции = Перечисление.СпособыПриходованияПродукции.ПоНормативнойСебестоимости  Тогда
			//Считаем себестоимость как общую сумму затрат по нормативам
			СебестоимостьПродукции = СуммаМатЗатратПоПродукции + СуммаНеМатЗатратПоПродукции - СуммаВозврОтходовПоПродукции;
		ИначеЕсли Константа.СпособПриходованияПродукции = Перечисление.СпособыПриходованияПродукции.ПоСебестоимостиФактическогоСостава  Тогда
			//Считаем себестоимость как фактические материальные затраты + плановые прочие затраты по нормативам
			СебестоимостьПродукции = СуммаПоПродукции + СуммаНеМатЗатратПоПродукции - СуммаВозврОтходовПоПродукции;
		ИначеЕсли Константа.СпособПриходованияПродукции = Перечисление.СпособыПриходованияПродукции.БезСебестоимости Тогда
			СебестоимостьПродукции = 0;
		КонецЕсли;
		
		Если тбПродукции.Уровень > 0 Тогда
			// продукция с Уровенб = 0 это услуги, их приходовать на склад не нужно 
			// а полуфабрикаты нужно
			СчетП = тбПродукции.Продукция.Счет;
			глПровестиОстатки(Контекст, ВремРег, Фирма, МестоХраненияПолуфабрикатов, тбПродукции.Продукция,, тбПродукции.Кво, 1, 0);
			глПровестиПартию(Контекст, 1, 0, Фирма, тбПродукции.Продукция, СчетП, МестоХраненияПолуфабрикатов,,Партия,Партия, 
				тбПродукции.Кво, СебестоимостьПродукции, СебестоимостьПродукции, ВыпускПродукции, 0 ,0, 0,тбПродукции.НСтр);
			// проводка по приходованию продукции
			глПроводка(Контекст,тбПродукции.Продукция.Счет,"231",СебестоимостьПродукции,"Производство продукции",тбПродукции.Кво, МестоХраненияПолуфабрикатов,тбПродукции.Продукция,Партия,
				ВидДеятельности,ПодразделениеПроизв,, ,,"СП"); 
			//Добавим в тбПартии, что бы производимый полуфабрикат можно было сразу списать на производство продукции
			ДобавитьПолуфабрикатВТаблицы(Партия, СчетП, МестоХраненияПолуфабрикатов, СебестоимостьПродукции, СебестоимостьПродукции, тбПродукции.Кво);
		КонецЕсли;
		//Движения по ВЫПУСКУ ПРОДУКЦИИ
		ДвижениеВыпускПродукции(тбПродукции.Кво,0,СебестоимостьПродукции,0,Партия);
		СуммаУчБезНДС = СебестоимостьПродукции;
		Если тбПродукции.ПолучитьСтроку()=0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ДвиженияИПроводкиПроизводство

// ===============================
Процедура ДвиженияСтрокаПродажа()
	КодОперации = ПродажаУслуги;
	// определяем счет реализации услуг
	СчРеал = глСчетРеализации(Услуга);
	СчетДоходов = "703";
	
	Если (фДавальческаяПродукция = 0) Тогда
		// просто продажа услуги
		ВсегоСписать = Кво * Коэффициент;
		НомерСтр = 0;
		Если тбПродукции.НайтиЗначение(НомерСтроки,НомерСтр,"НСтр")=0 Тогда
			// это некалькулируемая услуга
			Доход = 0;
			СчетУч = Услуга.Счет;
		Иначе
			Доход = ПострСуммаСНДС-СуммаУчБезНДС;
			СчетУч = СчетПоКоду("231");
		КонецЕсли;
		// показываем оборот в регистре
		глПровестиПартию(Контекст, 0, 0, Фирма, Услуга, СчетУч, 0, 0, 
			ТекущийДокумент(), ТекущийДокумент(), ВсегоСписать, ПострСуммаСНДС,
			0, КодОперации, 1, ПострСуммаБезНДС, Доход);
		// Себестоимость услуги
		глПроводка(Контекст,СчРеал,СчетУч,СуммаУчБезНДС,"Реализация: услуги",ВсегоСписать,ВидДеятельности,ПодразделениеПроизв,,
		ВидДеятельности,ПодразделениеПроизв,,,,"ОУ",1,0);
		
	Иначе
		// списываем партии остатки и партии давальческой продукции
		МетодРасчетаСебестоимости=глПолучитьМетодРасчетаСебестоимости(Услуга,ДатаДок);
		ВсегоСписать = Кво * Коэффициент;
		ОсталосьСписать = ВсегоСписать;
		// списываем остатки продукции
		глПровестиОстатки(Контекст, ВремРег, Фирма, МестоХраненияПродукции, Услуга, ,
			ВсегоСписать, 0, 0, 1, 2, 1, Договор);
		ОсталосьСуммаБезНДС = ПострСуммаБезНДС;
		// находим первую партию в тбПартии
		НС=0;
		Если тбПартии.НайтиЗначение(НомерСтроки,НС,"НомерСтрокиДокумента")=1 Тогда
			тбПартии.ПолучитьСтрокуПоНомеру(НС);
		Иначе
			тбПартии.ВыбратьСтроки();
			тбПартии.ПолучитьСтроку();
		КонецЕсли;
		Пока тбПартии.НомерСтрокиДокумента = НомерСтроки Цикл
			// получаем параметры партии
			МестоХраненияП = тбПартии.МестоХранения;
			ПоставщикП = тбПартии.Поставщик;
			ПоставкаП = тбПартии.Поставка;
			ПрихДокументП = тбПартии.ПрихДокумент;
			СчетП = тбПартии.Счет;
			// находим остаток в тбОстатки
			НС =0;
			Если тбОстаткиПартий.НайтиЗначение(глПолучитьКлючТбОстатков(ПрихДокументП,ПоставкаП,Услуга.Код,СчетП,МестоХраненияП),НС,"Ключ")=1 Тогда
				тбОстаткиПартий.ПолучитьСтрокуПоНомеру(НС);
				ОстатокТовара = тбОстаткиПартий.ОстатокТовара;
				Если ОстатокТовара = 0 Тогда
					Если тбПартии.ПолучитьСтроку()=0 Тогда
						Прервать;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				// рассчитываем суммы для списания
				СписываемыйОстатокТовара = Мин(ОсталосьСписать, ОстатокТовара);
				КоэфСписания = СписываемыйОстатокТовара / ОстатокТовара;
				КоэфРеализации = СписываемыйОстатокТовара / ВсегоСписать;
				СписываемаяСтоимость = тбОстаткиПартий.Стоимость * КоэфСписания;
				СписываемаяПродСтоимость = тбОстаткиПартий.ПродСтоимость * КоэфСписания;
				Если СписываемыйОстатокТовара = ОсталосьСписать Тогда
					ОборотБезНДС = ОсталосьСуммаБезНДС;
				Иначе
					ОборотБезНДС = ПострСуммаБезНДС * КоэфРеализации;
				КонецЕсли;  
				Доход = ОборотБезНДС - СписываемаяПродСтоимость;
				ОсталосьСуммаБезНДС = ОсталосьСуммаБезНДС - ОборотБезНДС;
				КодОперации = Продажа;
				// Списываем партию давльческой продукции
				глПровестиПартию(Контекст, 0, 0, Фирма, Услуга, СчетП, МестоХраненияП, ПоставщикП,
					ПоставкаП, ПрихДокументП,СписываемыйОстатокТовара, СписываемаяСтоимость, СписываемаяПродСтоимость,
					КодОперации, 1 ,ОборотБезНДС, Доход);
				// Списываем полную себестоимость давльческой продукции
				глПроводка(Контекст,,СчетП,СписываемаяСтоимость,"Себестоимость продукции",СписываемыйОстатокТовара,,,,
				МестоХраненияПродукции,Услуга,ПоставкаП,,,"ОУ",1,0);
				// Себестоимость услуги
				глПроводка(Контекст,СчРеал,СчетПоКоду("232"),СписываемаяПродСтоимость,"Себест. услуг по произв. дав. продукции",СписываемыйОстатокТовара, ВидДеятельности,ПодразделениеПроизв,,
				МестоХраненияПродукции,Услуга,ПоставкаП,,,"ОУ",1,0);
				
				глУчестьСписание(тбОстаткиПартий,СписываемыйОстатокТовара,СписываемаяСтоимость,СписываемаяПродСтоимость);
				ОсталосьСписать = ОсталосьСписать - СписываемыйОстатокТовара;
			КонецЕсли;
			Если ОсталосьСписать = 0 Тогда
				Прервать;
			КонецЕсли;   
			Если тбПартии.ПолучитьСтроку()=0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		Если ОсталосьСписать > 0 Тогда
			глСообщитьОбОтсутствииПартии(0, Фирма, Услуга, НомерСтроки);
			Если Константа.РазрешитьОтрицОстатки = Нет Тогда
				глНеПроводить(Контекст);
				Возврат;
			Иначе
				// списываем отсутствующую продукцию
				СписываемыйОстатокТовара = ОсталосьСписать;
				КоэфСписания = СписываемыйОстатокТовара / ВсегоСписать;
				СписываемаяСтоимость = ПострСуммаБезНДС * КоэфСписания;
				СчетП = Услуга.Счет;
				МестоХраненияП = ?(глПартионныйУчетПоСкладам = Да,МестоХраненияПродукции,0);
				Если МетодРасчетаСебестоимости = Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
					ПоставщикП = 0;
					ПоставкаП = 0;
					ПрихДокументП = 0;
				Иначе
					ПоставщикП = 0;
					ПоставкаП = 0;
					ПрихДокументП = ТекущийДокумент();
				КонецЕсли;
				// списываем партию продукции
				глПровестиПартию(Контекст, 0, 0, Фирма, Услуга, СчетП, МестоХраненияП, ПоставщикП, 
					ПоставкаП, ПрихДокументП, СписываемыйОстатокТовара, СписываемаяСтоимость, 0,
					КодОперации, 1 ,СписываемаяСтоимость, 0);
				// отражаем себестоимость продукции
				глПроводка(Контекст,СчРеал,Услуга.Счет,СписываемаяСтоимость,"Себестоимость",СписываемыйОстатокТовара, ВидДеятельности,ПодразделениеПроизв,,
				МестоХраненияПродукции,Услуга,ПоставкаП, ,,"ОУ",1,0);
				глСообщитьОСозданииПартии(Услуга, СписываемыйОстатокТовара);
			КонецЕсли;
		КонецЕсли; // ОсталосьСписать > 0
	КонецЕсли;

	// вторая часть сложной проводки по доходам
	глПроводка(Контекст,,СчетДоходов,ПострСуммаСНДС,"Реализация: услуги",, ,,,
	ВидДеятельности,Подразделение,МестоХраненияПродукции, ,,"ОУ",1,"Реализация");
	Если ВидТорговли = Перечисление.ВидыТорговли.Нал Тогда
		// одновременно и отгрузка и оплата, налоговые обязательства показываем на всю сумму
		глПроводка(Контекст,СчетДоходов,,ПострНДС,"НДС: оплата наличными:",, ВидДеятельности,Подразделение,МестоХраненияПродукции,
		,,, ,,"ОУ",1,"НДС ПС");
	Иначе
		// для первого события
		глПроводка(Контекст,СчетДоходов,,ПострНДСПерв,"НДС: первое событие",, ВидДеятельности,Подразделение,МестоХраненияПродукции,
		,,, ,,"ОУ",1,"НДС ПС");
		// для второго события
		глПроводка(Контекст,СчетДоходов,,ПострНДС-ПострНДСПерв,"НДС: второе событие",, ВидДеятельности,Подразделение,МестоХраненияПродукции,
		,,, ,,"ОУ",1,"НДС ВС");
	Конецесли;
	
КонецПроцедуры
                               
// ===============================
Процедура ОбработкаПроведения()
Перем ИтогСуммаСНДС, ИтогНДС;	// базы распределения сумм

	глКомментарий("Начало",2,Контекст);
	
	ПоЗаказу = глПолучитьЗаказ(Договор);
	фДавальческаяПродукция = глЭтоДавальческийЗаказ(ПоЗаказу);
	Если ПроверкаШапки()=0 Тогда
	    глНеПроводить(Контекст);
	    Возврат;
	КонецЕсли;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ПроверкаСтроки()=0 Тогда
		    глНеПроводить(Контекст);
		    Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если фДавальческаяПродукция = 0 Тогда
		Если ЗаполнитьТбПродукции()=0 Тогда
			глНеПроводить(Контекст);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьШапку();
	ДвиженияВзаиморасчеты();

	// инициализация алгоритмов корректого распределения
	глОчиститьКлючОкр("Взаим");
	глОчиститьКлючОкр("НДС");
	глОчиститьКлючОкр("НДСперв");
	
	// расчитаем базы распределения 
	глОпределитьБазыРаспределения(Контекст, ИтогСуммаСНДС, ИтогНДС);
	ИтогСуммаСНДС		= глПересчет(ИтогСуммаСНДС,Валюта,ДатаДок,Гривня,ДатаДок);
	ИтогНДС 			= глПересчет(ИтогНДС      ,Валюта,ДатаДок,Гривня,ДатаДок);
	НДСпоВзаиморасчетам	= НДСПервоеСобытие + НДСВтороеСобытие;
	
	ВремРег.Актуальность(1);
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		
		Если фДавальческаяПродукция = 0 Тогда
			ДвиженияСтрокаПроизводство();
			Если СтатусВозврата()=0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;

		// Сумму по строке пересчитываем по курсу документа с учетом аванса в гривни 
		ПострСуммаСНДС		= глПересчет(СуммаСНДС,Валюта,ДатаДок,Гривня,ДатаДок);
		ПострНДС			= глПересчет(НДС      ,Валюта,ДатаДок,Гривня,ДатаДок);
		ПострСуммаСНДС		= глОкрКорр("Взаим", ?(ИтогСуммаСНДС = 0, 0, ВзаиморасчетыГрн * ПострСуммаСНДС / ИтогСуммаСНДС),2);
		ПострНДС			= глОкрКорр("НДС", ?(ИтогНДС = 0, 0, НДСпоВзаиморасчетам * ПострНДС / ИтогНДС),2);
		ПострНДСПерв		= глОкрКорр("НДСперв", ?(НДСпоВзаиморасчетам = 0, 0, НДСПервоеСобытие * ПострНДС / НДСпоВзаиморасчетам),2);
		ПострСуммаБезНДС 	= ПострСуммаСНДС - ПострНДС;
		ОсталосьСуммаСНДС	= ПострСуммаСНДС;
		ОсталосьСуммаБезНДС	= ПострСуммаБезНДС;
		
		ДвиженияСтрокаПродажа();
		Если СтатусВозврата()=0 Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;           
	ВремРег.Актуальность(0);
	                  
	глЗаписатьПроводкиВОперацию(Контекст);

	Операция.СуммаОперации = Итог("СуммаСНДС");
	Операция.Содержание = Примечание;
	Операция.Записать();
	глКомментарий("Окончание",2,Контекст);
КонецПроцедуры