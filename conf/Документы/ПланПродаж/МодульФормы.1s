Перем СписокПодбора,СправочникПодбора;
Перем СписокДействий;
Перем ТЗЦенСырья;
Перем ТЗСырьяБезЦен;
Перем ЗатратыНаПереработкуСырьяДо;
Перем ОткрытьФормуУстановкиЦен;
Функция СписокВСтроку(Список) Далее
Функция ПроверкаПериода() Далее
Функция ПолучитьЦенуСырья(Материал) Далее
Функция РасчетПрямыхМатериальныхЗатртат() Далее
Функция ПрямаяЗарплата() Далее
Процедура ЗаполнитьСписок(Фильтр, Список) Далее
Процедура ПриИзмененииНоменклатуры(ПересчитатьУдельныйВес = 0, ПересчитатьОБ = 0) Далее
Процедура ЗаполнитьТЧПоОтботу() Далее
Процедура ЗаполнитьТЧПоПродажам() Далее
Процедура ЗаполнитьТЧПоЗаказам() Далее
Процедура ЗаполнитьЦеныПоПродажам() Далее
Процедура РассчитатьПрямыеЗатртаты(ПоСтроке = 0) Далее
Процедура ПересчитатьУдельныйВес() Далее
Процедура ЗаполнитьТЗСырья() Далее
Процедура ОбновитьДокументУстановкаЦенСырья() Далее
Процедура РассчитатьСтроку() Далее
Процедура ПересчитатьОбъемБезубыточности() Далее

//===========================Обработчики событий формы==================

//====================================================================== 
Процедура ПриОткрытии()
	
	ПриЗаписиПерепроводить(1);
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной","Основной");
	Форма.Закладки.ДобавитьЗначение("НастройкаОтбора","Настройка отбора");
	Форма.ИспользоватьСлой("Основной",2);
	ЗатратыНаПереработкуСырьяДо = ЗатратыНаПереработкуСырья;
	ЗаполнитьСписок(СтрФильтр, СписокВыбТМЦ);
	ЗаполнитьСписок(СтрФильтрИскл, СписокВыбТМЦИскл);
	ЗаполнитьТЗСырья();
	
КонецПроцедуры

//=======================================================================
Процедура ПриЗаписи()
	
	Автор = глПользователь;
	глПроверкаДатыДок(Контекст,"Запись");
		
	СтрФильтр = СписокВСтроку(СписокВыбТМЦ)	;
	СтрФильтрИскл = СписокВСтроку(СписокВыбТМЦИскл)	; 
	
КонецПроцедуры

//======================================================================= 
Процедура ВводНового(Скопирован, ОбъектКопирования)
	
	глЗаполнитьШапку(Контекст);
	глУстановитьНомер(Контекст);
	Если Скопирован=1 Тогда	//копирование документа
		УдалитьСтроки();
		Возврат;
	КонецЕсли;
	
	БазовыйПериодС = НачМесяца(ДобавитьМесяц(ДатаДок, -1));
	БазовыйПериодПо = КонМесяца(ДобавитьМесяц(ДатаДок,-1));
	
	ПлановыйПериодС = НачМесяца(ДатаДок);
	ПлановыйПериодПо = КонМесяца(ДатаДок);
	ТипЦеныМатериала = 1;
	
КонецПроцедуры

Функция ПолучитьПланРаскраски()
	
	Возврат  глРаскраска();
	
КонецФункции // 

//================================Обработчики команд формы===============
Процедура Заполнить()
	
	Варианы= СоздатьОбъект("СписокЗначений");
	Варианы.ДобавитьЗначение("&ПоОтбору","По отбору");
	Варианы.ДобавитьЗначение("&ПоПродажам", "По продажам за базовый период");
	Варианы.ДобавитьЗначение("&ПоЗаказам", "По заказам за базовый период");
	Результат = 0;
	Если Варианы.ВыбратьЗначение(,,Результат,,1)=1 Тогда
		Если Результат = 1 Тогда
			ЗаполнитьТЧПоОтботу();
		ИначеЕсли Результат = 2 Тогда
			ЗаполнитьТЧПоПродажам();
		ИначеЕсли Результат = 3 Тогда
			ЗаполнитьТЧПоЗаказам();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура Рассчитать()
	
	Варианы= СоздатьОбъект("СписокЗначений");
	Варианы.ДобавитьЗначение("&МатЗатратыЗарплату", "Прямые мат. затраты и оплата труда");
	Результат = 0;
	Если Варианы.ВыбратьЗначение(,,Результат,,1)=1 Тогда
		Если Результат = 1 Тогда
			РассчитатьПрямыеЗатртаты();
			ПересчитатьОбъемБезубыточности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЦены()
	
	Варианы= СоздатьОбъект("СписокЗначений");
	Варианы.ДобавитьЗначение("&ПоПродажам", "По суммам продажам за базовый период");
	Результат = 0;
	Если Варианы.ВыбратьЗначение(,,Результат,,1)=1 Тогда
	    Если Результат = 1 Тогда
			ЗаполнитьЦеныПоПродажам();
		ИначеЕсли Результат = 2 Тогда
		
	    КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Открывает нормы для текущего элемента номенклатуры
Процедура ОткрытьДокумент()
	
	Варианы= СоздатьОбъект("СписокЗначений");
	Варианы.ДобавитьЗначение("&НормыЗатрат","Норма затрат (ПФ)");
	Варианы.ДобавитьЗначение("&СхемаРасчетаЗП", "Документ ""Схема расчета з/п""");
	Результат = 0;
	Документ = "";
	
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	
	Если Варианы.ВыбратьЗначение(,,Результат,,1)=1 Тогда
		Если Результат = 1 Тогда
			Документ =  Номенклатура.НормыЗатрат.Получить(ПлановыйПериодПо);
			СписокПараметров.ДобавитьЗначение(УстановкаЦенСырья, "УстановкаЦенСырья");
		ИначеЕсли Результат = 2 Тогда
			Документ = Номенклатура.СхемаРасчетаЗП.Получить(ПлановыйПериодПо);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(Документ) = 1 Тогда
		Возврат 
	КонецЕсли;
	
	ОткрытьФорму(Документ,СписокПараметров);
	
КонецПроцедуры

//==================Обработчики событий изменений элементов формы=========

Процедура ЗатртатыНаПереработкуПриИзменении()
	
	Если ЗатратыНаПереработкуСырьяДо <> ЗатратыНаПереработкуСырья Тогда
		Если Вопрос("Изменилась сумма затрат на переработку сырья. Рассчитать прямые затраты заново?","Да+Нет") = "Да" Тогда
			РассчитатьПрямыеЗатртаты();
			ПересчитатьОбъемБезубыточности();
		КонецЕсли;
	КонецЕсли;
	
	ЗатратыНаПереработкуСырьяДо = ЗатратыНаПереработкуСырья;
	
КонецПроцедуры

//При смене переключателя ТипЦеныМатериала
//
Процедура ВопросПересчитатьЗатраты()
	
	Если Вопрос("Выполнить расчет прямых затрат на продукцию?","Да+Нет") = "Да" Тогда
		ОткрытьФормуУстановкиЦен = 0;
		РассчитатьПрямыеЗатртаты();
		ПересчитатьОбъемБезубыточности();
	КонецЕсли;
	
КонецПроцедуры

//=================Процедуры обработки табличной части=====================

//Предопределенная процедура при интерактивном удалении строки документа.
Процедура ПриУдаленииСтроки()
	ПересчитатьУдельныйВес();
	ПересчитатьОбъемБезубыточности();
КонецПроцедуры

//Обработчик вызова изменения номенклатуры
//
Процедура ПриИзмененииНоменклатуры(ПересчитатьУдельныйВес = 0, ПересчитатьОБ = 0)
	глПриИзмененииТовара(Контекст);
	Если ПересчитатьУдельныйВес = 1 Тогда
		ПересчитатьУдельныйВес();
	КонецЕсли;
	РассчитатьСтроку();
	Если ПересчитатьОБ = 1 Тогда
		ПересчитатьОбъемБезубыточности();
	КонецЕсли;
КонецПроцедуры

//Обработчик вызова изменения количества
//
Процедура ПриИзмененииКоличества(РасчетЗатрат = 0, ПересчитатьУдВес = 0, ПересчитатьОБ = 1)
	Вес = Количество*Коэффициент;
	Сумма = Количество*Цена;
	Если РасчетЗатрат = 1 Тогда
		ОткрытьФормуУстановкиЦен = 0;
		РассчитатьПрямыеЗатртаты(1); //По текущей строке
	КонецЕсли;
	Если ПересчитатьУдВес = 1 Тогда
		ПересчитатьУдельныйВес();
	КонецЕсли;
	РассчитатьСтроку();
	Если ПересчитатьОБ = 1 Тогда
		ПересчитатьОбъемБезубыточности();
	КонецЕсли;
КонецПроцедуры

//Расчет суммы при изменении цены
Процедура ПриИзмененииЦены()
	Сумма = Количество*Цена;
	РассчитатьСтроку();
	ПересчитатьОбъемБезубыточности();
КонецПроцедуры

//Обработчик вызова изменения веса
//
Процедура ПриИзмененииВеса()
	ПересчитатьУдельныйВес();
	РассчитатьСтроку();
	ПересчитатьОбъемБезубыточности();
КонецПроцедуры

//Обработчик вызова изменения суммы
//
Процедура ПриИзмененииСуммы()
	Цена = ?(Количество = 0,0,Сумма/Количество);
	РассчитатьСтроку();
	ПересчитатьОбъемБезубыточности();
КонецПроцедуры

//Удельный вес продукции
Функция УдельныйВес()
	Возврат Окр(?(Итог("Вес") = 0,0,Вес/Итог("Вес")),6)
КонецФункции

//Пересчитует удельный вес по всем строкам
Процедура ПересчитатьУдельныйВес()
	ИтогВес = Итог("Вес");
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		УдельныйВес = Окр(?(ИтогВес = 0,0,Вес/ИтогВес),6);
	КонецЦикла;
	Форма.Обновить();
КонецПроцедуры

// Предопределенная процедура выбора закладки формы
//
Процедура ПриВыбореЗакладки(Номер,Значение)
	
	Форма.ИспользоватьСлой(Значение,2);
	
КонецПроцедуры

//Расчет прямой зарплаты по 
Функция ПрямаяЗарплата()
	
	НормаЗатрта =  Номенклатура.НормыЗатрат.Получить(ПлановыйПериодПо);
	
	Если ПустоеЗначение(НормаЗатрта) = 1 Тогда
		Возврат 0
	КонецЕсли;
	
	ПроцентПотерь = Номенклатура.ПроцПотерь.Получить(ПлановыйПериодПо);
	КвоПродукцииП = НормаЗатрта.КвоПродукции - НормаЗатрта.КвоПродукции*(ПроцентПотерь/100);
	
	Если ПустоеЗначение(Номенклатура.СхемаРасчетаЗП) = 0 Тогда
		СхемаЗП = Номенклатура.СхемаРасчетаЗП.Получить(ПлановыйПериодПо);
		СхемаЗП.ВыбратьСтроки();
		ПрямаяЗарплата = 0;
		Пока СхемаЗП.ПолучитьСтроку() = 1 Цикл
			ВидРабот = СхемаЗП.ВидРабот;
			ВидБазы = СхемаЗП.ВидРабот.База;
			База = ?((СхемаЗП.ВидРабот.База = Перечисление.ТипБазыВР.КвоФарша) ИЛИ (СхемаЗП.ВидРабот.База = Перечисление.ТипБазыВР.Кутера), НормаЗатрта.КвоПродукции, КвоПродукцииП);
			Тариф = ВидРабот.Тариф.Получить(ПлановыйПериодПо);
			СтоимостьЗП = База*Тариф;
			ПрямаяЗарплата = ПрямаяЗарплата + СтоимостьЗП;
		КонецЦикла;
	КонецЕсли;
	
	ЗП_КГ = Окр(ПрямаяЗарплата / КвоПродукцииП, 2); // З/п на 1кг по норме продукции
	
	ИтогПрямаяЗП = ЗП_КГ * Вес;
	
	Возврат ИтогПрямаяЗП;
	
КонецФункции

//Расчет прямых мат затртат в т.ч. затраты на переработку сырья
Функция РасчетПрямыхМатериальныхЗатртат()
	
	НормаЗатрта =  Номенклатура.НормыЗатрат.Получить(ПлановыйПериодПо);
	
	Если ПустоеЗначение(НормаЗатрта) = 1 Тогда
		Возврат 0
	КонецЕсли;
	
	ПроцентПотерь = Номенклатура.ПроцПотерь.Получить(ПлановыйПериодПо);
	КвоПродукцииП = НормаЗатрта.КвоПродукции - НормаЗатрта.КвоПродукции*(ПроцентПотерь/100);
	
	
	НормаЗатрта.ВыбратьСтроки();
	ИтСтоимость = 0;
	Пока НормаЗатрта.ПолучитьСтроку() = 1 Цикл
		Если НормаЗатрта.Элемент.Вид() = "ТМЦ" Тогда
			НормаФ = НормаЗатрта.Элемент.НормаКГФарша.Получить(ПлановыйПериодПо);
			Если НормаЗатрта.НеПересчитыватьКво = Да Тогда
				НормаКво = Окр(НормаЗатрта.Кво, 4);
			ИначеЕсли НормаФ <> 0 Тогда
				Если НормаЗатрта.Элемент.СписыватьПриВыпуске.Получить(НормаЗатрта.ДатаДок) = 0 Тогда
					НормаКво = Окр(НормаЗатрта.КвоПродукции * НормаФ, 3);
				Иначе 
					НормаКво = ?(НормаЗатрта.Элемент.БазаДляНормы = Перечисление.БазаДляНормы.Продукция,
					Окр(КвоПродукцииП * НормаФ, 3), //фарш минус потери (продукция)
					Окр(НормаЗатрта.КвоПродукции * НормаФ, 3)); //расчет на фарш
				КонецЕсли;
				// - umk
			Иначе
				НормаКво = Окр(НормаЗатрта.Кво, 4);
			КонецЕсли;
			Стоимость = ПолучитьЦенуСырья(НормаЗатрта.Элемент) * НормаКво;
			ИтСтоимость = ИтСтоимость + Стоимость;	    
		КонецЕсли;
	КонецЦикла;
	
	ЦенаКГ = Окр(ИтСтоимость / КвоПродукцииП, 2); //Стоимость 1кг по норме продукции
	
	ИтогСтоимость = ЦенаКГ*Вес + ЗатратыНаПереработкуСырья * УдельныйВес();
	
	Возврат ИтогСтоимость;
	
КонецФункции
	
//Итог всех затрат по строке ТЧ
Функция ПрямыеЗатраты(На1Кг = 0)
	
	Затраты = МатЗатраты+ПрямаяЗП+Электроэнергия;
	Если На1Кг = 1 Тогда
		Затраты = ?(Вес =0,0,Затраты/Вес)
	КонецЕсли;
	Затраты = Окр(Затраты,2);
	
	Возврат Затраты;
	
КонецФункции

//Маржинальная прибыль по строке ТЧ
Функция МаржинальнаяПрибыль(На1Кг = 0)
	
	МПрибыль = Сумма-ПрямыеЗатраты();
	Если На1Кг = 1 Тогда
		МПрибыль = ?(Вес =0,0,МПрибыль/Вес)
	КонецЕсли;
	МПрибыль = Окр(МПрибыль,2);
	
	Возврат МПрибыль;
	
КонецФункции

//==============================Служебные процедуры=====================

//Заполнить ТЗ сырья из документа Установка цен сырья
Процедура ЗаполнитьТЗСырья()
	
	ТЗЦенСырья = СоздатьОбъект("ТаблицаЗначений");
	
	Если ПустоеЗначение(УстановкаЦенСырья) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Документ = СоздатьОбъект("Документ.УстановкаЦенСырья");
	Если Документ.НайтиДокумент(УстановкаЦенСырья) = 1 Тогда
		Документ.ВыгрузитьТабличнуюЧасть(ТЗЦенСырья);
	Иначе
		Сообщить("Не выбран документ установки цен сырья. Материальные затраты не расчитаны!");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//Возвращает цену материала из таблицы плановых цен документа Установка цен сырья
Функция ПолучитьЦенуСырья(Материал)
	
	ЦенаСырья = 0;
	Стр = 0;
	Попытка
		МатериалСписания = ?(ПустоеЗначение(Материал.ТМЦДляСписания.Получить(ПлановыйПериодПо)) = 1, Материал, Материал.ТМЦДляСписания.Получить(ПлановыйПериодПо));
	Исключение
		МатериалСписания = Материал;
	КонецПопытки;
	
	Если ТЗЦенСырья.НайтиЗначение(МатериалСписания, Стр, "ТМЦ") = 1 Тогда
		ТипЦены = ?(ТипЦеныМатериала = 2,"ЦенаП","Цена");
		ЦенаСырья = ТЗЦенСырья.ПолучитьЗначение(Стр, ТипЦены);
		Если ЦенаСырья = 0 Тогда
			ТЗСырьяБезЦен.НоваяСтрока();
			ТЗСырьяБезЦен.Номенклатура = МатериалСписания;
			ТЗСырьяБезЦен.ДобавитьПозицию = Нет; // найдена, но цена не установлена. Не добавляем в документ УстановкаЦенСырья.
		КонецЕсли;
	Иначе
		ТЗСырьяБезЦен.НоваяСтрока();
		ТЗСырьяБезЦен.Номенклатура = МатериалСписания;
		ТЗСырьяБезЦен.ДобавитьПозицию = Да;
	КонецЕсли;
	
	Возврат ЦенаСырья;
	
КонецФункции

//Выполняет расчет всех прямых затртат (материалы и прямая зарплата) 
Процедура РассчитатьПрямыеЗатртаты(ПоСтроке = 0)
	
	ТЗСырьяБезЦен = СоздатьОбъект("ТаблицаЗначений");
	ТЗСырьяБезЦен.НоваяКолонка("Номенклатура");
	ТЗСырьяБезЦен.НоваяКолонка("ДобавитьПозицию","Перечисление.ДаНет");
	ТЗСырьяБезЦен.НоваяКолонка("Цена","Число"); // Для группировки ТЗ
	
	ЗаполнитьТЗСырья();
	
	Если ТЗЦенСырья.КоличествоСтрок() = 0 Тогда
		Сообщить("Не заполнена таблица цен сырья. Расчет затрат невозможен.","!!");
		Возврат;
	КонецЕсли;
	
	Если ПоСтроке = 0 Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Состояние("Расчет строки №" + Строка(НомерСтроки) + " " +Строка(Номенклатура));
			ПрямаяЗП = ПрямаяЗарплата();
			МатЗатраты = РасчетПрямыхМатериальныхЗатртат(); 
			РассчитатьСтроку();
		КонецЦикла;
	Иначе
		ПрямаяЗП = ПрямаяЗарплата();
		МатЗатраты = РасчетПрямыхМатериальныхЗатртат(); 
		РассчитатьСтроку();
	КонецЕсли;
	
	ТЗСырьяБезЦен.Свернуть("Номенклатура,ДобавитьПозицию","Цена");
	
	Если ТЗСырьяБезЦен.КоличествоСтрок()<>0 Тогда
		Сообщить("Не установлены цены на сырье для позиций:");
		ТЗСырьяБезЦен.ВыбратьСтроки();
		Пока ТЗСырьяБезЦен.ПолучитьСтроку() = 1 Цикл
			Сообщить(Строка(ТЗСырьяБезЦен.Номенклатура) + ", (" + Строка(ТЗСырьяБезЦен.Номенклатура.Код) +")" + ";");
		КонецЦикла;
	КонецЕсли;
	
	Если ТЗСырьяБезЦен.КоличествоСтрок() > 0 Тогда
		Если Вопрос("Установить цены и добавить материалы с неустановленными ценами в документ ""Установка цен сырья""?","Да+Нет") = "Да" Тогда
			ОбновитьДокументУстановкаЦенСырья();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Рассчитывает значения текущей строки табличной части
//
Процедура РассчитатьСтроку()
	
	Электроэнергия = Вес*Номенклатура.КатегорияНоменклатуры.ЗатратыЭлектроэнергии.Получить(ПлановыйПериодПо);
	ИтогоПрямыеЗатр = ПрямыеЗатраты();
	ИтогоПрямыеЗатр1кг = ПрямыеЗатраты(1);
	
	МПОбщая = МаржинальнаяПрибыль();
	МПНаКг  = МаржинальнаяПрибыль(1);
	
	МПЕдВНаборе = МПНаКг*УдельныйВес;
	
КонецПроцедуры

//Рассчитывает маржинальную прибыль и объем безубыточности
//
Процедура ПересчитатьОбъемБезубыточности()
	
	МПЕдНабора  = Итог("МПЕдВНаборе");
	ОбъемБезубыточности = ?(МПЕдНабора=0,0,(ПЗПериода+Прибыль)/МПЕдНабора);
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		КолВТБ = ОбъемБезубыточности * УдельныйВес;
	КонецЦикла;
	
КонецПроцедуры

//Добавляет в документ установка цен сырья 
Процедура ОбновитьДокументУстановкаЦенСырья()
	
	Документ = СоздатьОбъект("Документ.УстановкаЦенСырья");
	Если Документ.НайтиДокумент(УстановкаЦенСырья) = 1 Тогда
		ТЗСырьяБезЦен.ВыбратьСтроки();
		Пока ТЗСырьяБезЦен.ПолучитьСтроку() = 1 Цикл
			Если ТЗСырьяБезЦен.ДобавитьПозицию = Да Тогда
				Документ.НоваяСтрока();
				Документ.ТМЦ = ТЗСырьяБезЦен.Номенклатура;
				глПриИзмененииТовара(Документ);
			КонецЕсли;
		КонецЦикла;
		Документ.Записать();
		ЗаполнитьТЗСырья();
		Если ОткрытьФормуУстановкиЦен = 1 Тогда
			ОткрытьФорму(Документ.ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	Если ОткрытьФормуУстановкиЦен = 0 Тогда
		Предупреждение("Откройте документ ""Установка цен сырья для редактирования.""");
	КонецЕсли;
	
	ОткрытьФормуУстановкиЦен = 1;
	
КонецПроцедуры

//Выполняет проверку заполнения периода 
//
Функция ПроверкаПериода()
	
	Ошибка = 0;
	
	Если (ПустоеЗначение(ПлановыйПериодС) = 1) Или (ПустоеЗначение(ПлановыйПериодПо) = 1) Тогда
		Текст = "Не заполнен период планирования!";
		Ошибка = 1;
	КонецЕсли;
	
	Если (ПустоеЗначение(БазовыйПериодС) = 1) Или (ПустоеЗначение(БазовыйПериодПо) = 1) Тогда
		Текст = "Не заполнен базовый период!";
		Ошибка = 1;
	КонецЕсли;
	
	Если Ошибка = 1 Тогда
		Сообщить(Текст,"!");
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

//Предопределенная процедура обработки подбора
//
Процедура ОбработкаПодбора(Значение) 	
	Перем ПредставлениеЗначения;
	
	Если (ВРег(Значение.Вид())=СправочникПодбора) И (СписокПодбора.НайтиЗначение(Значение)=0) Тогда
		ПредставлениеЗначения = Строка(Значение);
		Если СписокПодбора.НайтиЗначение(Значение) <> 1 Тогда
			СписокПодбора.ДобавитьЗначение(Значение,ПредставлениеЗначения);
		КонецЕсли;
		СписокПодбора.ТекущаяСтрока(СписокПодбора.РазмерСписка());
	КонецЕсли;
	
КонецПроцедуры

// Название: РаботаСоСписком
// Параметры:
// 	Режим - строка, принимающая 4 значения:
//		"Добавить"
//		"ДобавитьНесколько"
// 		"Удалить"
// 		"УдалитьВсе"
//	Список - список значений, в котором задается множественный фильтр
//	ТипСправочника - строка, содержащая идентификатор справочнника, по
//						которому осуществляется мноджественный фильтр
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//   кнопок работы с множественными фильтрами ("...",".....","X","XX")
// Наименование,.
// Описание:
// процедура предназначена для добавления и удаления элементов
// из множественных фильтров
Процедура РаботаСоСписком(Режим,Список,ТипСправочника)
	Перем ТекПоз;
	Перем ТекЭлемент;
	Перем Фрм;
                                     
	Если ТипСправочника = "Категории" Тогда
		ТипСправочника = "ВидыКатегорий";
	КонецЕсли;	
	
	ТекПоз = Список.ТекущаяСтрока();
	Если ТекПоз>0 Тогда
		ТекЭлемент=Список.ПолучитьЗначение(ТекПоз);
	КонецЕсли;

	Если Режим="Добавить" Тогда		// добавляем в список один элемент
		СписокПодбора = Список;
		СправочникПодбора = ВРег(ТипСправочника);
		// открываем окно подбора
		ОткрытьПодбор("Справочник."+ТипСправочника,,Фрм,0,ТекЭлемент);
		Фрм.ВыборГруппы(1);

	ИначеЕсли Режим="ДобавитьНесколько" Тогда  // добавляем в список несколько элементов
		СписокПодбора = Список;
		СправочникПодбора = ВРег(ТипСправочника);
		// открываем окно подбора
		ОткрытьПодбор("Справочник."+ТипСправочника,,Фрм,1,ТекЭлемент);
		Фрм.ВыборГруппы(1);

 	ИначеЕсли Режим="УдалитьВсе" Тогда	// удаляем все элементы из списка
		Список.УдалитьВсе();

	ИначеЕсли Режим="Удалить" Тогда	// удаляем из списка один элемент
		Если ТекПоз>0 Тогда
			Список.УдалитьЗначение(ТекПоз);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // работа со списком

//Возвращает Родителя номенклатуры
Функция Родитель()
	
	Если ПустоеЗначение(Номенклатура)=0 Тогда
		Возврат Номенклатура.Родитель;
	КонецЕсли;
	
КонецФункции //  ПоказатьРодитель()

//Возвращает категорию номенклатуры
Функция Категория()
	
	Если ПустоеЗначение(Номенклатура)=0 Тогда
		Возврат Номенклатура.КатегорияНоменклатуры;
	КонецЕсли;
	
КонецФункции //  Категория()

//Преобразует список в строку
//
Функция СписокВСтроку(Список)
	
	СписФ = СоздатьОбъект("СписокЗначений");
	Для Инд = 1 По Список.РазмерСписка() Цикл
		СписФ.ДобавитьЗначение(Список.ПолучитьЗначение(Инд).Код);
	КонецЦикла;	
	
	Возврат СписФ.ВСтрокуСРазделителями();	
	
КонецФункции // СписокВСтроку(Список)

//Заполняет списки настроек отборов и исключений
//
Процедура ЗаполнитьСписок(Фильтр, Список)
 
	Если СтрДлина(СокрЛП(Фильтр)) <> 0 Тогда 
		СписФ = СоздатьОбъект("СписокЗначений");
	    СписФ.ИзСтрокиСРазделителями(СокрЛП(Фильтр));
		СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
		
		Для Инд = 1 По СписФ.РазмерСписка() Цикл
			Если СпрТМЦ.НайтиПоКоду(СписФ.ПолучитьЗначение(Инд), 0) = 1 Тогда
			    Список.ДобавитьЗначение(СпрТМЦ.ТекущийЭлемент());
			КонецЕсли;		
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры // СохранитьСписок()

//Функция возвращает таблицу продаж за период регистра Обороты
//
Функция ПолучитьТабПродажЗаБазовыйПериод(КаналПродаж = 1)
	Перем Запрос, ТекстЗапроса, ТаблицаПродаж;
	
	Если ПроверкаПериода() = 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с БазовыйПериодС по БазовыйПериодПо;" +?(КаналПродаж=1,"КаналПродаж = Регистр.Обороты.КаналПродаж;","") +"
	|ТМЦ = Регистр.Обороты.ТМЦ;
	|Счет = Регистр.Обороты.Счет; 
	|мФирма = Регистр.Обороты.Фирма;
	|РасходКво = Регистр.Обороты.РасходКво;
	|РасходСум = Регистр.Обороты.РасходСум;
	|Функция РасходКвоСумма = Сумма(РасходКво);
	|Функция РасходСумСумма = Сумма(РасходСум);" + ?(КаналПродаж=1,"Группировка КаналПродаж;","") + "
	|Группировка ТМЦ Без Групп упорядочить по ТМЦ.КатегорияНоменклатуры, ТМЦ.Родитель;
	|Условие(мФирма =Фирма);
	|Условие(Счет = СчетПоКоду(""26""));
	|"//}}ЗАПРОС
	;
	
	// Если ошибка в запросе, то выход из функции
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос.Выгрузить(ТаблицаПродаж,1,0);
	
	//Поместим таблицу продаж в индексированную таблицу
	ТаблицаПродаж_индекс = СоздатьОбъект("ИндексированнаяТаблица");
	ТаблицаПродаж_индекс.Загрузить(ТаблицаПродаж);
	ТаблицаПродаж_индекс.ДобавитьИндекс("Индекс", "ТМЦ");
	ТаблицаПродаж_индекс.Показать();
	
	Возврат ТаблицаПродаж_индекс;
	
КонецФункции

// Процедура Заполнения ТЧ по установленному отбору.
//
Процедура ЗаполнитьТЧПоОтботу()
	Перем Запрос, ТекстЗапроса;
	
	Если ПроверкаПериода() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоСтрок() > 0 Тогда
		Если Вопрос("Удалить строки документа?", "Да+Нет") = "Да" Тогда
			УдалитьСтроки();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ЗаполнитьТЧПоОтботу)
	|ТекущийЭлемент = Справочник.ТМЦ.ТекущийЭлемент;
	|Группировка ТекущийЭлемент упорядочить по ТекущийЭлемент.КатегорияНоменклатуры, ТекущийЭлемент.Родитель без групп;
	|Условие(ТекущийЭлемент В (СписокВыбТМЦ));
	|Условие(НЕ(ТекущийЭлемент В СписокВыбТМЦИскл));
	|Условие(ТекущийЭлемент.ПометкаУдаления() = 0);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл
		НоваяСтрока();
		Номенклатура = Запрос.ТекущийЭлемент;
		ПриИзмененииНоменклатуры();
	КонецЦикла;
	
	ПересчитатьУдельныйВес();
	
КонецПроцедуры

// Процедура Заполнения ТЧ по данным регистра Обороты.
//
Процедура заполнитьТЧПоПродажам()
	
	Если ПроверкаПериода() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоСтрок() > 0 Тогда
		Если Вопрос("Удалить строки документа?", "Да+Нет") = "Да" Тогда
			УдалитьСтроки();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПродаж = ПолучитьТабПродажЗаБазовыйПериод();
	
	Если ПустоеЗначение(ТаблицаПродаж) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПродаж.ВыбратьСтроки();
	
	Пока ТаблицаПродаж.ПолучитьСтроку() = 1 Цикл
		
		Если ТаблицаПродаж.РасходКвоСумма < 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока();
		Номенклатура = ТаблицаПродаж.ТМЦ;
		КаналПродаж = ТаблицаПродаж.КаналПродаж;
		ПриИзмененииНоменклатуры();
		Количество = ТаблицаПродаж.РасходКвоСумма/?(Коэффициент=0,1,Коэффициент);
		Цена = ?(ТаблицаПродаж.РасходКво = 0,0,ТаблицаПродаж.РасходСумСумма/ТаблицаПродаж.РасходКвоСумма);
		ПриИзмененииКоличества();
		
	КонецЦикла;
	
	ПересчитатьУдельныйВес();
	
КонецПроцедуры  

// Процедура Заполнения ТЧ по данным регистра Обороты.
//
Процедура заполнитьТЧПоЗаказам()
	
	Перем Запрос, ТекстЗапроса, ТаблицаПродаж;
	
	Если ПроверкаПериода() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоСтрок() > 0 Тогда
		Если Вопрос("Удалить строки документа?", "Да+Нет") = "Да" Тогда
			УдалитьСтроки();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с БазовыйПериодС по БазовыйПериодПо;
	|Обрабатывать НеПомеченныеНаУдаление;
	|КаналПродаж = Документ.УМК_ЗаказКлиента.Контрагент.КаналПродаж;
	|ТМЦ = Документ.УМК_ЗаказКлиента.ТМЦ;
	|Счет = Документ.УМК_ЗаказКлиента.ТМЦ.Счет; 
	|мФирма = Документ.УМК_ЗаказКлиента.Фирма;
	|СуммаСНДС = Документ.УМК_ЗаказКлиента.СуммаСНДС;
	|КвоПересчет = Документ.УМК_ЗаказКлиента.КвоПересчет;
	|Функция СуммаСНДССумма = Сумма(СуммаСНДС);
	|Функция КвоПересчетСумма = Сумма(КвоПересчет);
	|Группировка КаналПродаж;
	|Группировка ТМЦ упорядочить по ТМЦ.КатегорияНоменклатуры, ТМЦ.Родитель без групп;
	|Условие(мФирма =Фирма);
	|Условие(Счет = СчетПоКоду(""26""));
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл
		КаналПродаж_ = Запрос.КаналПродаж;
		Пока Запрос.Группировка(2) = 1 Цикл
			НоваяСтрока();
			КаналПродаж = КаналПродаж_;
			Номенклатура = Запрос.ТМЦ;
			ПриИзмененииНоменклатуры();
			Количество = Запрос.КвоПересчетСумма/?(Коэффициент=0,1,Коэффициент);
			Цена = ?(Запрос.КвоПересчетСумма = 0,0,Запрос.СуммаСНДССумма/Запрос.КвоПересчетСумма);
			ПриИзмененииКоличества();
		КонецЦикла;
	КонецЦикла;
	
	ПересчитатьУдельныйВес();
	
КонецПроцедуры

// Процедура Заполнения цены номенклатуры по данным регистра Обороты.
//
Процедура ЗаполнитьЦеныПоПродажам()
	
	Если ПроверкаПериода() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПродаж = ПолучитьТабПродажЗаБазовыйПериод(0); //Без учета канала продаж.
	
	Если ПустоеЗначение(ТаблицаПродаж) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		
		КПоиска = Номенклатура;
		
		сзКлюч = СоздатьОбъект("СписокЗначений");
		сзКлюч.ДобавитьЗначение(КПоиска);
		ТаблицаПродаж.Подмножество(сзКлюч, 1,"Индекс");
		ТаблицаПродаж.ВыбратьСтроки("Индекс");
		
		Пока ТаблицаПродаж.ПолучитьСтроку("Индекс") = 1 Цикл
			Цена = ?(ТаблицаПродаж.РасходКво = 0,0,ТаблицаПродаж.РасходСумСумма/ТаблицаПродаж.РасходКвоСумма);
		КонецЦикла;
		
		ПриИзмененииКоличества(,,0);
		
	КонецЦикла;
	
	ПересчитатьОбъемБезубыточности();
	
КонецПроцедуры    

//====================Процедуры печати============================================

Процедура Печать()
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Печать");
	Таб.ВывестиСекцию("Шапка");
	Таб.Опции(0, 0, Таб.ВысотаТаблицы(), 0);
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	Таб.ВывестиСекцию("Подвал");
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать План продаж","");
КонецПроцедуры

ОткрытьФормуУстановкиЦен = 1; 
СписокДействий = глПолучитьСписокДействий("
   |ДвиженияДокумента");

