Перем СписокДействий;
Перем СтарыйМетодРасчетаИзноса,СтараяЛиквидационнаяСтоимость,СтарыйСрокИспользования,СтарыйРасчетныйОбъемПроизводства;
Перем СтароеСостояние,СтарыйСчетЗатрат,СтарыйВидДеятельности,СтарыйВидЗатрат,СтараяПродукция;
Перем спМетодыРасчета;

Перем НачальнаяДатаДокумента;

// ===============================
Функция УстДоступность()
	Форма.кПравоваяПоддержка.Видимость(глВидимостьПравовойПоддержки);
	Форма.Заголовок(глЗаголовок(Контекст,"Изм. парам-ров (перемещение) необор. актива"));
	Закл = Форма.Закладки.ПолучитьЗначение(Форма.Закладки.ТекущаяСтрока());
	Если Закл = "Основной" Тогда
		
		// для группы перемещение
		Если НеоборотныйАктив.ВидНеоборотногоАктива = НМА Тогда
			фДоступностьПеремещение = 1;
		Иначе
			фДоступностьПеремещение = 0;
			//Если Не(Кво=1) Тогда
			//    Кво = 1;
			//КонецЕсли;
		КонецЕсли;
		//Форма.Кво.Доступность(фДоступностьПеремещение);
		Форма.тКво.Доступность(фДоступностьПеремещение);
		//Форма.Подразделение.Доступность(фДоступностьПеремещение);
		//Форма.МестоХранения.Доступность(фДоступностьПеремещение);
		// в зависимости от состояния
		Если Состояние = Перечисление.СостоянияНеоборАктивов.ВОперативнойАренде Тогда
			Если ПустоеЗначение(НовоеПодразделение)=0 Тогда
			    НовоеПодразделение = 0;
			КонецЕсли;
		    Форма.НовоеПодразделение.Доступность(0);
		Иначе
			Форма.НовоеПодразделение.Доступность(1);
		КонецЕсли;
		
		// для группы Метод расчета амортизации
		фВидимостьЛиквидационнаяСтоимость = 0;
		фВидимостьСрокИспользования = 0;
		фВидимостьРасчетныйОбъем = 0;
		
		Если (НовыйМетодРасчетаИзноса = Перечисление.МетодыРасчетаИзноса.УменьшениеОстатка) или
			(НовыйМетодРасчетаИзноса = Перечисление.МетодыРасчетаИзноса.УскоренноеУменьшениеОстатка) или
			(НовыйМетодРасчетаИзноса = Перечисление.МетодыРасчетаИзноса.ПрямолинейноеСписание) или
			(НовыйМетодРасчетаИзноса = Перечисление.МетодыРасчетаИзноса.Кумулятивный) Тогда
			фВидимостьЛиквидационнаяСтоимость = 1;
			фВидимостьСрокИспользования = 1;
		ИначеЕсли НовыйМетодРасчетаИзноса = Перечисление.МетодыРасчетаИзноса.СуммЕдиниц Тогда
			фВидимостьЛиквидационнаяСтоимость = 1;
			фВидимостьРасчетныйОбъем = 1;
		ИначеЕсли (НовыйМетодРасчетаИзноса = Перечисление.МетодыРасчетаИзноса.Налоговый) и
			(НеоборотныйАктив.ВидНеоборотногоАктива = НМА) Тогда
			фВидимостьСрокИспользования = 1;
		КонецЕсли;
		
		Форма.СтараяЛиквидационнаяСтоимость.Видимость(фВидимостьЛиквидационнаяСтоимость);
		Форма.НоваяЛиквидационнаяСтоимость.Видимость(фВидимостьЛиквидационнаяСтоимость);
		Форма.тЛиквидационнаяСтоимость.Видимость(фВидимостьЛиквидационнаяСтоимость);
		
		Форма.СтарыйСрокИспользования.Видимость(фВидимостьСрокИспользования);
		Форма.НовыйСрокИспользования.Видимость(фВидимостьСрокИспользования);
		Форма.тСрокИспользования.Видимость(фВидимостьСрокИспользования);
		
		Форма.СтарыйРасчетныйОбъемПроизводства.Видимость(фВидимостьРасчетныйОбъем);
		Форма.НовыйРасчетныйОбъемПроизводства.Видимость(фВидимостьРасчетныйОбъем);
		Форма.тРасчетныйОбъем.Видимость(фВидимостьРасчетныйОбъем);
	КонецЕсли;
КонецФункции

// ===============================
Процедура ЗаполнитьСписокМетодовРасчета()
	// создадим список методов расчета износа
	спМетодыРасчета = СоздатьОбъект("СписокЗначений");
	Если НеоборотныйАктив.ВидНеоборотногоАктива <> Перечисление.ВидыНеоборотныхАктивов.ДругиеНеоборотныеМатериальныеАктивы Тогда
		спМетодыРасчета.ДобавитьЗначение(Перечисление.МетодыРасчетаИзноса.ЗначениеПоИдентификатору("ПрямолинейноеСписание"));
		спМетодыРасчета.ДобавитьЗначение(Перечисление.МетодыРасчетаИзноса.ЗначениеПоИдентификатору("УменьшениеОстатка"));
		спМетодыРасчета.ДобавитьЗначение(Перечисление.МетодыРасчетаИзноса.ЗначениеПоИдентификатору("УскоренноеУменьшениеОстатка"));
		спМетодыРасчета.ДобавитьЗначение(Перечисление.МетодыРасчетаИзноса.ЗначениеПоИдентификатору("СуммЕдиниц"));
		спМетодыРасчета.ДобавитьЗначение(Перечисление.МетодыРасчетаИзноса.ЗначениеПоИдентификатору("Кумулятивный"));
		спМетодыРасчета.ДобавитьЗначение(Перечисление.МетодыРасчетаИзноса.ЗначениеПоИдентификатору("Налоговый"));
	Иначе
		спМетодыРасчета.ДобавитьЗначение(Перечисление.МетодыРасчетаИзноса.ЗначениеПоИдентификатору("ПрямолинейноеСписание"));
		спМетодыРасчета.ДобавитьЗначение(Перечисление.МетодыРасчетаИзноса.ЗначениеПоИдентификатору("СуммЕдиниц"));
		Если (НовыйСчет.Код = "111") или (НовыйСчет.Код = "112") Тогда 
			//Малоценные необоротные материальные активы или библиотечные фонды
			спМетодыРасчета.ДобавитьЗначение(Перечисление.МетодыРасчетаИзноса.ЗначениеПоИдентификатору("ПервыйИПоследнийМесяц"));
			спМетодыРасчета.ДобавитьЗначение(Перечисление.МетодыРасчетаИзноса.ЗначениеПоИдентификатору("ПервыйМесяц"));	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	

// ===============================
Процедура ЗаполнитьПеремещение()
	Счет = НеоборотныйАктив.Счет.Получить(ДатаДок-1);
	Подразделение = 0;
	МестоХранения = 0;
	
	Если Выбран()=0 Тогда
		КонецПериода = ДатаДок;
	Иначе
		КонецПериода = ТекущийДокумент();
	КонецЕсли;
	
	БИ = СоздатьОбъект("БухгалтерскиеИтоги");
	БИ.ИспользоватьРазделительУчета(Фирма);
	БИ.ИспользоватьСубконто(ВидыСубконто.Подразделения);
	БИ.ИспользоватьСубконто(ВидыСубконто.МестаХранения);
	БИ.ИспользоватьСубконто(ВидыСубконто.НеоборотныеАктивы,НеоборотныйАктив,2);
	
	БИ.ВыполнитьЗапрос(,КонецПериода,Счет,,,,,"К");
	БИ.ВыбратьСубконто(3);
	Пока БИ.ПолучитьСубконто(3)=1 Цикл
		Подразделение = БИ.Субконто(1);
		МестоХранения = БИ.Субконто(2);
		Кво = БИ.СКД("К");
	КонецЦикла;
КонецПроцедуры //

// ===============================
Процедура ЗаполнитьСтарыеРеквизиты()
	
	СтарыйМетодРасчетаИзноса = НеоборотныйАктив.МетодРасчетаИзноса.Получить(ДатаДок-1);
	СтараяЛиквидационнаяСтоимость = НеоборотныйАктив.ЛиквидационнаяСтоимость.Получить(ДатаДок-1);
	СтарыйРасчетныйОбъемПроизводства = НеоборотныйАктив.РасчетныйОбъемПроизводства.Получить(ДатаДок-1);
	СтарыйСрокИспользования = НеоборотныйАктив.СрокИспользования.Получить(ДатаДок-1);
	СтароеСостояние = НеоборотныйАктив.Состояние.Получить(ДатаДок-1);
	СтарыйСчетЗатрат = НеоборотныйАктив.СчетЗатрат.Получить(ДатаДок-1);
	СтарыйВидДеятельности = НеоборотныйАктив.ВидДеятельности.Получить(ДатаДок-1);
	СтарыйВидЗатрат = НеоборотныйАктив.ВидЗатрат.Получить(ДатаДок-1);
	СтараяПродукция = НеоборотныйАктив.Продукция.Получить(ДатаДок-1);
КонецПроцедуры //
                    
// ===============================
Процедура ЗаполнитьНовыеРеквизиты()
	Если ПустоеЗначение(НовыйСчет)=1 Тогда
		НовыйСчет = Счет;
	КонецЕсли;
	Если ПустоеЗначение(НовоеПодразделение)=1 Тогда
		НовоеПодразделение = Подразделение;
	КонецЕсли;
	Если ПустоеЗначение(НовоеМестоХранения)=1 Тогда
		НовоеМестоХранения = МестоХранения;
	КонецЕсли;
	Если ПустоеЗначение(НовыйМетодРасчетаИзноса)=1 Тогда
		НовыйМетодРасчетаИзноса = СтарыйМетодРасчетаИзноса;
	КонецЕсли;
	Если ПустоеЗначение(НоваяЛиквидационнаяСтоимость)=1 Тогда
		НоваяЛиквидационнаяСтоимость = СтараяЛиквидационнаяСтоимость;
	КонецЕсли;
	Если ПустоеЗначение(НовыйРасчетныйОбъемПроизводства)=1 Тогда
		НовыйРасчетныйОбъемПроизводства = СтарыйРасчетныйОбъемПроизводства;
	КонецЕсли;
	Если ПустоеЗначение(НовыйСрокИспользования)=1 Тогда
		НовыйСрокИспользования= СтарыйСрокИспользования;
	КонецЕсли;
	Если ПустоеЗначение(Состояние)=1 Тогда
		Состояние = СтароеСостояние;
	КонецЕсли;
	Если ПустоеЗначение(НовыйСчетЗатрат)=1 Тогда
		НовыйСчетЗатрат = СтарыйСчетЗатрат;
	КонецЕсли;
	Если ПустоеЗначение(НовыйВидДеятельности)=1 Тогда
		НовыйВидДеятельности = СтарыйВидДеятельности;
	КонецЕсли;
	Если ПустоеЗначение(НовыйВидЗатрат)=1 Тогда
		НовыйВидЗатрат = СтарыйВидЗатрат;
	КонецЕсли;
	Если ПустоеЗначение(НоваяПродукция)=1 Тогда
		НоваяПродукция = СтараяПродукция;
	КонецЕсли;
КонецПроцедуры //

// ===============================
Процедура ИзмНеоборотныйАктив()
	ЗаполнитьПеремещение();
	ЗаполнитьСтарыеРеквизиты();
	ЗаполнитьСписокМетодовРасчета();
	ЗаполнитьНовыеРеквизиты();
КонецПроцедуры //
                            
// ===============================
Процедура ИзмДатаДок()
	ЗаполнитьПеремещение();
	ЗаполнитьСтарыеРеквизиты();
	ЗаполнитьСписокМетодовРасчета();
	ЗаполнитьНовыеРеквизиты();
КонецПроцедуры //

// ===============================
Процедура ИзмСчет()
	ЗаполнитьПеремещение();
КонецПроцедуры //

// ===============================
Процедура ИзмНовыйСчет()
	ЗаполнитьСписокМетодовРасчета();
КонецПроцедуры //

// ===============================
Процедура Печать()
	
	// получим данные для печати
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.Установить("Дата",ДатаДок);
	Расшифровка.Установить("Фирма",Фирма);
	Расшифровка.Установить("ПолнНаименование","");
	Расшифровка.Установить("ГлавныйБухгалтер","");
	Расшифровка.Установить("Руководитель","");
	Расшифровка.Установить("ЕДРПОУ","");
	Расшифровка.Установить("АмортГр1","");
	Расшифровка.Установить("АмортГр2","");
	Расшифровка.Установить("АмортГр3","");
	Расшифровка.Установить("АмортГр4","");
	
	глПолучитьДанные(Расшифровка);

	ПолнНаименование = Расшифровка.Получить("ПолнНаименование");
	ГлавныйБухгалтер = Расшифровка.Получить("ГлавныйБухгалтер");
	Директор = Расшифровка.Получить("Руководитель");
	ЕДРПОУ = Расшифровка.Получить("ЕДРПОУ");
	АмортГр1 = Расшифровка.Получить("АмортГр1");
	АмортГр2 = Расшифровка.Получить("АмортГр2");
	АмортГр3 = Расшифровка.Получить("АмортГр3");
	АмортГр4 = Расшифровка.Получить("АмортГр4");
	
	глУстПропись(Гривня,"у");
	
	Если (НовыйМетодРасчетаИзноса = Перечисление.МетодыРасчетаИзноса.ПервыйМесяц) Тогда 
		Ставка = 1;
	ИначеЕсли (НовыйМетодРасчетаИзноса = Перечисление.МетодыРасчетаИзноса.ПервыйИПоследнийМесяц) Тогда
		Ставка = 0.5;
	ИначеЕсли (НовыйМетодРасчетаИзноса = Перечисление.МетодыРасчетаИзноса.УменьшениеОстатка) или 
		(НовыйМетодРасчетаИзноса = Перечисление.МетодыРасчетаИзноса.УскоренноеУменьшениеОстатка) Тогда
		Ставка = НеоборотныйАктив.НормаАмортизации;
	ИначеЕсли (НовыйМетодРасчетаИзноса = Перечисление.МетодыРасчетаИзноса.Налоговый) Тогда
		Ставка = ?(НеоборотныйАктив.Группа = 1,АмортГр1,?(НеоборотныйАктив.Группа = 2,АмортГр2,?(НеоборотныйАктив.Группа = 3,АмортГр3,АмортГр4)));
	КонецЕсли;
	Если Ставка<>0 Тогда
		Норма = Формат(Ставка*100,"Ч10.2") + " %";
	Иначе
		Норма = "";
	КонецЕсли;
	
	Таб = СоздатьОбъект("Таблица");
	
	Таб.ВывестиСекцию("ПерваяСтраница");
	Таб.НоваяСтраница();
	Таб.ВывестиСекцию("ВтораяСтраница");

	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Опции(0,0,0,0);
	Таб.ПараметрыСтраницы(2);
	Таб.Показать("ПЕЧАТЬ: Изменение параметров (перемещение) необоротного актива","");
	глУстПропись(Гривня);
	
КонецПроцедуры //

// ===============================
Процедура ПриНачалеВыбораЗначения(Рекв,Флаг)
	Если Рекв = "НовыйМетодРасчетаИзноса" Тогда
		Если спМетодыРасчета.РазмерСписка() = 0 Тогда
			Возврат;
		КонецЕсли;
		Флаг = 0;
		спМетодыРасчета.ВыбратьЗначение(НовыйМетодРасчетаИзноса,,,,2);
	ИначеЕсли Рекв = "НеоборотныйАктив" Тогда
        Флаг = 0;
		КонтФирмы = Фирма;
		ОткрытьФорму("Справочник.НеоборотныеАктивы.ФормаСписка",КонтФирмы);
		ИзмНеоборотныйАктив();
	КонецЕсли;		
КонецПроцедуры

// ===============================
Процедура ОбработкаВыбораЗначения(Значение, Рекв, Флаг)
	Если Рекв = "Счет" Тогда
		Если Значение.ВидСубконто(3) <> ВидыСубконто.НеоборотныеАктивы Тогда
			Предупреждение("Выберите счет с аналитикой по необоротным активам!");
			Флаг = 0;
		КонецЕсли;
		
		Ошибка = 0;
		Если НеоборотныйАктив.ВидНеоборотногоАктива = ОсновныеСредства Тогда
			Если Сред(Значение.Код,1,2) <> "10" Тогда
				Ошибка = 1;
			КонецЕсли;
		ИначеЕсли НеоборотныйАктив.ВидНеоборотногоАктива = Перечисление.ВидыНеоборотныхАктивов.ДругиеНеоборотныеМатериальныеАктивы Тогда
			Если Сред(Значение.Код,1,2) <> "11" Тогда
				Ошибка = 1;
			КонецЕсли;
		ИначеЕсли НеоборотныйАктив.ВидНеоборотногоАктива = НМА Тогда
			Если Сред(Значение.Код,1,2) <> "12" Тогда
				Ошибка = 1;
			КонецЕсли;
		КонецЕсли;
		Если Ошибка > 0 Тогда
			Предупреждение("Недопустимый Счет для необоротного актива с видом "+НеоборотныйАктив.ВидНеоборотногоАктива+" !");
			Флаг = 0;
		КонецЕсли;
	ИначеЕсли Рекв = "НовыйСчет" Тогда
		Если Значение.ВидСубконто(3) <> ВидыСубконто.НеоборотныеАктивы Тогда
			Предупреждение("Выберите Новый счет с аналитикой по необоротным активам!");
			Флаг = 0;
		КонецЕсли;
		
		Ошибка = 0;
		Если НеоборотныйАктив.ВидНеоборотногоАктива = НМА Тогда
			Если Сред(Значение.Код,1,2) <> "12" Тогда
				Ошибка = 1;
			КонецЕсли;
		Иначе
			Если (Сред(Значение.Код,1,2) <> "10") и (Сред(Значение.Код,1,2) <> "11") Тогда
				Ошибка = 1;
			КонецЕсли;
		КонецЕсли;
		Если Ошибка > 0 Тогда
			Предупреждение("Недопустимый Новый счет для необоротного актива с видом "+НеоборотныйАктив.ВидНеоборотногоАктива+" !");
			Флаг = 0;
		КонецЕсли;
		
		ЗаполнитьСписокМетодовРасчета();
		
		Если спМетодыРасчета.Принадлежит(НовыйМетодРасчетаИзноса)=0 Тогда
		    // если выбранное значение Нового метода расчета недопустимо - заменим на первое в списке
			НовыйМетодРасчетаИзноса = спМетодыРасчета.ПолучитьЗначение(1);
		КонецЕсли;
	ИначеЕсли Рекв = "НовыйСчетЗатрат" Тогда
	    Если глПроверитьСчетЗатрат(Значение, 1)=0 Тогда
	        Флаг = 0;
	    КонецЕсли;
	КонецЕсли;
КонецПроцедуры //

// ===============================
Процедура ПриВыбореЗакладки(Номер,Значение)
	Форма.ИспользоватьСлой("Общий,"+Значение);
КонецПроцедуры

// ===============================
Процедура ВводНового(ПризнакКопирования)
	Если ПризнакКопирования = 1 Тогда
		глУстановитьНомер(Контекст);
		Возврат;
	КонецЕсли;
	глУстановитьФирму(Контекст);
КонецПроцедуры

// ===============================
Процедура ПриОткрытии()
	НачальнаяДатаДокумента = ДатаДок;
	глПроверкаДатыДок(Контекст,"Открытие");
	ПриЗаписиПерепроводить(1);
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.кОК.Доступность(0);
//		Форма.кДействия.Доступность(0);
		Форма.кФирма.Доступность(0);
		Форма.КнопкаПоУмолчанию("кЗакрыть");
	Иначе
		Форма.КнопкаПоУмолчанию("кОК");
	КонецЕсли; 
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной","Основные");
	Форма.Закладки.ДобавитьЗначение("Дополнительный","Дополнительно");
	Форма.ИспользоватьСлой("Общий,Основной");
	
	ЗаполнитьСтарыеРеквизиты();
	ЗаполнитьСписокМетодовРасчета();
КонецПроцедуры // ПриОткрытии()

// ===============================
Процедура ПриЗаписи()
	глПроверкаДатыДок(Контекст,"Запись");
	Автор = глПользователь;
	Если глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
КонецПроцедуры

// ===============================
// Инициализируем список действий по кнопке "Действия"
СписокДействий = глПолучитьСписокДействий("
	|ДвиженияДокумента,
	|ОткрытьВЖурнале");