Перем НачальнаяДатаДокумента;	//--- УМК Сандомирский В.Ю. (20.01.2015)

//--- УМК Сандомирский В.Ю, Документ только для отражения оплат покупателей
//----- Остальные приходы денег отражать так же через ПКО

//======================================================================
Процедура ПриОткрытии()	
	НачальнаяДатаДокумента = ДатаДок;	//--- УМК Сандомирский В.Ю. (20.01.2015)
	
	Если (ТекущийДокумент().Выбран() = 1) и (НазваниеНабораПрав() = "Заказ") и (РСчет.ДоступЗаказ = 0) Тогда //--- УМК Сандомирский В.Ю. (24.07.14) 
		Предупреждение("Это не ваши ордера. Нечего на них смотреть!!!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	//Если (ТекущийДокумент().Выбран() = 1) и (НазваниеНабораПрав() = "ПроизводствоКасса") и (РСчет.ДоступПроизводствоКасса = 0) Тогда //--- УМК Сандомирский В.Ю. (24.07.14) доступ к кассе "ПроизводствоКасса"
	//	Предупреждение("Это не ваши ордера. Нечего на них смотреть!!!");
	//	СтатусВозврата(0);
	//	Возврат;
	//КонецЕсли;
	
	ПриЗаписиПерепроводить(1);
	
	Если ((НазваниеНабораПрав() = "ПроизводствоКасса") ИЛИ (НазваниеНабораПрав() = "ПроизводствоСбыт")) И (Выбран() = 1) И (РСчет.ДоступПроизводствоКасса <> 1) Тогда	//--- УМК Сандомирский В.Ю. (28.07.14) доступ к кассе "ПроизводствоКасса"	
		лкДок = Метаданные.Документ(Вид());	    
	    Для ц=1 по лкДок.РеквизитШапки() Цикл
	        лкАтр = СокрЛП(лкДок.РеквизитШапки(ц).Идентификатор);
	        
			Если (лкАтр = "Счет") ИЛИ (лкАтр = "СуммаДокумента") ИЛИ (лкАтр = "РежимОплаты") Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				 Шаблон("[Форма."+лкАтр+".Доступность(0)]");
			Исключение
			КонецПопытки;
	             
		КонецЦикла;
			
		Форма.Контрагент.Доступность(0);
		Форма.Сумма.Доступность(0);		
	КонецЕсли;		
	
	//--- УМК Сандомирский В.Ю. (15.01.15)
	глПроверкаДатыДок(Контекст,"Открытие"); 
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
		//Форма.кОК.Доступность(0);
		глУстановитьДоступностьПолейШапки(Контекст, "НомерДок,ДатаДок,РСчет,Примечание", 0);
		глУстДоступностьКолонокТЧ(Контекст, 0);
		Форма.ДокументДоговор.Доступность(1);		
	Иначе
		Форма.КнопкаПоУмолчанию("кОК");
	КонецЕсли;
	//... УМК Сандомирский В.Ю. (15.01.15)
	
КонецПроцедуры

//======================================================================
Процедура ПриЗаписи()	
	//глПроверкаДатыДок(Контекст,"Запись"); //--- УМК Сандомирский В.Ю. (20.01.2015)
	Если глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	
	СуммаДокумента = Итог("Сумма");
КонецПроцедуры // ПриЗаписи

//======================================================================
Процедура ЗаполнитьПоУмолчанию()
	глЗаполнитьШапку(Контекст);
	РСчет = Константа.КассаПоУмолчанию; // + umk //глПолучитьКассу(Фирма,Гривня);
КонецПроцедуры 

//======================================================================
Процедура ВводНового(ПризнакКопирования)
	Если ПризнакКопирования = 1 Тогда
		глУстановитьНомер(Контекст);
		Возврат;
	КонецЕсли;
	
	глЗаполнитьШапку(Контекст);
	РСчет = Константа.КассаПоУмолчанию; // + umk //лПолучитьКассу(Фирма,Гривня);
	Счет  = СчетПоКоду("361",ПланыСчетов.Основной);
	
КонецПроцедуры

//======================================================================
Функция УстДоступность()
	Форма.КодКонтрагента.Видимость(флКолонкаКод);
	//Форма.Контрагент.Enable(1-флКолонкаКод);
КонецФункции

//======================================================================
Процедура ИзмФирма()
	Если РСчет.Владелец <> Фирма Тогда
		РСчет = глПолучитьКассу(Фирма,Гривня);
	КонецЕсли;
	
КонецПроцедуры 

//======================================================================
Процедура ИзмРСчет(ВводНового = 0)
	Если РСчет.Выбран() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НазваниеНабораПрав() = "Заказ" Тогда
		Если РСчет.ДоступЗаказ = 0 Тогда
			Предупреждение("По этой кассе вы не можете выписывать документы");
			РСчет = "";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Если (НазваниеНабораПрав() = "ПроизводствоКасса") ИЛИ (НазваниеНабораПрав() = "ПроизводствоСбыт") Тогда //--- УМК Сандомирский В.Ю. (24.07.14) доступ к кассе "ПроизводствоКасса"
	Если (НазваниеНабораПрав() = "ПроизводствоСбыт") Тогда // + umk	
	Если РСчет.ДоступПроизводствоКасса = 0 Тогда
			Предупреждение("По этой кассе вы не можете выписывать документы");
			РСчет = "";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	Если РСчет.Выбран() = 1 Тогда
		Если РСчет.Безнал = 1 Тогда
			глКомментарий("Выбран безналичный счет!",1,,"!");
			РСчет = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//======================================================================
Функция ДолгКонтрагента()	
	СуммаДолга = Регистр.ВзаиморасчетыПокупателей.СводныйОстаток(Фирма,Контрагент,,,,,,"Долг");
	Если Проведен() <> 1 Тогда
		СуммаДолга = СуммаДолга - Сумма;
	КонецЕсли;
		
	Возврат Формат(СуммаДолга, "Ч14.2");
КонецФункции

//======================================================================
Функция ВывестиКолТоргПредставитель()
	
	Если ПустоеЗначение(Контрагент) <> 1 Тогда
		Попытка
			Возврат СокрЛП(Контрагент.ТорПред.Получить(ДатаДок).Наименование);
		Исключение КонецПопытки;	
	КонецЕсли;	
		
КонецФункции // ВывестиКолТоргПредставитель()

//======================================================================
Функция ВывестиКолРодитель()
	
	Если ПустоеЗначение(Контрагент) <> 1 Тогда
		Попытка
			Возврат СокрЛП(Контрагент.Родитель.Наименование);
		Исключение КонецПопытки;
	КонецЕсли;	
	
КонецФункции // ВывестиКолРодитель()

//======================================================================
// Описание:
// печать отчета "Карточка клиента"
Процедура СформироватьКарточкуКлиента()
	
	Если ПустоеЗначение(Контрагент) = 1 Тогда
		Предупреждение("Контрагент не выбран!");
	КонецЕсли;
	
	// печатаем общий упр. отчет по взаиморасчетам
	// по текущему контрагенту или группе 
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Обновить",1);         
	
    ПустойСписок = СоздатьОбъект("СписокЗначений");
	                                     
	// все настройки помещаем в список
	Расшифровка.Установить("Объект", "КарточкаКлиента");
	Расшифровка.Установить("Дата1", Мин(РабочаяДата(),ПолучитьДатуТА(),Константа.ОсновнаяДатаНачалаОтчета));
    Расшифровка.Установить("Дата2", Мин(ДатаДок,ПолучитьДатуТА()));
	Расшифровка.Установить("ВыбФирма", 		Фирма);
	Расшифровка.Установить("ВыбКонтрагент", Контрагент);
	Расшифровка.Установить("ВыбДоговор", ПолучитьПустоеЗначение("Документ"));          
		
	глРасшифровка = Расшифровка;
	глФлагРасшифровки = 1;
	глОбновить = Число(Расшифровка.Получить("Обновить"));
	глТаблица = 0;
	
	ОткрытьФорму("Отчет."+Расшифровка.Получить("Объект")+"#");
	
	глФлагРасшифровки = 0;
	глРасшифровка = 0;
	глОбновить = 0;	
	
КонецПроцедуры	// СформироватьКарточкуКлиента

//======================================================================
Процедура СформироватьВзаиморасчеты()

	Если ПустоеЗначение(Контрагент) = 1 Тогда
		Предупреждение("Контрагент не выбран!");
	КонецЕсли;
	
	// печатаем общий упр. отчет по взаиморасчетам
	// по текущему контрагенту или группе 
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Обновить",1);         
	
    ПустойСписок = СоздатьОбъект("СписокЗначений");
	                                     
	// все настройки помещаем в список
	Расшифровка.Установить("Объект", "Взаиморасчеты");
	Расшифровка.Установить("Дата1", Мин(РабочаяДата(),ПолучитьДатуТА(),Константа.ОсновнаяДатаНачалаОтчета));
    Расшифровка.Установить("Дата2", Мин(РабочаяДата(),ПолучитьДатуТА()));
	
	Расшифровка.Установить("ВидОтчета", 1);		// общие взаиморасчеты
	
	Расшифровка.Установить("ФлагДиаграммы", 0);
	
	Расшифровка.Установить("ВыбКонтрагент", Контрагент);
	Расшифровка.Установить("ВыбДоговор", ПолучитьПустоеЗначение("Документ"));          
	
	
	Группировки = СоздатьОбъект("СписокЗначений"); // для расшифровки отчета по движениям
	
	Группировки.ДобавитьЗначение("Контрагент", 		"Контрагент");           
	Группировки.ДобавитьЗначение("Договор", 		"Договор");           
	Группировки.ДобавитьЗначение("Счет",	 		"Документ-счет");           
	Группировки.ДобавитьЗначение("Документ",		"Документ движения");

	Группировки.Пометка(1,1);
	Группировки.Пометка(2,1);
	Группировки.Пометка(3,1);
	Группировки.Пометка(4,1);

	Расшифровка.Установить("Группировки",Группировки);
	
	Расшифровка.Установить("фНачОст",1);
	Расшифровка.Установить("фКонОст",1);
	Расшифровка.Установить("фПриход",1);
	Расшифровка.Установить("фРасход",1);
		
	глРасшифровка = Расшифровка;
	глФлагРасшифровки = 1;
	глОбновить = Число(Расшифровка.Получить("Обновить"));
	глТаблица = 0;
	
	ОткрытьФорму("Отчет."+Расшифровка.Получить("Объект")+"#");
	
	глФлагРасшифровки = 0;
	глРасшифровка = 0;
	глОбновить = 0;	
	
КонецПроцедуры // СформироватьВзаиморасчеты()

// ===============================
// Назначение:
//		Проверяет соответствие контрагента, договора и Документа-основания
Функция ПроверкаСоответствия(Контрагент,Договор,ДокументОснование)
	фСоответствует=1;       
		
	Если (ПустоеЗначение(Договор)=0) и (ПустоеЗначение(Контрагент)=0) Тогда
	    Если Договор.Контрагент <> Контрагент Тогда
	        фСоответствует=0;
		КонецЕсли;           
	КонецЕсли;
	
	Если ПустоеЗначение(ДокументОснование)=0 Тогда
		Если ПустоеЗначение(Контрагент)=0 Тогда
			Если глЕстьРеквизитШапки("Контрагент",ДокументОснование.Вид()) = Да Тогда
				Если ДокументОснование.Контрагент <> Контрагент Тогда
					фСоответствует=0;
				КонецЕсли;
			КонецЕсли;			
			Если (фСоответствует=0)
			И (ДокументОснование.Вид()= "ПриходнаяНакладнаяГТД") Тогда
				// для ГТД необходимо проверить соотв. перевозчику и таможне
				Если ДокументОснование.Перевозчик = Контрагент Тогда
					фСоответствует=1;
				КонецЕсли;
				Если ДокументОснование.Таможня = Контрагент Тогда
					фСоответствует=1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ПустоеЗначение(Договор)=0 Тогда
			Если глЕстьРеквизитШапки("Договор",ДокументОснование.Вид()) = Да Тогда
				Если ДокументОснование.Договор <> Договор Тогда
					фСоответствует=0;
				КонецЕсли;
				Если (фСоответствует=0)
				И (ДокументОснование.Вид()= "ПриходнаяНакладнаяГТД") Тогда	    
					// для ГТД необходимо проверить соотв. перевозчику и таможне
					Если ДокументОснование.ДоговорПеревозки <> Договор Тогда
						фСоответствует=1;
					КонецЕсли;           				
					Если ДокументОснование.ДоговорТаможни <> Договор Тогда
						фСоответствует=1;
					КонецЕсли;           				
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат фСоответствует;
КонецФункции //ПроверкаСоответствия

// определяет договор по документу-основанию и контрагенту
// ===============================
Функция ОпределитьДоговор(Док)
	Перем текДоговор;
	текДоговор = 0;
	Если ПустоеЗначение(Док) = 1 Тогда
		Возврат текДоговор;		
	КонецЕсли;
	Если Док.Вид() = "ПриходнаяНакладнаяГТД" Тогда
		Если Контрагент = Док.Контрагент Тогда
			// подставим договор поставщика
			текДоговор = Док.Договор;
		ИначеЕсли Контрагент = Док.Перевозчик Тогда
			// подствим договор перевозки
			текДоговор = Док.ДоговорПеревозки;
		ИначеЕсли Контрагент = Док.Таможня Тогда
			// подставим договор с таможней
			текДоговор = Док.ДоговорТаможни;
	    КонецЕсли;
	Иначе
		Если глЕстьРеквизитШапки("Договор",Док.Вид()) = Да Тогда
			текДоговор = Док.Договор;						
		КонецЕсли;	
	КонецЕсли;
	Возврат текДоговор;
КонецФункции

//======================================================================
Процедура ПриНачалеВыбораЗначения(Рекв,ФлагСтандОбр)
	
	Если Рекв = "ДокументДоговор" Тогда
		
		Фрм = СоздатьОбъект("СписокЗначений");
		Фрм.ДобавитьЗначение(1,"фРазрешатьПустогоКонтрагента");
		Фрм.ДобавитьЗначение("ДоговораКонтрагентов","ГрафаОтбора");
		Фрм.ДобавитьЗначение(Контрагент,"Контрагент");			
		ОткрытьФормуМодально("Журнал.ПолныйЖурнал.ДляВыбораДоговоровИСчетов",Фрм,);
		ВремДоговор = Фрм.Получить("Документ");                                
		Если ПустоеЗначение(ВремДоговор) = 0 Тогда
			Если ВремДоговор.Фирма <> Фирма Тогда
				глКомментарий("Договор принадлежит другой фирме!",1,,"!");
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверкаСоответствия(Контрагент,ВремДоговор,)=0 Тогда
			Предупреждение("Договор не соответствует контрагенту.");
		Иначе
			ДокументДоговор = ВремДоговор;
			Если ПроверкаСоответствия(Контрагент,ВремДоговор,ДокументОснование)=0 Тогда
				Предупреждение("Документ основание не соответствует Договору.");
				ДокументОснование = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если (ПустоеЗначение(Контрагент)=1) и (ПустоеЗначение(ДокументДоговор)=0) Тогда
			Контрагент = ДокументДоговор.Контрагент;
		КонецЕсли;
		ФлагСтандОбр = 0;
	
	ИначеЕсли Рекв = "ДокументОснование" Тогда
		ФлагСтандОбр = 0;
		Фрм = СоздатьОбъект("СписокЗначений");
		Фрм.ДобавитьЗначение(1,"фРазрешатьПустогоКонтрагента");
		Фрм.ДобавитьЗначение(Контрагент,"Контрагент");			
		Фрм.ДобавитьЗначение("СчетаКонтрагентов","ГрафаОтбора");
		ОткрытьФормуМодально("Журнал.ПолныйЖурнал.ДляВыбораДоговоровИСчетов",Фрм,);
		ВремДокументОснование = Фрм.Получить("Документ");
		Если ПустоеЗначение(ВремДокументОснование) = 0 Тогда
			Если ВремДокументОснование.Фирма <> Фирма Тогда
				глКомментарий("Счет принадлежит другой фирме!",1,,"!");
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверкаСоответствия(Контрагент,ДокументДоговор,ВремДокументОснование)=0 Тогда
			Предупреждение("Документ основание не соответствует Договору.");
		Иначе
			ДокументОснование = ВремДокументОснование;
		КонецЕсли;
		
		Если ПустоеЗначение(ДокументОснование) = 0 Тогда
			Если ПустоеЗначение(Контрагент)=1 Тогда
				Контрагент = ДокументОснование.Контрагент;
			КонецЕсли;
			Если ПустоеЗначение(ДокументДоговор)=1 Тогда
				ДокументДоговор = ОпределитьДоговор(ДокументОснование);
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры // гл

//======================================================================
Функция ПоКоду()
	Ч = 0;
	Если ВвестиЧисло(Ч, "Введите код контрагента", 10, 0) = 1 Тогда
		СпрК = СоздатьОбъект("Справочник.Контрагенты");
		Если СпрК.НайтиПоКоду(Ч,0) = 1 Тогда
			Контрагент = СпрК.ТекущийЭлемент();
			
		КонецЕсли;
	КонецЕсли;
КонецФункции

//======================================================================
Процедура ИзмКод()
	Если ПустоеЗначение(КодКонтрагента) = 0 Тогда
		СпрК = СоздатьОбъект("Справочник.Контрагенты");
		Если СпрК.НайтиПоКоду(КодКонтрагента,0) = 1 Тогда
			Контрагент = СпрК.ТекущийЭлемент();	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ИзмКод

//======================================================================
Процедура ИзмКонтрагент()
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		КодКонтрагента = Контрагент.Код;
	КонецЕсли;
КонецПроцедуры // ИзмКонтрагент()

//======================================================================
Функция Раскраска()
	
	Возврат "BRUSH_S[" + Строка(100*255*100) + "]COUNT[7]";	
КонецФункции

//====================================================================== //--- УМК Сандомирский В.Ю, (26.05.14)
Функция Галка()
	пикт=1;
	Если ФлРучногоИзмСхемыРБ=1 Тогда
		Пикт=2;
	КонецЕсли;
	Возврат Пикт;
КонецФункции // Галка

// ===============================
Процедура ПриНачалеРедактированияСтроки()
		
	Если Форма.ТекущаяКолонка()="ФлРучноеРедактированиеСхемы" Тогда //--- УМК Сандомирский В.Ю, (26.05.14)
		Если ФлРучногоИзмСхемыРБ=1 Тогда
			ФлРучногоИзмСхемыРБ=0
		Иначе
			ФлРучногоИзмСхемыРБ=1;
		КонецЕсли;
		Галка();
	КонецЕсли;								//... УМК Сандомирский В.Ю, (26.05.14)
		
КонецПроцедуры //ПриНачалеРедактированияСтроки

// =============================== //--- УМК Сандомирский В.Ю, (20.05.14)
// Инициализируем список действий по кнопке "Действия"
СписокДействий = глПолучитьСписокДействий("
	|ДвиженияДокумента,
	|ОткрытьВЖурнале");