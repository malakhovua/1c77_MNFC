Перем ДатаНач, ДатаКон, ПозицияПред, тПериодЗапросов;
Перем СкладГП;
Перем тбНезавершенка;
Перем ДлинаКодаВидДеятельности, ДлинаКодаТМЦ, ДлинаКодаСтатьяКалькуляции, ДлинаКодаЗаказ;
Перем спПродукция, спВидыДеятельности, спЗаказы, спПартии;
// запросы
Перем ЗапрФ, ЗапрВыпускПродукции, ЗапрВыпускПартии, ЗапрДвижПартийВПроизв, ЗапрСписНаРасходы;
Перем ЗапрРеализация, ЗапрОбороты, ЗапрОстаткиПартий, ЗапрИспользПолуфабрВПроизв, ЗапрСписНаКапИнвест, ЗапрКонтроль;
// текущие значения обрабатываемых партий
Перем Дельта, ДельтаДав, фДавальческая, ВиД, Про, Зак, Пар, ДельтаПартии, ДельтаДавПартии;
// для обхода погрешностей округления
Перем ОсталосьДельтаПартии, ОсталосьДельтаДавПартии, ВсегоКвоПартии, ОбработаноКвоПартии;
// для определения способа формирования движений по регистру Обороты
Перем ОтражатьФактСебестВОборотах;

//===============================
Функция ПроверкаШапки()
	глВсеВыбрано = 1;
    глВыбранЛи(Фирма,"Фирма");
    глВыбранЛи(Подразделение,"Подразделение");
	глПроверитьТипПодразделения(Подразделение);
	Если ДатаДок <> КонМесяца(ДатаДок) Тогда
	    глКомментарий("Документ рекомендуется проводить концом месяца!",2);
	КонецЕсли;
	Если НачМесяца(ДатаДок) > ПолучитьДатуТА() Тогда
	    глКомментарий("Точка актуальности находится раньше текущего месяца! Невозможно провести документ!",0);
		глВсеВыбрано = 0;
	КонецЕсли;
	Возврат глВсеВыбрано;
КонецФункции  //ПроверкаШапки

// ===============================
// Назначение:
//		Проверяет наличие информации о незавершенном производстве по подразделению
// Возвращает:
//		1 - успешно, 0 - ошибка
Функция ПроверитьНезавершенку()
    фЕстьНезавершенкаПрошлого = 0;
	докНезавершенка = СоздатьОбъект("Документ.НезавершенноеПроизводство");
	// просмотрим документы за прошлый месяц
	докНезавершенка.ВыбратьДокументы(НачМесяца(ДобавитьМесяц(ДатаДок,-1)), КонМесяца(ДобавитьМесяц(ДатаДок,-1)));
	Пока докНезавершенка.ПолучитьДокумент() = 1 Цикл
		Если (докНезавершенка.ПометкаУдаления() = 1) или (докНезавершенка.Проведен() = 0) Тогда
		    Продолжить; // нерабочий документ
		КонецЕсли;
		Если (докНезавершенка.Фирма <> Фирма) или (докНезавершенка.Подразделение <> Подразделение) Тогда
		    Продолжить; // другие фирма/подразделение
		КонецЕсли;
		
		// нашли подходящий документ
		Если докНезавершенка.КоличествоСтрок() > 0 Тогда
		    фЕстьНезавершенкаПрошлого = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если фЕстьНезавершенкаПрошлого = 1 Тогда
	    // если есть незавершенка прошлого месяца, она должна откорректировать 
		// нормы (НормативныеЗатраты) в текущем 
		// должен обязательно быть документ и в текущем месяце
		
		фЕстьНезавершенкаТекущего = 0;
		// просмотрим документы за текущий месяц
		докНезавершенка.ВыбратьДокументы(ДатаНач, ДатаКон);
		Пока докНезавершенка.ПолучитьДокумент() = 1 Цикл
			Если (докНезавершенка.ПометкаУдаления() = 1) или (докНезавершенка.Проведен() = 0) Тогда
			    Продолжить; // нерабочий документ
			КонецЕсли;
			Если (докНезавершенка.Фирма <> Фирма) или (докНезавершенка.Подразделение <> Подразделение) Тогда
			    Продолжить; // другие фирма/подразделение
			КонецЕсли;
			
			// нашли подходящий документ
		    фЕстьНезавершенкаТекущего = 1;
			Прервать;
		КонецЦикла;
		
		Если фЕстьНезавершенкаТекущего = 0 Тогда
		    глКомментарий("Не обнаружен документ ""Незавершенное производство"" за "+ПериодСтр(ДатаНач,ДатаКон)+" по подразделению "+Подразделение+"!",0);
			глКомментарий("    Такой документ обязательно должен быть внесен, если было незавершенное производство в прошлом месяце.",2);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции //ПроверитьНезавершенку

// ===============================
// Назначение:
//		Формирует запрос о выпуске продукции - сколько и по каким партиям
Функция ЗапрВыпускПродукции()
	ТекстЗапр = 	"//{{ЗАПРОС(ВыпускПродукции)
	|"+тПериодЗапросов+"
	|ВиД = Регистр.ВыпускПродукции.ВидДеятельности;
	|Под = Регистр.ВыпускПродукции.Подразделение;
	|Про = Регистр.ВыпускПродукции.Продукция;
	|Зак = Регистр.ВыпускПродукции.Заказ;
	|Пар = Регистр.ВыпускПродукции.Партия;
	|_Кво = Регистр.ВыпускПродукции.Количество;
	|_Сум = Регистр.ВыпускПродукции.Сумма;
	|_СумДав = Регистр.ВыпускПродукции.СуммаДав;
	|Функция Кво = Сумма(_Кво);
	|Функция Сум = Сумма(_Сум); // плановая себестоимость
	|Функция СумДав = Сумма(_СумДав); // плановая себестоимость
	|Группировка ВиД без упорядочивания без групп;
	|Группировка Про без упорядочивания без групп;
	|Группировка Зак без упорядочивания;
	|Группировка Пар без упорядочивания;
	|Условие(ВиД в спВидыДеятельности);
	|Условие(Под = Подразделение);
	|Условие(Про в спПродукция);
	|Условие(Зак в спЗаказы);
	|"//}}ЗАПРОС
    ;
	
	Состояние("Выполняется запрос по выпуску продукции.");
	глКомментарий("Выполняется запрос по выпуску продукции.",2);
	
	ЗапрВыпускПродукции = СоздатьОбъект("Запрос");
	Если ЗапрВыпускПродукции.Выполнить(ТекстЗапр) = 0 Тогда
	    глКомментарий("Не выполнился запрос по выпуску продукции!",0);
		Возврат 0;
	КонецЕсли;
	
	// данные этого запроса можно использовать для составления фильтра по партиям
	спПартии = СоздатьОбъект("СписокЗначений");
    Пока ЗапрВыпускПродукции.Группировка("ВиД") = 1 Цикл
	    Пока ЗапрВыпускПродукции.Группировка("Про") = 1 Цикл
		    Пока ЗапрВыпускПродукции.Группировка("Зак") = 1 Цикл
			    Пока ЗапрВыпускПродукции.Группировка("Пар") = 1 Цикл
			    	глДобавитьЗначениеБезПовторения(спПартии,ЗапрВыпускПродукции.Пар);
			    КонецЦикла;
		    КонецЦикла;
	    КонецЦикла;
    КонецЦикла;
	ЗапрВыпускПродукции.вНачалоВыборки();
	Возврат 1;
КонецФункции //ЗапрВыпускПродукции

// ===============================
// Назначение:
//		Формирует запрос о выпуске продукции - сколько и по каким партиям
Функция ЗапрВыпускПартии()
	ТекстЗапр = 	"//{{ЗАПРОС(ВыпускПартии)
	|"+тПериодЗапросов+"
	|Про = Регистр.ВыпускПродукции.Продукция;
	|Пар = Регистр.ВыпускПродукции.Партия;
	|_Кво = Регистр.ВыпускПродукции.Количество;
	|_Сум = Регистр.ВыпускПродукции.Сумма;
	|_СумДав = Регистр.ВыпускПродукции.СуммаДав;
	|Функция Кво = Сумма(_Кво);
	|Функция Сум = Сумма(_Сум); // плановая себестоимость
	|Функция СумДав = Сумма(_СумДав); // плановая себестоимость
	|Группировка Про без упорядочивания без групп;
	|Группировка Пар без упорядочивания;
	|Условие(Про в спПродукция);
	|Условие(Пар в спПартии);
	|"//}}ЗАПРОС
    ;
	
	Состояние("Выполняется запрос по выпуску партий продукции.");
	глКомментарий("Выполняется запрос по выпуску партий продукции.",2);
	
	ЗапрВыпускПартии = СоздатьОбъект("Запрос");
	Если ЗапрВыпускПартии.Выполнить(ТекстЗапр) = 0 Тогда
	    глКомментарий("Не выполнился запрос по выпуску партий продукции!",0);
		Возврат 0;
	КонецЕсли;
	
	ЗапрВыпускПартии.вНачалоВыборки();
	Возврат 1;
КонецФункции //ЗапрВыпускПартии

// ===============================
// Назначение:
//		Процедура используется для обхода погрешностей округления при дооценке по факт. себ-сти
//		партий продукции во всех процедурах дооценки /ПересчитатьХХХ()/
//		Когда дооценивается последняя "порция" кол-ва партии, сумма вычисляется как 
//		остаток, в противном случае пропорционально
//		Функция не должна вызываться более одного раза для одного и того же пересчитываемого кол-ва
// Аргументы:
//		ТекКво		 - количество, которое дооцениваем
//		ТекСумма	 - в этом аргументе возвращаем сумму дооценки
//		ТекСуммаДав	 - в этом аргументе возвращаем ее давальч составляющую
Процедура ПолучитьСуммуДооценкиПоКоличеству(ТекКво, ТекСумма, ТекСуммаДав)
	ОбработаноКвоПартии = ОбработаноКвоПартии + ТекКво;
	Если ОбработаноКвоПартии = ВсегоКвоПартии Тогда
	    // вот оно, последнее количество
		ТекСумма = ОсталосьДельтаПартии;
		ТекСуммаДав = ОсталосьДельтаДавПартии;
	Иначе
		// пропорционально
		ТекСумма = Окр(ТекКво * Дельта,2);
		ТекСуммаДав = Окр(ТекКво * ДельтаДав,2);
	КонецЕсли;
	ОсталосьДельтаПартии = ОсталосьДельтаПартии - ТекСумма;
	ОсталосьДельтаДавПартии = ОсталосьДельтаДавПартии - ТекСуммаДав;
КонецПроцедуры //ПолучитьСуммуДооценкиПоКоличеству

// ===============================
// Назначение:
//		Формирует запрос по остаткам партий продукции на складах - 
//		Сколько продукции конкретных партий осталось на складе
Функция ЗапрОстаткиПартий()
	ТекстЗапр = 	"//{{ЗАПРОС(ОстаткиПартий)
	|"+тПериодЗапросов+"
	|Фир = Регистр.Партии.Фирма;
	|Счет = Регистр.Партии.Счет;
	|МеХ = Регистр.Партии.МестоХранения;
	|Про = Регистр.Партии.ТМЦ;
	|Пар = Регистр.Партии.ПрихДокумент;
	|Ост = Регистр.Партии.ОстатокТовара;
	|Функция Кво = КонОст(Ост);
	|Функция НачКво = НачОст(Ост);
	|Группировка Про без упорядочивания без групп;
	|Группировка Пар без упорядочивания;
	|Группировка Счет без упорядочивания без групп;
	|Группировка МеХ без упорядочивания без групп;
	|Условие(Фир = Фирма);
	|Условие(Пар в спПартии);
	|"//}}ЗАПРОС
	;
	
	Состояние("Выполняется запрос по остаткам партий.");
	глКомментарий("Выполняется запрос по остаткам партий.",2);
	
	ЗапрОстаткиПартий = СоздатьОбъект("Запрос");
	Если ЗапрОстаткиПартий.Выполнить(ТекстЗапр) = 0 Тогда
	    глКомментарий("Не выполнился запрос по остаткам партий!",0);
		Возврат 0
	КонецЕсли;
	Возврат 1
КонецФункции //ЗапрОстаткиПартий

// ===============================
// Назначение:
//		Корректирует факт стоимость остатков партий на складах
// Аргументы:
Функция ПересчитатьОстаткиПартий()
	Если Про.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
	    Возврат 1; // для услуг корректировать остатки не нужно
	КонецЕсли;
	
	// по бухгалтерскому учету приходуем всю разницу в стоимости на один склад
	// а потом разбросаем по всем остальным складам
	СчетПродукции = Про.Счет;
	Если фДавальческая = 0 Тогда
		глПроводка(Контекст, СчетПродукции, "231", ДельтаПартии, "Корректировка остатков по фактической себестоимости", , СкладГП, Про, Пар,
		ВиД, Подразделение,, ,,"ФК");
	Иначе
		// для давальческой отдельно полную себестоимость и нашу балансовую
		СчетПродукции = ?(Про.ВидТМЦ = Перечисление.ВидыТМЦ.Продукция, "0236", "0235");
		глПроводка(Контекст, СчетПродукции, "ДВ", ДельтаПартии, "Корректировка остатков по фактической себестоимости", , СкладГП, Про, Пар,
		ВиД, Подразделение,, ,,"ФК");
		глПроводка(Контекст, "232", "231", ДельтаПартии - ДельтаДавПартии, "Корректировка остатков по фактической себестоимости", , СкладГП, Про, Пар,
		ВиД, Подразделение,, ,,"ФК");
	КонецЕсли;
	
	ЗапрОстаткиПартий.вНачалоВыборки();
	Если ЗапрОстаткиПартий.Получить(Про, Пар,,) = 1 Тогда
		Пока ЗапрОстаткиПартий.Группировка("Счет") = 1 Цикл
			Счет = ЗапрОстаткиПартий.Счет;
			Если ПустоеЗначение(Счет) = 1 Тогда
			    глКомментарий("Обнаружены остатки партий продукции на пустом счете! Продукция = "+Про+", партия = "+Пар+"!",1);
				Продолжить;
			ИначеЕсли (Счет.Забалансовый = 0) и (фДавальческая = 1) Тогда
			    глКомментарий("Обнаружены остатки партий продукции, произведенной по давальческому заказу, на балансовом счете!",1);
			    глКомментарий("    Счет = "+Счет+", продукция = "+Про+", партия = "+Пар+"!",1);
				Возврат 0;
			КонецЕсли;
			Пока ЗапрОстаткиПартий.Группировка("МеХ") = 1 Цикл
				МеХ = ЗапрОстаткиПартий.МеХ;
				
				ТекСумма = 0;
				ТекСуммаДав = 0;
				ПолучитьСуммуДооценкиПоКоличеству(ЗапрОстаткиПартий.Кво, ТекСумма, ТекСуммаДав);
				
				Если МеХ = СкладГП Тогда
				    // нет смысла перемещать между одним и тем же складом
				Иначе
					Если фДавальческая = 0 Тогда
						Если Лев(Счет.Код,3) = "282" Тогда
						    // партия находится в рознице, вместо 282 пересчитаем наценку на эту продукцию
							глПроводка(Контекст, "2852", СчетПродукции, ТекСумма, "Корректировка остатков по фактической себестоимости", , МеХ, Про, Пар,
							СкладГП, Про, Пар, ,, "ФК");
						Иначе
							// обычная партия на оптовом складе
							глПроводка(Контекст, Счет, СчетПродукции, ТекСумма, "Корректировка остатков по фактической себестоимости", , МеХ, Про, Пар,
							СкладГП, Про, Пар, ,, "ФК");
						КонецЕсли;
					Иначе
						// для давальческой отдельно полную себестоимость и нашу балансовую
						глПроводка(Контекст, Счет, СчетПродукции, ТекСумма, "Корректировка остатков по фактической себестоимости", , МеХ, Про, Пар,
						СкладГП, Про, Пар, ,, "ФК");
						глПроводка(Контекст, "232", "232", ТекСумма - ТекСуммаДав, "Корректировка остатков по фактической себестоимости", , МеХ, Про, Пар,
						СкладГП, Про, Пар, ,, "ФК");
					КонецЕсли;
				КонецЕсли;
				// и регистр партии
				
				Заказчик = 0;
				ПродСтоимость = 0;
				Если фДавальческая = 1 Тогда
					// для давальческой продукции:
					// 		важно сохранить поставщика в партиях
					Заказчик = Пар.Контрагент;
					// 		в регистре ПродСтоимость хранится стоимость нашей собственной составляющей
					ПродСтоимость = ТекСумма - ТекСуммаДав;
				КонецЕсли;
				
				глПровестиПартию(Контекст, 1, 0, Фирма, Про, Счет, МеХ, Заказчик, Пар, Пар,
				0, ТекСумма, ПродСтоимость, ВыпускПродукции, 0, 0, 0)			
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат 1
КонецФункции //ПересчитатьОстаткиПартий

// ===============================
// Назначение:
//		Формирует запрос по реализации партий продукции - 
//		Сколько продукции конкретных партий было продано
Функция ЗапрРеализация()
	СчетРеализации = ?(ИспользоватьСчетаРасходов = Класс8, "79", "90,943");
	
	ЗапрРеализация = СоздатьОбъект("БухгалтерскиеИтоги");
	ЗапрРеализация.ИспользоватьРазделительУчета(Фирма);
	ЗапрРеализация.ВключатьСубсчета(-1,-1);
	ЗапрРеализация.ИспользоватьСубконто(ВидыСубконто.ТМЦ,спПродукция,2);
	ЗапрРеализация.ИспользоватьСубконто(ВидыСубконто.Партии,спПартии,2);
	ЗапрРеализация.ИспользоватьКорСубконто(ВидыСубконто.ВидыДеятельности);
	ЗапрРеализация.ИспользоватьКорСубконто(ВидыСубконто.Подразделения);
	               
	
	Состояние("Выполняется запрос по реализации.");
	глКомментарий("Выполняется запрос по реализации.",2);
	
	Если ЗапрРеализация.ВыполнитьЗапрос(ДатаНач, ДатаКон, "25,26,2822,232", СчетРеализации, ,2, ,5) = 0 Тогда
	    глКомментарий("Не выполнился запрос по реализации продукции!",0);
		Возврат 0
	КонецЕсли;
	          
	Если ОтражатьФактСебестВОборотах = 3 Тогда
		ТекстЗапр = 	"//{{ЗАПРОС(Обороты)
		|"+тПериодЗапросов+"
		|Фир  = Регистр.Обороты.Фирма;
		|ВиД  = Регистр.Обороты.ВидДеятельности;
		|Счет = Регистр.Обороты.Счет;
		|ТМЦ  = Регистр.Обороты.ТМЦ;
		|Пок  = Регистр.Обороты.Покупатель;
		|Пар  = Регистр.Обороты.Партия;
		|Признак  = Регистр.Обороты.Признак;
		|_Кво = Регистр.Обороты.РасходКво;
		|Функция Кво = Сумма(_Кво);
		|Группировка ВиД  без упорядочивания без групп;
		|Группировка Счет без упорядочивания без групп;
		|Группировка ТМЦ  без упорядочивания без групп;
		|Группировка Пар  без упорядочивания;
		|Группировка Пок  без упорядочивания без групп;
		|Группировка Признак без упорядочивания;
		|Условие(ТМЦ в спПродукция);
		|Условие(Фир = Фирма);
		|"//}}ЗАПРОС
		;
		
		Состояние("Выполняется запрос по оборотам реализации продукции.");
		глКомментарий("Выполняется запрос по оборотам реализации продукции.",2);
		
		ЗапрОбороты = СоздатьОбъект("Запрос");
		Если ЗапрОбороты.Выполнить(ТекстЗапр) = 0 Тогда
			глКомментарий("Не выполнился запрос по оборотам реализации продукции!",0);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1
КонецФункции //ЗапрРеализация

// ===============================
Процедура ПересчитатьОборотыРеализации(Счет,ВидДеятельности,Сумма,КодОперации)
	Если Сумма = 0 Тогда
	    Возврат;
	КонецЕсли;
	// по оборотам
	Если ОтражатьФактСебестВОборотах <= 1 Тогда
		// не отражаем в оборотах
	ИначеЕсли ОтражатьФактСебестВОборотах = 2 Тогда
		// отражаем по каждому ТМЦ
		Регистр.Обороты.Движение(Фирма,Про,Счет,,,ВидДеятельности, ,,,,-Сумма,КодОперации,);
	ИначеЕсли ОтражатьФактСебестВОборотах = 3 Тогда
		Если Вид.ПозаказноеПроизводство = Да Тогда
		    // дооценка реализации относится исключительно на контрагента данного заказа
			Регистр.Обороты.Движение(Фирма,Про,Счет,Зак.Контрагент,,ВидДеятельности, ,,,,-Сумма,КодОперации,Зак);
		Иначе // массовый
			// отражаем по каждому ТМЦ и покупателю
			ЗапрОбороты.вНачалоВыборки();
			Если ЗапрОбороты.Получить(ВиД,Счет,Про,Пар,,) = 1 Тогда 
				КвоОбороты = ЗапрОбороты.Кво; 
				Если КвоОбороты = 0 Тогда
					Регистр.Обороты.Движение(Фирма,Про,Счет,,,ВидДеятельности, ,,,,-Сумма,КодОперации,);
					Возврат;
				КонецЕсли;
				
				ОбработаноКво = 0;
				ОсталосьСумма = Сумма; 
				Пока ЗапрОбороты.Группировка("Пок") = 1 Цикл 
					Пока ЗапрОбороты.Группировка("Признак") = 1 Цикл 
						КвоПокупатели = ЗапрОбороты.Кво;
						
						Если КвоПокупатели = 0 Тогда 
							Продолжить;
						КонецЕсли;
						
						ОбработаноКво = ОбработаноКво + КвоПокупатели;
						Если ОбработаноКво = КвоОбороты Тогда
							ДельтаПокупатели = ОсталосьСумма; // обходим ошибки округления
						Иначе
							ДельтаПокупатели = Окр(КвоПокупатели/КвоОбороты * Сумма,2);
						КонецЕсли;
						ОсталосьСумма = ОсталосьСумма - ДельтаПокупатели;
						Если ДельтаПокупатели <> 0 Тогда
		    				Регистр.Обороты.Движение(Фирма,Про,Счет,ЗапрОбороты.Пок,,ВидДеятельности, ,,,,-ДельтаПокупатели,КодОперации,ЗапрОбороты.Пар);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;	// покупатели	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

// ===============================
// Назначение:
//		Корректирует факт стоимость реализации продукции
Функция ПересчитатьРеализацию()
	Если Про.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
		// все "выпущенные" услуги уже раелизованы, так что корректируем все количество партии
		глПроводка(Контекст,"903","231", ДельтаПартии,"Корректировка реализации по фактической себестоимости", ,ВиД,Подразделение,,
		ВиД, Подразделение, ,,, "ФК");
		ПересчитатьОборотыРеализации(СчетПоКоду("231"),Про.ВидДеятельности,ДельтаПартии, ПродажаУслуги);
	Иначе
		ЗапрРеализация.ВыбратьСубконто(1);
		Если ЗапрРеализация.ПолучитьСубконто(1,,Про) = 1 Тогда
			ЗапрРеализация.ВыбратьСубконто(2);
			Если ЗапрРеализация.ПолучитьСубконто(2,,Пар) = 1 Тогда
				ЗапрРеализация.ВыбратьСчета();
				Пока ЗапрРеализация.ПолучитьСчет() = 1 Цикл
					ЗапрРеализация.ВыбратьКорСчета();
					Пока ЗапрРеализация.ПолучитьКорСчет() = 1 Цикл
						ЗапрРеализация.ВыбратьКорСубконто(1);
						Пока ЗапрРеализация.ПолучитьКорСубконто(1) = 1 Цикл
							ЗапрРеализация.ВыбратьКорСубконто(2);
							Пока ЗапрРеализация.ПолучитьКорСубконто(2) = 1 Цикл
								// теперь есть вся информация о реализации
								// корректируем по проводкам
								РеализованоКво = ЗапрРеализация.КорКО("К");
								
								ТекСумма = 0;
								ТекСуммаДав = 0;
								ПолучитьСуммуДооценкиПоКоличеству(РеализованоКво, ТекСумма, ТекСуммаДав);
								
								ДельтаРеализации = 0;
								Если фДавальческая = 0 Тогда
								    ДельтаРеализации = ТекСумма;
									глПроводка(Контекст,ЗапрРеализация.КорСчет,Про.Счет, ДельтаРеализации,"Корректировка реализации по фактической себестоимости", ,ЗапрРеализация.КорСубконто(1),ЗапрРеализация.КорСубконто(2),,
									СкладГП, Про, Пар,,, "ФК");
								Иначе
									ДельтаРеализации = ТекСумма - ТекСуммаДав;
									// собственная составляющая (услуги по переработке) списывается с баланса
									глПроводка(Контекст,ЗапрРеализация.КорСчет,"232", ДельтаРеализации,"Корректировка реализации по фактической себестоимости", ,ЗапрРеализация.КорСубконто(1),ЗапрРеализация.КорСубконто(2),,
									СкладГП, Про, Пар,,, "ФК");
									// полная стоимость списывается с забаланса
									СчетПродукции = ?(Про.ВидТМЦ = Перечисление.ВидыТМЦ.Продукция, "0236", "0235");
									глПроводка(Контекст,,СчетПродукции, ДельтаРеализации,"Корректировка реализации по фактической себестоимости", ,,,,
									СкладГП, Про, Пар,,, "ФК");
								КонецЕсли;
								
								ПересчитатьОборотыРеализации(ЗапрРеализация.Счет,ЗапрРеализация.КорСубконто(1),ДельтаРеализации,Продажа);
							КонецЦикла;// подразделения
						КонецЦикла;// вид деятельности
					КонецЦикла;// счет реализации
				КонецЦикла;// счет продукции
			КонецЕсли;// партия
		КонецЕсли;// продукция
	КонецЕсли;
	Возврат 1
КонецФункции //ПересчитатьРеализацию

// ===============================
// Назначение:
//		Формирует запрос по движению партий продукции в производство - 
//		На какую сумму полуфабрикатов (продукции) было пущено в производство
//		и на какие виды деятельности/подразделения
Функция ЗапрДвижПартийВПроизв()
Перем СчетПолуфабрикатов, СчетПроизводства;
	ЗапрДвижПартийВПроизв = СоздатьОбъект("БухгалтерскиеИтоги");
	ЗапрДвижПартийВПроизв.ИспользоватьРазделительУчета(Фирма);
	ЗапрДвижПартийВПроизв.ВключатьСубсчета(-1,-1);
	ЗапрДвижПартийВПроизв.ИспользоватьСубконто(ВидыСубконто.ТМЦ,спПродукция,2);
	ЗапрДвижПартийВПроизв.ИспользоватьСубконто(ВидыСубконто.Партии,спПартии,2);
	ЗапрДвижПартийВПроизв.ИспользоватьКорСубконто(ВидыСубконто.ВидыДеятельности);
	ЗапрДвижПартийВПроизв.ИспользоватьКорСубконто(ВидыСубконто.Подразделения);
	
	СчетПолуфабрикатов = "25,26,0235,0236";
	СчетПроизводства = "23,ДВ";
	
	Состояние("Выполняется запрос по движению партий в производство.");
	глКомментарий("Выполняется запрос по движению партий в производство.",2);
	
	Если ЗапрДвижПартийВПроизв.ВыполнитьЗапрос(ДатаНач,ДатаКон,СчетПолуфабрикатов,СчетПроизводства,,2,,5) = 0 Тогда
	    глКомментарий("Не выполнился запрос по движению партий в производство!",0);
		Возврат 0;
	КонецЕсли;
	Возврат 1
КонецФункции //ЗапрДвижПартийВПроизв

// ===============================
// Назначение:
//		Формирует запрос по использованию полуфабрикатов в производстве - 
//		На какие виды деятельности/подразделения/и др измерения был списан полуфабрикат
Функция ЗапрИспользПолуфабрВПроизв()
	ТекстЗапр = 	"//{{ЗАПРОС(ИспользПолуфабрВПроизв)
	|"+тПериодЗапросов+"
	|Фир = Регистр.ПроизводственныеЗатраты.Фирма;
	|ВиД = Регистр.ПроизводственныеЗатраты.ВидДеятельности;
	|Под = Регистр.ПроизводственныеЗатраты.Подразделение;
	|Про = Регистр.ПроизводственныеЗатраты.Продукция;
	|ВиЗ = Регистр.ПроизводственныеЗатраты.ВидЗатрат;
	|Зак = Регистр.ПроизводственныеЗатраты.Заказ;
	|Мат = Регистр.ПроизводственныеЗатраты.Материал;
	|_Кво = Регистр.ПроизводственныеЗатраты.Количество;
	|Функция Кво = Приход(_Кво);
	|Группировка Мат без упорядочивания без групп;
	|Группировка ВиД без упорядочивания без групп;
	|Группировка Под без упорядочивания без групп;
	|Группировка Зак без упорядочивания;
	|Группировка Про без упорядочивания без групп;
	|Группировка ВиЗ без упорядочивания без групп;
	|Условие(Мат в спПродукция);
	|Условие(Фир = Фирма);
	|"//}}ЗАПРОС
	;
	
	Состояние("Выполняется запрос по использованию полуфабрикатов в производстве.");
	глКомментарий("Выполняется запрос по использованию полуфабрикатов в производстве.",2);
	
	ЗапрИспользПолуфабрВПроизв = СоздатьОбъект("Запрос");
	Если ЗапрИспользПолуфабрВПроизв.Выполнить(ТекстЗапр) = 0 Тогда
	    глКомментарий("Не выполнился запрос по использованию полуфабрикатов в производстве");
	КонецЕсли;

	Возврат 1
КонецФункции //ЗапрИспользПолуфабрВПроизв

// ===============================
// Назначение:
//		Корректирует факт стоимость партий полуфабрикатов, использованных в производстве
Функция ПересчитатьДвижПартийВПроизв()
Перем СчетПолуфабриката, СчетПроизводства;
	Если Про.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга Тогда
	    Возврат 1; // услуги не могут списываться в качестве полуфабрикатов
	КонецЕсли;
	
	Если фДавальческая = 0 Тогда
	    СчетПолуфабриката = СчетПоКоду(?(Про.ВидТМЦ = Перечисление.ВидыТМЦ.Продукция, "26","25"));
		СчетПроизводства = СчетПоКоду("231");
	Иначе
		// давальческая схема, движения по забалансу
		СчетПолуфабриката = СчетПоКоду(?(Про.ВидТМЦ = Перечисление.ВидыТМЦ.Продукция, "0236","0235"));
		СчетПроизводства = СчетПоКоду("ДВ");
	КонецЕсли;
	
	ЗапрДвижПартийВПроизв.ВыбратьСчета();
	Если ЗапрДвижПартийВПроизв.ПолучитьСчет(,СчетПолуфабриката) = 1 Тогда
		ЗапрДвижПартийВПроизв.ВыбратьСубконто(1);
		Если ЗапрДвижПартийВПроизв.ПолучитьСубконто(1,,Про) = 1 Тогда
			ЗапрДвижПартийВПроизв.ВыбратьСубконто(2);
			Если ЗапрДвижПартийВПроизв.ПолучитьСубконто(2,,Пар) = 1 Тогда
				ЗапрДвижПартийВПроизв.ВыбратьКорСчета();
				Если ЗапрДвижПартийВПроизв.ПолучитьКорСчет(,СчетПроизводства) = 1 Тогда
					ЗапрДвижПартийВПроизв.ВыбратьКорСубконто(1);
					Пока ЗапрДвижПартийВПроизв.ПолучитьКорСубконто(1) = 1 Цикл
						ЗапрДвижПартийВПроизв.ВыбратьКорСубконто(2);
						Пока ЗапрДвижПартийВПроизв.ПолучитьКорСубконто(2) = 1 Цикл
							КвоДвиж = ЗапрДвижПартийВПроизв.КорКО("К");
							Если КвоДвиж = 0 Тогда
							    Продолжить; // не списывали
							КонецЕсли;
							
							ТекСумма = 0;
							ТекСуммаДав = 0;
							ПолучитьСуммуДооценкиПоКоличеству(КвоДвиж, ТекСумма, ТекСуммаДав);
							
							ТекВиД = ЗапрДвижПартийВПроизв.КорСубконто(1);
							ТекПод = ЗапрДвижПартийВПроизв.КорСубконто(2);
							// проводку сделаем одну
							Если фДавальческая = 0 Тогда
								глПроводка(Контекст,"231",СчетПолуфабриката, ТекСумма,"Корректировка использ. полуфабр. по фактической себестоимости", ,ТекВиД,ТекПод,,
								СкладГП, ЗапрДвижПартийВПроизв.Субконто(1), ЗапрДвижПартийВПроизв.Субконто(2),,, "ФК");
							Иначе
								глПроводка(Контекст,"ДВ",СчетПолуфабриката, ТекСумма,"Корректировка использ. полуфабр. по фактической себестоимости", ,ТекВиД,ТекПод,,
								СкладГП, ЗапрДвижПартийВПроизв.Субконто(1), ЗапрДвижПартийВПроизв.Субконто(2),,, "ФК");
								глПроводка(Контекст,"231","232", ТекСумма - ТекСуммаДав,"Корректировка использ. полуфабр. по фактической себестоимости", ,ТекВиД,ТекПод,,
								СкладГП, ЗапрДвижПартийВПроизв.Субконто(1), ЗапрДвижПартийВПроизв.Субконто(2),,, "ФК");
							КонецЕсли;
							// а движений будет много - нужно "разбить" сумму корректировки пропорционально 
							// продукции, заказам и видам затрат, на которые списан наш полуфабрикат
							ЗапрИспользПолуфабрВПроизв.вНачалоВыборки();
							ЗапрИспользПолуфабрВПроизв.Получить(Про, ТекВиД, ТекПод,,,);
							ВсегоУшлоВПодразделение = 0;
							Если фДавальческая = 1 Тогда
							    // давальческие полуфабрикаты поставщика могли пойти только на его же давальческую продукцию
								// поэтому распределять будем только между ними
								Пока ЗапрИспользПолуфабрВПроизв.Группировка("Зак") = 1 Цикл
									Если глЭтоДавальческийЗаказ(ЗапрИспользПолуфабрВПроизв.Зак) = 0 Тогда
									    Продолжить;
									КонецЕсли;
									Если Зак.Контрагент <> ЗапрИспользПолуфабрВПроизв.Зак.Контрагент Тогда
									    Продолжить;
									КонецЕсли;
									ВсегоУшлоВПодразделение = ВсегоУшлоВПодразделение + ЗапрИспользПолуфабрВПроизв.Кво;
								КонецЦикла;
								// вернем позиционирование в выборке
								ЗапрИспользПолуфабрВПроизв.вНачалоВыборки();
								ЗапрИспользПолуфабрВПроизв.Получить(Про, ТекВиД, ТекПод,,,);
							Иначе
								ВсегоУшлоВПодразделение = ЗапрИспользПолуфабрВПроизв.Кво;
							КонецЕсли;
							
							Если ВсегоУшлоВПодразделение = 0 Тогда
							    глКомментарий("Расхождения в списании полуфабрикатов по данным бухгалтерского и оперативного учета!",0);
							    глКомментарий("Полуфабрикат "+Про+" списывался на вид деятельности "+ТекВиД+" в подразделение "+ТекПод+" по данным бух. учета!",0);
							    глКомментарий("По данным оперативного учета он не списывался (см. отчет ""Факт. себестоимость продукуии"")!",0);
								Возврат 0;
							КонецЕсли;
							
							// и теперь собственно распределение
							ОбработаноОстатков = 0;
							ОсталосьСумма = ТекСумма; ОсталосьСуммаДав = ТекСуммаДав;
							Пока ЗапрИспользПолуфабрВПроизв.Группировка("Зак") = 1 Цикл
								Если фДавальческая = 1 Тогда
								    // пропустим "чужие" заказы
									Если глЭтоДавальческийЗаказ(ЗапрИспользПолуфабрВПроизв.Зак) = 0 Тогда
									    Продолжить;
									КонецЕсли;
									Если Зак.Контрагент <> ЗапрИспользПолуфабрВПроизв.Зак.Контрагент Тогда
									    Продолжить;
									КонецЕсли;
								КонецЕсли;
								Пока ЗапрИспользПолуфабрВПроизв.Группировка("Про") = 1 Цикл
									Пока ЗапрИспользПолуфабрВПроизв.Группировка("ВиЗ") = 1 Цикл
										ОбработаноОстатков = ОбработаноОстатков + ЗапрИспользПолуфабрВПроизв.Кво;
										Если ВсегоУшлоВПодразделение = ОбработаноОстатков Тогда
											СуммаКорректировки = ОсталосьСумма; // обходим ошибки округления
											СуммаКорректировкиДав = ОсталосьСуммаДав;
										Иначе
											СуммаКорректировки = Окр(ЗапрИспользПолуфабрВПроизв.Кво/ВсегоУшлоВПодразделение * ТекСумма,2);
											СуммаКорректировкиДав = Окр(ЗапрИспользПолуфабрВПроизв.Кво/ВсегоУшлоВПодразделение * ТекСуммаДав,2);
										КонецЕсли;
										ОсталосьСумма = ОсталосьСумма - СуммаКорректировки;
										ОсталосьСуммаДав = ОсталосьСуммаДав - СуммаКорректировкиДав;
										
										Регистр.ПроизводственныеЗатраты.Фирма = Фирма;
										Регистр.ПроизводственныеЗатраты.ВидДеятельности = ТекВиД;
										Регистр.ПроизводственныеЗатраты.Подразделение = ТекПод;
										Регистр.ПроизводственныеЗатраты.Продукция = ЗапрИспользПолуфабрВПроизв.Про;
										Регистр.ПроизводственныеЗатраты.Заказ = ЗапрИспользПолуфабрВПроизв.Зак;
										Регистр.ПроизводственныеЗатраты.Материал = Про;
										Регистр.ПроизводственныеЗатраты.ВидЗатрат = ЗапрИспользПолуфабрВПроизв.ВиЗ;
										Регистр.ПроизводственныеЗатраты.Количество = 0;
										Регистр.ПроизводственныеЗатраты.Сумма = СуммаКорректировки;
										Регистр.ПроизводственныеЗатраты.СуммаДав = СуммаКорректировкиДав;
										Регистр.ПроизводственныеЗатраты.КодОперации = ОтражениеЗатрат;
										Регистр.ПроизводственныеЗатраты.ДвижениеПриходВыполнить();
									КонецЦикла; // вид затрат
								КонецЦикла; // продукция
							КонецЦикла; // заказ
						КонецЦикла; // подразделение
					КонецЦикла; // вид деятельности
				КонецЕсли; // корр счет (производства)
			КонецЕсли; // партия
		КонецЕсли; // полуфабрикат
	КонецЕсли; // счет (полуфабриката)
	
	Возврат 1
КонецФункции //ПересчитатьДвижПартийВПроизв

// ===============================
// Назначение:
//		Формирует запрос по списанию партий продукции на расходы - 
//		Сколько было списано на расходы, не связанные с производством
Функция ЗапрСписНаРасходы()
	ЗапрСписНаРасходы = СоздатьОбъект("БухгалтерскиеИтоги");
	ЗапрСписНаРасходы.ИспользоватьРазделительУчета(Фирма);
	ЗапрСписНаРасходы.ВключатьСубсчета(-1,-1);
	ЗапрСписНаРасходы.ИспользоватьСубконто(ВидыСубконто.ТМЦ,спПродукция,2);
	ЗапрСписНаРасходы.ИспользоватьСубконто(ВидыСубконто.Партии,спПартии,2);
	ЗапрСписНаРасходы.ИспользоватьКорСубконто(ВидыСубконто.ВидыДеятельности);
	ЗапрСписНаРасходы.ИспользоватьКорСубконто(ВидыСубконто.Подразделения);
	ЗапрСписНаРасходы.ИспользоватьКорСубконто(ВидыСубконто.ВидыЗатрат);
	
	Состояние("Выполняется запрос по списанию на расходы.");
	глКомментарий("Выполняется запрос по списанию на расходы.",2);
	
	СчетаРасходов = "24,80,81,82,83,84,85,91,92,93,94,95,96,97,99"; // все кроме себестоимости реализации и налога на прибыль + брак
	Период = 0;
	// Списание полуфабрикатов и продукции на расходы в конфигурации отражается без проведения по 8 классу,
	// чтобы не проводить одни и те же суммы дважды через 8 класс и не увеличивать элементы затрат для фин. рез-тов
	// Если нужно все-таки проводить их через 8-й класс, достаточно раскомментировать строки ниже
	//Период = ?(ИспользоватьСчетаРасходов = Класс89, "Операция", "");
	Если ЗапрСписНаРасходы.ВыполнитьЗапрос(ДатаНач,ДатаКон,"25,26,2822",СчетаРасходов,,2,Период,5) = 0 Тогда
	    глКомментарий("Не выполнился запрос по списанию на расходы!",0);
		Возврат 0;
	КонецЕсли;
	
	Возврат 1
КонецФункции //ЗапрСписНаРасходы

// ===============================
// Назначение:
//		Корректирует факт стоимость списанной на расходы продукции
Функция ПересчитатьСписНаРасходы()
Перем тбЗатратыДеятельности;
	Если фДавальческая = 1 Тогда
	    Возврат 1; // продукция из дав сырья не может быть списана на расходы
	КонецЕсли;
	
	// Списание полуфабрикатов и продукции на расходы в конфигурации отражается без проведения по 8 классу,
	// чтобы не проводить одни и те же суммы дважды через 8 класс и не увеличивать элементы затрат для фин. рез-тов
	// Если нужно все-таки проводить их через 8-й класс, достаточно раскомментировать строки ниже
	//Если ИспользоватьСчетаРасходов = Класс89 Тогда
	//	тбЗатратыДеятельности = СоздатьОбъект("ТаблицаЗначений");
	//    тбЗатратыДеятельности.НоваяКолонка("Счет","Счет.Основной");
	//    тбЗатратыДеятельности.НоваяКолонка("Сумма","Число",15,2);
	//КонецЕсли;
	
	ЗапрСписНаРасходы.ВыбратьСубконто(1);
	Если ЗапрСписНаРасходы.ПолучитьСубконто(1,,Про) = 1 Тогда
		ЗапрСписНаРасходы.ВыбратьСубконто(2);
		Если ЗапрСписНаРасходы.ПолучитьСубконто(2,,Пар) = 1 Тогда
			ЗапрСписНаРасходы.ВыбратьКорСчета();
			Пока ЗапрСписНаРасходы.ПолучитьКорСчет() = 1 Цикл
				ЗапрСписНаРасходы.ВыбратьКорСубконто(1);
				Пока ЗапрСписНаРасходы.ПолучитьКорСубконто(1) = 1 Цикл
					ЗапрСписНаРасходы.ВыбратьКорСубконто(2);
					Пока ЗапрСписНаРасходы.ПолучитьКорСубконто(2) = 1 Цикл
						ЗапрСписНаРасходы.ВыбратьКорСубконто(2);
						Пока ЗапрСписНаРасходы.ПолучитьКорСубконто(2) = 1 Цикл
							// корректируем по проводкам
							СписаноКво = ЗапрСписНаРасходы.КорКО("К");
							
							ТекСумма = 0;
							ТекСуммаДав = 0;
							ПолучитьСуммуДооценкиПоКоличеству(СписаноКво, ТекСумма, ТекСуммаДав);
							
							глПроводка(Контекст,ЗапрСписНаРасходы.КорСчет,Про.Счет, ТекСумма,"Корректировка списания продукции на расходы по факт. себестоимости", ,ЗапрСписНаРасходы.КорСубконто(1),ЗапрСписНаРасходы.КорСубконто(2),ЗапрСписНаРасходы.КорСубконто(3),
							СкладГП, ЗапрСписНаРасходы.Субконто(1), ЗапрСписНаРасходы.Субконто(2),,, "ФК");
							// Списание полуфабрикатов и продукции на расходы в конфигурации отражается без проведения по 8 классу,
							// чтобы не проводить одни и те же суммы дважды через 8 класс и не увеличивать элементы затрат для фин. рез-тов
							// Если нужно все-таки проводить их через 8-й класс, достаточно раскомментировать строки ниже

							//Если (ИспользоватьСчетаРасходов = Класс89) и (Лев(ЗапрСписНаРасходы.КорСчет.Код,1) = "8") Тогда
							//  // при использовании обоих классов счетов расходов проводки формируются сквозным образом через 8-й на 9-й, 
							//	// поэтому нам надо знать не только, на какой 8-й счет пошли расходы, но и на какой 9-й
							//	тбЗатратыДеятельности.УдалитьСтроки();
							//	ЗапрСписНаРасходы.ВыбратьПериоды();
							//	Пока ЗапрСписНаРасходы.ПолучитьПериод() = 1 Цикл
							//		ТекДок = ЗапрСписНаРасходы.Операция.Документ;
							//	    // все виды документов, которые умеют списывать ТМЦ на расходы, 
							//		// должны быть обработаны отдельно в явном виде
							//		Если ТекДок.Вид() = "СписаниеТМЦ" Тогда
							//			Если Лев(ТекДок.СчетСписания.Код,1) = "9" Тогда
							//				// списание на затраты деятельности (9 класс)
							//				тбЗатратыДеятельности.НоваяСтрока();
							//				тбЗатратыДеятельности.Счет = ТекДок.СчетСписания;
							//				тбЗатратыДеятельности.Сумма = ЗапрСписНаРасходы.КорКО("К")*ДельтаСписано;
							//			КонецЕсли;
							//		Иначе
							//			// остатки по "неизвестным" нам документам не будут отнесены на 9-й класс, 
							//			// а останутся "висеть" на 8-м до расчета финансовых результатов
							//		КонецЕсли;
							//	КонецЦикла;// документы списания
							//	// теперь обработаем таблицу и откорректируем затраты деятельности
							//	тбЗатратыДеятельности.Свернуть("Счет","Сумма");
							//	тбЗатратыДеятельности.ВыбратьСтроки();
							//	Пока тбЗатратыДеятельности.ПолучитьСтроку() = 1 Цикл
							//		// аналитика по затратам на 8 и 9 совпадает
							//		глПроводка(Контекст,тбЗатратыДеятельности.Счет,ЗапрСписНаРасходы.КорСчет, тбЗатратыДеятельности.Сумма,"Корректировка списания продукции на расходы по факт. себестоимости", ,ЗапрСписНаРасходы.КорСубконто(1),ЗапрСписНаРасходы.КорСубконто(2),ЗапрСписНаРасходы.КорСубконто(3),
							//		ЗапрСписНаРасходы.КорСубконто(1),ЗапрСписНаРасходы.КорСубконто(2),ЗапрСписНаРасходы.КорСубконто(3),,, "ФК");
							//	КонецЦикла;// счета деятельности
							//КонецЕсли;
						КонецЦикла;// виды затрат
					КонецЦикла;// подразделения
				КонецЦикла;// вид деятельности
			КонецЦикла;// счет расходов
		КонецЕсли;// партия
	КонецЕсли;// продукция
	Возврат 1
КонецФункции //ПересчитатьСписНаРасходы

// ===============================
// Назначение:
//		Формирует запрос по списанию партий продукции на капитальные инвестиции
//		(15 счет, создание и модернизация своих необоротных активов) 
Функция ЗапрСписНаКапИнвест()
	ЗапрСписНаКапИнвест = СоздатьОбъект("БухгалтерскиеИтоги");
	ЗапрСписНаКапИнвест.ИспользоватьРазделительУчета(Фирма);
	ЗапрСписНаКапИнвест.ВключатьСубсчета(-1,-1);
	ЗапрСписНаКапИнвест.ИспользоватьСубконто(ВидыСубконто.ТМЦ,спПродукция,2);
	ЗапрСписНаКапИнвест.ИспользоватьСубконто(ВидыСубконто.Партии,спПартии,2);
	ЗапрСписНаКапИнвест.ИспользоватьКорСубконто(ВидыСубконто.Инвестиции);
	
	Состояние("Выполняется запрос по списанию на капитальные инвестиции.");
	глКомментарий("Выполняется запрос по списанию на капитальные инвестиции.",2);
	
	Если ЗапрСписНаКапИнвест.ВыполнитьЗапрос(ДатаНач,ДатаКон,"25,26,2822","15",,2,,5) = 0 Тогда
	    глКомментарий("Не выполнился запрос по списанию партий на капитальные инвестиции!",0);
		Возврат 0;
	КонецЕсли;
	
	Возврат 1
КонецФункции //ЗапрСписНаКапИнвест

// ===============================
// Назначение:
//		Корректирует факт стоимость списанной на капитальные инвестиции продукции
Функция ПересчитатьСписНаКапИнвест()
	Если фДавальческая = 1 Тогда
	    Возврат 1; // продукция из дав сырья не может быть списана на инвестиции
	КонецЕсли;
	
	ЗапрСписНаКапИнвест.ВыбратьСубконто(1);
	Если ЗапрСписНаКапИнвест.ПолучитьСубконто(1,,Про) = 1 Тогда
		ЗапрСписНаКапИнвест.ВыбратьСубконто(2);
		Если ЗапрСписНаКапИнвест.ПолучитьСубконто(2,,Пар) = 1 Тогда
			ЗапрСписНаКапИнвест.ВыбратьКорСчета();
			Пока ЗапрСписНаКапИнвест.ПолучитьКорСчет() = 1 Цикл
				ЗапрСписНаКапИнвест.ВыбратьКорСубконто(1);
				Пока ЗапрСписНаКапИнвест.ПолучитьКорСубконто(1) = 1 Цикл
					// корректируем по проводкам
					СписаноКво = ЗапрСписНаКапИнвест.КорКО("К");
					
					ТекСумма = 0;
					ТекСуммаДав = 0;
					ПолучитьСуммуДооценкиПоКоличеству(СписаноКво, ТекСумма, ТекСуммаДав);
					
					глПроводка(Контекст,ЗапрСписНаКапИнвест.КорСчет,Про.Счет, ТекСумма,"Корректировка списания продукции на кап. инвестиции по факт. себестоимости", ,ЗапрСписНаКапИнвест.КорСубконто(1),,,
					СкладГП, ЗапрСписНаКапИнвест.Субконто(1), ЗапрСписНаКапИнвест.Субконто(2),,, "ФК");
				КонецЦикла;// инвестиции
			КонецЦикла;// счет инвестиций
		КонецЕсли;// партия
	КонецЕсли;// продукция
	Возврат 1
КонецФункции //ПересчитатьСписНаКапИнвест

// ===============================
// Назначение:
//		Формирует запрос для самопроверки - 
//		Не списывалась ли еще куда-нибудь продукция, куда не предусмотрено конфигурацией
Функция ЗапрКонтроль()
	ЗапрКонтроль = СоздатьОбъект("БухгалтерскиеИтоги");
	ЗапрКонтроль.ИспользоватьРазделительУчета(Фирма);
	ЗапрКонтроль.ВключатьСубсчета(0,-1);
	ЗапрКонтроль.ИспользоватьСубконто(ВидыСубконто.ТМЦ,спПродукция,2);
	ЗапрКонтроль.ИспользоватьСубконто(ВидыСубконто.Партии,спПартии,2);
	
	Состояние("Выполняется запрос для самопроверки.");
	глКомментарий("Выполняется запрос для самопроверки.",2);
	
	Если ЗапрКонтроль.ВыполнитьЗапрос(ДатаНач,ДатаКон,"25,26,2822",,,2,,5) = 0 Тогда
	    глКомментарий("Не выполнился запрос для самопроверки!",0);
		Возврат 0;
	КонецЕсли;
	
	Возврат 1
КонецФункции //ЗапрКонтроль

// ===============================
// Назначение:
//		Выполняет проверку, не списывалась ли еще куда-нибудь продукция, 
//		куда не предусмотрено конфигурацией
Функция ВыполнитьКонтроль()
	фОшибка = 0;
	ЗапрКонтроль.ВыбратьСубконто(1);
	Если ЗапрКонтроль.ПолучитьСубконто(1,,Про) = 1 Тогда
		ЗапрКонтроль.ВыбратьСубконто(2);
		Если ЗапрКонтроль.ПолучитьСубконто(2,,Пар) = 1 Тогда
			ЗапрКонтроль.ВыбратьКорСчета();
			Пока ЗапрКонтроль.ПолучитьКорСчет() = 1 Цикл
				Код = ЗапрКонтроль.КорСчет.Код;
				Если (Лев(Код,2) = "23") // списание в производство
				или  (Лев(Код,1) = "8") или (Лев(Код,1) = "9") или (Лев(Код,2) = "24") или (Лев(Код,2) = "79") // списание на расходы и реализация
				или  (Лев(Код,2) = "15")  // списание на кап. инвестиции
				или  (Лев(Код,2) = "25") или (Лев(Код,2) = "26") или  (Лев(Код,2) = "2822") // перемещение между счетами продукции
				Тогда
					// такие операции мы умеем корректно обработать
				    Продолжить;
				Иначе
					глКомментарий("Продукция "+Про+" партии "+Пар+" списывалась на счет "+Код+", обработка которого не предусмотрена фактической калькуляцией!",0);
					Если фОшибка = 0 Тогда
						глКомментарий("    Фактической калькуляцией предусмотрена обработка перемещения запасов, реализации, списания на расходы, в производство и на капитальные инвестиции!",2);
						фОшибка = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;// корр счет
		КонецЕсли;// партия
	КонецЕсли;// продукция
	Возврат 1-фОшибка;
КонецФункции //ВыполнитьКонтроль

// ===============================
// Назначение:
//		Формирует вспомогательные запросы, которые используются для корректировок
// 		себестоимости продукции, произведенной в текущем месяце
Функция ПодготовитьЗапросыДляКорректировок()
    // сначала составим фильтры 
	// корректировка будет производиться только по тем объектам, которые попали в основной запрос ЗапрФ
	спВидыДеятельности = СоздатьОбъект("СписокЗначений");
	спПродукция.УдалитьВсе();
	спЗаказы = СоздатьОбъект("СписокЗначений");
	
	Пока ЗапрФ.Группировка("Под") = 1 Цикл
		Пока ЗапрФ.Группировка("ВиД") = 1 Цикл
			глДобавитьЗначениеБезПовторения(спВидыДеятельности,ЗапрФ.ВиД);
			Пока ЗапрФ.Группировка("Про") = 1 Цикл
				глДобавитьЗначениеБезПовторения(спПродукция,ЗапрФ.Про);
				Пока ЗапрФ.Группировка("Зак") = 1 Цикл
					глДобавитьЗначениеБезПовторения(спЗаказы,ЗапрФ.Зак);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ЗапрФ.вНачалоВыборки();
	
	Если ЗапрВыпускПродукции() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Если ЗапрВыпускПартии() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Если ЗапрОстаткиПартий() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Если ЗапрРеализация() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Если ЗапрДвижПартийВПроизв() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Если ЗапрИспользПолуфабрВПроизв() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Если ЗапрСписНаРасходы() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Если ЗапрСписНаКапИнвест() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Если ЗапрКонтроль() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Возврат 1;
КонецФункции //ПодготовитьЗапросыДляКорректировок

// ===============================
// Назначение:
//		Формирует корректирующие движения проводки по отличиям фактической себестоимости от плановой
// Аргументы:
//		Вид деятельности, продукция, заказ и партия
Функция ПересчитатьПартию()
    Если (ДельтаПартии = 0) и (ДельтаДавПартии = 0) Тогда
        // повезло, факт себестоимость совпала с плановой, корректировать ничего не надо
		Возврат 1;
	КонецЕсли;
	
	// для обхода погрешностей округления
	ОсталосьДельтаПартии = ДельтаПартии;
	ОсталосьДельтаДавПартии = ДельтаДавПартии;
	ОбработаноКвоПартии = 0;
	
	Если ПересчитатьРеализацию() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	Если ПересчитатьДвижПартийВПроизв() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	Если ПересчитатьСписНаРасходы() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	Если ПересчитатьСписНаКапИнвест() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	Если ПересчитатьОстаткиПартий() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	Если ОбработаноКвоПартии <> ВсегоКвоПартии Тогда
		// есть количество, которое списано куда-то еще, посмотрим куда и сообщим
		Если ВыполнитьКонтроль() = 0 Тогда
		    Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1
КонецФункции //ПересчитатьПартию

// ===============================
Функция ПолучитьКвоВыпускаПродукции(Про, Пар=0)
	Если Пар=0 Тогда
		ЗапрВыпускПартии.Получить(Про, );
	Иначе
		ЗапрВыпускПартии.Получить(Про, Пар);
	КонецЕсли;
	Возврат ЗапрВыпускПартии.Кво;
КонецФункции

// ===============================
// Назначение:
//		Распределяет общую себестоимость продукции между конкретными партиями
// Аргументы:
//		Себест - полная себестоимость выпущенной за месяц указанной продукции по указанным виду деятельности и заказу
//		СебестДав - давальческая составляющая такой себестоимости
Функция РазбитьСебестоимостьПоПартиям(Себест, СебестДав)
Перем СебестПартии, СебестДавПартии;

	Если (Себест = 0) и (СебестДав = 0) Тогда
	    Возврат 1; // нечего распределять
	КонецЕсли;
	
    ЗапрВыпускПродукции.вНачалоВыборки();
	Если ЗапрВыпускПродукции.Получить(ВиД,Про,Зак,) = 1 Тогда
		КвоПродукции = ЗапрВыпускПродукции.Кво;
		Если КвоПродукции = 0 Тогда
		    Возврат 1;
		КонецЕсли;
		
		ОбработаноКво = 0;
		ОсталосьСебест = Себест; ОсталосьСебестДав = СебестДав;
	    Пока ЗапрВыпускПродукции.Группировка("Пар") = 1 Цикл
			КвоПартии = ЗапрВыпускПродукции.Кво;
			Пар = ЗапрВыпускПродукции.Пар;
			Если КвоПартии = 0 Тогда
			    Продолжить;
			ИначеЕсли КвоПартии < 0 Тогда
				глКомментарий("Обнаружено отрицательное кол-во выпущенной продукции: вид деятельности = "+ВиД+", продукция = "+Про+", заказ = "+Зак+", партия = "+Пар+"!",0);
				Возврат 0;
			КонецЕсли;
			
			ОбработаноКво = ОбработаноКво + КвоПартии;
	    	Если ОбработаноКво = КвоПродукции Тогда
	    	    СебестПартии = ОсталосьСебест; // обходим ошибки округления
				СебестДавПартии = ОсталосьСебестДав;
			Иначе
				СебестПартии = Окр(КвоПартии/КвоПродукции * Себест,2);
				СебестДавПартии = Окр(КвоПартии/КвоПродукции * СебестДав,2);
			КонецЕсли;
			ОсталосьСебест = ОсталосьСебест - СебестПартии;
			ОсталосьСебестДав = ОсталосьСебестДав - СебестДавПартии;
			
			// итак, знаем фактическую себестоимость партии и 
			// плановую себестоимость, по которой она оприходована на склад
			ПланСебестПартии = ЗапрВыпускПродукции.Сум;
			ПланСебестДавПартии = ЗапрВыпускПродукции.СумДав;
			ДельтаПартии = СебестПартии - ПланСебестПартии;
			ДельтаДавПартии = СебестДавПартии - ПланСебестДавПартии;
			
			// определим, был ли остаток партии на начало месяца 
			// (например, продукция учитывается по среднему или есть "ручная" партия, переходящая с месяца на месяц)
			// если такой остаток есть, то сумма дооценки/уценки (по факту) делится не только между выпущенным 
			// количеством продукции, но и между начальным остатком тоже, т.е. усредняется в пределах партии
			НачОстПартии = 0;
			ЗапрОстаткиПартий.вНачалоВыборки();
			Если ЗапрОстаткиПартий.Получить(Про, Пар,,) = 1 Тогда
			    НачОстПартии = ЗапрОстаткиПартий.НачКво;
				Если НачОстПартии < 0 Тогда
				    глКомментарий("Обнаружен отрицательный остаток на начало месяца по продукции "+Про+", партии "+Пар+"!",0);
				    глКомментарий("    Проверьте остатки при помощи отчета ""Партии ТМЦ""!",2);
					Возврат 0;
				КонецЕсли;
			КонецЕсли;
			
			// основным показателем, на котором будет базироваться дальнейший расчет
			// служит разница между фактической и плановой стоимостью на единицу продукции
			ВсегоКвоПартии = НачОстПартии + ПолучитьКвоВыпускаПродукции(ЗапрВыпускПродукции.Про, ЗапрВыпускПродукции.Пар);
			Дельта = ДельтаПартии / ВсегоКвоПартии;
			ДельтаДав = ДельтаДавПартии / ВсегоКвоПартии;
			Если ПересчитатьПартию() = 0 Тогда
			    Возврат 0;
			КонецЕсли;
	    КонецЦикла;
	Иначе
		// если выпуска нет, то все фактические затраты идут на незавершенку
		// то есть, распределяться себестоимость не будет, сюда вообще не должны попасть
		глКомментарий("Попытка отнести себестоимость на себестоимость продукции, которая не выпускалась!",0);
		Возврат 0;
	КонецЕсли;
	Возврат 1;
КонецФункции //РазбитьСебестоимостьПоПартиям

// ===============================
// Назначение:
//		Рассчитывает фактическую себестоимость партии продукции. Она зависит от 
// 		накопленных остатков в регистре ПроизводственныеЗатраты с поправкой на 
//		незавершенное производство. Для оценки стоимости незавершенки используется 
// 		отношение фактических затрат к нормативным.
Функция ОпределитьФактСебестоимость()
	ТекстЗапрН = 	"//{{ЗАПРОС(ЗатратыФактНорма)
	|"+тПериодЗапросов+"
	|Под = Регистр.НормативныеЗатраты.Подразделение;
	|ВиД = Регистр.НормативныеЗатраты.ВидДеятельности;
	|Про = Регистр.НормативныеЗатраты.Продукция;
	|Зак = Регистр.НормативныеЗатраты.Заказ;
	|Мат = Регистр.НормативныеЗатраты.Материал;
	|Ста = Регистр.НормативныеЗатраты.СтатьяКалькуляции;
	|Тип = Регистр.НормативныеЗатраты.ТипЗатрат;
	|КвоНорм = Регистр.НормативныеЗатраты.Количество;
	|СумНорм = Регистр.НормативныеЗатраты.Сумма;
	|Функция НормКво = Сумма(КвоНорм);
	|Функция НормСумма = Сумма(СумНорм);
	|Группировка ВиД без упорядочивания без групп;
	|Группировка Про без упорядочивания без групп;
	|Группировка Зак без упорядочивания;
	|Группировка Мат без упорядочивания без групп;
	|Группировка Ста без упорядочивания без групп;
	|Группировка Тип без упорядочивания;
	|Условие(Под = Подразделение);
	|Условие(Про в спПродукция);
	|Условие((Тип = НормыНаВыпуск) или (Тип = НормыНаНезаверш));
	|"//}}ЗАПРОС
	;
	
	Состояние("Выполняется запрос по нормативным затратам.");
	глКомментарий("Выполняется запрос по нормативным затратам.",2);
	
	ЗапрН = СоздатьОбъект("Запрос");
	Если ЗапрН.Выполнить(ТекстЗапрН) = 0 Тогда
	    глКомментарий("Не выполнился запрос по нормативным затратам!",0);
		Возврат 0;
	КонецЕсли;
    	
	ТекстЗапрФ = 	"//{{ЗАПРОС(ЗатратыФактНорма)
	|"+тПериодЗапросов+"
	|Под = Регистр.ПроизводственныеЗатраты.Подразделение;
	|ВиД = Регистр.ПроизводственныеЗатраты.ВидДеятельности;
	|Про = Регистр.ПроизводственныеЗатраты.Продукция;
	|Зак = Регистр.ПроизводственныеЗатраты.Заказ;
	|Мат = Регистр.ПроизводственныеЗатраты.Материал;
	|Ста = Регистр.ПроизводственныеЗатраты.ВидЗатрат.СтатьяКалькуляции;
	|ВиЗ = Регистр.ПроизводственныеЗатраты.ВидЗатрат;
	|КвоФакт = Регистр.ПроизводственныеЗатраты.Количество;
	|СумФакт = Регистр.ПроизводственныеЗатраты.Сумма;
	|СумДавФакт = Регистр.ПроизводственныеЗатраты.СуммаДав;
	|Функция ФактКво = КонОст(КвоФакт);
	|Функция ФактСумма = КонОст(СумФакт);
	|Функция ФактСуммаДав = КонОст(СумДавФакт);
	|Группировка Под без упорядочивания без групп;
	|Группировка ВиД без упорядочивания без групп;
	|Группировка Про без упорядочивания без групп;
	|Группировка Зак без упорядочивания;
	|Группировка Мат без упорядочивания без групп;
	|Группировка Ста без упорядочивания без групп;
	|Группировка ВиЗ без упорядочивания без групп;
	|Условие((Под = Подразделение) или (ПустоеЗначение(Под) = 1));
	|Условие((Про в спПродукция) или (ПустоеЗначение(Про) = 1));
	|"//}}ЗАПРОС
	;
	
	Состояние("Выполняется запрос по фактическим затратам.");
	глКомментарий("Выполняется запрос по фактическим затратам.",2);
	
	ЗапрФ = СоздатьОбъект("Запрос");
	Если ЗапрФ.Выполнить(ТекстЗапрФ) = 0 Тогда
	    глКомментарий("Не выполнился запрос по фактическим затратам!",0);
		Возврат 0;
	КонецЕсли;
	
	Если ПодготовитьЗапросыДляКорректировок() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Состояние("Рассчитывается фактическая себестоимость.");
	глКомментарий("Рассчитывается фактическая себестоимость.",2);
	
	фОшибка_ПустыеГруппировки = 0;
	фОшибка_НулевыеНормы = 0;
	фОшибка_Заказ = 0;
	
	Пока ЗапрФ.Группировка("Под") = 1 Цикл
		Под = ЗапрФ.Под;
		Пока ЗапрФ.Группировка("ВиД") = 1 Цикл
			ВиД = ЗапрФ.ВиД;
			Пока ЗапрФ.Группировка("Про") = 1 Цикл
				Про = ЗапрФ.Про;
				Пока ЗапрФ.Группировка("Зак") = 1 Цикл
					Зак = ЗапрФ.Зак;     
					Если (ВиД.ПозаказноеПроизводство = Да) и (ПустоеЗначение(Зак) = 1) Тогда
						глКомментарий("Обнаружена информация о некорректно отраженных фактических затратах!",0);
						глКомментарий("Неправильно отражены затраты! При позаказном производстве (вид деятельности "+ВиД+") обязательно должен быть заполнен заказ!",2);
                        фОшибка_Заказ = 1;
						Продолжить;
					КонецЕсли;
					Если (ВиД.ПозаказноеПроизводство = Нет) и (ПустоеЗначение(Зак) = 0) Тогда
						глКомментарий("Обнаружена информация о некорректно отраженных фактических затратах!",0);
						глКомментарий("Неправильно отражены затраты! При массовом производстве (вид деятельности "+ВиД+") не должен быть заполнен заказ "+Зак+"!",2);
                        фОшибка_Заказ = 1;
						Продолжить;
					КонецЕсли;
					
					// будем накапливать себестоимость
					ИтогоСебест = 0;
					ИтогоСебестДав = 0; // давальческая составляющая с-сти
					
					Пока ЗапрФ.Группировка("Мат") = 1 Цикл
						Мат = ЗапрФ.Мат;
						Пока ЗапрФ.Группировка("Ста") = 1 Цикл
							Ста = ЗапрФ.Ста;
							// все ли группировки правильно заполнены? т.е. до конца ли выполнено распределение затрат?
							Если (ПустоеЗначение(Под) = 1) или (ПустоеЗначение(ВиД) = 1) или (ПустоеЗначение(Про) = 1) или (ПустоеЗначение(Ста) = 1) Тогда
								Если фОшибка_ПустыеГруппировки = 0 Тогда
									// поясним причину ошибки подробно только один раз
									глКомментарий("Обнаружена информация о фактических затратах, не распределенная между конкретными подразделениями и/или видами деятельности и/или продукцией и/или статьями калькуляций!",0);
									глКомментарий("    Такие затраты нужно распределить при помощи документа ""Распределение затрат""!",1);
									фОшибка_ПустыеГруппировки = 1;
								КонецЕсли;
								глКомментарий("Не распределено: вид деятельности - "+ВиД+", продукция - "+Про+", статья калькуляции - "+Ста, 2);
								Продолжить;
							КонецЕсли;
							
							ПоФактуКво = ЗапрФ.ФактКво;
							ПоФактуСумма = ЗапрФ.ФактСумма;
							
							// определим нормы затрат, позиционируемся на запрос по нормам
							ПоНормамКво = 0;
							ПоНормамСумма = 0;
							ЗапрН.вНачалоВыборки();
							Если ЗапрН.Получить(ВиД,Про,Зак,Мат,Ста,) = 1 Тогда
								ПоНормамКво = ЗапрН.НормКво;
								ПоНормамСумма = ЗапрН.НормСумма;
							КонецЕсли;
							
							// не нулевые ли нормы?
							КоэфФактНормаКво = 0;
							КоэфФактНормаСумма = 0;
							Если ((ПустоеЗначение(Мат) = 0) и (ПоНормамКво = 0) и (ПоФактуКво <> 0)) или
							((ПустоеЗначение(Мат) = 1) и (ПоНормамСумма = 0) и (ПоФактуСумма <> 0))
							Тогда
								// продукция производилась по статьям (материалам), которые отсутствуют в нормах
								// заменители в конфигурации не предусмотрены, считаем такую ситуацию ошибочной
								Если фОшибка_НулевыеНормы = 0 Тогда
									// поясним причину ошибки подробно только один раз
									глКомментарий("Невозможно сопоставить фактические затраты нормативным, фактические отражены в разрезе, которого нет в нормах!",0);
									глКомментарий("    Возможная причина ошибки - на продукцию списаны материалы, не предусмотренные нормами, в нормах не указана статья калькуляции и т.п.",1);
									глКомментарий("    Для проверки используйте отчеты ""Факт. себестоимость продукции"" и ""Норма/факт себестоимости продукции"" ",1);
									фОшибка_НулевыеНормы = 1;
									// Примечание. При желании все отклонения от нормы можно признать расходами текущего месяца.
									// Такая схема приведет к погрешности в оценке незавершенного производства, значит, может быть 
									// применена, если удельный вес незавершенки (или отклонений от нормы - заменителей) на предприятии небольшой
									// Для ее использования в этой ситуации вместо сообщений об ошибке нужно написать:
									// КоэфФактНорма = 0;
									// То есть, стоимость незавершенки по отклонениям от нормы будет признана нулевой
								КонецЕсли;
								глКомментарий("Нет в нормах: вид деятельности - "+ВиД+", продукция - "+Про+", заказ - "+Зак+", материал - "+Мат+", статья калькуляции - "+Ста, 2);
							Иначе
								// рассчитываем отношение факта к норме
								КоэфФактНормаКво = ?(ПоНормамКво = 0, 0, ПоФактуКво / ПоНормамКво);
								КоэфФактНормаСумма = ?(ПоНормамСумма = 0, 0, ПоФактуСумма / ПоНормамСумма);
							КонецЕсли;
							
							// определим кво и стоимость незавершенки текущего месяца по нормам
							СуммаНезавершПоНормам = 0;
							КвоНезавершПоНормам = 0;
							ЗапрН.вНачалоВыборки();
							Если ЗапрН.Получить(ВиД,Про,Зак,Мат,Ста,НормыНаНезаверш) = 1 Тогда
								СуммаНезавершПоНормам = ЗапрН.НормСумма;
								КвоНезавершПоНормам = ЗапрН.НормКво;
							КонецЕсли;
							
							// стоимость незавершенки определяем по факту с учетом коэффициента
							// именно такая сумма должна остаться в регистре по этой статье
							ФактСуммаНезавершенки = Окр(СуммаНезавершПоНормам * КоэфФактНормаСумма,2);
							ФактКвоНезавершенки = Окр(КвоНезавершПоНормам * КоэфФактНормаКво,3);
							
							// всего есть по статье калькуляции
							СуммаПоСтатье = ЗапрФ.ФактСумма;
							ОбработаноОстатков = 0;
							ОсталосьСумма = ФактСуммаНезавершенки; ОсталосьКво = ФактКвоНезавершенки;
							// разбрасываем эту сумму между конкретными видами затрат
							Пока ЗапрФ.Группировка("ВиЗ") = 1 Цикл
								ВиЗ = ЗапрФ.ВиЗ;
								ОбработаноОстатков = ОбработаноОстатков + ЗапрФ.ФактСумма;
								
								НовСумма = 0; НовКво = 0; 
								Если ОбработаноОстатков = СуммаПоСтатье Тогда
									// обходим ошибки округления
									НовСумма = ОсталосьСумма;
									НовКво = ОсталосьКво;
								ИначеЕсли СуммаПоСтатье = 0 Тогда
									// по факту нет затрат, значит и незавершенку приравниваем к 0
									НовСумма = 0; 
									НовКво = 0;
								Иначе
									НовСумма = Окр(ЗапрФ.ФактСумма/СуммаПоСтатье * ФактСуммаНезавершенки,2);
									НовКво = Окр(ЗапрФ.ФактСумма/СуммаПоСтатье * ФактКвоНезавершенки,3);
								КонецЕсли;
								ОсталосьСумма = ОсталосьСумма - НовСумма;
								ОсталосьКво = ОсталосьКво - НовКво;
								
								// давальческую сумму оставляем в той же пропорции (по отношению ко всей сумме), 
								// в которой она и была
								КоэфДав = ?(ЗапрФ.ФактСумма = 0, 0, ЗапрФ.ФактСуммаДав/ЗапрФ.ФактСумма);
								НовСуммаДав = Окр(НовСумма * КоэфДав, 2);
								
								// спишем с регистра так, чтобы в нем остались НовСумма, НовКво и НовДавСумма
								СписСумма = ЗапрФ.ФактСумма - НовСумма;
								СписКво = ЗапрФ.ФактКво - НовКво;
								СписСуммаДав = ЗапрФ.ФактСуммаДав - НовСуммаДав;
								// накапливаем себестоимость продукции по заказу
								ИтогоСебест = ИтогоСебест + СписСумма;
								ИтогоСебестДав = ИтогоСебестДав + СписСуммаДав;
								Если (СписСумма <> 0) или (СписКво <> 0) или (СписСуммаДав <> 0) Тогда
									Регистр.ПроизводственныеЗатраты.Фирма = Фирма;
									Регистр.ПроизводственныеЗатраты.ВидДеятельности = ВиД;
									Регистр.ПроизводственныеЗатраты.Продукция = Про;
									Регистр.ПроизводственныеЗатраты.Подразделение = Подразделение;
									Регистр.ПроизводственныеЗатраты.Заказ = Зак;
									Регистр.ПроизводственныеЗатраты.Материал = Мат;
									Регистр.ПроизводственныеЗатраты.ВидЗатрат = ВиЗ;
									Регистр.ПроизводственныеЗатраты.Количество = СписКво;
									Регистр.ПроизводственныеЗатраты.Сумма = СписСумма;
									Регистр.ПроизводственныеЗатраты.СуммаДав = СписСуммаДав;
									Регистр.ПроизводственныеЗатраты.КодОперации = ФормирСебестоимости;
									Регистр.ПроизводственныеЗатраты.ДвижениеРасходВыполнить();
								КонецЕсли;
							КонецЦикла; // виды затрат
						КонецЦикла; // статья калькуляции
					КонецЦикла; // материал
					Если (фОшибка_ПустыеГруппировки = 1) или (фОшибка_НулевыеНормы = 1) Тогда
						// были ошибки, рассчитывать ничего не будем
						Продолжить;
					КонецЕсли;
					
					// "давальческая" ли это продукция?
					фДавальческая = глЭтоДавальческийЗаказ(Зак);
					
					// знаем себестоимость продукции, выпущенной по конкретному заказу
					Если РазбитьСебестоимостьПоПартиям(ИтогоСебест, ИтогоСебестДав) = 0 Тогда
						Возврат 0;
					КонецЕсли;
				КонецЦикла; // заказ
			КонецЦикла; // продукция
		КонецЦикла; // вид деятельности
	КонецЦикла; // подразделение

	Если (фОшибка_ПустыеГруппировки = 1) или (фОшибка_НулевыеНормы = 1) или (фОшибка_Заказ = 1) Тогда
	    // были ошибки, документ не проводим
		Возврат 0;
	КонецЕсли;
	Возврат 1;
КонецФункции //ОпределитьФактСебестоимость

// ===============================
Функция РассчитатьШапку()
	ДатаНач 	= НачМесяца(ДатаДок);
	ДатаКон 	= КонМесяца(ДатаДок);
	
	// проверим наличие документов по незавершенке
	Если ПроверитьНезавершенку() = 0 Тогда
	    Возврат 0;
	КонецЕсли;             
	
	ПозицияПред	= СформироватьПозициюДокумента(ТекущийДокумент(),-1);
	Если (ПозицияПред > ПолучитьПозициюТА()) или (ПустоеЗначение(ПозицияПред) = 1) Тогда
		// достаточно построить запрос по ТА
	    тПериодЗапросов = "Период с ДатаНач;";
	Иначе
		тПериодЗапросов = "Период с ДатаНач по ПозицияПред;";
	КонецЕсли;
	
	// составим список продукции, которую будем калькулировать 
	спПродукция = СоздатьОбъект("СписокЗначений");
	Если ПоВсейПродукции = 0 Тогда
		ТЗ = 	"//{{ЗАПРОС(СписокПродукции)
		|"+тПериодЗапросов+"
		|_Фирма = Регистр.ВыпускПродукции.Фирма;
		|_Подразделение = Регистр.ВыпускПродукции.Подразделение;
		|Продукция = Регистр.ВыпускПродукции.Продукция;
		|УрПередела = Регистр.ВыпускПродукции.Продукция.УровеньПередела;
		|Кво = Регистр.ВыпускПродукции.Количество;
		|Функция ВыпКво = Сумма(Кво);
		|Группировка Продукция без упорядочивания без групп;
		|Условие(_Фирма = Фирма);
		|Условие(_Подразделение = Подразделение);
		|Условие(УрПередела = УровеньПередела);
		|"//}}ЗАПРОС
		;
		ЗапрПрод = СоздатьОбъект("Запрос");
		Если ЗапрПрод.Выполнить(ТЗ)=0 Тогда
			Возврат 0;
		КонецЕсли;
		Пока ЗапрПрод.Группировка(1)=1 Цикл
			глДобавитьЗначениеБезПовторения(спПродукция,ЗапрПрод.Продукция)
		КонецЦикла;
		Если спПродукция.РазмерСписка()=0 Тогда
			глКомментарий("В подразделении " + Подразделение+ " не выпускалась продукция с уровнем передела "+УровеньПередела+ "!",0);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// вспомогательные данные для формирования ключа
	ДлинаКодаВидДеятельности = Метаданные.Справочник("ВидыДеятельности").ДлинаКода;
	ДлинаКодаТМЦ = Метаданные.Справочник("ТМЦ").ДлинаКода;
	ДлинаКодаСтатьяКалькуляции = Метаданные.Справочник("СтатьиКалькуляции").ДлинаКода;
	ДлинаКодаЗаказ = Метаданные.Документ("Заказ").ДлинаНомера+8; // с датой
	
	СкладГП = Подразделение.СкладГотовойПродукции;
КонецФункции //РассчитатьШапку

//===============================
Процедура ОбработкаПроведения()
	ОтражатьФактСебестВОборотах = Константа.ОтражатьФактСебестВОборотах;
	глКомментарий("Начало",2,Контекст);
	
	Если ПроверкаШапки() = 0 Тогда
	    глНеПроводить(Контекст);
	    Возврат;
	КонецЕсли;             
	
	Если РассчитатьШапку() = 0 Тогда
	    глНеПроводить(Контекст);
		Возврат;
	КонецЕсли;
	
	Если ОпределитьФактСебестоимость() = 0 Тогда
	    глНеПроводить(Контекст);
		Возврат;
	КонецЕсли;
	
	Операция.Содержание = Примечание;
	Операция.Записать();
	
	глКомментарий("Окончание",2,Контекст);
КонецПроцедуры 
