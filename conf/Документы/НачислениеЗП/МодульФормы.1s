Перем ноБезработицаСотр, ноСтрахНетрудоспСотр, ноПенсионныйСотр, ноПодоходныйСотр;
Перем Таб, Пк1, Пк2, Пк3, Пк4, Пк5, Пк6, Пк7, Пк8, ДатаВед, Директор, ГлавБух;
Перем ТаблСотр;
Перем НиО, НМ, НачалоПериода, КонецПериода, Спис, стБезработица, стПрофсоюзный, МаксБазаБезр, МаксБазаПенс, МаксБазаНетр;
Перем Надо;
Перем СписокДействий;
Перем НачальнаяДатаДокумента;

Перем ПериодВед;  //--- УМК Сандомирский В.Ю. (20.03.15)

// Служебная переменная, используется для корректной установки видимости/доступности при 
// открытии документа
Перем УстДоступностьПоВидуНачисления;
                      
//======================================================================
Процедура УстМесяцНачисленияЗП() Далее
	

// ===============================
// Назначение:
//		Определяет к-во произвольных начислений
// Аргументы:
//		Режим = 0	- к-во непустых произвольных начислений
//		Режим = 1	- общее к-во произвольных начислений
// Возвращает:
//		для режима 1 - количество произвольных начислений, 
//		для режима 0 - фактически номер последнего непустого 
// 		произвольного начисления 
Функция ПолучитьКвоПроизвольныхНачислений(Режим=0)
Перем КвоНач, КвоНепустыхНач;
	КвоНач = 0; 
	КвоНепустыхНач = 0;
	
	Пока глЕстьРеквизитШапки("Начисл"+(КвоНач+1), "НачислениеЗП") = Да Цикл
		// в документе есть реквизит НачислХХХ
		КвоНач = КвоНач + 1;
		
		Если ПустоеЗначение(ПолучитьАтрибут("Начисл"+КвоНач)) = 0 Тогда
			// очередное произв. начисление оказалось непустым
			// запомним номер этого начисления, 
			// (кво начислений будем считать равным номеру последнего непустого 
			//  начисления, при этом могут быть начисления с меньшим номером,
			//  которые не выбраны)
			КвоНепустыхНач = КвоНач;
		КонецЕсли;
	КонецЦикла;
	
	Если Режим = 0 Тогда
		Возврат КвоНепустыхНач;
	Иначе
		Возврат КвоНач;
	КонецЕсли;
КонецФункции //ПолучитьКвоПроизвольныхНачислений()

// ===============================
Процедура УстВидНачисления()
	// доступность/видимость в зависимости от вида начисления
	фОсн = ?(ВидНачисления = ОсновнаяЗП, 1, 0);
	Форма.колНеРассчитан.Видимость(фОсн);
	Форма.Дней.Доступность(фОсн);
	Форма.Часов.Доступность(фОсн);
	Форма.кРассчитать.Доступность(фОсн);
	Форма.ОтработаноДней.Видимость(фОсн);
	Форма.Оклад.Видимость(фОсн);
	Форма.Тариф.Видимость(фОсн);
	Форма.Сдельно.Видимость(фОсн);
	Форма.Премия.Видимость(фОсн);
	Форма.Больничные.Видимость(фОсн);
	Форма.БольничныеЗаСчетПредприятия.Видимость(фОсн);
	Форма.ОблагаемаяМатПомощь.Видимость(фОсн);
	Форма.НеоблагаемаяМатПомощь.Видимость(фОсн);
	Форма.Отпускные.Видимость(фОсн);
	Форма.Начислено.Видимость(фОсн);
	Форма.Подоходный.Видимость(фОсн);
	Форма.Пенсионный.Видимость(фОсн);
	Форма.Безработица.Видимость(фОсн);
	Форма.СтрахНетрудосп.Видимость(фОсн);
	Форма.Профсоюзный.Видимость(фОсн);
	Форма.Удержано.Видимость(фОсн);
	Форма.КВыплате.Видимость(фОсн);
	Форма.Начислено.Доступность(1-фОсн);
	Форма.КВыплате.Доступность(1-фОсн);
	Форма.ОсталосьВыплатить.Видимость(0);
	Если ВидНачисления = Перечисление.ВидыНачисленияЗП.Аванс Тогда
		Форма.КВыплате.Видимость(1);
	ИначеЕсли ВидНачисления = Перечисление.ВидыНачисленияЗП.Остатки Тогда
		Форма.Начислено.Видимость(1);
		Форма.Подоходный.Видимость(1);
		Форма.КВыплате.Видимость(1);
		Форма.ОсталосьВыплатить.Видимость(1);
	КонецЕсли;
	Если фОсн = 0 Тогда
		Инд = Форма.Закладки.НайтиЗначение("Дополнительный");
		Если Инд <> 0 Тогда
			// удалим закладку
			Форма.Закладки.УдалитьЗначение(Инд);
		КонецЕсли;
		Инд = Форма.Закладки.НайтиЗначение("ПроизвольныеНачисления");
		Если Инд <> 0 Тогда
			// удалим закладку
			Форма.Закладки.УдалитьЗначение(Инд);
		КонецЕсли;
	Иначе
		Если Форма.Закладки.НайтиЗначение("Дополнительный") = 0 Тогда
			// добавим закладку
			Форма.Закладки.ДобавитьЗначение("Дополнительный","Дополнительно");
		КонецЕсли;
		Если Форма.Закладки.НайтиЗначение("ПроизвольныеНачисления") = 0 Тогда
			// добавим закладку
			Форма.Закладки.ДобавитьЗначение("ПроизвольныеНачисления","Произвольные начисления");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// ===============================
Функция УстДоступность()
	Форма.кОчиститьПодразделение.Доступность(Подразделение.Выбран());
	Форма.кОчиститьВидДеятельности.Доступность(ВидДеятельности.Выбран());
	
	КвоНач = ПолучитьКвоПроизвольныхНачислений(1); // к-во всех начислений
	Для НомНач = 1 по КвоНач Цикл
		Начисл = ПолучитьАтрибут("Начисл"+НомНач);
		Форма.ПолучитьАтрибут("кОчиститьНачисл"+НомНач).Доступность(Начисл.Выбран());
		Форма.ПолучитьАтрибут("тВидЗатратНачисл"+НомНач).Доступность(Начисл.Выбран());
		Форма.ПолучитьАтрибут("ВидЗатратНачисл"+НомНач).Доступность(Начисл.Выбран());
		Форма.ПолучитьАтрибут("СуммаНачисл"+НомНач).Доступность(Начисл.Выбран());
		Форма.ПолучитьАтрибут("СуммаНачисл"+НомНач).Заголовок(?(Начисл.Выбран()=1,Начисл.Наименование,""));
	КонецЦикла;

	Если (Итог("НеРассчитан")>0) И (ВидНачисления = ОсновнаяЗП) Тогда
		НуженРасчет = 1;
	Иначе // не надо
		НуженРасчет = 0;
	КонецЕсли;
	Форма.фНуженРасчет.Видимость(НуженРасчет);
	Форма.кОК.Доступность(1-НуженРасчет);
	Форма.кПровести.Доступность(1-НуженРасчет);

	Форма.кПравоваяПоддержка.Видимость(глВидимостьПравовойПоддержки);

	Если ВидНачисления = ОсновнаяЗП Тогда
		Форма.кПечатьОсн.Видимость(1);
		Форма.кПечатьПроч.Видимость(0);
		Форма.кПечатьОсн.Доступность(Проведен()*(1 - Модифицированность()));
	Иначе
		Форма.кПечатьОсн.Видимость(0);
		Форма.кПечатьПроч.Видимость(1);
	КонецЕсли;

	Если УстДоступностьПоВидуНачисления = 1 Тогда
	    УстВидНачисления();
		УстДоступностьПоВидуНачисления = 0;
	КонецЕсли;
	Форма.Фирма.Видимость(0);
	Форма.Заголовок(глЗаголовок(Контекст,"Начисление з/п"));

	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.кОК.Доступность(0);
		Форма.кПровести.Доступность(0);
		Форма.кЗаполнить.Доступность(0);
		Форма.кРассчитать.Доступность(0);
		//Форма.кПечатьОсн.Доступность(0);
		//Форма.кПечатьПроч.Доступность(0);
//		Форма.кДействия.Доступность(0);          
		Форма.кФирма.Доступность(0);               		
		Форма.кОчиститьПодразделение.Доступность(0);
		Форма.кОчиститьВидДеятельности.Доступность(0);
		КвоНач = ПолучитьКвоПроизвольныхНачислений(1); // к-во всех начислений
		Для НомНач = 1 по КвоНач Цикл
			Форма.ПолучитьАтрибут("кОчиститьНачисл"+НомНач).Доступность(0);
		КонецЦикла;
	КонецЕсли; 

	Возврат "";
КонецФункции

// ======================================
Процедура ИзмФирма()
	СтараяФирма = глВосстановитьЗначение(Вид(),"СтараяФирма");
	Если СтараяФирма <> Фирма Тогда
		// фирма изменилась
		Если КоличествоСтрок() > 0 Тогда
			Рез = Вопрос("Табличная часть будет очищена!","Да+Нет");
			Если Рез = "Да" Тогда
				УдалитьСтроки();
			ИначеЕсли ПустоеЗначение(СтараяФирма) = 0 Тогда
				// восстановим фирму, которая была выбрана раньше
				Фирма = СтараяФирма;
				глУстановитьНомер(Контекст);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

// ===============================
Процедура ИзмВидНачисления()
	УстВидНачисления();
КонецПроцедуры

// ===============================
Процедура ПриВыбореЗакладки(Номер,Значение)
	Форма.ИспользоватьСлой("Общий,"+Значение,2);
КонецПроцедуры

// ===============================
Процедура ПриОткрытии()  
	НачальнаяДатаДокумента = ДатаДок;
	глПроверкаДатыДок(Контекст,"Открытие");
	ПриЗаписиПерепроводить(1);
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.кОК.Доступность(0);
		Форма.кПровести.Доступность(0);
		Форма.кЗаполнить.Доступность(0);
		Форма.кРассчитать.Доступность(0);
//		Форма.кДействия.Доступность(0);
		Форма.кФирма.Доступность(0);               		
		Форма.кОчиститьПодразделение.Доступность(0);               		
		Форма.кОчиститьВидДеятельности.Доступность(0);               		
		Форма.кОчиститьНачисл1.Доступность(0);               		
		Форма.кОчиститьНачисл2.Доступность(0);               		
		Форма.кОчиститьНачисл3.Доступность(0);               		
		//Форма.КнопкаПоУмолчанию("кЗакрыть");
	Иначе
		Форма.КнопкаПоУмолчанию("кОК");
	КонецЕсли;	

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной","Основные");
	Форма.Закладки.ДобавитьЗначение("Дополнительный","Дополнительно");
	Форма.Закладки.ДобавитьЗначение("ПроизвольныеНачисления","Произвольные начисления");
	Форма.ИспользоватьСлой("Общий,Основной",2);

	// доступность/видимость в зависимости от вида начисления
	УстДоступностьПоВидуНачисления = 1;
	
	УстМесяцНачисленияЗП();
	
КонецПроцедуры

// ===============================
Процедура ВводНового(ПризнакКопирования)
	Если ПризнакКопирования = 1 Тогда
		глУстановитьНомер(Контекст);
		Возврат;
	КонецЕсли;
	Фирма = глВосстановитьЗначение(,"БазФирма");
	глУстановитьНомер(Контекст);
	Дней = 22;
	Часов = 176; // т.е. 22 дня * 8 часов
	ВидНачисления = ОсновнаяЗП;
	НеРассчитан = 0;
	ВалРасхЗарплата = глВосстановитьЗначение(Контекст,"ВалРасхЗарплата");
	Если ВалРасхЗарплата.Выбран() = 0 Тогда  
		Спр = СоздатьОбъект("Справочник.ВалДоходыРасходы");
		Спр.НайтиПоКоду("2/1/15",2);
		ВалРасхЗарплата = Спр.ТекущийЭлемент();
	КонецЕсли;
	ВалРасхОтчисления = глВосстановитьЗначение(Контекст,"ВалРасхОтчисления");
	Если ВалРасхОтчисления.Выбран() = 0 Тогда 
		Спр = СоздатьОбъект("Справочник.ВалДоходыРасходы");
		Спр.НайтиПоКоду("2/1/16",2);
		ВалРасхОтчисления = Спр.ТекущийЭлемент();
	КонецЕсли;
	ВидЗатратЗарплата = глВосстановитьЗначение(Контекст,"ВидЗатратЗарплата");
	ВидЗатратПремии = глВосстановитьЗначение(Контекст,"ВидЗатратПремии");
	ВидЗатратОтпускные = глВосстановитьЗначение(Контекст,"ВидЗатратОтпускные");
	ВидЗатратБольничные = глВосстановитьЗначение(Контекст,"ВидЗатратБольничные");
	ВидЗатратПрочие = глВосстановитьЗначение(Контекст,"ВидЗатратПрочие");
	
	МесяцНачисленияЗП = НачМесяца(ДатаДок);  //--- УМК Сандомирский В.Ю. (20.03.15) вводим поняте месяц начисления за который производится расчет
	
КонецПроцедуры

// ===============================
Процедура ПриЗаписи()
	Автор = глПользователь;
	глПроверкаДатыДок(Контекст,"Запись");
	Если глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	глСохранитьЗначение(Контекст,"ВалРасхЗарплата", ВалРасхЗарплата);
	глСохранитьЗначение(Контекст,"ВалРасхОтчисления", ВалРасхОтчисления);
	глСохранитьЗначение(Контекст,"ВидЗатратЗарплата", ВидЗатратЗарплата);
	глСохранитьЗначение(Контекст,"ВидЗатратПремии", ВидЗатратПремии);
	глСохранитьЗначение(Контекст,"ВидЗатратОтпускные", ВидЗатратОтпускные);
	глСохранитьЗначение(Контекст,"ВидЗатратБольничные", ВидЗатратБольничные);
	глСохранитьЗначение(Контекст,"ВидЗатратПрочие", ВидЗатратПрочие);
	глПроверкаДатыДок(Контекст,"Запись");
КонецПроцедуры

// ===============================
Процедура ВычКВыплате()
	КВыплате = Начислено - Удержано;
	НеРассчитан = 0;
КонецПроцедуры //ВычКВыплате

//======================================================================
Функция ВычНачисленоВПериоде(ТекСотр, ВыводитьСообщение=0)
	ТекНачисленоЗаПериод = 0;
	ДокНачисление = СоздатьОбъект("Документ.НачислениеЗП");
	ДокНачисление.ВыбратьДокументы(НачМесяца(МесяцНачисленияЗП),ТекущийДокумент());
	Пока ДокНачисление.ПолучитьДокумент() = 1 Цикл
		Если (ДокНачисление.Проведен() <> 1) ИЛИ (ДокНачисление.ТекущийДокумент() = ТекущийДокумент()) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДокНачисление.МесяцНачисленияЗП <> МесяцНачисленияЗП Тогда //--- УМК Сандомирский В.Ю. (01.04.15)
			Продолжить;
		КонецЕсли;
		
		ДокНачисление.ВыбратьСтроки();
		Пока ДокНачисление.ПолучитьСтроку() = 1 Цикл
			Если ДокНачисление.Сотрудник = ТекСотр Тогда
				ТекНачисленоЗаПериод = ТекНачисленоЗаПериод + ДокНачисление.Оклад + ДокНачисление.Тариф;	//--- УМК Сандомирский В.Ю. (08.09.14) --- было ТекНачисленоЗаПериод + ДокНачисление.Начислено; переиграли, потому что нужно отнимать только базовіе начисления (премию не трогаем)
				Если ВыводитьСообщение = 1 Тогда
				    Сообщить("Сотруднику " + ТекСотр + " № строки " + НомерСтроки 
						+ " производились начисления " + ДокНачисление + " на сумму " + ДокНачисление.Начислено);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТекНачисленоЗаПериод;
	
КонецФункции // гл

// ===============================
Процедура ВычНачислено()
	Начислено = Оклад + Тариф + Сдельно + Премия + Больничные + 
				БольничныеЗаСчетПредприятия + Отпускные +
				ОблагаемаяМатПомощь + НеоблагаемаяМатПомощь;
				
	КвоНач = ПолучитьКвоПроизвольныхНачислений();
	Для НомНач = 1 по КвоНач Цикл
		Начислено = Начислено + ПолучитьАтрибут("СуммаНачисл"+НомНач);
	КонецЦикла;
	
	// --- УМК Сандомирский В.Ю. (10.07.14) Было начислено в расчетном периоде но не этим документом
	
	НачисленоЗаПериод = ВычНачисленоВПериоде(Сотрудник,0);
	
	Начислено = Начислено - НачисленоЗаПериод; 
	
	// ... УМК Сандомирский В.Ю. (10.07.14) Было начислено в расчетном периоде но не этим документом
	
	ВычКВыплате();
КонецПроцедуры

// ===============================
Процедура ИзмНачисл(НомНач)
	Начисл = ПолучитьАтрибут("Начисл"+НомНач);
	
	Если Начисл.Выбран() = 1 Тогда
		УстановитьАтрибут("ВидЗатратНачисл"+НомНач, Начисл.ВидЗатрат);
	Иначе
		УстановитьАтрибут("ВидЗатратНачисл"+НомНач, 0);
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если ПолучитьАтрибут("СуммаНачисл"+НомНач) <> 0 Тогда
				УстановитьАтрибут("СуммаНачисл"+НомНач, 0);
				ВычНачислено();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //ИзмНачисл

// ===============================
Процедура ОчиститьНачисл(НомНач)
	УстановитьАтрибут("Начисл"+НомНач, 0);
	ИзмНачисл(НомНач);
КонецПроцедуры //ИзмНачисл2

//======================================================================
Функция ЗаполнитьТаблицу(ИмяАтр, Объект)
	ТОклада = СоздатьОбъект("ТаблицаЗначений");
	ТОклада.НоваяКолонка("ЧислоН", "Число");
	ТОклада.НоваяКолонка("ЧислоК", "Число");	
	ТОклада.НоваяКолонка(ИмяАтр, "Число");
	ТОклада.НоваяКолонка("ОтработаноДней", "Число");
	ТОклада.НоваяКолонка("ОтработаноЧасов", "Число");		
	
	// алгоритм построения таблицы окладов и тарифов
	// берём оклад на начало месяца. Если оно есть, то добавляем строку таблицы
	// выбираем периодические значения за месяц. Для каждого полученного значения, записываем в пред. строку таблицы
	// значение даты окончания действия оклада = Дата значения - 1 день. если пред. строка - есть.
	// для полученного из истории значения устанавливаем дату начала = дате значения. Или пред. значения не было - дату нач. месяца
	// для последней строки дату окончания действия записываем равную дате конца месяца	
	
	ТекЗн = Объект.ПолучитьАтрибут(ИмяАтр).Получить(НачМесяца(ДатаДок));	
	Если ТекЗн <> 0 Тогда
		ТОклада.НоваяСтрока();
		ТОклада.ЧислоН = 1;
		ТОклада.УстановитьЗначение(1, ИмяАтр, ТекЗн);
	КонецЕсли;
	
	Пер = СоздатьОбъект("Периодический");
	Пер.ИспользоватьОбъект(ИмяАтр, Объект);
	Пер.ВыбратьЗначения(НачМесяца(ДатаДок), КонМесяца(ДатаДок));
	Пока Пер.ПолучитьЗначение() = 1 Цикл
		Если ТОклада.КоличествоСтрок() > 0 Тогда
			ТОклада.УстановитьЗначение(ТОклада.КоличествоСтрок(), "ЧислоК", ДатаЧисло(Пер.ДатаЗнач-1));
		КонецЕсли;
		
		ТОклада.НоваяСтрока();
		ТОклада.ЧислоН = ДатаЧисло(?(ТОклада.КоличествоСтрок() = 1, НачМесяца(ДатаДок), Пер.ДатаЗнач));
		ТОклада.УстановитьЗначение(ТОклада.НомерСтроки, ИмяАтр, Пер.Значение);
	КонецЦикла;
	// запишем дату кон в последнюю строку
	ТОклада.ЧислоК = ДатаЧисло(КонМесяца(ДатаДок));
	
	Возврат ТОклада;
КонецФункции

// ===============================
Процедура ИзмСотрудник()
	Если Сотрудник.Выбран() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//--- УМК Сандомирский В.Ю. (23.06.14)  --- берем данные из табелей
	
	ДокТабель = СоздатьОбъект("Документ.УМК_Табель");		
	ЕстьТабель = 0;
	ДокТабель.УстановитьФильтр(1,0,1);
	ДокТабель.ВыбратьДокументы(НачМесяца(МесяцНачисленияЗП),КонМесяца(МесяцНачисленияЗП));
	
	ТекТариф = 0;
	ТекОклад = 0;
	
	ОтработаноЧасов = 0;
	ОтработаноДней  = 0;
	ПропускаДней    = 0;
	ПропускаЧасов	= 0;
	РабочихСменГрафик = 0;
	
	// получим таблицу изменения оклада по датам в случае, если было изменения оклада / тарифа в середине месяца
	
	ТОклада = ЗаполнитьТаблицу("Оклад", Сотрудник);
	
	Пока ДокТабель.ПолучитьДокумент() = 1 Цикл 		
		Если КонМесяца(Сотрудник.ДатаУвольнения) = КонМесяца(МесяцНачисленияЗП) Тогда //--- Сотрудника увольняют этим месяцем возможно брать данные из незакрытого табеля
			Если ДокТабель.перГрафикТабель = 2 Тогда  //--- это График
				Продолжить;
			КонецЕсли;
		Иначе
			Если ДокТабель.перГрафикТабель <> 3 Тогда  //---  Брать данные только из закрытого табеля
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Норма = ДокТабель.Норма;
		
		ДокТабель.ВыбратьСтроки();
		Пока ДокТабель.ПолучитьСтроку() = 1 Цикл
			Если ДокТабель.Сотрудник = Сотрудник Тогда
				Если ПустоеЗначение(ДокТабель.Тариф) <> 1 Тогда  //// !!!!!!!!!!!!!!!!!!!!! тут наджо продумать как расчитать если сотрудник в нескольких табелях				
					ТТарифа = ЗаполнитьТаблицу("Тариф", ДокТабель.Тариф);
				Иначе
					ТТарифа = СоздатьОбъект("ТаблицаЗначений");
				КонецЕсли;
				
				Если ТОклада.КоличествоСтрок() > 0 Тогда
					ТОклада.Заполнить(0,,,"ОтработаноДней,ОтработаноЧасов");
				КонецЕсли;
				// нужно получить таблицу изменения оклада по датам
				ЕстьТабель = 1;		
				
				Если ДокТабель.перГрафикТабель = 1 Тогда  //--- это незакрытый табель
					Сообщить(" в строке " + НомерСтроки + " сотрудник " + Сотрудник + " табель не закрыт руководителем " + ДокТабель.Ответсвенный);
				КонецЕсли;						
				
				// поскольку в середине месяца возможно изменение оклада, то теперь нужно рассчитывать количество отр. дней для каждого периода оклада.
				СменДневных = 0;
				СменНочных  = 0;
				ЧасовНочных = 0;
				ЧасовДневных = 0;

				Если КонМесяца(Сотрудник.ДатаУвольнения) = КонМесяца(МесяцНачисленияЗП) Тогда				
					ДатаУвольнения = ДатаЧисло(Сотрудник.ДатаУвольнения);
				Иначе
					ДатаУвольнения = ДатаЧисло(КонМесяца(ДатаДок));
				КонецЕсли;
				
				Для Инд = 1 По ДатаУвольнения Цикл								
					ЧасовН = Число(ДокТабель.ПолучитьАтрибут("ЧН"+Инд));
					ЧасовД = Число(ДокТабель.ПолучитьАтрибут("ЧД"+Инд));
					
					СменНочных		= СменНочных 	+ Мин(ЧасовН,1);
					
					Если Врег(СокрЛП(ДокТабель.ПолучитьАтрибут("ЧД"+Инд))) = "О" Тогда
						Добавление 	= 1;
					Иначе
						Добавление 	= Мин(ЧасовД,1);
					КонецЕсли;						
					
					ЧасовНочных 	= ЧасовНочных 	+ ЧасовН;
					ЧасовДневных 	= ЧасовДневных 	+ ЧасовД;
					СменДневных = СменДневных + Добавление;
					
					ТОклада.ВыбратьСтроки();
					Пока ТОклада.ПолучитьСтроку() = 1 Цикл
						Если (ТОклада.ЧислоН <= Инд) И (ТОклада.ЧислоК >= Инд) Тогда
							ТОклада.ОтработаноДней = ТОклада.ОтработаноДней + Добавление;
							ТОклада.ОтработаноЧасов = ТОклада.ОтработаноЧасов + ЧасовД + ЧасовН;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					ТТарифа.ВыбратьСтроки();
					Пока ТТарифа.ПолучитьСтроку() = 1 Цикл
						Если (ТТарифа.ЧислоН <= Инд) И (ТТарифа.ЧислоК >= Инд) Тогда
							ТТарифа.ОтработаноДней = ТТарифа.ОтработаноДней + Добавление;
							ТТарифа.ОтработаноЧасов = ТТарифа.ОтработаноЧасов + ЧасовД + ЧасовН;
							Прервать;
						КонецЕсли;
					КонецЦикла;					
				КонецЦикла;
				
				ТекОтработаноДней 	= СменДневных + СменНочных;			
				ТекОтработаноЧасов 	= ЧасовДневных + ЧасовНочных;					
				
				СчитаемПоПростому = 0;
				Если ДокТабель.СменДневных <> СменДневных Тогда
					Сообщить("Сотрудник " + Сотрудник + " уволен " + Сотрудник.ДатаУвольнения + " --- " + " Сущетвует табелирование после даты увольнения, Табель:" + ДокТабель);
					// нужно посчитать оклад по простой схеме, без разбиения по периодам
					СчитаемПоПростому = 1;
					ТекОтработаноЧасов = ДокТабель.ЧасовДневных + ДокТабель.ЧасовНочных;
					ТекОтработаноДней = ДокТабель.СменВсего;
				КонецЕсли;
				
				//--- УМК Сандомирский В.Ю. (17.09.14) считаем дни если сотрудник уволен этим месяцем считаем дни до увольнения что бы лишниие не попали
				//Если КонМесяца(Сотрудник.ДатаУвольнения) = КонМесяца(МесяцНачисленияЗП) Тогда
				//	СменДневных = 0;
				//	СменНочных  = 0;
				//	ЧасовНочных = 0;
				//	ЧасовДневных = 0;
				//	
				//	ДатаУвольнения = ДатаЧисло(Сотрудник.ДатаУвольнения);
				//	
				//	Для Инд = 1 По ДатаУвольнения Цикл								
				//		ЧасовН = Число(ДокТабель.ПолучитьАтрибут("ЧН"+Инд));
				//		ЧасовД = Число(ДокТабель.ПолучитьАтрибут("ЧД"+Инд));
				//		
				//		СменНочных		= СменНочных 	+ Мин(ЧасовН,1);
				//		
				//		Если Врег(СокрЛП(ДокТабель.ПолучитьАтрибут("ЧД"+Инд))) = "О" Тогда
				//			СменДневных 	= СменДневных	+ 1;
				//		Иначе
				//			СменДневных 	= СменДневных	+ Мин(ЧасовД,1);
				//		КонецЕсли;						
				//		
				//		ЧасовНочных 	= ЧасовНочных 	+ ЧасовН;
				//		ЧасовДневных 	= ЧасовДневных 	+ ЧасовД;						
				//	КонецЦикла;
				//	
				//	ТекОтработаноДней 	= СменДневных + СменНочных;			
				//	ТекОтработаноЧасов 	= ЧасовДневных + ЧасовНочных;					
				//	
				//	Если ДокТабель.СменДневных <> СменДневных Тогда
				//		Сообщить("Сотрудник " + Сотрудник + " уволен " + Сотрудник.ДатаУвольнения + " --- " + " Сущетвует табелирование после даты увольнения, Табель:" + ДокТабель);
				//	КонецЕсли;						
				//Иначе					
				//	ТекОтработаноДней 	= ДокТабель.СменДневных + ДокТабель.СменНочных;			
				//	ТекОтработаноЧасов = ДокТабель.ЧасовДневных + ДокТабель.ЧасовНочных;					
				//КонецЕсли;				
				
				ОтработаноЧасов = ОтработаноЧасов	+ ТекОтработаноЧасов;
				ОтработаноДней  = ОтработаноДней	+ ТекОтработаноДней;
						
				ПропускаДней 	= ПропускаДней 	+ ДокТабель.СменВсего;
				ПропускаЧасов 	= ПропускаЧасов + ДокТабель.ЧасовВсего;	
				
				РабочихСменГрафик = РабочихСменГрафик + ДокТабель.РабочихСменГрафик;

				// рассчитаем оклад и тариф по строкам таблицы
				Если СчитаемПоПростому = 1 Тогда
					ТОклад = Сотрудник.Оклад.Получить(КонМесяца(МесяцНачисленияЗП));
					Если ТОклад <> 0 Тогда
						Попытка
							ТекОклад = ТекОклад + ТОклад * ТекОтработаноДней / ДокТабель.РабочихСменГрафик;
						Исключение
							Сообщить("Не удалось рассчитать оклад для сотрудника: " + Строка(Сотрудник) + ". Вероятно, не заполнено количество смен в табеле: " + Строка(ДокТабель));
						КонецПопытки;
					КонецЕсли;
				Иначе
					ТОклада.ВыбратьСтроки();
					Пока ТОклада.ПолучитьСтроку() = 1 Цикл
						Если ДокТабель.РабочихСменГрафик > 0 Тогда
							ТекОклад = ТекОклад + ТОклада.Оклад * ТОклада.ОтработаноДней / ДокТабель.РабочихСменГрафик;							
						КонецЕсли;					
					КонецЦикла;					
				КонецЕсли;				
				
				Если ПустоеЗначение(ДокТабель.Тариф) = 0 Тогда
					Коэф = Макс(0, ДокТабель.Тариф.КоэфУвеличенияЗП.Получить(КонМесяца(МесяцНачисленияЗП)) - 1); 
					Если СчитаемПоПростому = 1 Тогда
						ЗнТариф = ДокТабель.Тариф.Тариф.Получить(КонМесяца(МесяцНачисленияЗП));
						ЗнТарифПереработки = ЗнТариф * Макс(0, ДокТабель.Тариф.КоэфУвеличенияЗП.Получить(КонМесяца(МесяцНачисленияЗП)) - 1);
						ТекТариф = ТекТариф + ЗнТариф * ТекОтработаноЧасов + Макс(0, ?(Норма = 0, 0, ТекОтработаноЧасов - Норма)) * ЗнТарифПереработки;						
					Иначе						
						ТТарифа.ВыбратьСтроки();
						Пока ТТарифа.ПолучитьСтроку() = 1 Цикл
							ЗнТарифПереработки = ТТарифа.Тариф * Коэф;
							ТекТариф = ТекТариф + ТТарифа.Тариф * ТТарифа.ОтработаноЧасов + Макс(0, ?(Норма = 0, 0, ТекОтработаноЧасов - Норма)) * ЗнТарифПереработки;							
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				//--- УМК Сандомирский В.Ю, (07.10.14) изменил --- пользуемся только тарифом
				Если ПустоеЗначение(ДокТабель.Тариф) <> 1 Тогда  //// !!!!!!!!!!!!!!!!!!!!! тут наджо продумать как расчитать если сотрудник в нескольких табелях
				Иначе					
					//--- УМК Сандомирский В.Ю, (08.01.15) 
					// --- Значить это сдельщик и у него специально не выбран тариф
					// --- НИЧЕГО НЕ СЧИТАЕМ В ТАКОМ СЛУЧАЕ;					
				КонецЕсли;							
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
			
	Если ЕстьТабель = 0 Тогда
		Сообщить("Сотрудник: " + Строка(Сотрудник) + " не указан ни в одном табеле");
		
		//Если РабочихСменГрафик = 0 Тогда //--- если график в табеле не заполнен то берем рабочих дней из шапки
		//	РабочихСменГрафик = Дней;
		//КонецЕсли;
		//
		//Если ОтработаноДней = 0 Тогда
		//	ОтработаноДней = Дней;
		//КонецЕсли;
		//
		//Если ОтработаноЧасов = 0 Тогда
		//	ОтработаноЧасов = Часов;
		//КонецЕсли		
	КонецЕсли;		
	
	//... УМК Сандомирский В.Ю. (23.06.14)  --- берем данные из табелей
	
	Если ВидНачисления = Перечисление.ВидыНачисленияЗП.Аванс Тогда
		КВыплате = Сотрудник.Аванс;
	ИначеЕсли ВидНачисления = ОсновнаяЗП Тогда		
		Если ЕстьТабель = 1 Тогда
			Тариф = ТекТариф;
			Оклад = ТекОклад;
		Иначе
			Тариф = 0;
			Оклад = 0;
		КонецЕсли;
		ВычНачислено();
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура ИзмОтработаноДней()
	ИзмСотрудник();         
КонецПроцедуры

// ===============================
Процедура ИзмОтработаноЧасов()
	ИзмСотрудник();         
КонецПроцедуры

// ===============================
Процедура ИзмНомерСтроки() //--- УМК Сандомирский В.Ю. (23.06.14)  --- берем данные из табелей
	//ОтработаноДней = Дней;
	//ИзмОтработаноДней();
	//ОтработаноЧасов = Часов;
	//ИзмОтработаноЧасов();
КонецПроцедуры

// ===============================
Процедура ВычУдержано()
	Удержано = Подоходный + Пенсионный + Безработица + СтрахНетрудосп + Профсоюзный + Штраф;
	КВыплате = Начислено - Удержано;
КонецПроцедуры

// ===============================
Процедура Заполнить()
	
	//Если Подразделение.Выбран() = 0 Тогда 				//--- УМК Сандомирский В.Ю. (06.08.14) пережиток прошлого
	//    Если Вопрос("Не выбрано подразделение! Заполнить по всем сотрудникам?","Да+Нет") = "Нет" Тогда
	//        Возврат;
	//    КонецЕсли;
	//КонецЕсли;
	
	Если КоличествоСтрок()>0 Тогда
		Рез = Вопрос("Удалить строки?","Да+Нет+Отмена");
		Если Рез ="Да" Тогда
			УдалитьСтроки();
		ИначеЕсли Рез = "Отмена" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НачДата = НачМесяца(МесяцНачисленияЗП);
	КонДата = КонМесяца(МесяцНачисленияЗП);
	
	//ТекстЗ = 
	//"//{{ЗАПРОС(ЗапрВед)
	//|Период с НачДата по КонДата;
	//|Сотрудник = Документ.НачислениеЗП.Сотрудник;
	//|ВидНачисления = Документ.НачислениеЗП.ВидНачисления;
	//|КВыплате = Документ.НачислениеЗП.КВыплате;
	//|Функция КВыплатеСумма = Сумма(КВыплате);
	//|Группировка Сотрудник без групп;
	//|Условие(ВидНачисления = ОсновнаяЗП);
	//|"//}}ЗАПРОС
	//;
	//Запр = СоздатьОбъект("Запрос");
	//Если Запр.Выполнить(ТекстЗ) = 0 Тогда
	//    Возврат;
	//КонецЕсли;

	Сотр = СоздатьОбъект("Справочник.Сотрудники");
	Сотр.ИспользоватьРодителя(ГруппаСотр);
	Сотр.ПорядокКодов();
	Сотр.ВыборГруппы(0);
	Сотр.ВыбратьЭлементы(ГруппаСотр.Выбран());
	Пока Сотр.ПолучитьЭлемент()=1 Цикл
		//Если Подразделение.Выбран() = 1 Тогда
		//	Если Сотр.Подразделение <> Подразделение Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;
		//Запр.ВНачалоВыборки();
		//Если Запр.Получить(Сотр.ТекущийЭлемент()) = 1 Тогда
		//	Сообщить("Сотрудник: " + Строка(Сотр.ТекущийЭлемент()) + " фигурирует в другой ведомости");
		//	Продолжить;
		//КонецЕсли;
		
		Если (Сотр.ЭтоГруппа() = 0) и (Сотр.Фирма = Фирма) Тогда
			Если Сотр.ДатаУвольнения <> Дата(0) Тогда
				Если Сотр.ДатаУвольнения <= НачМесяца(МесяцНачисленияЗП) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если Сотр.ДатаПриема <> Дата(0) Тогда
				Если Сотр.ДатаПриема >= КонМесяца(МесяцНачисленияЗП) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			 
			// --- УМК Сандомирский В.Ю. (10.12.14) заполняем всех сотрудников (потом будем удалять)
			//Если (Сотр.Оклад.Получить(ДатаДок) = 0) И (ПустоеЗначение(Сотр.ВидТарифа.Получить(ДатаДок)) = 1) Тогда //--- УМК Сандомирский В.Ю, (07.10.14) добавил проверку заполненности тарифа нового (10.12.14) убрал тариф старый
			//	Продолжить;
			//КонецЕсли;
			
			// --- УМК Сандомирский В.Ю. (10.07.14) Было начислено в расчетном периоде но не этим документом
			СоздаватьСтроку = 1;
			ТекНачисленоВПериоде = ВычНачисленоВПериоде(Сотр.ТекущийЭлемент(),1);
			
			Если ТекНачисленоВПериоде > 0 Тогда
				Рез = Вопрос("Добавлять сотрудника " + Сотр,"Да+Нет");
				Если Рез <> "Да" Тогда
					СоздаватьСтроку = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если СоздаватьСтроку = 1 Тогда
			    НоваяСтрока();
				ИзмНомерСтроки();
				Сотрудник = Сотр.ТекущийЭлемент();
				ИзмСотрудник();
			КонецЕсли;	
			// ... УМК Сандомирский В.Ю. (10.07.14) Было начислено в расчетном периоде но не этим документом
			
		КонецЕсли;
	КонецЦикла;	
	
	// --- УМК Сандомирский В.Ю. (10.12.14) удаляем пустые строки
	ТекСтрока = КоличествоСтрок();
	Пока ТекСтрока <> 0 Цикл
		ПолучитьСтрокуПоНомеру(ТекСтрока);
		Если Начислено = 0 Тогда
			УдалитьСтроку();	
		КонецЕсли;
		
		ТекСтрока = ТекСтрока - 1;		
	КонецЦикла;	
	
	СортироватьСтроки("Сотрудник+");	// --- УМК Сандомирский В.Ю. (10.07.14) Было начислено в расчетном периоде но не этим документом	
КонецПроцедуры

// ===============================
Процедура ПриРедактированииНовойСтроки()
	ИзмНомерСтроки();
КонецПроцедуры

// ===============================
Процедура РассчитатьСтроку(СуммаСдельно=0, ВыполнитьЗапросПоСотруднику=1)
Перем Ит;

	
//	Если ВыполнитьЗапросПоСотруднику = 1 Тогда
//		// рассчитаем сумму сдельных начислений
//		Если ИспользоватьСчетаРасходов <> Класс9 Тогда
//			КоррСч = "81";
//		Иначе
//			КоррСч = "23";
//		КонецЕсли;
//
//		НачПериода = НачМесяца(ДатаДок); 
//		КонПериода = ?(Выбран()=1, СформироватьПозициюДокумента(ТекущийДокумент(),-1), КонМесяца(ДатаДок));
//
//		Ит = СоздатьОбъект("БухгалтерскиеИтоги");
//		Ит.ИспользоватьРазделительУчета(Фирма);
//		Ит.ИспользоватьСубконто(ВидыСубконто.Сотрудники, Сотрудник, 2);
//		Ит.ИспользоватьСубконто(ВидыСубконто.МесяцНачисленияЗП);
//		Ит.ВыполнитьЗапрос(НачПериода,КонПериода,"661",КоррСч,,2);
//	
//		Сдельно = Ит.КО();
//		Ит = 0;
//	Иначе
//		Сдельно = СуммаСдельно;
//	КонецЕсли;	

	// рассчитанную сумму сдельных начислений добавим к общей сумме начислений
	ВычНачислено();
	
	// рассчитаем удержания
	ОблагаемоеПенс = Оклад + Отпускные + ОблагаемаяМатПомощь
				   + Больничные + БольничныеЗаСчетПредприятия
				   + Тариф + Сдельно + Премия;
	ОблагаемоеБезр = Оклад + Отпускные + ОблагаемаяМатПомощь
				   + Тариф + Сдельно + Премия;
	ОблагаемоеНетр = Оклад + Отпускные + ОблагаемаяМатПомощь
				   + Тариф + Сдельно + Премия;
	ОблагаемоеПроф = Оклад + Отпускные + ОблагаемаяМатПомощь
				   + Тариф + Сдельно + Премия;

	КвоНач = ПолучитьКвоПроизвольныхНачислений();
	Для НомНач = 1 по КвоНач Цикл
		ОблагаемоеПенс = ОблагаемоеПенс + ПолучитьАтрибут("СуммаНачисл"+НомНач);
		ОблагаемоеБезр = ОблагаемоеБезр + ПолучитьАтрибут("СуммаНачисл"+НомНач);
		ОблагаемоеНетр = ОблагаемоеНетр + ПолучитьАтрибут("СуммаНачисл"+НомНач);
		ОблагаемоеПроф = ОблагаемоеПроф + ПолучитьАтрибут("СуммаНачисл"+НомНач);
	КонецЦикла;
				   
	// МаксБаза - ограничение в 1000 грн
	Если МаксБазаПенс > 0 Тогда
		ОблагаемоеПенс = Мин(ОблагаемоеПенс,МаксБазаПенс);
	КонецЕсли;
	Если МаксБазаБезр > 0 Тогда
		ОблагаемоеБезр = Мин(ОблагаемоеБезр,МаксБазаБезр);
	КонецЕсли;
	Если МаксБазаНетр > 0 Тогда
		ОблагаемоеНетр = Мин(ОблагаемоеНетр,МаксБазаНетр);
	КонецЕсли;
	
	Если Сотрудник.ЧленПрофсоюза = 1 Тогда
		Профсоюзный = ОблагаемоеПроф * стПрофсоюзный;   
	Иначе
		Профсоюзный = 0;
	КонецЕсли;
	
	Безработица = ОблагаемоеБезр * стБезработица;
	
	// теперь по шкале пенсионный
	Пенсионный = 0;
	ПредПредел = 0;
	НиО.ИспользоватьРодителя(ноПенсионныйСотр.Родитель);
	НиО.ИспользоватьДату(КонецПериода);
	НиО.ПорядокНаименований();
	НиО.ВыбратьЭлементы();
	Пока НиО.ПолучитьЭлемент() = 1 Цикл
		Если ОблагаемоеПенс <= НиО.Предел Тогда
			Пенсионный = НиО.Ставка*ОблагаемоеПенс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// теперь по шкале соцстрах на случай нетрудоспособности
	СтрахНетрудосп = 0;
	ПредПредел = 0;
	НиО.ИспользоватьРодителя(ноСтрахНетрудоспСотр.Родитель);
	НиО.ИспользоватьДату(КонецПериода);
	НиО.ПорядокНаименований();
	НиО.ВыбратьЭлементы();
	Пока НиО.ПолучитьЭлемент() = 1 Цикл
		Если ОблагаемоеНетр <= НиО.Предел Тогда
			СтрахНетрудосп = НиО.Ставка*ОблагаемоеНетр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	глПарсить(ноПодоходныйСотр.Родитель.Дополнительно.Получить(КонецПериода),Спис);
	УчитыватьБезработицу = Число(Спис.Получить("Учит. безработицу"));
	
	// подоходный
	ОблагаемоеПодоходным = Оклад + Тариф + Сдельно + Премия 
						 + Отпускные + ОблагаемаяМатПомощь + Больничные
						 + БольничныеЗаСчетПредприятия;
	// приплюсуем произвольные начисления, к-во произаольных начислений
	// мы уже определили раньше
	Для НомНач = 1 по КвоНач Цикл
		ОблагаемоеПодоходным = ОблагаемоеПодоходным + ПолучитьАтрибут("СуммаНачисл"+НомНач);
	КонецЦикла;

	Если УчитыватьБезработицу <> 0 Тогда
		ОблагаемоеПодоходным = ОблагаемоеПодоходным - Безработица;
	Иначе
		// до 01.03.01 безработицу не вычитаем
	КонецЕсли;
	
	//Если Сотрудник.ТипСотрудника.Получить(КонецПериода) = 0 Тогда
	//	// совместитель
	//	СтавкаСовместителя = Число(Спис.Получить("Ставка совместителя"));
	//	Подоходный = СтавкаСовместителя*ОблагаемоеПодоходным;
	//Иначе
	//	// основной, не совместитель
	//	ОблагаемоеПодоходным = Цел(ОблагаемоеПодоходным);
	//	
	//	УчитыватьДетей = Число(Спис.Получить("Учит. детей до"));
	//	Льгот = 0; Детей = 0;
	//	Если Сотрудник.КвоЛьгот.Получить(КонецПериода) > 0 Тогда
	//		// есть льготы
	//		Льгот = Сотрудник.КвоЛьгот.Получить(КонецПериода);
	//	КонецЕсли;
	//	Если ((Сотрудник.КвоДетей.Получить(КонецПериода) > 0) И (ОблагаемоеПодоходным <= УчитыватьДетей)) Тогда
	//		// есть дети и доход меньше 10 минимальных зарплат
	//		Детей = Сотрудник.КвоДетей.Получить(КонецПериода);
	//	КонецЕсли;
	//	
	//	// для отработавших менее 15 дней не надо учитывать один НМ
	//	УчестьНМ = 1;
	//	// проверим дату приема
	//	ОтработаноКалендДней = КонецПериода - Дата(Сотрудник.ДатаПриема);
	//	Если (ОтработаноКалендДней >= 0) И (ОтработаноКалендДней < 15) Тогда
	//		УчестьНМ = 0;
	//	КонецЕсли;
	//	Если УчестьНМ = 1 Тогда
	//		// проверим дату увольнения    
	//		ОтработаноКалендДней = Дата(Сотрудник.ДатаУвольнения)-НачМесяца(ДатаДок);
	//		Если (ОтработаноКалендДней >= 0) И (ОтработаноКалендДней < 15) Тогда
	//			УчестьНМ = 0;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если УчестьНМ = 1 Тогда
	//		// уменьшим облагаемое на максимальную льготу
	//		ОблагаемоеПодоходным = ОблагаемоеПодоходным - Макс(Льгот, Детей) * НМ;
	//	Иначе
	//		// если отработано меньше 15 дней, никакие льготы не учитываются, 
	//		// облагаемая сумма не уменьшается
	//	КонецЕсли;
	//	
	//	// далее рассчитываем подоходный по шкале
	//	Подоходный = 0;
	//	ПредПредел = 0;
	//	НиО.ИспользоватьРодителя(ноПодоходныйСотр.Родитель);
	//	НиО.ИспользоватьДату(КонецПериода);
	//	НиО.ПорядокНаименований();
	//	НиО.ВыбратьЭлементы();
	//	Пока НиО.ПолучитьЭлемент() = 1 Цикл
	//		Если ОблагаемоеПодоходным > НиО.Предел Тогда
	//			Подоходный = Подоходный + НиО.Ставка*(НиО.Предел - ПредПредел);
	//			ПредПредел = ?((УчестьНМ = 0) И (НиО.Предел = НМ), 0, НиО.Предел)
	//		Иначе
	//			Если (НиО.Ставка = 0) и (УчестьНМ = 0) Тогда
	//				Продолжить
	//			КонецЕсли;
	//			Подоходный = Подоходный + НиО.Ставка*(ОблагаемоеПодоходным - ПредПредел);
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Подоходный = Макс(0,Подоходный);
	//	
	//	Если (Сотрудник.КвоДетей.Получить(КонецПериода) >=3) и (УчестьНМ = 1) Тогда
	//		// если детей >= 3 и отработано больше 15 дней,
	//		// подоходный уменьшаем в 2 раза
	//		Подоходный = Подоходный/2;
	//	КонецЕсли;
	//КонецЕсли;
	
	Подоходный = 0; //--- УМК Сандомирский В.Ю. (08.09.14)
	
	ВычУдержано();
	НеРассчитан = 0;
КонецПроцедуры

Процедура РассчитатьПоНарядам(ТолькоСтроку)
	Если (ПустоеЗначение(ДатаН) = 1) или (ПустоеЗначение(ДатаК) = 1) Тогда
		Предупреждение("Не задан период расчета");
		Возврат;
	КонецЕсли;

	// вначале проверим нет ли начислений на похожий период
	ДокНЗП = СоздатьОбъект("Документ.НачислениеЗП");
	ДокНЗП.ВыбратьДокументы(НачМесяца(МесяцНачисленияЗП), КонМесяца(МесяцНачисленияЗП));
	Пока ДокНЗП.ПолучитьДокумент() = 1 Цикл
		Если (ДокНЗП.Подразделение = Подразделение) и (ДокНЗП.ПометкаУдаления() = 0) и (ДокНЗП.ТекущийДокумент() <> ТекущийДокумент()) Тогда
			Если (ДокНЗП.ДатаН <> Дата(0)) и (ДокНЗП.ДатаК <> Дата(0)) Тогда			
			    Если ((ДокНЗП.ДатаН >= ДатаН) и (ДокНЗП.ДатаН <= ДатаК)) или 
				((ДокНЗП.ДатаК >= ДатаН) и (ДокНЗП.ДатаК <= ДатаК)) Тогда
					Предупреждение("Обнаружен документ с начислением за похожий период " + Строка(ДокНЗП));
					Прервать;
				КонецЕсли;			    
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	списСотр = СоздатьОбъект("СписокЗначений");
	Если ТолькоСтроку = 3 Тогда
		ВыгрузитьТабличнуюЧасть(списСотр, "Сотрудник");
	Иначе
		списСотр.ДобавитьЗначение(Сотрудник);
	КонецЕсли;
	
	ТекстЗ = 
	"//{{ЗАПРОС(ЗапросНаряд)
	|Период с ДатаН по ДатаК;
	|Сотр = Документ.Наряд.Сотрудник;
	|СуммаС = Документ.Наряд.СуммаС;
	|Функция СумСумма = Сумма(СуммаС);
	|Группировка Сотр без групп;
	|Условие(Сотр в списСотр);
	|"//}}ЗАПРОС
	;
	
	Запрос = СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗ) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоСтроку = 2 Тогда
		Тариф = Запрос.СумСумма;
	Иначе		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Тариф = 0;
			Запрос.ВНачалоВыборки();
			Если Запрос.Получить(Сотрудник) = 1 Тогда
			    Тариф = Запрос.СумСумма;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура Рассчитать()
	ТолькоСтроку = 0;
	МенюРассчитать = СоздатьОбъект("СписокЗначений");
	//МенюРассчитать.ДобавитьЗначение(2,"&Начисления и удержания текущего сотрудника");
	//МенюРассчитать.ДобавитьЗначение(3,"&Начисления и удержания всех сотрудников");
	МенюРассчитать.ДобавитьЗначение(1,"&Текущего сотрудника");
	МенюРассчитать.ДобавитьЗначение(0,"&Всех сотрудников");
	Если МенюРассчитать.ВыбратьЗначение(ТолькоСтроку,"Виберите тип рассчета",2,0,1) = 0 Тогда
		Возврат;
	КонецЕсли;
	            
	Если ТолькоСтроку = 1  Тогда
	   		ИзмСотрудник();
	ИначеЕсли ТолькоСтроку = 0 Тогда   
	   	Состояние("Пересчет всех сотрудников по табелям - может занять несколько минут.");
	   	ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			ИзмСотрудник();
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

// ===============================
Функция ФорматПок(Чсл) Экспорт
	Возврат Формат(Чсл,"Ч-12.2");
КонецФункции                      

// ===============================
Функция ФорматЦел(Чсл) Экспорт
	Возврат Формат(Чсл,"Ч-6");
КонецФункции

// ===============================
Процедура ПолучитьДанныеИзЗапроса()
	Перем Стр;
	
	НачПериода = НачМесяца(МесяцНачисленияЗП);
	КонПериода = ТекущийДокумент();
	
	Если Константа.ПроводкиПоКассеТолькоОрдерами = Да Тогда
		// запрос по проведенным документам НачислениеЗП с видом выплаты Аванс
		ЗапрАванс = СоздатьОбъект("Запрос");
		ТекстЗапр = "//{{ЗАПРОС(ЗапрАванс)
		|Период С НачПериода по КонПериода;
		|ВидНачисления = Документ.НачислениеЗП.ВидНачисления;
		|Сот = Документ.НачислениеЗП.Сотрудник;
		|Фир = Документ.НачислениеЗП.Сотрудник.Фирма;
		|Аванс = Документ.НачислениеЗП.КВыплате;
		|Функция СуммаАванса = Сумма(Аванс);
		|Группировка Сот без групп;
		|Условие (Фир = Фирма);
		|Условие (ВидНачисления = Перечисление.ВидыНачисленияЗП.Аванс);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если ЗапрАванс.Выполнить(ТекстЗапр) = 0 Тогда
			Предупреждение("Не выполнился запрос по документам начисления аванса!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблСотр = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(ТаблСотр,"Сотрудник,КВыплате");
	СписСотр = СоздатьОбъект("СписокЗначений");
	ТаблСотр.Выгрузить(СписСотр,,,"Сотрудник");
	
	Ит = СоздатьОбъект("БухгалтерскиеИтоги");
	Ит.ИспользоватьРазделительУчета(Фирма);
	Ит.ИспользоватьСубконто(ВидыСубконто.Сотрудники, СписСотр, 2);
	Ит.ИспользоватьСубконто(ВидыСубконто.МесяцНачисленияЗП);
	Ит.ВключатьСубсчета(-1, -1);
	Ит.ВыполнитьЗапрос(НачПериода,КонПериода,"661",,,3,"Проводка","С");
	
	ТаблСотр.НоваяКолонка("СальдоНач","Число",12,2);
	ТаблСотр.НоваяКолонка("ВыплПред","Число",12,2);
	ТаблСотр.НоваяКолонка("Аванс","Число",12,2);
	ТаблСотр.НоваяКолонка("АвансБ","Число",12,2);
	ТаблСотр.НоваяКолонка("ВыплТек","Число",12,2);
	ТаблСотр.НоваяКолонка("НачДр","Число",12,2);
	ТаблСотр.НоваяКолонка("КВыдаче","Число",12,2);
	ТаблСотр.НоваяКолонка("СальдоКон","Число",12,2);
	ТаблСотр.НоваяКолонка("ВыплПредБ","Число",12,2);
	ТаблСотр.НоваяКолонка("ВыплТекБ","Число",12,2);
	
	Ит.ВыбратьСубконто(1);
	Пока Ит.ПолучитьСубконто(1) = 1 Цикл
		// сотрудник точно есть в таблице - мы по ней "фильтровали" запрос
		ТаблСотр.НайтиЗначение(Ит.Субконто(1),Стр,"Сотрудник");
		ТаблСотр.ПолучитьСтрокуПоНомеру(Стр);
		Стр = 0;
		ТаблСотр.СальдоНач = Ит.СНК() - Ит.СНД();
		Ит.ВыбратьСубконто(2);
		Пока Ит.ПолучитьСубконто(2) = 1 Цикл
			Дат = Ит.Субконто(2);
			Если ПустоеЗначение(Дат) = 1 Тогда
				// странно, но бывает
				Продолжить;
			КонецЕсли;
			Ит.ВыбратьПериоды();
			Пока Ит.ПолучитьПериод() = 1 Цикл
				Док = Ит.Операция.Документ; 
				Если Док = ТекущийДокумент() Тогда
					// движения средств по данной ведомости игнорируем
					Продолжить;
				КонецЕсли;
				Попытка 
					ВидВыпл = Док.ВидНачисления 
				Исключение 
					ВидВыпл = ОсновнаяЗП
				КонецПопытки;

				Ит.ВыбратьКорСчета();
				Пока Ит.ПолучитьКорСчет() = 1 Цикл
					Если (Ит.КорСчет.ПринадлежитГруппе(СчетПоКоду("31")) = 1) или (Ит.КорСчет.ПринадлежитГруппе(СчетПоКоду("30")) = 1) Тогда
						Если (Дат = НачПериода) И (ВидВыпл = Перечисление.ВидыНачисленияЗП.Аванс) Тогда
							// выплата аванса за текущий месяц
							Если Ит.КорСчет.ПринадлежитГруппе(СчетПоКоду("30")) = 1 Тогда
								ТаблСотр.Аванс = ТаблСотр.Аванс + Ит.КорДО();
							Иначе
								ТаблСотр.АвансБ = ТаблСотр.АвансБ + Ит.КорДО();
							КонецЕсли;								
						ИначеЕсли Дат <> НачПериода Тогда
							// выплаты за предыдущие периоды
							Если Ит.КорСчет.ПринадлежитГруппе(СчетПоКоду("30")) = 1 Тогда
								ТаблСотр.ВыплПред = ТаблСотр.ВыплПред + Ит.КорДО();
							Иначе
								ТаблСотр.ВыплПредБ = ТаблСотр.ВыплПредБ + Ит.КорДО();
							КонецЕсли;
						Иначе
							// выплаты за текущий период
							Если Ит.КорСчет.ПринадлежитГруппе(СчетПоКоду("30")) = 1 Тогда
								ТаблСотр.ВыплТек = ТаблСотр.ВыплТек + Ит.КорДО();
							Иначе
								ТаблСотр.ВыплТекБ = ТаблСотр.ВыплТекБ + Ит.КорДО();
							КонецЕсли;
						КонецЕсли;
					Иначе						
					    // начисления этого месяца
						ТаблСотр.НачДр = ТаблСотр.НачДр + Ит.КорКО() - Ит.КорДО();
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
		КонецЦикла;
		
		Если Константа.ПроводкиПоКассеТолькоОрдерами = Да Тогда
			Если ЗапрАванс.Получить(Ит.Субконто(1)) = 1 Тогда
				// увеличим сумму аванса
				ТаблСотр.Аванс = ТаблСотр.Аванс + ЗапрАванс.СуммаАванса;
				// уменьшим сумму выплат за текущий период, 
				// поскольку сумма аванса должна была там учесться
				ТаблСотр.ВыплТек = Макс((ТаблСотр.ВыплТек + ТаблСотр.ВыплТекБ) - ЗапрАванс.СуммаАванса, 0);
			КонецЕсли;
			ЗапрАванс.вНачалоВыборки();
		КонецЕсли;
		
		ТаблСотр.КВыплате = ТаблСотр.КВыплате - ТаблСотр.Аванс - ТаблСотр.АвансБ;
		ТаблСотр.КВыдаче = Макс(0, ТаблСотр.КВыплате+ТаблСотр.СальдоНач-ТаблСотр.ВыплПред-ТаблСотр.ВыплПредБ);
		ТаблСотр.СальдоКон = ТаблСотр.КВыплате+ТаблСотр.СальдоНач - ТаблСотр.ВыплПред - ТаблСотр.ВыплТек- ТаблСотр.ВыплПредБ - ТаблСотр.ВыплТекБ;
	КонецЦикла;	
КонецПроцедуры

// ===============================
Процедура РасчПлатВед() // печать расчетно-платежной ведомости
	Перем Стр;

	КвоНач = ПолучитьКвоПроизвольныхНачислений();
	
	ПолучитьДанныеИзЗапроса();
	Таб.ПараметрыСтраницы(2); // ландшафт
	Таб.ПовторятьПриПечатиСтроки(10,10);
	Таб.ВывестиСекцию("Шапка|Секция1");
	Для НомНач = 1 по КвоНач Цикл
		Начисл = ПолучитьАтрибут("Начисл"+НомНач);
		Таб.ПрисоединитьСекцию("Шапка|Секция2");
	КонецЦикла;
	Таб.ПрисоединитьСекцию("Шапка|Секция3");
	Ном = 1;
	ИтКВыпл = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Месяц = ?((Больничные > 0) или (БольничныеЗаСчетПредприятия > 0), Формат(ДатаМесяц(МесяцНачисленияЗП),"Ч (0)2"), "-");
		ТаблСотр.НайтиЗначение(Сотрудник,Стр,"Сотрудник");
		ТаблСотр.ПолучитьСтрокуПоНомеру(Стр);
		Стр = 0;
		Таб.ВывестиСекцию("Сотрудник|Секция1");
		Для НомНач = 1 по КвоНач Цикл
			Начисл = ПолучитьАтрибут("Начисл"+НомНач);
			Таб.ПрисоединитьСекцию("Сотрудник|Секция2");
		КонецЦикла;
		КВыпл = Начислено + ТаблСотр.НачДр - Удержано - ТаблСотр.Аванс - ТаблСотр.АвансБ + ТаблСотр.СальдоНач - ТаблСотр.ВыплПред - ТаблСотр.ВыплТек - ТаблСотр.ВыплПредБ - ТаблСотр.ВыплТекБ;
		ИтКВыпл = ИтКВыпл + КВыпл;
		Таб.ПрисоединитьСекцию("Сотрудник|Секция3");
		Ном = Ном + 1;
	КонецЦикла;
	Таб.ВывестиСекцию("Дно|Секция1");
	Для НомНач = 1 по КвоНач Цикл
		Начисл = ПолучитьАтрибут("Начисл"+НомНач);
		Таб.ПрисоединитьСекцию("Дно|Секция2");
	КонецЦикла;
	Таб.ПрисоединитьСекцию("Дно|Секция3");
	Таб.Показать("Расчетно-платежная ведомость","");
КонецПроцедуры

// ===============================
Процедура ПлатВед()
	Перем Стр;
	ИтКВыдаче = Итог("КВыплате");
	Если ВидНачисления = ОсновнаяЗП Тогда
		ПолучитьДанныеИзЗапроса();
		ИтКВыдаче = ТаблСотр.Итог("КВыдаче");
	КонецЕсли;
	Таб.ПараметрыСтраницы(1); // портрет
	Таб.ПовторятьПриПечатиСтроки(23,23);
	Таб.ВывестиСекцию("Шапка");
	ВыбратьСтроки();
	Ном = 1;
	Пока ПолучитьСтроку() = 1 Цикл
		КВыдаче = 0;
		Если ВидНачисления = ОсновнаяЗП Тогда
			// найти данные в таблице
			ТаблСотр.НайтиЗначение(Сотрудник,Стр,"Сотрудник");
			ТаблСотр.ПолучитьСтрокуПоНомеру(Стр);
			КВыдаче = ТаблСотр.КВыдаче;
			Стр = 0;
		Иначе
			КВыдаче = КВыплате;
		КонецЕсли;
		Таб.ВывестиСекцию("Сотрудник");
		Ном = Ном + 1;
	КонецЦикла;
	Таб.ВывестиСекцию("Дно");
	Таб.Показать("Платежная ведомость","");
КонецПроцедуры

//// ===============================
//Процедура РасчетныеЛистки()
//	Перем Стр;
//
//	КвоНач = ПолучитьКвоПроизвольныхНачислений();
//	
//	КвоНаСтраницу = 2;
//	ВвестиЧисло(КвоНаСтраницу,"Введите кол-во листков на страницу.",1,0);
//	КвоНаСтаницу = ?(КвоНаСтраницу > 0, КвоНаСтраницу, 2);
//	ПолучитьДанныеИзЗапроса();
//	Таб.ПараметрыСтраницы(1); // портрет
//	ВыбратьСтроки();
//	Ном = 1;
//	Пока ПолучитьСтроку() = 1 Цикл
//		Таб.ВывестиСекцию("Основная1");
//		Для НомНач = 1 по КвоНач Цикл
//			Начисл = ПолучитьАтрибут("Начисл"+НомНач);
//			Таб.ВывестиСекцию("Основная2");
//		КонецЦикла;
//		Таб.ВывестиСекцию("Основная3");
//		ТаблСотр.НайтиЗначение(Сотрудник,Стр,"Сотрудник");
//		ТаблСотр.ПолучитьСтрокуПоНомеру(Стр);
//		Стр = 0;
//		Если ТаблСотр.СальдоНач <> 0 Тогда
//			Таб.ВывестиСекцию("ДолгНач");
//		КонецЕсли;
//		ПолагаетсяКВыплате = Макс(0, ТаблСотр.КВыплате + ТаблСотр.Аванс + ТаблСотр.СальдоНач);
//		Выплачено = ТаблСотр.ВыплПред + ТаблСотр.Аванс + ТаблСотр.ВыплТек;
//		Таб.ВывестиСекцию("КВыплате");
//		Если ТаблСотр.СальдоКон <> 0 Тогда
//			Таб.ВывестиСекцию("ДолгКон");
//		КонецЕсли;
//		Если Ном < КоличествоСтрок() Тогда
//			Если Ном%КвоНаСтраницу = 0 Тогда
//				Таб.НоваяСтраница();
//			Иначе
//				Таб.ВывестиСекцию("Черта");
//			КонецЕсли;
//		КонецЕсли;
//		Ном = Ном + 1;
//	КонецЦикла;
//	Таб.Показать("Расчетные листки","");
//КонецПроцедуры
              

// ===============================
Процедура РасчетныеЛистки()
	Перем Стр;

	КвоНач = ПолучитьКвоПроизвольныхНачислений();
	
	КвоНаСтраницу = 3;
	ВвестиЧисло(КвоНаСтраницу,"Введите кол-во листков на страницу.",1,0);
	КвоНаСтаницу = ?(КвоНаСтраницу > 0, КвоНаСтраницу, 2);
	ПолучитьДанныеИзЗапроса();
	Таб.ПараметрыСтраницы(1); // портрет
	ВыбратьСтроки();
	Ном = 1;
	Пока ПолучитьСтроку() = 1 Цикл
		Если Ном > КвоНаСтраницу*2 Тогда
		    Таб.НоваяСтраница();
			Ном = 1;
		КонецЕсли;
		Стр = 0;
		ТаблСотр.НайтиЗначение(Сотрудник,Стр,"Сотрудник");
		ТаблСотр.ПолучитьСтрокуПоНомеру(Стр);

		КВып = Начислено + ТаблСотр.НачДр - Удержано - ТаблСотр.Аванс - ТаблСотр.АвансБ + ТаблСотр.СальдоНач - ТаблСотр.ВыплПред -ТаблСотр.ВыплТек - ТаблСотр.ВыплПредБ -ТаблСотр.ВыплТекБ;
		Если Цел(НомерСтроки/2) <> НомерСтроки/2 Тогда
		    Таб.ВывестиСекцию("Строка|Секция1");
		Иначе
			Таб.ПрисоединитьСекцию("Строка|Секция2");
		КонецЕсли;
		Ном = Ном + 1;
	КонецЦикла;
	Таб.Показать("Расчетные листки","");
КонецПроцедуры
              

//Рабочими днями считаются дни с понедельника по пятницу
//Учет графиков работы и праздничных дней не ведется
// ===============================
Функция КвоРабочихДней(НачДата,КонДата)
	ТекДата = НачДата;
	РабДней = 0;
	Пока ТекДата<КонДата Цикл
		ДН=НомерДняНедели(ТекДата);
		Если НЕ((ДН=6) ИЛИ (ДН=7)) Тогда
			РабДней=РабДней+1;
		КонецЕсли;
		ТекДата = ТекДата + 1;
	КонецЦикла;
	Возврат РабДней;
КонецФункции

//Возвращает ставку рассчитанную пропорционально количеству рабочих дней в месяце
// ======================================
Функция ПолучитьСтавку(ИмяПараметра,стОргПеч)
	НиО = СоздатьОбъект("Справочник.ШкалаСтавок");
	Если НиО.НайтиПоКоду(ИмяПараметра) = 1 Тогда
		// есть такой налог
		ПерСтавка = СоздатьОбъект("Периодический");
		ПерСтавка.ИспользоватьОбъект("Ставка",НиО);
		ПерСтавка.ВыбратьЗначения(НачалоПериода+1, КонецПериода);
		Ставка = 0;
		СтавкаПред = НиО.Ставка.Получить(НачалоПериода);
		НачалоПериодаСтавки = НачалоПериода;
		
		Пока ПерСтавка.ПолучитьЗначение() = 1 Цикл
			РабДней = КвоРабочихДней(НачалоПериодаСтавки,ПерСтавка.ДатаЗнач);
			стОргПеч =  стОргПеч + НачалоПериодаСтавки + "-" + (ПерСтавка.ДатаЗнач-1) + " (" + РабДней +" дн.) " + СтавкаПред*100+"%, ";
			
			Ставка = Ставка + СтавкаПред * РабДней;
			СтавкаПред = ПерСтавка.Значение;
			НачалоПериодаСтавки = ПерСтавка.ДатаЗнач;
		КонецЦикла;
		
		РабДней = КвоРабочихДней(НачалоПериодаСтавки,КонецПериода+1);
		
		Если НачалоПериодаСтавки = НачалоПериода Тогда 
			//Ставка в течение месяца не менялась - значит историю не выводим
		    стОргПеч = "" + СтавкаПред*100+" %";
		Иначе
			стОргПеч =  стОргПеч + НачалоПериодаСтавки + "-" + КонецПериода + " (" + РабДней +" дн.) " + СтавкаПред*100+"%";
		КонецЕсли;
				
		Ставка = Ставка + СтавкаПред * РабДней;
		РабДнейВсего = КвоРабочихДней(НачалоПериода,КонецПериода+1);
		Ставка = Ставка / РабДнейВсего;
		
		Возврат Ставка;
	КонецЕсли;
	Возврат 0;
КонецФункции 

// ===============================
Процедура СводОтчислений()
	Перем ноПенсионный, ноПенсионныйИнв;
	
	Таб.ПараметрыСтраницы(2); // ландшафт
	Таб.ПовторятьПриПечатиСтроки(8,8);
	КонецПериода = КонМесяца(МесяцНачисленияЗП);
	НачалоПериода = НачМесяца(МесяцНачисленияЗП);
	
	Если глПолучитьНиО(ноПенсионныйСотр,"Пенс1пред","об отчислениях в ПФ с сотрудника!") = 0 Тогда
		Возврат;
	КонецЕсли;
	Если глПолучитьНиО(ноПенсионный,"ФЗППенс","об отчислениях в ПФ с фонда заработной платы!") = 0 Тогда
		Возврат;
	КонецЕсли;
	Если глПолучитьНиО(ноПенсионный,"ФЗППенсИнв","об отчислениях в ПФ с фонда заработной платы (инвалиды)!") = 0 Тогда
		Возврат;
	КонецЕсли;
	Если глПолучитьНиО(ноСтрахНетрудоспСотр,"СотрНетрудосп1","об отчислениях в фонд страх. по временной нетрудоспособности с сотрудника!") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	стПенОргПеч = "";
	стПенИнвОргПеч = "";
	стБзрОргПеч = "";
	стСоцОргПеч = "";
	стНесчОргПеч = "";
	
	// получим данные для печати
	Расшифровка = СоздатьОбъект( "СписокЗначений" );
	Расшифровка.Установить ("Дата",КонецПериода);
	Расшифровка.Установить("КоммунНалог","");
	Расшифровка.Установить("НеоблагМин","");
	глПолучитьДанные(Расшифровка);
	
	//Получаем ставки с историей изменений в течение месяца
	стПенОрг = ПолучитьСтавку("ФЗППенс",стПенОргПеч);
	стПенИнвОрг = ПолучитьСтавку("ФЗППенсИнв",стПенИнвОргПеч);
	стБзрОрг = ПолучитьСтавку("ФЗПБезраб",стБзрОргПеч);
	стСоцОрг = ПолучитьСтавку("ФЗПСоцСтрах",стСоцОргПеч);
	стНесчОрг = ПолучитьСтавку("ФЗПСоцСтрахНесч",стНесчОргПеч);
	стКомОрг = Расшифровка.Получить("КоммунНалог");
	НМ = Расшифровка.Получить("НеоблагМин");
	
	// определим максимальную базу, с которой взимаются отчисления в фонды
	// предполагаем, что она для всех фондов одинаковая
	Спис = СоздатьОбъект("СписокЗначений");
	глПарсить(ноПенсионный.Дополнительно.Получить(КонецПериода),Спис);
	МаксБаза = Число(Спис.Получить("Макс. база"));
	МаксБаза = ?(МаксБаза = 0, 999999999, МаксБаза);
	// отчисления в фонды с сотрудников разобьем по ставкам
	прПенс1Сотр = ноПенсионныйСотр.Предел.Получить(КонецПериода) * ноПенсионныйСотр.Ставка.Получить(КонецПериода);
	прСтрахНетрудосп1Сотр = ноСтрахНетрудоспСотр.Предел.Получить(КонецПериода) * ноСтрахНетрудоспСотр.Ставка.Получить(КонецПериода);
	
	Таб.ВывестиСекцию("Шапка");
	
	ИтНачислЗатр = 0; ИтНачислПриб = 0;
	ИтНачислЗатрБаза = 0; ИтНачислПрибБаза = 0;
	ИтНачислИнвЗатрБаза = 0; ИтНачислИнвПрибБаза = 0;
	ИтПенс1 = 0; ИтПенс2 = 0;
	ИтСтрахНетрудосп1 = 0; ИтСтрахНетрудосп2 = 0;
	ИтогСотрПенсЗатрат   = 0;ИтогСотрПенсПриб     = 0;
	ИтогСотрПенсИнвЗатрат= 0;ИтогСотрПенсИнвПриб  = 0;
	ИтогСотрБезрабЗатр   = 0;ИтогСотрБезрабПриб   = 0;
	ИтогСотрСоцСтрахПриб = 0;ИтогСотрСоцСтрахЗатр = 0;
	ИтогСотрСтрахНесчПриб = 0;ИтогСотрСтрахНесчЗатр = 0;
	               
	КвоНач = ПолучитьКвоПроизвольныхНачислений();
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		НачислЗатр = Оклад + Отпускные
				   + Тариф + Сдельно + Премия;
		
		Для НомНач = 1 по КвоНач Цикл
			НачислЗатр = НачислЗатр + ПолучитьАтрибут("СуммаНачисл"+НомНач);
		КонецЦикла;
				   
		НачислПриб = ОблагаемаяМатПомощь;
		НачислЗатрБаза = НачислЗатр;
		НачислПрибБаза = ОблагаемаяМатПомощь;
		Если НачислЗатрБаза+НачислПрибБаза > МаксБаза Тогда
			Коэф = МаксБаза / (НачислЗатрБаза + НачислПрибБаза);
			НачислЗатрБаза = Окр(Коэф*НачислЗатрБаза,2);
			НачислПрибБаза = МаксБаза - НачислЗатрБаза;
		КонецЕсли;
		
		ЭтоИнвалид = Сотрудник.Инвалид.Получить(КонМесяца(МесяцНачисленияЗП));
		НачислИнвЗатрБаза = НачислЗатрБаза * ЭтоИнвалид;
		НачислИнвПрибБаза = НачислПрибБаза * ЭтоИнвалид;
		
		// Пенсионный
		Если Пенсионный <= Окр(прПенс1Сотр,2) Тогда
			Пенс1 = Пенсионный;
			Пенс2 = 0;
		Иначе
			Пенс2 = Пенсионный;
			Пенс1 = 0;
		КонецЕсли;
		// Пенсионный по шкале
		//Пенс1 = Мин(Пенсионный,прПенс1Сотр);
		//Пенс2 = Пенсионный - Пенс1;
		ИтПенс1 = ИтПенс1 + Пенс1;
		ИтПенс2 = ИтПенс2 + Пенс2;
		
		// Соцстрах на случай нетрудоспособности
		Если СтрахНетрудосп <= Окр(прСтрахНетрудосп1Сотр,2) Тогда
			СтрахНетрудосп1 = СтрахНетрудосп;
			СтрахНетрудосп2 = 0;
		Иначе
			СтрахНетрудосп2 = СтрахНетрудосп;
			СтрахНетрудосп1 = 0;
		КонецЕсли;
		ИтСтрахНетрудосп1 = ИтСтрахНетрудосп1 + СтрахНетрудосп1;
		ИтСтрахНетрудосп2 = ИтСтрахНетрудосп2 + СтрахНетрудосп2;
		
		//8 и 9
		СотрПенсЗатрат = СтПенОрг*НачислЗатрБаза;
		СотрПенсПриб   = СтПенОрг*НачислПрибБаза;
		
		ИтогСотрПенсЗатрат = ИтогСотрПенсЗатрат + СотрПенсЗатрат;
		ИтогСотрПенсПриб   = ИтогСотрПенсПриб + СотрПенсПриб;
		
		// 12 и 13
		СотрБезрабЗатрат = СтБзрОрг*НачислЗатрБаза;
		СотрБезрабПриб   = СтБзрОрг*НачислПрибБаза;
		
		ИтогСотрБезрабЗатр = ИтогСотрБезрабЗатр + СотрБезрабЗатрат;
		ИтогСотрБезрабПриб = ИтогСотрБезрабПриб + СотрБезрабПриб;
		
		//15 и 16
		СотрСоцСтрахЗатр = СтСоцОрг*НачислЗатрБаза;
		СотрСоцСтрахПриб = СтСоцОрг*НачислПрибБаза;
		
		ИтогСотрСоцСтрахПриб = ИтогСотрСоцСтрахПриб + СотрСоцСтрахПриб;
		ИтогСотрСоцСтрахЗатр = ИтогСотрСоцСтрахЗатр + СотрСоцСтрахЗатр;
		
		СотрСтрахНесчЗатр = СтНесчОрг*НачислЗатрБаза;
		СотрСтрахНесчПриб = СтНесчОрг*НачислПрибБаза;
		
		ИтогСотрСтрахНесчПриб = ИтогСотрСтрахНесчПриб + СотрСтрахНесчПриб;
		ИтогСотрСтрахНесчЗатр = ИтогСотрСтрахНесчЗатр + СотрСтрахНесчЗатр;
		
		Таб.ВывестиСекцию("Сотрудник");
		
		ИтНачислЗатр = ИтНачислЗатр + НачислЗатр;
		ИтНачислПриб = ИтНачислПриб + НачислПриб;
		
		ИтНачислЗатрБаза = ИтНачислЗатрБаза + НачислЗатрБаза;
		ИтНачислПрибБаза = ИтНачислПрибБаза + НачислПрибБаза;
		
		ИтНачислИнвЗатрБаза = ИтНачислИнвЗатрБаза + НачислИнвЗатрБаза;
		ИтНачислИнвПрибБаза = ИтНачислИнвПрибБаза + НачислИнвПрибБаза; 
	КонецЦикла;
	
	ИтПенЗатрОрг 	= СтПенОрг * (ИтНачислЗатрБаза-ИтНачислИнвЗатрБаза);
	ИтПенПрибОрг 	= СтПенОрг * (ИтНачислПрибБаза-ИтНачислИнвПрибБаза);
	ИтПенИнвЗатрОрг = СтПенИнвОрг * ИтНачислИнвЗатрБаза;
	ИтПенИнвПрибОрг = СтПенИнвОрг * ИтНачислИнвПрибБаза;
	ИтСоцЗатрОрг = СтСоцОрг * ИтНачислЗатрБаза;
	ИтСоцПрибОрг = СтСоцОрг * ИтНачислПрибБаза;
	ИтНесчЗатрОрг = СтНесчОрг * ИтНачислЗатрБаза;
	ИтНесчПрибОрг = СтНесчОрг * ИтНачислПрибБаза;
	ИтБзрЗатрОрг = СтБзрОрг * ИтНачислЗатрБаза;
	ИтБзрПрибОрг = СтБзрОрг * ИтНачислПрибБаза;
	Таб.ВывестиСекцию("Дно");
	
	Таб.Показать("Свод отчислений в Фонды","");
КонецПроцедуры

// ===============================
Процедура Печать()
	Перем ТипФормы;
	
	Если ВидНачисления = ОсновнаяЗП Тогда
		ТипыФорм = СоздатьОбъект("СписокЗначений");
		ТипыФорм.ДобавитьЗначение(1,"Расчетно-платежная ведомость");
		ТипыФорм.ДобавитьЗначение(2,"Платежная ведомость");
		ТипыФорм.ДобавитьЗначение(3,"Расчетные листки");
		ТипыФорм.ДобавитьЗначение(4,"Свод отчислений в фонды");
		Если ТипыФорм.ВыбратьЗначение(ТипФормы,"Виберите тип формы",2,0,1) = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе	
		ТипФормы = 2;
	КонецЕсли;
	
	глУстПропись(Гривня);
	ДатаВед = ПериодСтр(НачМесяца(МесяцНачисленияЗП), КонМесяца(МесяцНачисленияЗП));
	Директор = глФИО(Фирма.Руководитель.Получить(МесяцНачисленияЗП),1);
	ГлавБух = глФИО(Фирма.ГлавныйБухгалтер.Получить(МесяцНачисленияЗП),1);
	Пк1 = Сред(Фирма.ЕДРПОУ,1,1); Пк2 = Сред(Фирма.ЕДРПОУ,2,1);
	Пк3 = Сред(Фирма.ЕДРПОУ,3,1); Пк4 = Сред(Фирма.ЕДРПОУ,4,1);
	Пк5 = Сред(Фирма.ЕДРПОУ,5,1); Пк6 = Сред(Фирма.ЕДРПОУ,6,1);
	Пк7 = Сред(Фирма.ЕДРПОУ,7,1); Пк8 = Сред(Фирма.ЕДРПОУ,8,1);
	Таб = СоздатьОбъект("Таблица");
	Таб.Опции(0,0,0,0);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	
	СуффиксТаблицы = ?(Константа.ФормыНаУкраинском = Да,"_Укр","");
	Если ТипФормы = 1 Тогда
		ПрефиксТаблицы = "РасчПлатВед";
	ИначеЕсли ТипФормы = 2 Тогда
		ПрефиксТаблицы = "ПлатВед";
	ИначеЕсли ТипФормы = 3 Тогда
		ПрефиксТаблицы = "Листки";
	Иначе
		ПрефиксТаблицы = "Свод";
	КонецЕсли;
	Таб.ИсходнаяТаблица(ПрефиксТаблицы+СуффиксТаблицы);
	
	Если ТипФормы = 1 Тогда
		РасчПлатВед(); // расчетно-платежная ведомость
	ИначеЕсли ТипФормы = 2 Тогда
		ПлатВед(); // платежная ведомость
	ИначеЕсли ТипФормы = 3 Тогда
		РасчетныеЛистки(); // расчетный листок
	Иначе
		СводОтчислений(); // свод отчислений в фонды
	КонецЕсли;
КонецПроцедуры

// ======================================
Процедура ПриНачалеВыбораЗначения(Рекв,ФлагСтандОбр)
	Если Рекв = "Сотрудник" Тогда
        ФлагСтандОбр = 0;
		КонтФирмы = Фирма;
		ОткрытьФорму("Справочник.Сотрудники.ДляВыбора",КонтФирмы);
	КонецЕсли;
КонецПроцедуры 

//====================================================================== //--- УМК Сандомирский В.Ю. (08.07.14)
Процедура НайтиСотрудникаВТабеле()
	
	СписТабеля = СоздатьОбъект("СписокЗначений");
	
	ДокТабель = СоздатьОбъект("Документ.УМК_Табель");		
	ЕстьТабель = 0;
	ДокТабель.УстановитьФильтр(1,0,1);
	ДокТабель.ВыбратьДокументы(НачМесяца(МесяцНачисленияЗП),КонМесяца(МесяцНачисленияЗП));
	Пока ДокТабель.ПолучитьДокумент() = 1 Цикл 
		
		Если ДокТабель.перГрафикТабель = 2 Тогда  //--- это График
			Продолжить;
		КонецЕсли;
		
		ДокТабель.ВыбратьСтроки();
		Пока ДокТабель.ПолучитьСтроку() = 1 Цикл
			Если ДокТабель.Сотрудник = Сотрудник Тогда
				ТекСотрудник = Сотрудник;
				ОткрытьФорму(ДокТабель.ТекущийДокумент(),ТекСотрудник);					
			КонецЕсли;	
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры // НайтиСотрудникаВТабеле

//====================================================================== //--- УМК Сандомирский В.Ю. (05.02.15)
Процедура РасчитатьПрофсоюзныйСотрудника()
	
	//--- Обнуляем профсоюзный
	Профсоюзный = 0;
	ВычУдержано();
	
	//--- Условия расчета профсоюзного
	Окладник = 0;
	Если Сотрудник.Оклад.Получить(МесяцНачисленияЗП) > 0 Тогда
		Окладник = 1;
	КонецЕсли;
	
	//--- флажок только окладникам
	Если (ТолькоОкладникиПрофсоюзный = 1) И (Окладник = 0) Тогда
		Возврат;		
	КонецЕсли;
	
	//--- Профсоюзный берем только с суммы сотрудника
 	Если Начислено <= ПределПрофсоюзного Тогда
		Возврат;
	КонецЕсли;

	//--- Расчет профсоюзного	
	Профсоюзный = Начислено * ПроцентПрофсоюзного / 100;
	ВычУдержано();
	
КонецПроцедуры // РасчитатьПрофсоюзныйСотрудника

//====================================================================== //--- УМК Сандомирский В.Ю. (05.02.15)
Процедура РассчитатьПрофсоюзный()
	ВыбЗначение = 0;
	МенюРассчитать = СоздатьОбъект("СписокЗначений");
	МенюРассчитать.ДобавитьЗначение(1,"&Текущего сотрудника");
	МенюРассчитать.ДобавитьЗначение(2,"&Всех сотрудников");
	МенюРассчитать.ДобавитьЗначение(3,"&Очистить профсоюзный во всем документе");
	Если МенюРассчитать.ВыбратьЗначение(ВыбЗначение,"Виберите тип рассчета",2,0,1) = 0 Тогда
		Возврат;
	КонецЕсли;
	            
	Если ВыбЗначение = 1  Тогда
	   		РасчитатьПрофсоюзныйСотрудника();
	ИначеЕсли ВыбЗначение = 2 Тогда   
	   	Состояние("Пересчет всех сотрудников профсоюзный");
	   	ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			РасчитатьПрофсоюзныйСотрудника();
		КонецЦикла;
	ИначеЕсли ВыбЗначение = 3 Тогда   	
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Профсоюзный = 0;
			ВычУдержано();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьПрофсоюзный()

//====================================================================== //--- УМК Сандомирский В.Ю. (20.03.15)
Процедура УстМесяцНачисленияЗП()
	ПериодВед = ПериодСтр(МесяцНачисленияЗП, КонМесяца(МесяцНачисленияЗП));
	глСохранитьЗначение(Контекст,"МесяцНачисленияЗП",МесяцНачисленияЗП);
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю. (20.03.15)
Процедура ИзмМесяцНачисленияЗП()
	Мес = глВосстановитьЗначение(Контекст,"МесяцНачисленияЗП");
	МесяцНачисленияЗП = НачМесяца(МесяцНачисленияЗП);
	УстМесяцНачисленияЗП();
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю. (24.03.15)
Процедура ИзмДата()
	МесяцНачисленияЗП = НачМесяца(МесяцНачисленияЗП);
	ИзмМесяцНачисленияЗП();
КонецПроцедуры // ИзмДата()

// ===============================
// Инициализируем список действий по кнопке "Действия"
СписокДействий = глПолучитьСписокДействий("
	|ДвиженияДокумента,
	|ОткрытьВЖурнале");

ГруппаСотр.ВыборГруппы(1);