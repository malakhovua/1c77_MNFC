Перем ИтМ;
Перем Запр8Класс, ЗапрРеализация, ЗапрОборотыРеализации, ЗапрСписНаРасходы, ЗапрСписВПроизв, ЗапрСписНаКапИнвест, ЗапрИспользМатВПроизв;

Перем ДатаНач, ДатаКон;
Перем СчетаТоваров, спСчетаТоваров, СчетаМатериалов, спСчетаМатериалов;
Перем СчетаЗапасов, спСчетаЗапасов, СчетТЗР;

Перем тбПроизвЗатраты;
Перем СписаноВсего, СписаноНаРеализацию, СписаноНаРасх, СписаноНаКапИнвест, СписаноПоПеремещениям, СписаноВПроизв;

//===============================
Функция ПроверкаШапки()
	глВсеВыбрано = 1;
    глВыбранЛи(Фирма,"Фирма");
	
	// проверим наличие аналогичного документа
	Док = СоздатьОбъект("Документ.РаспределениеТЗР");
	Док.ВыбратьДокументы(НачМесяца(ДатаДок),КонМесяца(ДатаДок));
	Пока Док.ПолучитьДокумент()=1 Цикл
		Если (Док.Фирма = Фирма) И (Док.ТекущийДокумент() <> ТекущийДокумент()) Тогда
			глКомментарий("Документ ""Распределение ТЗР"" по фирме """+Фирма+""" уже внесен в базу "+Док.ДатаДок+" !",0);
			глВсеВыбрано = 0;
		КонецЕсли;
	КонецЦикла;
	Возврат глВсеВыбрано;
КонецФункции  //ПроверкаШапки

// ===============================
// Назначение:
//		Процедура используется для обхода погрешностей округления при дооценке 
//		списанных запасов во всех процедурах дооценки /ПересчитатьХХХ()/
//		Когда дооценивается последняя "порция" запасов, сумма вычисляется как 
//		остаток, в противном случае пропорционально
//		Функция не должна вызываться более одного раза для одних и тех же запасов
// Аргументы:
//		БазаВсего			- вся база, пропорционально которой распределяем
//		ОбработанаБаза 		- уже обработанная база
//		ТекЗначениеБазы 	- значение базы, которое дооцениваем в данный момент
// 		ВсегоРаспределить	- общая сумма, которую распределяем пропорционально базе
// 		ОсталосьРаспределить - какую сумму осталось распределить
// Возвращает:
//		Сумму дооценки
Функция ПолучитьСуммуДооценки(БазаВсего, ОбработанаБаза, ТекЗначениеБазы, ВсегоРаспределить, ОсталосьРаспределить)
Перем ТекСумма;

	ОбработанаБаза = ОбработанаБаза + ТекЗначениеБазы;
	
	Если БазаВсего = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Если ОбработанаБаза = БазаВсего Тогда
	    // вот она, последняя порция
		ТекСумма = ОсталосьРаспределить;
	Иначе
		// пропорционально
		ТекСумма = Окр(ТекЗначениеБазы * ВсегоРаспределить / БазаВсего,2);
	КонецЕсли;
	ОсталосьРаспределить = ОсталосьРаспределить - ТекСумма;
	Возврат ТекСумма;
КонецФункции //ПолучитьСуммуДооценки

// ===============================
// Назначение:
//		Формирует запрос по кредитовым оборотам 8 класса
// Возвращает:
//		1 - успешно, 0 - ошибка
Функция Запр8Класс()
	Запр8Класс = СоздатьОбъект("БухгалтерскиеИтоги");
	Запр8Класс.ИспользоватьРазделительУчета(Фирма);
	Запр8Класс.ВключатьСубсчета(-1,-1);
	Запр8Класс.ИспользоватьСубконто(ВидыСубконто.ВидыДеятельности);
	Запр8Класс.ИспользоватьСубконто(ВидыСубконто.Подразделения);
	Запр8Класс.ИспользоватьСубконто(ВидыСубконто.ВидыЗатрат);
	
	Состояние("Выполняется запрос по 8 классу счетов.");
	глКомментарий("Выполняется запрос по 8 классу счетов.",2);
	
	Если Запр8Класс.ВыполнитьЗапрос(ДатаНач,ДатаКон,"80,84,85",,,2,,"С") = 0 Тогда 
		// счета 81-83 в принципе не используются для материальных затрат, их и не анализируем
	    глКомментарий("Не выполнился запрос по 8 классу счетов!",0);
	    Возврат 0;
	КонецЕсли;
	Возврат 1
КонецФункции //Запр8Класс

// ===============================
// Назначение:
//		Формирует запрос по реализации запасов
Функция ЗапрРеализация()
	СчетРеализации = ?(ИспользоватьСчетаРасходов = Класс8, "79", "90,943");
	
	ЗапрРеализация = СоздатьОбъект("БухгалтерскиеИтоги");
	ЗапрРеализация.ИспользоватьРазделительУчета(Фирма);
	ЗапрРеализация.ВключатьСубсчета(-1,-1);
	ЗапрРеализация.ИспользоватьКорСубконто(ВидыСубконто.ВидыДеятельности);
	ЗапрРеализация.ИспользоватьКорСубконто(ВидыСубконто.Подразделения);
	
	Состояние("Выполняется запрос по реализации запасов.");
	глКомментарий("Выполняется запрос по реализации запасов.",2);
	
	Если ЗапрРеализация.ВыполнитьЗапрос(ДатаНач, ДатаКон, СчетаТоваров+","+СчетаМатериалов, СчетРеализации, ,2, ,5) = 0 Тогда
	    глКомментарий("Не выполнился запрос по реализации запасов!",0);
		Возврат 0
	КонецЕсли;
	
	Если Константа.ОтражатьТЗРвОборотах = 3 Тогда
		// нужны подробные данные по реализации каждой номенклатурной позиции
		
		стрДатаКон = ?(ДатаКон >= ПолучитьДатуТА(), "", " по ДатаКон");
		ТекстЗапр = 	"//{{ЗАПРОС(ЗапрОборотыРеализации)
		|Период с ДатаНач"+стрДатаКон+";
		|Фир = Регистр.Обороты.Фирма;
		|ТМЦ = Регистр.Обороты.ТМЦ;
		|РасходСум = Регистр.Обороты.РасходСум;
		|Доход = Регистр.Обороты.Доход;
		|Счет = Регистр.Обороты.Счет;
		|ВиД = Регистр.Обороты.ВидДеятельности;
		|Пар = Регистр.Обороты.Партия;
		|Функция Оборот = Сумма(РасходСум);
		|Функция Себест = Сумма(РасходСум-Доход);
		|Группировка Счет без упорядочивания без групп;
		|Группировка ВиД без упорядочивания без групп;
		|Группировка ТМЦ без упорядочивания без групп;
		|Группировка Пар без упорядочивания;
		|Условие(Фир = Фирма);
		|"//}}ЗАПРОС
		;
		
		ЗапрОборотыРеализации = СоздатьОбъект("Запрос");
		Если ЗапрОборотыРеализации.Выполнить(ТекстЗапр) = 0 Тогда
			глКомментарий("Не выполнился запрос по оборотам реализации запасов!",0);
		    Возврат 0
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1
КонецФункции //ЗапрРеализация

// ===============================
// Назначение:
//		Формирует запрос по списанию запасов на расходы, отличные от производства
Функция ЗапрСписНаРасходы()
	ЗапрСписНаРасходы = СоздатьОбъект("БухгалтерскиеИтоги");
	ЗапрСписНаРасходы.ИспользоватьРазделительУчета(Фирма);
	ЗапрСписНаРасходы.ВключатьСубсчета(-1,-1);
	ЗапрСписНаРасходы.ИспользоватьКорСубконто(ВидыСубконто.ВидыДеятельности);
	ЗапрСписНаРасходы.ИспользоватьКорСубконто(ВидыСубконто.Подразделения);
	ЗапрСписНаРасходы.ИспользоватьКорСубконто(ВидыСубконто.ВидыЗатрат);
	
	Состояние("Выполняется запрос по списанию на расходы.");
	глКомментарий("Выполняется запрос по списанию на расходы.",2);
	
	СчетаРасходов = "24,80,81,82,83,84,85,91,92,93,94,95,96,97,99"; // все кроме себестоимости реализации и налога на прибыль + брак
	Если ЗапрСписНаРасходы.ВыполнитьЗапрос(ДатаНач,ДатаКон, СчетаТоваров+","+СчетаМатериалов,СчетаРасходов,,2,,5) = 0 Тогда
	    глКомментарий("Не выполнился запрос по списанию на расходы!",0);
		Возврат 0;
	КонецЕсли;
	
	Возврат 1
КонецФункции //ЗапрСписНаРасходы

// ===============================
// Назначение:
//		Формирует запрос по списанию запасов в производство
//		Используется, если включен только 9 класс счетов, 
//		только в этом случае есть прямая корреспонденция Д23 К2х
Функция ЗапрСписВПроизв()
	ЗапрСписВПроизв = СоздатьОбъект("БухгалтерскиеИтоги");
	ЗапрСписВПроизв.ИспользоватьРазделительУчета(Фирма);
	ЗапрСписВПроизв.ВключатьСубсчета(-1,-1);
	ЗапрСписВПроизв.ИспользоватьКорСубконто(ВидыСубконто.ВидыДеятельности);
	ЗапрСписВПроизв.ИспользоватьКорСубконто(ВидыСубконто.Подразделения);
	
	Состояние("Выполняется запрос по списанию в производство.");
	глКомментарий("Выполняется запрос по списанию в производство.",2);
	
	Если ЗапрСписВПроизв.ВыполнитьЗапрос(ДатаНач,ДатаКон, СчетаТоваров+","+СчетаМатериалов,"231",,2,,5) = 0 Тогда
	    глКомментарий("Не выполнился запрос по списанию в производство!",0);
		Возврат 0;
	КонецЕсли;
	
	Возврат 1
КонецФункции //ЗапрСписВПроизв

// ===============================
// Назначение:
//		Формирует запрос по списанию партий продукции на капитальные инвестиции
//		(15 счет, создание и модернизация своих необоротных активов) 
Функция ЗапрСписНаКапИнвест()
	ЗапрСписНаКапИнвест = СоздатьОбъект("БухгалтерскиеИтоги");
	ЗапрСписНаКапИнвест.ИспользоватьРазделительУчета(Фирма);
	ЗапрСписНаКапИнвест.ВключатьСубсчета(-1,-1);
	ЗапрСписНаКапИнвест.ИспользоватьКорСубконто(ВидыСубконто.Инвестиции);
	
	Состояние("Выполняется запрос по списанию запасов на капитальные инвестиции.");
	глКомментарий("Выполняется запрос по списанию запасов на капитальные инвестиции.",2);
	
	Если ЗапрСписНаКапИнвест.ВыполнитьЗапрос(ДатаНач,ДатаКон,СчетаТоваров+","+СчетаМатериалов,"15",,2,,5) = 0 Тогда
	    глКомментарий("Не выполнился запрос по списанию запасов на капитальные инвестиции!",0);
		Возврат 0;
	КонецЕсли;
	
	Возврат 1
КонецФункции //ЗапрСписНаКапИнвест

// ===============================
// Назначение:
//		Формирует запрос по использованию материалов в производстве
// Возвращает:
//		1 - успешно, 0 - ошибка
Функция ЗапрИспользМатВПроизв()
	стрДатаКон = ?(ДатаКон >= ПолучитьДатуТА(), "", " по ДатаКон");
	ПустойМатериал = ПолучитьПустоеЗначение("Справочник.ТМЦ");
	
    ТекстЗапр = 	"//{{ЗАПРОС(ИспользМатВПроизв)
	|Период с ДатаНач"+стрДатаКон+";
	|Фир = Регистр.ПроизводственныеЗатраты.Фирма;
	|ВиД = Регистр.ПроизводственныеЗатраты.ВидДеятельности;
	|Под = Регистр.ПроизводственныеЗатраты.Подразделение;
	|Про = Регистр.ПроизводственныеЗатраты.Продукция;
	|ВиЗ = Регистр.ПроизводственныеЗатраты.ВидЗатрат;
	|Зак = Регистр.ПроизводственныеЗатраты.Заказ;
	|Мат = Регистр.ПроизводственныеЗатраты.Материал;
	|Сум = Регистр.ПроизводственныеЗатраты.Сумма;
	|Функция СуммаИспользовано = Приход(Сум);
	|Группировка ВиД без упорядочивания без групп;
	|Группировка Под без упорядочивания без групп;
	|Группировка ВиЗ без упорядочивания без групп;
	|Группировка Зак без упорядочивания;
	|Группировка Про без упорядочивания без групп;
	|Группировка Мат без упорядочивания без групп;
	|Условие(Фир = Фирма);
	|Условие(Мат <> ПустойМатериал);
	|Условие(Сум > 0); // возвраты из производства пропускаем
	|"//}}ЗАПРОС
	;
	
	Состояние("Выполняется запрос по использованию материалов в производстве.");
	глКомментарий("Выполняется запрос по использованию материалов в производстве.",2);
	
	ЗапрИспользМатВПроизв = СоздатьОбъект("Запрос");
	Если ЗапрИспользМатВПроизв.Выполнить(ТекстЗапр) = 0 Тогда
	    глКомментарий("Не выполнился запрос по использованию материалов в производстве!",0);
		Возврат 0
	КонецЕсли;
	
	Возврат 1
КонецФункции //ЗапрИспользМатВПроизв

// ===============================
Функция РассчитатьШапку()
	ИтМ = СоздатьОбъект("БухгалтерскиеИтоги");
	ИтМ.ИспользоватьРазделительУчета(Фирма);
	ИтМ.ПериодМ(ДатаДок);
	
	ДатаНач = НачМесяца(ДатаДок);
	ДатаКон = КонМесяца(ДатаДок);
	
	СчетаТоваров = "281,2821,283,2841,2842,2843,2851";
	спСчетаТоваров = СоздатьОбъект("СписокЗначений");
	спСчетаТоваров.ИзСтрокиСРазделителями(""""+СтрЗаменить(СчетаТоваров,",",""",""")+"""");
	СчетаМатериалов = "201,202,203,204,205,206,207,208,2091";
	Если ИспользоватьСчетаРасходов <> Класс9 Тогда
	    // учтем также и 22 счет
		СчетаМатериалов = СчетаМатериалов + ",22";
	Иначе
		// не получится корректно дооценить списание МБП в производство 
		// (это особенность используемого в конфигурации способа отражения производственных затрат)
		// ТЗР на счет 22 ("МБП") вообще не распределяем
	КонецЕсли;
	спСчетаМатериалов = СоздатьОбъект("СписокЗначений");
	спСчетаМатериалов.ИзСтрокиСРазделителями(""""+СтрЗаменить(СчетаМатериалов,",",""",""")+"""");
	
	тбПроизвЗатраты = СоздатьОбъект("ТаблицаЗначений");
	тбПроизвЗатраты.НоваяКолонка("КодСчетаЗапасов","Строка");
	тбПроизвЗатраты.НоваяКолонка("ВиД",	"Справочник.ВидыДеятельности");
	тбПроизвЗатраты.НоваяКолонка("Под",	"Справочник.Подразделения");
	тбПроизвЗатраты.НоваяКолонка("ВиЗ",	"Справочник.ВидыЗатрат");
	тбПроизвЗатраты.НоваяКолонка("СуммаТЗР","Число",16,2);
	
	// вспомогательные запросы
	Если ИспользоватьСчетаРасходов = Класс9 Тогда
		Если ЗапрСписВПроизв() = 0 Тогда
		    Возврат 0;
		КонецЕсли;
	Иначе
		Если Запр8Класс() = 0 Тогда
		    Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Если ЗапрРеализация() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	Если ЗапрСписНаРасходы() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	Если ЗапрСписНаКапИнвест() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	Если ЗапрИспользМатВПроизв() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Возврат 1
КонецФункции //РассчитатьШапку

// ===============================
// Назначение:
//		Рассчитывает, какая часть запасов была списана, а также разбивает суммы
//		списания не несколько групп - в производство, на расходы и проч.
// Возвращает:
//		Коэффициент списания
Функция РассчитатьКоэфСписания()
Перем ТекСумма, СписаноНа8Класс;

	СписаноВсего = 0; ОстатокНач = 0; ПришлоВсего = 0;
    СписаноНаРеализацию = 0; СписаноНаРасх = 0; СписаноВПроизв = 0; СписаноНаКапИнвест = 0; СписаноПоПеремещениям = 0;
	
	Ит = СоздатьОбъект("БухгалтерскиеИтоги");
	Ит.ВключатьСубсчета(-1,-1);
	Ит.ИспользоватьРазделительУчета(Фирма);
	Ит.ВыполнитьЗапрос(ДатаНач,ДатаКон, СчетаЗапасов,,,3,,"С");
	
	ОстатокНач = Ит.СНД() - Ит.СНК(); // по всем счетам из списка
	
	// анализируем кредит для определения сумм списания
	Ит.ВыбратьКорСчета(,2);
	Пока Ит.ПолучитьКорСчет() = 1 Цикл
		КодКорСчета = Ит.КорСчет.Код;
		Если спСчетаЗапасов.НайтиЗначение(КодКорСчета) > 0 Тогда
		    // перемещение на один из счетов анализируемой группы не есть списание
			Продолжить;
		ИначеЕсли Лев(КодКорСчета,2) = "15" Тогда
		    // на кап. инвестиции
			СписаноНаКапИнвест = СписаноНаКапИнвест + Ит.КорКО();
		ИначеЕсли (Лев(КодКорСчета,2) = "20") или (Лев(КодКорСчета,2) = "22") или (Лев(КодКорСчета,2) = "28") Тогда
		    // перемещение между запасами, но на счета другой группы
			СписаноПоПеремещениям = СписаноПоПеремещениям + Ит.КорКО();
		ИначеЕсли (Лев(КодКорСчета,2) = "90") или (Лев(КодКорСчета,3) = "943") или ((Лев(КодКорСчета,2) = "79") и (ИспользоватьСчетаРасходов = Класс8)) Тогда
		    // реализация
			СписаноНаРеализацию = СписаноНаРеализацию + Ит.КорКО();
		ИначеЕсли (Лев(КодКорСчета,1) = "9") или (Лев(КодКорСчета,1) = "8") или (Лев(КодКорСчета,2) = "24") Тогда 
		    // списано на расходы (включая производственные при включенном 8 классе счетов)
			СписаноНаРасх = СписаноНаРасх + Ит.КорКО();
		ИначеЕсли Лев(КодКорСчета,3) = "231" Тогда
		    // списано в производство напрямую (если только 9 класс счетов)
			СписаноВПроизв = СписаноВПроизв + Ит.КорКО();
		Иначе
			глКомментарий("Запасы списывались на счет "+КодКорСчета+" обработка которого не предусмотрена конфигурацией! Проверьте правильность списания запасов.",1);
			глКомментарий("    Предусмотрено списание запасов в производство, на расходы, на реализацию, капитальные инвестиции.",3);
			Продолжить;
		КонецЕсли;
		СписаноВсего = СписаноВсего + Ит.КорКО();
	КонецЦикла; // по корр счетам
	
	// анализируем дебет для определения сумм прихода
	Ит.ВыбратьКорСчета(,1);
	Пока Ит.ПолучитьКорСчет() = 1 Цикл
		КодКорСчета = Ит.КорСчет.Код;
		Если спСчетаЗапасов.НайтиЗначение(КодКорСчета) > 0 Тогда
		    // перемещение в пределах анализируемой группы не есть приход
			Продолжить;
		КонецЕсли;
		ПришлоВсего = ПришлоВсего + Ит.КорДО();
	КонецЦикла;
	
	Возврат ?(ПришлоВсего+ОстатокНач = 0, 0, СписаноВсего/(ПришлоВсего+ОстатокНач));
КонецФункции //РассчитатьКоэфСписания

// ===============================
// Назначение:
//		Пересчитывает себестоимость реализации
// Аргументы:
//		СуммаТЗРНаРеализацию - сумма ТЗР, которая приходится на реализацию
// Возвращает:
//		1 - успешно, 0 - ошибка
Функция ПересчитатьРеализацию(СуммаТЗРНаРеализацию)
	Состояние("Пересчитывается реализация.");
	глКомментарий("Пересчитывается реализация.",2);
	
	ОбработаноРеализации = 0;
	ОсталосьТЗР = СуммаТЗРНаРеализацию;

	ЗапрРеализация.ВыбратьСчета();
	Пока ЗапрРеализация.ПолучитьСчет() = 1 Цикл
		КодСчета = ЗапрРеализация.Счет.Код;
		Если спСчетаЗапасов.НайтиЗначение(КодСчета) = 0 Тогда
		    Продолжить; // пропускаем счета другой группы
		КонецЕсли;
		
		ЗапрРеализация.ВыбратьКорСчета();
		Пока ЗапрРеализация.ПолучитьКорСчет() = 1 Цикл
			ЗапрРеализация.ВыбратьКорСубконто(1);
			Пока ЗапрРеализация.ПолучитьКорСубконто(1) = 1 Цикл
				ЗапрРеализация.ВыбратьКорСубконто(2);
				Пока ЗапрРеализация.ПолучитьКорСубконто(2) = 1 Цикл
					ТекСуммаТЗР = ПолучитьСуммуДооценки(СписаноНаРеализацию, ОбработаноРеализации, ЗапрРеализация.КорКО(), СуммаТЗРНаРеализацию, ОсталосьТЗР);
					глПроводка(Контекст, ЗапрРеализация.КорСчет, СчетТЗР, ТекСуммаТЗР, "Распределение ТЗР на реализацию", , ЗапрРеализация.КорСубконто(1), ЗапрРеализация.КорСубконто(2), ,
					,,, ,,"ТЗ");
					СуммаТЗРпоСчету = СуммаТЗРпоСчету + ТекСуммаТЗР;
				КонецЦикла; // подразделения
			КонецЦикла; // виды деятельности
		КонецЦикла; // корр счета
	КонецЦикла; //счета
	
	// учтем в оборотах
	Если Константа.ОтражатьТЗРвОборотах = 2 Тогда
	    // сводной суммой
		Если СуммаТЗРНаРеализацию <> 0 Тогда
			Регистр.Обороты.Движение(Фирма,,СчетПоКоду(СчетТЗР),,,, ,,,,-СуммаТЗРНаРеализацию,Продажа,);
		КонецЕсли;
	ИначеЕсли Константа.ОтражатьТЗРвОборотах = 3 Тогда
	    // разобьем по каждой проданной позиции номенклатуры
		ОбработаноРеализации = 0;
		ОсталосьТЗР = СуммаТЗРНаРеализацию;
		
		// посчитаем весь оборот
		ЗапрОборотыРеализации.вНачалоВыборки();
		СебестВсего = 0;
		Пока ЗапрОборотыРеализации.Группировка("Счет") = 1 Цикл
			КодСчета = ЗапрОборотыРеализации.Счет.Код;
			Если спСчетаЗапасов.НайтиЗначение(КодСчета) > 0 Тогда
			    СебестВсего = СебестВсего + ЗапрОборотыРеализации.Себест;
			КонецЕсли;
		КонецЦикла;
		
		// посчитаем оборот каждой позиции номенклатуры
		ЗапрОборотыРеализации.вНачалоВыборки();
		Пока ЗапрОборотыРеализации.Группировка("Счет") = 1 Цикл
			КодСчета = ЗапрОборотыРеализации.Счет.Код;
			Если спСчетаЗапасов.НайтиЗначение(КодСчета) = 0 Тогда
			    Продолжить;
			КонецЕсли;
			
			Пока ЗапрОборотыРеализации.Группировка("ВиД") = 1 Цикл
				Пока ЗапрОборотыРеализации.Группировка("ТМЦ") = 1 Цикл
					Пока ЗапрОборотыРеализации.Группировка("Пар") = 1 Цикл
						ТекСебест = ЗапрОборотыРеализации.Себест;
						Если ТекСебест = 0 Тогда
						    Продолжить;
						КонецЕсли;
						
						ТекСуммаТЗР = ПолучитьСуммуДооценки(СебестВсего, ОбработаноРеализации, ТекСебест, СуммаТЗРНаРеализацию, ОсталосьТЗР);
						// по каждой позиции увеличиваем стоимость прихода (закупки), уменьшаем доход
						Если ТекСуммаТЗР <> 0 Тогда
							Регистр.Обороты.Движение(Фирма,ЗапрОборотыРеализации.ТМЦ,СчетПоКоду(СчетТЗР),,,ЗапрОборотыРеализации.ВиД, ТекСуммаТЗР,,,,-ТекСуммаТЗР,Продажа,ЗапрОборотыРеализации.Пар);
						КонецЕсли;
					КонецЦикла; // Партия
				КонецЦикла; // ТМЦ
			КонецЦикла; // Вид деятельности
		КонецЦикла; // Счет
		
		Если СуммаТЗРНаРеализацию <> 0 Тогда
			// сторнируем сводную стоимость прихода (закупок) ТЗР 
			// она распределена в цикле выше между конкретными позициями ТМЦ
			Регистр.Обороты.Движение(Фирма,,СчетПоКоду(СчетТЗР),,,, -СуммаТЗРНаРеализацию,,,,,Закупка,);
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1
КонецФункции //ПересчитатьРеализацию

// ===============================
// Назначение:
//		Добавляет информацию о производственных затратах в таблицу
// Аргументы:
//		Код счета запасов, вид деятельности, подразделение, вид затрат и сумма затрат
Процедура УчестьПроизвЗатраты(КодСчетаЗапасов, ВиД, Под, ВиЗ, СуммаТЗР)
	тбПроизвЗатраты.НоваяСтрока();
	тбПроизвЗатраты.КодСчетаЗапасов = КодСчетаЗапасов;
	тбПроизвЗатраты.ВиД = ВиД;
	тбПроизвЗатраты.Под = Под;
	тбПроизвЗатраты.ВиЗ = ВиЗ;
	тбПроизвЗатраты.СуммаТЗР = СуммаТЗР;
КонецПроцедуры //УчестьПроизвЗатраты

// ===============================
// Назначение:
//		Пересчитывает стоимость запасов, списанных на расходы
// Аргументы:
//		СуммаТЗРНаРасх - сумма ТЗР, которая приходится на расходы
// Возвращает:
//		1 - успешно, 0 - ошибка
Функция ПересчитатьСписНаРасходы(СуммаТЗРНаРасх)
	Состояние("Пересчитывается списание на расходы.");
	глКомментарий("Пересчитывается списание на расходы.",2);
	
	ОбработаноРасходов = 0;
	ОсталосьТЗР = СуммаТЗРНаРасх;
	
	ЗапрСписНаРасходы.ВыбратьСчета();
	Пока ЗапрСписНаРасходы.ПолучитьСчет() = 1 Цикл
		КодСчета = ЗапрСписНаРасходы.Счет.Код;
		Если спСчетаЗапасов.НайтиЗначение(КодСчета) = 0 Тогда
		    Продолжить; // счет другой группы
		КонецЕсли;
		
		ЗапрСписНаРасходы.ВыбратьКорСчета();
		Пока ЗапрСписНаРасходы.ПолучитьКорСчет() = 1 Цикл
			Счет8 = ЗапрСписНаРасходы.КорСчет;
			ЗапрСписНаРасходы.ВыбратьКорСубконто(1);
			Пока ЗапрСписНаРасходы.ПолучитьКорСубконто(1) = 1 Цикл
				ВиД = ЗапрСписНаРасходы.КорСубконто(1);
				ЗапрСписНаРасходы.ВыбратьКорСубконто(2);
				Пока ЗапрСписНаРасходы.ПолучитьКорСубконто(2) = 1 Цикл
					Под = ЗапрСписНаРасходы.КорСубконто(2);
					ЗапрСписНаРасходы.ВыбратьКорСубконто(3);
					Пока ЗапрСписНаРасходы.ПолучитьКорСубконто(3) = 1 Цикл
						ВиЗ = ЗапрСписНаРасходы.КорСубконто(3);
						
						ТекСумма8Класс = ЗапрСписНаРасходы.КорКО();
						ТекСуммаТЗР = ПолучитьСуммуДооценки(СписаноНаРасх, ОбработаноРасходов, ТекСумма8Класс, СуммаТЗРНаРасх, ОсталосьТЗР);
						
					    // делаем проводку на этот счет
						глПроводка(Контекст, Счет8, СчетТЗР, ТекСуммаТЗР, "Распределение ТЗР на расходы", , ВиД, Под, ВиЗ,
						,,, ,,"ТЗ");
						
						Если ИспользоватьСчетаРасходов <> Класс9 Тогда
							// при использовании 8 класса расходы с него могли быть списаны на счета класса 9, 23, 24
							// нужно дооценить и их также
							
							// спозиционируемся в запросе по 8 классу на выбранные Счет8, ВиД, Под и ВиЗ
							Запр8Класс.ВыбратьСчета();
							Если Запр8Класс.ПолучитьСчет(, Счет8) = 1 Тогда
							    Запр8Класс.ВыбратьСубконто(1);
								Если Запр8Класс.ПолучитьСубконто(1,,ВиД) = 1 Тогда
								    Запр8Класс.ВыбратьСубконто(2);
									Если Запр8Класс.ПолучитьСубконто(2,,Под) = 1 Тогда
									    Запр8Класс.ВыбратьСубконто(3);
										Если Запр8Класс.ПолучитьСубконто(3,,ВиЗ) = 1 Тогда
										    // спозиционировались, просмотрим корр счета
											ТекВсегоПоКредиту8 = Запр8Класс.КО(); // общий КО по конкретным ВиД, Под, ВиЗ
											ОбработаноПоКредиту8 = 0;
											ОсталосьТЗР8 = ТекСуммаТЗР;
											
											// зная общую сумму, распределим между корр счетами без погрешностей округления
											Запр8Класс.ВыбратьКорСчета();
											Пока Запр8Класс.ПолучитьКорСчет() = 1 Цикл
												КодКорСчета8 = Запр8Класс.КорСчет.Код;
												ТекСуммаТЗР8 = ПолучитьСуммуДооценки(ТекВсегоПоКредиту8, ОбработаноПоКредиту8, Запр8Класс.КорКО(), ТекСуммаТЗР, ОсталосьТЗР8);
												Если Лев(КодКорСчета8,2) = "79" Тогда
												    // даже если фин. результаты уже внесены, мы их не корректируем, 
													// они откорректируются при проведении документа ФинансовыеРезультаты
													// приходящаяся на них сумма ТЗР останется "висеть" на этом счете 8 класса
													Продолжить;
												КонецЕсли;
												// переброска суммы со счета 8 класса на 9, 24
												глПроводка(Контекст, КодКорСчета8, Счет8, ТекСуммаТЗР8, "Распределение ТЗР на расходы", , ВиД, Под, ВиЗ,
												ВиД,Под,ВиЗ, ,,"ТЗ");
												Если Лев(КодКорСчета8,3) = "231" Тогда
												    // учтем списание в производство
													УчестьПроизвЗатраты(КодСчета, ВиД, Под, ВиЗ, ТекСуммаТЗР8);
												КонецЕсли;
											КонецЦикла;
										КонецЕсли; // вид затрат
									КонецЕсли; // подразделение 
								КонецЕсли; // вид деятельности
							КонецЕсли; // счет 8 класса
						КонецЕсли;
						
					КонецЦикла; // вид затрат
				КонецЦикла; // подразделение
			КонецЦикла; // вид деятельности
		КонецЦикла; // счет расходов
	КонецЦикла; // счет запасов
	
    Возврат 1
КонецФункции //ПересчитатьСписНаРасходы

// ===============================
// Назначение:
//		Пересчитывает стоимость запасов, списанных на капитальные инвестиции
// Аргументы:
//		СуммаТЗРНаКапИнвест - сумма ТЗР, которая приходится на капитальные инвестиции
// Возвращает:
//		1 - успешно, 0 - ошибка
Функция ПересчитатьСписНаКапИнвест(СуммаТЗРНаКапИнвест)
	Состояние("Пересчитывается списание на капитальные инвестиции.");
	глКомментарий("Пересчитывается списание на капитальные инвестиции.",2);
	
	ОбработаноСписНаКапИнвест = 0;
	ОсталосьТЗР = СуммаТЗРНаКапИнвест;
    
	ЗапрСписНаКапИнвест.ВыбратьСчета();
	Пока ЗапрСписНаКапИнвест.ПолучитьСчет() = 1 Цикл
		КодСчета = ЗапрСписНаКапИнвест.Счет.Код;
		Если спСчетаЗапасов.НайтиЗначение(КодСчета) = 0 Тогда
		    Продолжить; // счет другой группы
		КонецЕсли;
		
		ЗапрСписНаКапИнвест.ВыбратьКорСчета();
		Пока ЗапрСписНаКапИнвест.ПолучитьКорСчет() = 1 Цикл
			ЗапрСписНаКапИнвест.ВыбратьКорСубконто(1);
			Пока ЗапрСписНаКапИнвест.ПолучитьКорСубконто(1) = 1 Цикл
				ТекСуммаТЗР = ПолучитьСуммуДооценки(СписаноНаКапИнвест, ОбработаноСписНаКапИнвест, ЗапрСписНаКапИнвест.КорКО(), СуммаТЗРНаКапИнвест, ОсталосьТЗР);
				глПроводка(Контекст, ЗапрСписНаКапИнвест.КорСчет, СчетТЗР, ТекСуммаТЗР, "Распределение ТЗР на кап. инвестиции", , ЗапрСписНаКапИнвест.КорСубконто(1),,,
				,,, ,,"ТЗ");
			КонецЦикла;
		КонецЦикла;
	КонецЦикла; // счет запасов
	
	Возврат 1
КонецФункции //ПересчитатьСписНаКапИнвест

// ===============================
// Назначение:
//		Переносит сумму ТЗР перемещенных в другую группу (из товаров в материалы и наоборот)
//		на счет учета ТЗР, соответствующий новой группе
//		Примечание. Эти суммы будут участвовать в распределении ТЗР другой группы только в
//		следующем месяце
// Аргументы:
//		СуммаТЗРНаПеремещения - сумма ТЗР, которая приходится на перемещенные запасы
// Возвращает:
//		1 - успешно, 0 - ошибка
Функция ПересчитатьПеремещения(СуммаТЗРНаПеремещения)
	Состояние("Пересчитываются перемещения.");
	глКомментарий("Пересчитываются перемещения.",2);
	
	КорСчетТЗР = ?(СчетТЗР = "289", "2092", "289");
	глПроводка(Контекст, КорСчетТЗР, СчетТЗР, СуммаТЗРНаПеремещения, "Распределение ТЗР на перемещения", , ,,,
	,,, ,,"ТЗ");
	Возврат 1
КонецФункции //ПересчитатьПеремещения

// ===============================
// Назначение:
//		Зная общую сумму ТЗР, которые должны быть отнесены на конкретные 
//		вид деятельности, подразделение и вид затрат, выполняет распределение
//		этой суммы между всей производственной аналитикой, на которую 
//		материалы были списаны
// Аргументы:
//		СуммаТЗР - сумма ТЗР, приходящаяся на конкретные ВиД, Под и ВиЗ
//		ВиД 	- вид деятельности
//		Под		- подразделение
//		ВиЗ		- вид затрат
// Возвращает:
//		1 - успешно, 0 - ошибка
Функция РаспределитьСписВПроизвПоАналитике(СуммаТЗР, ВиД, Под, ВиЗ = 0)
	фОшибка = 0;
	
	ЗапрИспользМатВПроизв.вНачалоВыборки();
    Если ПустоеЗначение(ВиЗ) = 1 Тогда
        // нужно распределить также и между всеми видами затрат
		Если ЗапрИспользМатВПроизв.Получить(ВиД,Под,,,,) = 0 Тогда
			глКомментарий("По данным бухг. учета материалы списывались в производство (вид деятельности - "+ВиД+", подразделение "+Под+").",0);
			фОшибка = 1;
		КонецЕсли;
	Иначе
		// по конкретному виду затрат между остальной аналитикой
		Если ЗапрИспользМатВПроизв.Получить(ВиД,Под,ВиЗ,,,) = 0 Тогда
			глКомментарий("По данным бухг. учета материалы списывались в производство (вид деятельности - "+ВиД+", подразделение "+Под+", вид затрат "+ВиЗ+").",0);
			фОшибка = 1;
		КонецЕсли;
	КонецЕсли;
	Если фОшибка = 1 Тогда
		глКомментарий("    По оперативному учету материалы не списывались в таком разрезе!",0);
		глКомментарий("    Сравните данные отчета ""Факт. себестоимость продукции"" с бухгалтерскими!",2);
		Возврат 0;
	КонецЕсли;
	
	ОбработаноИспользМат = 0;
	ВсегоИспользМат = ЗапрИспользМатВПроизв.СуммаИспользовано;
	ОсталосьТЗР = СуммаТЗР;
	
	ТЗРнаДавальчЗаказы = 0;
	
	фПродолжатьЦиклПоВидамЗатрат = 1;
	Если ПустоеЗначение(ВиЗ) = 1 Тогда
	    фПродолжатьЦиклПоВидамЗатрат = ЗапрИспользМатВПроизв.Группировка("ВиЗ");
	КонецЕсли;
	Пока фПродолжатьЦиклПоВидамЗатрат = 1 Цикл
		ТекВиЗ = ЗапрИспользМатВПроизв.ВиЗ;
		// посмотрим, в разрезе какой продукции, заказов и материалов были понесены затраты
		Пока ЗапрИспользМатВПроизв.Группировка("Зак") = 1 Цикл
			ТекЗак = ЗапрИспользМатВПроизв.Зак;
			ТЗРПоЗаказу = 0;
			Пока ЗапрИспользМатВПроизв.Группировка("Про") = 1 Цикл
				ТекПро = ЗапрИспользМатВПроизв.Про;
				Пока ЗапрИспользМатВПроизв.Группировка("Мат") = 1 Цикл
					ТекМат = ЗапрИспользМатВПроизв.Мат;
					ТекСуммаТЗР = ПолучитьСуммуДооценки(ВсегоИспользМат, ОбработаноИспользМат, ЗапрИспользМатВПроизв.СуммаИспользовано, СуммаТЗР, ОсталосьТЗР);
					Регистр.ПроизводственныеЗатраты.Фирма			= Фирма;
					Регистр.ПроизводственныеЗатраты.ВидДеятельности	= ВиД;
					Регистр.ПроизводственныеЗатраты.Подразделение	= Под;
					Регистр.ПроизводственныеЗатраты.ВидЗатрат		= ТекВиЗ;
					Регистр.ПроизводственныеЗатраты.Заказ			= ТекЗак;
					Регистр.ПроизводственныеЗатраты.Продукция		= ТекПро;
					Регистр.ПроизводственныеЗатраты.Материал		= ТекМат;
					Регистр.ПроизводственныеЗатраты.Сумма			= ТекСуммаТЗР;
					Регистр.ПроизводственныеЗатраты.КодОперации		= ОтражениеЗатрат;
					Регистр.ПроизводственныеЗатраты.ДвижениеПриходВыполнить();
					ТЗРПоЗаказу = ТЗРПоЗаказу + ТекСуммаТЗР;
				КонецЦикла; // материал
			КонецЦикла; // продукция
			
			Если глЭтоДавальческийЗаказ(ТекЗак) = 1 Тогда
			    ТЗРнаДавальчЗаказы = ТЗРнаДавальчЗаказы + ТЗРПоЗаказу;
			КонецЕсли;
		КонецЦикла; // заказ
		
		Если ТЗРнаДавальчЗаказы <> 0 Тогда
			глПроводка(Контекст, "ДВ", , ТЗРнаДавальчЗаказы, "Распределение ТЗР на давальческие заказы", ,ВиД,Под,,
			,,, ,,"ТЗ");
		КонецЕсли;
		
		Если ПустоеЗначение(ВиЗ) = 1 Тогда
			// следующий вид затрат из группировки запроса
		    фПродолжатьЦиклПоВидамЗатрат = ЗапрИспользМатВПроизв.Группировка("ВиЗ");
		Иначе
			// по конкретному виду затрат только одна итерация
			фПродолжатьЦиклПоВидамЗатрат = 0;
		КонецЕсли;
	КонецЦикла; // вид затрат
	
	Возврат 1 - фОшибка
КонецФункции //РаспределитьСписВПроизвПоАналитике

// ===============================
// Назначение:
//		Пересчитывает стоимость запасов использованных в производстве (по регистру ПроизводственныеЗатраты)
// Возвращает:
//		1 - успешно, 0 - ошибка
Функция ПересчитатьСписВПроизв(СуммаТЗРвПроизв=0)
	Состояние("Пересчитывается списание в производство.");
	глКомментарий("Пересчитывается списание в производство.",2);
	
	фОшибка = 0;
	Если ИспользоватьСчетаРасходов = Класс9 Тогда
	    // 8 класс не используется, данные о списании в производство есть
		// непосредственно в корреспонденции Д23 К2х
		
		ОбработаноСписВПроизв = 0;
		ОсталосьТЗР = СуммаТЗРвПроизв;
		
		ЗапрСписВПроизв.ВыбратьСчета();
		Пока ЗапрСписВПроизв.ПолучитьСчет() = 1 Цикл
			КодСчета = ЗапрСписВПроизв.Счет.Код;
			Если спСчетаЗапасов.НайтиЗначение(КодСчета) = 0 Тогда
			    Продолжить; // счет другой группы
			КонецЕсли;
			
			ЗапрСписВПроизв.ВыбратьКорСубконто(1);
			Пока ЗапрСписВПроизв.ПолучитьКорСубконто(1) = 1 Цикл
				ВиД = ЗапрСписВПроизв.КорСубконто(1);
				ЗапрСписВПроизв.ВыбратьКорСубконто(2);
				Пока ЗапрСписВПроизв.ПолучитьКорСубконто(2) = 1 Цикл
					Под = ЗапрСписВПроизв.КорСубконто(2);
					ТекСуммаТЗР = ПолучитьСуммуДооценки(СписаноВПроизв, ОбработаноСписВПроизв, ЗапрСписВПроизв.КорКО(), СуммаТЗРвПроизв, ОсталосьТЗР);
					
					глПроводка(Контекст, "231", СчетТЗР, ТекСуммаТЗР, "Распределение ТЗР в производство", , ВиД, Под, ,
					,,, ,,"ТЗ");
					Если РаспределитьСписВПроизвПоАналитике(ТекСуммаТЗР, ВиД, Под) = 0 Тогда
					    фОшибка = 1
					КонецЕсли;
				КонецЦикла; // подразделения
			КонецЦикла; // виды деятельности
		КонецЦикла;

	Иначе
		// анализируем накопленные в таблице тбПроизвЗатраты данные из оборотов Д23 К8х
	    тбПроизвЗатраты.Свернуть("КодСчетаЗапасов,ВиД,Под,ВиЗ","СуммаТЗР");
		
		тбПроизвЗатраты.ВыбратьСтроки();
		Пока тбПроизвЗатраты.ПолучитьСтроку() = 1 Цикл
			Если тбПроизвЗатраты.КодСчетаЗапасов = "22" Тогда
			    // МБП при списании в производство не отражаются как материал 
				// (аналитика Материал,Заказ,Продукция в регистре не заполняется)
				// дооценим регистр одним "сводным" движением
				Регистр.ПроизводственныеЗатраты.Фирма			= Фирма;
				Регистр.ПроизводственныеЗатраты.ВидДеятельности	= тбПроизвЗатраты.ВиД;
				Регистр.ПроизводственныеЗатраты.Подразделение	= тбПроизвЗатраты.Под;
				Регистр.ПроизводственныеЗатраты.Заказ			= 0;
				Регистр.ПроизводственныеЗатраты.Продукция		= 0;
				Регистр.ПроизводственныеЗатраты.Материал		= 0;
				Регистр.ПроизводственныеЗатраты.ВидЗатрат		= тбПроизвЗатраты.ВиЗ;
				Регистр.ПроизводственныеЗатраты.Сумма			= тбПроизвЗатраты.СуммаТЗР;
				Регистр.ПроизводственныеЗатраты.КодОперации		= ОтражениеЗатрат;
				Регистр.ПроизводственныеЗатраты.ДвижениеПриходВыполнить();
			Иначе
				// затраты обычных материалов отражаются по каждому материалу и с дополнительной аналитикой
				Если РаспределитьСписВПроизвПоАналитике(тбПроизвЗатраты.СуммаТЗР, тбПроизвЗатраты.ВиД, тбПроизвЗатраты.Под, тбПроизвЗатраты.ВиЗ) = 0 Тогда
				    фОшибка = 1
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; // вид деятельности, подразделение, вид затрат
	КонецЕсли;
	
	Возврат 1 - фОшибка
КонецФункции //ПересчитатьСписВПроизв

// ===============================
// Назначение:
//		Распределяет ТЗР между счетами и аналитикой, на которые были списаны выбывшие запасы
// Возвращает:
//		1 - успешно, 0 - ошибка
Функция РаспределитьТЗР()
	спСчетаЗапасов = СоздатьОбъект("СписокЗначений");
	спСчетаЗапасов.ИзСтрокиСРазделителями(""""+СтрЗаменить(СчетаЗапасов,",",""",""")+"""");
	
	КоэфСписания = РассчитатьКоэфСписания(); // какая часть запасов списана
	СуммаТЗР = Окр(КоэфСписания * ИтМ.СКД(СчетТЗР),2); // такую сумму предстоит распределить
	
	Если СуммаТЗР = 0 Тогда
	    Возврат 1; // нечего дооценивать
	КонецЕсли;
	
	СуммаТЗРНаРеализацию = Окр(СуммаТЗР * СписаноНаРеализацию / СписаноВсего,2);
	Если ПересчитатьРеализацию(СуммаТЗРНаРеализацию) = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	СуммаТЗРНаКапИнвест = Окр(СуммаТЗР * СписаноНаКапИнвест / СписаноВсего,2);
	Если ПересчитатьСписНаКапИнвест(СуммаТЗРНаКапИнвест) = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	СуммаТЗРПоПеремещениям = Окр(СуммаТЗР * СписаноПоПеремещениям / СписаноВсего,2);
	Если ПересчитатьПеремещения(СуммаТЗРПоПеремещениям) = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Если ИспользоватьСчетаРасходов = Класс9 Тогда
		// списание на расходы определяем пропорционально, а списание в производсвто как разницу
		СуммаТЗРНаРасх = Окр(СуммаТЗР * СписаноНаРасх / СписаноВсего,2);
		Если ПересчитатьСписНаРасходы(СуммаТЗРНаРасх) = 0 Тогда
		    Возврат 0;
		КонецЕсли;
		
		СуммаТЗРвПроизв = СуммаТЗР - СуммаТЗРНаРеализацию - СуммаТЗРНаКапИнвест - СуммаТЗРПоПеремещениям - СуммаТЗРНаРасх;
		Если ПересчитатьСписВПроизв(СуммаТЗРвПроизв) = 0 Тогда
		    Возврат 0;
		КонецЕсли;
	Иначе
		// списание на расходы определяем как разницу (производственные затраты уже входят в списание на расходы)
		СуммаТЗРНаРасх = СуммаТЗР - СуммаТЗРНаРеализацию - СуммаТЗРНаКапИнвест - СуммаТЗРПоПеремещениям;
		Если ПересчитатьСписНаРасходы(СуммаТЗРНаРасх) = 0 Тогда
		    Возврат 0;
		КонецЕсли;
		
		Если ПересчитатьСписВПроизв() = 0 Тогда
		    Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1
КонецФункции //РаспределитьТЗР

// ===============================
Процедура ОбработкаПроведения()
	глКомментарий("Начало",2,Контекст);
	
	Если ПроверкаШапки() = 0 Тогда
		глНеПроводить(Контекст);
	    Возврат;
	КонецЕсли;
	
	Если РассчитатьШапку() = 0 Тогда
		глНеПроводить(Контекст);
	    Возврат;
	КонецЕсли;
	
	// группа 1 - товары
	Состояние("Обрабатываются товары.");
	глКомментарий("Обрабатываются товары.",2);
	
	СчетТЗР = "289";
	СчетаЗапасов = СчетаТоваров;
	Если РаспределитьТЗР() = 0 Тогда
	    глНеПроводить(Контекст);
		Возврат;
	КонецЕсли;
	
	// группа 2 - материалы (прочие запасы)
	Состояние("Обрабатываются прочие запасы.");
	глКомментарий("Обрабатываются прочие запасы.",2);
	
	СчетТЗР = "2092";
	СчетаЗапасов = СчетаМатериалов;
	Если РаспределитьТЗР() = 0 Тогда
	    глНеПроводить(Контекст);
		Возврат;
	КонецЕсли;
	
	Операция.Содержание = Примечание;
	Операция.Записать();
	
	глКомментарий("Окончание",2,Контекст);
КонецПроцедуры