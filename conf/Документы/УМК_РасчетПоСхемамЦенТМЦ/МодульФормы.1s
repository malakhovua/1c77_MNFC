Перем СписокПодбора,СправочникПодбора;

 Процедура УстановитьДоступность() Далее
 
//====================================================================== //--- УМК Сандомирский В.Ю, (11.06.2014) 
Процедура ПриОткрытии()
	Если Форма.Параметр = "Проведение" Тогда
		Провести();
		Форма.Закрыть();
		Возврат;
	КонецЕсли;
	
	ПриЗаписиПерепроводить(1);
	УстановитьДоступность();
		
	Если СтрДлина(СокрЛП(СтрФильтр)) <> 0 Тогда //--- УМК Сандомирский В.Ю, (19.12.14) 
		СписФ = СоздатьОбъект("СписокЗначений");
	    СписФ.ИзСтрокиСРазделителями(СокрЛП(СтрФильтр));
		СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
		
		Для Инд = 1 По СписФ.РазмерСписка() Цикл
			Если СпрТМЦ.НайтиПоКоду(СписФ.ПолучитьЗначение(Инд), 0) = 1 Тогда
			    СписокВыбТМЦ.ДобавитьЗначение(СпрТМЦ.ТекущийЭлемент());
			КонецЕсли;		
		КонецЦикла;	
	КонецЕсли;
	
	глЗаполнитьСписокТоваров(СтрФильтрКЦ, СписокКЦ, 3, "КатегорииЦен");
	
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю, (11.06.2014) 
Процедура ПриЗаписи()
	Автор = глПользователь;
	глПроверкаДатыДок(Контекст,"Запись");
	СписФ = СоздатьОбъект("СписокЗначений");
	Для Инд = 1 По СписокВыбТМЦ.РазмерСписка() Цикл
		СписФ.ДобавитьЗначение(СписокВыбТМЦ.ПолучитьЗначение(Инд).Код);
	КонецЦикла;	
	СтрФильтр = СписФ.ВСтрокуСРазделителями();	
	глЗаписатьСписокТоваров(СтрФильтрКЦ, СписокКЦ, 3);
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю, (01.06.2014)
Процедура ВводНового(Скопирован, ОбъектКопирования)
	глЗаполнитьШапку(Контекст);
	Если Скопирован=1 Тогда	//копирование документа
		Возврат;
	КонецЕсли;
	ДатаДок=РабочаяДата();	
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю, (01.06.2014) 
Функция  ПоказатьРодитель()
	Если ПустоеЗначение(ТМЦ)=0 Тогда
		Возврат ТМЦ.Родитель;
	КонецЕсли;
	
КонецФункции //  ПоказатьРодитель()

//====================================================================== //--- УМК Сандомирский В.Ю, (11.06.2014)
Процедура ОбработкаПодбора(Значение) 	
	Перем ПредставлениеЗначения;
	
	Если (ВРег(Значение.Вид())=СправочникПодбора) И (СписокПодбора.НайтиЗначение(Значение)=0) Тогда
		ПредставлениеЗначения = Строка(Значение);
		Если СписокПодбора.НайтиЗначение(Значение) <> 1 Тогда
			СписокПодбора.ДобавитьЗначение(Значение,ПредставлениеЗначения);
		КонецЕсли;
		СписокПодбора.ТекущаяСтрока(СписокПодбора.РазмерСписка());
	КонецЕсли;
	
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю, (11.06.2014)
// Название: РаботаСоСписком
// Параметры:
// 	Режим - строка, принимающая 4 значения:
//		"Добавить"
//		"ДобавитьНесколько"
// 		"Удалить"
// 		"УдалитьВсе"
//	Список - список значений, в котором задается множественный фильтр
//	ТипСправочника - строка, содержащая идентификатор справочнника, по
//						которому осуществляется мноджественный фильтр
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//   кнопок работы с множественными фильтрами ("...",".....","X","XX")
// Наименование,.
// Описание:
// процедура предназначена для добавления и удаления элементов
// из множественных фильтров
Процедура РаботаСоСписком(Режим,Список,ТипСправочника)
	Перем ТекПоз;
	Перем ТекЭлемент;
	Перем Фрм;
                                     
	Если ТипСправочника = "Категории" Тогда
		ТипСправочника = "ВидыКатегорий";
	КонецЕсли;	
	
	ТекПоз = Список.ТекущаяСтрока();
	Если ТекПоз>0 Тогда
		ТекЭлемент=Список.ПолучитьЗначение(ТекПоз);
	КонецЕсли;

	Если Режим="Добавить" Тогда		// добавляем в список один элемент
		СписокПодбора = Список;
		СправочникПодбора = ВРег(ТипСправочника);
		// открываем окно подбора
		ОткрытьПодбор("Справочник."+ТипСправочника,,Фрм,0,ТекЭлемент);
		Фрм.ВыборГруппы(1);

	ИначеЕсли Режим="ДобавитьНесколько" Тогда  // добавляем в список несколько элементов
		СписокПодбора = Список;
		СправочникПодбора = ВРег(ТипСправочника);
		// открываем окно подбора
		ОткрытьПодбор("Справочник."+ТипСправочника,,Фрм,1,ТекЭлемент);
		Фрм.ВыборГруппы(1);

 	ИначеЕсли Режим="УдалитьВсе" Тогда	// удаляем все элементы из списка
		Список.УдалитьВсе();

	ИначеЕсли Режим="Удалить" Тогда	// удаляем из списка один элемент
		Если ТекПоз>0 Тогда
			Список.УдалитьЗначение(ТекПоз);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры		// работа со списком

//======================================================================
Процедура УстановитьДоступность()
	
	Форма.Способ.Доступность(фОкруглятьЦены);
	Форма.Вниз.Доступность(фОкруглятьЦены);
	Форма.ргВверх.Доступность(фОкруглятьЦены);
	Форма.КратностьОкругления.Доступность(фОкруглятьЦены);
	
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю, (11.06.14)
Процедура ПерерасчитатьЦеныСогласноСхем(ФлагЗаписи)
		
	Если Проведен() = 1 Тогда //--- УМК Сандомирский В.Ю, (19.12.14)
		Предупреждение("Снимите с проведения документ. Пересчет не отменен !");
		Возврат;
	КонецЕсли;
	
	ПечФорма = "ТаблицаПредварительно";
	
	Т = СоздатьОбъект("Таблица");
	Т.ИсходнаяТаблица(ПечФорма);	
	
	Запрос = СоздатьОбъект("Запрос");

	ТекстЗапроса = 
	"//{{ЗАПРОС()
	|Период с ДатаДок по ДатаДок;
	|Обрабатывать НеПомеченныеНаУдаление;
	|Товар = Справочник.ТМЦ.ТекущийЭлемент;";
	Если фПоГруппам = 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|Группировка Товар без групп;";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|Группировка Товар;";	
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|Условие(" + ?(фКроме = 1, "НЕ","") + "(Товар в СписокВыбТМЦ));
	|"//}}ЗАПРОС
	;
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СпрТМЦ  = СоздатьОбъект("Справочник.ТМЦ");
	СпрЦены = СоздатьОбъект("Справочник.Цены");
	СпрЦены.ИспользоватьДату(ДатаДок);
	
	Т.ВывестиСекцию("Заголовок");
		
	УдалитьСтроки();				
	Пока Запрос.Группировка(1) = 1 Цикл		
		Если  Запрос.Товар.ЭтоГруппа() = 1 Тогда		
			ПечГруппа = Запрос.Товар;
			Т.ВывестиСекцию("ГруппаТовар");		
		Иначе		
			Если ПустоеЗначение(Запрос.Товар.БазоваяКатегорияЦены.Получить(ДатаДок)) = 1 Тогда
				Сообщить(" ТМЦ : " + Запрос.Товар + " - не заполнена базовая категория цен !","!");		
				Продолжить;		
			КонецЕсли;
			
			ПечТовар = Запрос.Товар;
			Т.ВывестиСекцию("Товар");	
			
			СпрЦены.ИспользоватьВладельца(Запрос.Товар);
			Если СпрЦены.НайтиПоРеквизиту("КатегорияЦены", Запрос.Товар.БазоваяКатегорияЦены.Получить(ДатаДок), 0) = 1 Тогда
				ТекБазЦена = СпрЦены.Цена;				
				СпрЦены.ВыбратьЭлементы();
				Пока СпрЦены.ПолучитьЭлемент() = 1 Цикл					
					Если (СпрЦены.ПометкаУдаления() = 1) ИЛИ (СпрЦены.КатегорияЦены.НеРассчитыватьАвтомат = 1) ИЛИ (СписокКЦ.НайтиЗначение(СпрЦены.КатегорияЦены) <> 0) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПустоеЗначение(СпрЦены.СхемаЦенообразования) = 0 Тогда
						Если СпрЦены.СхемаЦенообразования.фПредопределенныйЭлементФиксированнаяЦена <> 2 Тогда
							УстанавливаемаяЦена =  ?(СпрЦены.СхемаЦенообразования.фПредопределенныйЭлементФиксированнаяЦена = 3, Запрос.Товар.Цена_Прод.Получить(ДатаДок), глАвтоПересчетЦены(СпрЦены,ТекБазЦена));
							ПечКатегорияЦены = СпрЦены.КатегорияЦены;
							ЦенаНаДату 		 = СпрЦены.Цена;
							
							//Округлим согласно правилу
							Если фОкруглятьЦены = 1 Тогда
								РасчетняЦена 	 =глОкруглить(УстанавливаемаяЦена, КратностьОкругления, Способ);
							Иначе
								РасчетняЦена 	 = УстанавливаемаяЦена;
							КонецЕсли;
							
							Разница 		 = Окр(ЦенаНаДату,2) - Окр(РасчетняЦена,2);
												
							Т.ВывестиСекцию("ТипЦен");								
							Если Разница <> 0 Тогда	
								НоваяСтрока();
								ТМЦ 					= Запрос.Товар;
								БазоваяКатегоряЦен      = Запрос.Товар.БазоваяКатегорияЦены.Получить(ДатаДок);
								БазоваяЦена				= ТекБазЦена;		
								Ед 						= СпрЦены.Единица;
								Категория 				= СпрЦены.КатегорияЦены;
								СхемаЦенообразования 	= СпрЦены.СхемаЦенообразования;
								ЦенаБыло 				= ЦенаНаДату;
								ЦенаСтало 				= РасчетняЦена;
							КонецЕсли;							
							//Сообщить(" " + Запрос.Товар + " тип цен " + СпрЦены + " = " + СпрЦены.Цена);		
						КонецЕсли;					
					Иначе
						Сообщить(" ТМЦ : " + Запрос.Товар + " тип цен - " + СпрЦены + " не заполнена схема !!!","!!!");
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;			
		КонецЕсли;			
	КонецЦикла;

	Т.ОбластьПечати(2);
	Т.ПараметрыСтраницы(2,,,,,,,,,1);
	Т.ТолькоПросмотр(1);
	Т.Опции(0,0,3);
	Т.Показать("Сформировать", "");
		
	Сообщить("Перерасчет цен по схемам завершен.","!");	

	
КонецПроцедуры // ПерерасчитатьЦеныСогласноСхем

//====================================================================== //--- УМК Сандомирский В.Ю, (11.12.14)
Процедура ОтобратьТМЦПоШаблону()
	
	Если ПустоеЗначение(ОтборПоШаблонуСхемЦенообразования) <> 1 Тогда
		
		СписокВыбТМЦ.УдалитьВсе();
			
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = "
		|Период с ДатаДок по ДатаДок;
		|Обрабатывать НеПомеченныеНаУдаление;
		|ТекущийЭлемент = Справочник.ТМЦ.ТекущийЭлемент;
		|ШаблонСхемЦенообразования = Справочник.ТМЦ.ШаблонСхемЦенообразования;
		|Группировка ТекущийЭлемент без групп без упорядочивания;
		|Условие(ШаблонСхемЦенообразования = ОтборПоШаблонуСхемЦенообразования);
		|";
		
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Пока Запрос.Группировка(1) = 1 Цикл
			СписокВыбТМЦ.ДобавитьЗначение(Запрос.ТекущийЭлемент);	
		КонецЦикла;
		
	КонецЕсли;


	
	
	


	
КонецПроцедуры // ОтобратьТМЦПоШаблону()


//====================================================================== УМК Сандомирский В.Ю. (*) //--- заголовок FormEx_ПланРаскраски
Функция Раскраска()
	ТекстПлана = "(BRUSH_S[" + Строка(100*255*100) + "])()()"; //--- добавляя колонку вначало документа до "раскрашек" часов добавить "()"
	Возврат  ТекстПлана;	
КонецФункции

