Перем СтрВнутреннийЗаказ;
Перем НачальнаяДатаДокумента;

Процедура ИзмКвоКут() Далее
Процедура ИзмКвоЗамесов() Далее
Процедура ИзмНормыЗатрат() Далее
Функция РассчитатьПотериФарша(фПродукция) Далее

// ===============================
Процедура ОбновитьНадписи()     
	Форма.ВнутреннийЗаказ.Заголовок(СтрВнутреннийЗаказ);	
КонецПроцедуры

// ===============================
Процедура ИзмКонтрагент() Далее

Функция НайтиПодчиненноеСписание(Прод, Кстр)
	Если ТекущийДокумент().Выбран() = 1 Тогда
	    Док = СоздатьОбъект("Документ");
		Док.ВыбратьПодчиненныеДокументы(ДатаДок,, ТекущийДокумент());
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если (Док.Вид() = "СписаниеТМЦВПроизводство") и (Док.ПометкаУдаления() = 0) Тогда
			    Если (Док.ПродукцияШ = Прод) и (Док.КодСтроки = КСтр) Тогда
					Возврат Док.ТекущийДокумент();
			    КонецЕсли;
			КонецЕсли;
		КонецЦикла;		    
	КонецЕсли;
КонецФункции

Функция НайтиПодчиненныйВыпуск(Прод, НомСтр)
	Если ТекущийДокумент().Выбран() = 1 Тогда
	    Док = СоздатьОбъект("Документ");
		Док.ВыбратьПодчиненныеДокументы(ДатаДок,, ТекущийДокумент());
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если (Док.Вид() = "ВыпускПродукции") и (Док.ПометкаУдаления() = 0) Тогда
				Док.ВыбратьСтроки();
				Пока Док.ПолучитьСтроку() = 1 Цикл
					Если Док.Продукция = Прод Тогда
						НомСтр = Док.НомерСтроки;
						Возврат Док.ТекущийДокумент();
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецФункции

// ===============================
Процедура УдалитьНеПродукциюПолуфабрикатыУслуги(СтрокаВидЗаказа)     
	ВыбратьСтроки();
	ЕстьНеПродукцияПолуфабрикатыУслуги = Нет;
	Пока ПолучитьСтроку() = 1 Цикл
		Если (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Продукция) 
		   И (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Полуфабрикат)
		   И (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Услуга) Тогда
			ЕстьНеПродукцияПолуфабрикатыУслуги = Да;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьНеПродукцияПолуфабрикатыУслуги = Да Тогда
		Если Вопрос("В табличную часть " + СтрокаВидЗаказа + " запрещено включать ТМЦ любых видов, кроме ""Продукция"", ""Полуфабрикат"" или ""Услуга""!
					|Удалить строки, содержащие ТМЦ недопустимых видов?", "Да+Нет") = "Да" Тогда
			Сч = КоличествоСтрок();
			Пока Сч > 0 Цикл
				ПолучитьСтрокуПоНомеру(Сч);
				Если (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Продукция) 
				   И (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Полуфабрикат)
				   И (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Услуга) Тогда
					УдалитьСтроку();
				КонецЕсли;
				Сч = Сч - 1;
			КонецЦикла;
		Иначе
			Если СтрокаВидЗаказа = "внутреннего заказа" Тогда
				Контрагент = глВосстановитьЗначение(Контекст,"Контрагент");
				ИзмКонтрагент();
			Иначе
				ПереработкаДавальческогоСырья = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
// ===============================
Процедура ИзмКонтрагент()    
	Если Контрагент.Выбран() = 1 Тогда
		СтрВнутреннийЗаказ = "Заказ от покупателя";
	Иначе
		СтрВнутреннийЗаказ = "Внутренний заказ";
		УдалитьНеПродукциюПолуфабрикатыУслуги("внутреннего заказа");
	КонецЕсли;
	ОбновитьНадписи();
КонецПроцедуры	

// ===============================
Процедура ИзмПродукция()
	Если Продукция.Выбран() = 1 Тогда
		//Прод = Продукция;
		//НомСтр = НомерСтроки;
		//
		//ВыбратьСтроки();
		//Пока ПолучитьСтроку() = 1 Цикл
		//	Если Прод = Продукция Тогда
		//		Если НомСтр <> НомерСтроки Тогда
		//		    Предупреждение("Такая продукция уже есть");
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЦикла;
		//ПолучитьСтрокуПоНомеру(НомСтр);
		
		Если глПроверкаТовараВДокументе(Контекст,Продукция,НомерСтроки) = Нет Тогда
			Продукция = глВосстановитьЗначение(Контекст,"Продукция");
		Иначе
			глУстановкаБазЕд(Контекст,Продукция,глКилограмм, 1);
			Если Кво = 0 Тогда
				Кво = 1;
			КонецЕсли;
			Если КвоЗамесов = 0 Тогда
				КвоЗамесов = 1;			    
			КонецЕсли;
		КонецЕсли;
		Если (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Продукция) 
		   И (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Полуфабрикат)
		   И (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Услуга) Тогда
			НормыЗатрат = 0;
		Иначе
			Если (НормыЗатрат.Выбран() = 0) или (НормыЗатрат.Продукция <> Продукция) Тогда
				НЗ = глВыбратьНормыЗатрат(Продукция);
				Если НЗ = 0 Тогда
				    НормыЗатрат = Продукция.НормыЗатрат.Получить(ДатаДок);
				Иначе
					НормыЗатрат = НЗ;
				КонецЕсли;
				
				ИзмНормыЗатрат();			    
			КонецЕсли;
		КонецЕсли;
	
		ПотериФарша = РассчитатьПотериФарша(Продукция); 
		
	Иначе // Продукция.Выбран() = 0
		НормыЗатрат = 0;
	КонецЕсли;
КонецПроцедуры //ИзмПродукция()
                        
// ===============================
Процедура ИзмНормыЗатрат()
	Если НормыЗатрат.Выбран() = 1 Тогда                
		//Необходимо создать переменную Док, иначе НормыЗатрат может ошибочно определяться как непроведенный
		Док = СоздатьОбъект("Документ.НормыЗатрат");
		Док.НайтиДокумент(НормыЗатрат);
		// Проверяем корректность выбранных норм затрат
		//Если Док.Заказ <> ТекущийДокумент() Тогда
		//	Предупреждение("Нормы затрат заданы по другому заказу!");	
		//	НормыЗатрат = глВосстановитьЗначение(Контекст,"НормыЗатрат");
		Если Док.Продукция <> Продукция Тогда               
			Предупреждение("Нормы затрат заданы для другой продукции!");	
			НормыЗатрат = глВосстановитьЗначение(Контекст,"НормыЗатрат");
		ИначеЕсли Док.Проведен() = 0 Тогда                       
			Предупреждение("Выбранный документ ""Нормы затрат"" не проведен!");	
			НормыЗатрат = глВосстановитьЗначение(Контекст,"НормыЗатрат");
		КонецЕсли;                                              
	КонецЕсли;
	
КонецПроцедуры //ИзмНормыЗатрат

// ===============================
Процедура ИзмПереработкаДавальческогоСырья()
	Если ПереработкаДавальческогоСырья = 1 Тогда
		УдалитьНеПродукциюПолуфабрикатыУслуги("заказа на переработку давальческого сырья");
	КонецЕсли;
	
КонецПроцедуры // ИзмПереработкаДавальческогоСырья()
// ===============================
Процедура ВводНового(Копируем)
	Если Копируем = 1 Тогда
		глУстановитьНомер(Контекст);
		//Очищаем номы затрат
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			НормыЗатрат = 0;
		КонецЦикла;
	    Возврат;
	КонецЕсли;  
	МаксОтношениеРазницыЗаказ = Константа.МаксОтношениеРазницыЗаказ;
	Подразделение = глВосстановитьЗначение(,"БазПодразделениеПроизводство");
	СпособФормированияНалоговыхДокументов=1;
	глУстановитьФирму(Контекст);
КонецПроцедуры

// ===============================
Процедура ПриОткрытии()            
	Форма.кПравоваяПоддержка.Видимость(глВидимостьПравовойПоддержки);
	глПроверкаДатыДок(Контекст,"открытие");
	НачальнаяДатаДокумента = ДатаДок;
	глСохранитьЗначение(Контекст,"Продукция",Продукция);
	глСохранитьЗначение(Контекст,"НормыЗатрат",НормыЗатрат);
	глСохранитьЗначение(Контекст,"Контрагент",Контрагент);
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.кОК.Доступность(0);
		Форма.кПровести.Доступность(0);
		Форма.кПодбор.Доступность(0);
		Форма.кФирма.Доступность(0);               		
		Форма.кОчиститьКонтрагента.Доступность(0);
		Форма.КнопкаПоУмолчанию("кЗакрыть");
		Форма.кНовыйНормыЗатрат.Доступность(0);
	Иначе
		Форма.КнопкаПоУмолчанию("кОК");
	КонецЕсли;
	
	//параметр из Полного журнала
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		Контрагент = Форма.Параметр;
	КонецЕсли;
	ИзмКонтрагент();
	ПриЗаписиПерепроводить(1);   
КонецПроцедуры
                
// ===============================
Процедура ПриНачалеВыбораЗначения(Идент, Флаг)
	глСохранитьЗначение(Контекст,"Контрагент",Контрагент);
	Если Идент = "Продукция" Тогда
	    Если Продукция.Выбран() = 1 Тогда
	        Док = НайтиПодчиненноеСписание(Продукция, КодСтроки);
			Если ТипЗначенияСтр(Док) = "Документ" Тогда
			    Предупреждение("По этой продукции уже есть списание");
				Возврат;
			КонецЕсли;
			НомСтр = 0;
			Док = НайтиПодчиненныйВыпуск(Продукция, НомСтр);
    		Если ТипЗначенияСтр(Док) = "Документ" Тогда
			    Предупреждение("По этой продукции уже есть выпуск");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Идент = "НормыЗатрат" Тогда
		Флаг = 0;
		Спис = СоздатьОбъект("СписокЗначений");
		Спис.ДобавитьЗначение(Продукция, "ТМЦ");
		Спис.ДобавитьЗначение(1, "ВидВыбора");
		ОткрытьФормуМодально("Журнал.ПолныйЖурнал.ДляПросмотраНорм", Спис);		
		Если ТипЗначенияСтр(Спис) = "Документ" Тогда
			НормыЗатрат = Спис;
			ИзмКвоКут();
			Если НормыЗатрат.Действует = 0 Тогда
			    Предупреждение("Данные нормы затрат не действуют");
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура ПриНачалеРедактированияСтроки()
	глСохранитьЗначение(Контекст,"Продукция",Продукция);
	глСохранитьЗначение(Контекст,"НормыЗатрат",НормыЗатрат);
КонецПроцедуры

Процедура ПриРедактированииНовойСтроки()
	ПоследКод = ПоследКод + 1;
	КодСтроки = ПоследКод;
КонецПроцедуры

// ===============================
Функция УстДоступность()     
	Форма.Заголовок(глЗаголовок(Контекст,"Заказ"));
	Если Контрагент.Выбран() = 0 Тогда
		ПереработкаДавальческогоСырья = 0;
		Форма.ПереработкаДавальческогоСырья.Доступность(0);
		Форма.рСпособ.Доступность(0);
		Форма.СпособФормированияНалоговыхДокументов.Доступность(0);
		Форма.СпособФормированияНалоговыхДокументов1.Доступность(0);  
	Иначе
		Форма.ПереработкаДавальческогоСырья.Доступность(1);        
		Форма.рСпособ.Доступность(1);
		Форма.СпособФормированияНалоговыхДокументов.Доступность(1);
		Форма.СпособФормированияНалоговыхДокументов1.Доступность(1);  
	КонецЕсли;   
	
	Если Форма.ТолькоПросмотр() = 0 Тогда
		Если (Продукция.ВидТМЦ = Перечисление.ВидыТМЦ.Продукция) 
		 Или (Продукция.ВидТМЦ = Перечисление.ВидыТМЦ.Полуфабрикат) 
		 Или (Продукция.ВидТМЦ = Перечисление.ВидыТМЦ.Услуга) Тогда
			Форма.НормыЗатрат.Доступность(1);
			Если (НормыЗатрат.Выбран() = 0) И (Продукция.Выбран() = 1) Тогда
				Форма.кНовыйНормыЗатрат.Доступность(1);
			Иначе
				Форма.кНовыйНормыЗатрат.Доступность(0);
			КонецЕсли;
		Иначе
			Форма.НормыЗатрат.Доступность(0);
			Форма.кНовыйНормыЗатрат.Доступность(0);
		КонецЕсли;
	КонецЕсли;
КонецФункции
                
// ===============================
Процедура ПечатьЗаказа()
	ПечФорма = "Таблица";
	Т = СоздатьОбъект("Таблица");
	Т.ИсходнаяТаблица(ПечФорма);  
	Если Контрагент.Выбран() = 1 Тогда
	    Т.ВывестиСекцию("ШапкаСКонтрагентом");
	Иначе
		Т.ВывестиСекцию("ШапкаБезКонтрагента");		
	КонецЕсли;                                      
	Т.ВывестиСекцию("Шапка");		
	
//	глОживить(4);    
		
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Т.ВывестиСекцию("Строка");
	КонецЦикла;
	
	//Вызов выходного отчета в окно просмотра и редактирования.
	Т.Опции(0,0,0,0,ПарСтрОтчДлинн);
	Т.Защита(Константа.ФлагЗащитыТаблиц);
	Т.ТолькоПросмотр(1);
	Т.ОбластьПечати(2);
	Т.Показать("Заказ на выпуск продукции","");
	
КонецПроцедуры

// ===============================
Процедура ПечатьНорм()
	
	глРасшифровка = СоздатьОбъект("СписокЗначений");
	глФлагРасшифровки = 1;
	глОбновить = 0;
	глРасшифровка.Установить("Объект", "НормативныйСостав");
	глРасшифровка.Установить("ДатаОтчета", ДатаДок);
	глРасшифровка.Установить("ВыбЗаказ", ТекущийДокумент());

	ОткрытьФорму("Отчет.НормативныйСостав#");
	глФлагРасшифровки = 0;
	глРасшифровка = 0;
	глОбновить = 0;
	
КонецПроцедуры

// ===============================
//Вызывается рекурсивно
//Добавляет материал в спМатериалы
Функция ДобавитьСтрокуВТаблицуМатериалов(тбМатериалы,Прод,Единица,Коэф,Кво,Уровень,НЗ = "")
	тбНормы = СоздатьОбъект("ТаблицаЗначений");
	//Если Заказ не задан, глПолучитьНормы вернет ПоЗаказу полученное из ТМЦ на ДатаДок
	Если НЗ = "" Тогда
		Если глПолучитьНормы(Прод,Единица,Кво,ДатаДок,ТекущийДокумент(),тбНормы) = 0 Тогда
			Возврат 0;
		КонецЕсли;
	Иначе
		Если глПолучитьНормы(Прод,Единица,Кво,ДатаДок,ТекущийДокумент(),тбНормы,,,,НЗ) = 0 Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	тбНормы.ВыбратьСтроки();
	Пока тбНормы.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(тбНормы.Материал) = 0 Тогда  //тбНормы.Материал = ВозвратныйОтход или Материал или Продукция или Полуфабрикат
		    Если Не ((тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.ВозвратныйОтход) Или 
			((тбНормы.Материал.ВидТМЦ <> Перечисление.ВидыТМЦ.Материал) И (тбНормы.Материал.ВидТМЦ <> Перечисление.ВидыТМЦ.Товар))) Тогда
				тбМатериалы.НоваяСтрока();
				тбМатериалы.Материал  = тбНормы.Материал;
				тбМатериалы.Кво       = тбНормы.Кво;
		    КонецЕсли;
			
			//Если в продукцию входят ПОЛУФАБРИКАТЫ, получаем нормы для них 
			Если тбНормы.ВидЭлемента = Перечисление.ВидыЭлементовСоставаПродукции.Полуфабрикат Тогда
				Уровень = Уровень + 1;      
				Если ДобавитьСтрокуВТаблицуМатериалов(тбМатериалы,тбНормы.Материал,0,1,тбНормы.Кво,Уровень) = 0 Тогда
					Возврат 0;
				КонецЕсли;
				тбНормыПолуфабриката = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	тбНормы = 0;
	
	Возврат 1;
КонецФункции //ДобавитьСтрокуВТаблицуМатериалов

// ===============================
Процедура ПечатьПотребности()
	
	тбПродукции = СоздатьОбъект("ТаблицаЗначений");
	тбПродукции.НоваяКолонка("Продукция","Справочник.ТМЦ");
	тбПродукции.НоваяКолонка("Кво","Число",14,3);
	тбПродукции.НоваяКолонка("Ед","Справочник.Единицы");
	тбПродукции.НоваяКолонка("Потребности","ТаблицаЗначений");
	
	тбМатериалыИт = СоздатьОбъект("ТаблицаЗначений");
	тбМатериалыИт.НоваяКолонка("Материал","Справочник.ТМЦ");
	тбМатериалыИт.НоваяКолонка("Кво","Число",14,3);
		
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если   (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Продукция)
			 И (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Полуфабрикат)
			 И (Продукция.ВидТМЦ <> Перечисление.ВидыТМЦ.Услуга) Тогда
			 	
			Продолжить;
		КонецЕсли;
		
		тбПродукции.НоваяСтрока();
		тбПродукции.Продукция   = Продукция;
		тбПродукции.Кво         = Кво;
		тбПродукции.Ед          = Ед;
		тбПродукции.Потребности = СоздатьОбъект("ТаблицаЗначений");
		тбМатериалы = тбПродукции.Потребности;
		тбМатериалы.НоваяКолонка("Материал","Справочник.ТМЦ");
		тбМатериалы.НоваяКолонка("Кво","Число",14,3); 
		Если ДобавитьСтрокуВТаблицуМатериалов(тбМатериалы,Продукция,Ед,Коэффициент,Кво,0,НормыЗатрат) = 0 Тогда
			Если     (Продукция.ВидТМЦ = Перечисление.ВидыТМЦ.Продукция)
				 ИЛИ (Продукция.ВидТМЦ = Перечисление.ВидыТМЦ.Полуфабрикат) Тогда
				глКомментарий("Ошибка при расчете потребности в материалах!", 3);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		тбМатериалы.Свернуть("Материал", "Кво");
		тбМатериалы.Сортировать("Материал");
	КонецЦикла; 
	
	тбПродукции.Сортировать("Продукция");

	Т = СоздатьОбъект("Таблица");
	Т.ИсходнаяТаблица("Потребность");
	
	ПечЗаказ = "Заказ: " + ТекущийДокумент() + ?(ПустоеЗначение(Контрагент) = 0,", заказчик: " + Контрагент+".", ", внутренний заказ.");
	Т.ВывестиСекцию("Шапка");
	
	тбПродукции.ВыбратьСтроки();
	Пока тбПродукции.ПолучитьСтроку() = 1 Цикл
		тбМатериалы = тбПродукции.Потребности;
		Т.ВывестиСекцию("ШапкаПродукция");
		тбМатериалы.ВыбратьСтроки();
		Пока тбМатериалы.ПолучитьСтроку() = 1 Цикл
			ПечКво = глФРМКоличествоВОтчете(тбМатериалы.Кво, тбМатериалы.Материал);
			Т.ВывестиСекцию("СтрокаМатериал");
			тбМатериалыИт.НоваяСтрока();
			тбМатериалыИт.Материал = тбМатериалы.Материал;
			тбМатериалыИт.Кво = тбМатериалы.Кво;
		КонецЦикла;
	КонецЦикла;
	
	тбМатериалыИт.Свернуть("Материал", "Кво");
	тбМатериалыИт.Сортировать("Материал");
	Т.ВывестиСекцию("ШапкаИтого");
	тбМатериалыИт.ВыбратьСтроки();
	Пока тбМатериалыИт.ПолучитьСтроку() = 1 Цикл
		ПечКво = глФРМКоличествоВОтчете(тбМатериалыИт.Кво, тбМатериалыИт.Материал);
		Т.ВывестиСекцию("СтрокаИтого");
	КонецЦикла;
	
	//Вызов выходного отчета в окно просмотра и редактирования.
	Т.Опции(0,0,0,0,"НормативныйСостав");
	Т.Защита(Константа.ФлагЗащитыТаблиц);
	Т.ТолькоПросмотр(1);
	Т.ОбластьПечати(2);
	Т.Показать("Отчет о потребности в материалах","");
	
КонецПроцедуры

Процедура ОтчетОВыпуске()
	Если ТипЗначенияСтр(глРасшифровка) = "СписокЗначений" Тогда
		глРасшифровка.УдалитьВсе();
	Иначе
		глРасшифровка = СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	
    глРасшифровка.Установить("Объект", "ОстаткиВЗаказах");
    
    глРасшифровка.Установить("НаДату", ТекущаяДата());
	
	СписТовар = СоздатьОбъект("СписокЗначений");
	списЗаказ = СоздатьОбъект("СписокЗначений");
	списЗаказ.ДобавитьЗначение(ТекущийДокумент());
	
	глРасшифровка.Установить("списТовар", СписТовар);
	глРасшифровка.Установить("списЗаказы", списЗаказ);	
	глФлагРасшифровки = 1;
	ОткрытьФорму("Отчет.ОстаткиВЗаказах");
	глФлагРасшифровки = 0;
КонецПроцедуры

// ===============================
Процедура ВыборВариантаПечати()
	Перем ВыбЗначение;
	ВариантыПечати = СоздатьОбъект("СписокЗначений");
	ВариантыПечати.ДобавитьЗначение(1,"Печать заказа");
	ВариантыПечати.ДобавитьЗначение(2,"Печать норм");
	ВариантыПечати.ДобавитьЗначение(3,"Печать потребности в материалах");
	ВариантыПечати.ДобавитьЗначение(6,"Печать потребности в материалах с продукцией");
	ВариантыПечати.ДобавитьЗначение(4,"Остатки к выпуску");
	ВариантыПечати.ДобавитьЗначение(5,"Проверка списаний и выпусков");
	
	Если ВариантыПечати.ВыбратьЗначение(выбЗначение,"",,,1) <> 1 Тогда
	    Возврат;
	КонецЕсли;
	Если ВыбЗначение = 1 Тогда
	    ПечатьЗаказа();
	ИначеЕсли ВыбЗначение = 2 Тогда
		ПечатьНорм();
	ИначеЕсли (ВыбЗначение = 3) ИЛИ (ВыбЗначение = 6) Тогда
		//ПечатьПотребности();
		глСводПоНормам(ВыбЗначение, Контекст);
	ИначеЕсли ВыбЗначение = 4 Тогда
		ОтчетОВыпуске();
	ИначеЕсли ВыбЗначение = 5 Тогда
		ОткрытьФорму("Отчет.ПроверкаСписанийИВыпусков", ТекущийДокумент());
	КонецЕсли;
КонецПроцедуры       
                         
// ===============================
Процедура Подбор()
	глПодбор(Контекст,"ТМЦ","ДляПодбора")
КонецПроцедуры

// ===============================
Процедура ОбработкаПодбора(Выб) //Предопределенная процедура
	глПриОбработкеПодбора(Выб,Контекст);
КонецПроцедуры //Обработка подбора
                                        
// ======================================
Процедура ОбработкаВыбораЗначения(Значение,Рекв,ФлагСтандОбр)
	Если Рекв = "НормыЗатрат" Тогда
		Если глПроверитьФирму(Контекст,Значение) = 0 Тогда
			ФлагСтандОбр = 0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

// ===============================
Процедура ПриЗаписи() Далее
// ===============================
Процедура НовыйНормыЗатрат()  
	Если Выбран() = 0 Тогда
		Если Вопрос("Документ не записан. Записать?",4) = 6 Тогда
			ПриЗаписи();
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//Предупреждение("Это поле заполняется автоматически, если есть проведенный документ ""Нормы затрат"" по данному заказу!");
	Фрм = СоздатьОбъект("СписокЗначений");
	Фрм.ДобавитьЗначение(Продукция,"Продукция");
	Фрм.ДобавитьЗначение(ТекущийДокумент(),"Заказ");
	Фрм.ДобавитьЗначение(Контекст,"Контекст");
	ОткрытьФорму("Документ.НормыЗатрат",Фрм);
КонецПроцедуры //НовыйНормыЗатрат

Процедура ИзмКвоКут()
	Кво = НормыЗатрат.КвоПродукции * НормыЗатрат.КоэффициентПродукции * КвоКутеров;
    Если Продукция.Выбран() = 1 Тогда
        Док = НайтиПодчиненноеСписание(Продукция, КодСтроки);
		Если ТипЗначенияСтр(Док) = "Документ" Тогда
			Если Док.КвоКутеров <> КвоКутеров Тогда
			    Предупреждение("В списаниие количество кутеров задано другое: " + Док.КвоКутеров);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
//	КвоФаршаПлан = Кво;
КонецПроцедуры

Процедура ИзмКвоЗамесов()
	ПотериФарша = РассчитатьПотериФарша(Продукция);
КонецПроцедуры

//======================================================================
Процедура ФормироватьЭтапы()
	НужныЭтапы = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ФинальнаяПродукция.Выбран() = 1 Тогда
			НужныЭтапы = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НужныЭтапы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Формировать заказы для всех этапов производства?", "Да+Нет", 4) = "Да" Тогда
		// проверим, возможно документы уже сформированы

		Если ТекущийДокумент().Выбран() = 0 Тогда
			Записать();
		КонецЕсли;
		
		ТЗаказов = СоздатьОбъект("ТаблицаЗначений");
		ТЗаказов.НоваяКолонка("Дата");
		ТЗаказов.НоваяКолонка("Продукция");
		ТЗаказов.НоваяКолонка("ФинальнаяПродукция");
		ТЗаказов.НоваяКолонка("ПродукцияРодитель");
		ТЗаказов.НоваяКолонка("НормыЗатрат");
		ТЗаказов.НоваяКолонка("Кво");
		ТЗаказов.НоваяКолонка("КвоФарша");
		ТЗаказов.НоваяКолонка("КвоЗамесов");
		ТЗаказов.НоваяКолонка("НомерЭтапа");
		ТЗаказов.НоваяКолонка("ЗаданиеНаПроизводство");
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			ТекПродукция = Продукция;
			Если ПустоеЗначение(ФинальнаяПродукция) = 0 Тогда
				СпрЭтапы = СоздатьОбъект("Справочник.ЭтапыПроизводства");
				СпрЭтапы.ИспользоватьВладельца(ФинальнаяПродукция);
				СпрЭтапы.ПорядокРеквизита("НомерЭтапа");
				СпрЭтапы.ВыбратьЭлементы();
				Пока СпрЭтапы.ПолучитьЭлемент() = 1 Цикл
					Если (СпрЭтапы.НомерЭтапа <> 0) И (СпрЭтапы.ПометкаУдаления() = 0) Тогда
						ТЗаказов.НоваяСтрока();
						ТЗаказов.Дата = ДатаДок + СпрЭтапы.ДнейОтНачала;
						ТЗаказов.Продукция = СпрЭтапы.Продукция;
						ТЗаказов.ФинальнаяПродукция = ФинальнаяПродукция;
						ТЗаказов.ПродукцияРодитель = СпрЭтапы.Продукция.Код + "//" + ФинальнаяПродукция.Код;
						ТЗаказов.НормыЗатрат = СпрЭтапы.НормыЗатрат;						
						Если СпрЭтапы.КоэфОтФаршаПред = 1 Тогда
							Стр = 0;
							Если ТЗаказов.НайтиЗначение(ТекПродукция.Код + "//" + ФинальнаяПродукция.Код, Стр, "ПродукцияРодитель") = 1 Тогда
								ТЗаказов.Кво = ТЗаказов.ПолучитьЗначение(Стр, "КвоФарша") / 100 * СпрЭтапы.КвоНорм;
							Иначе
								ТЗаказов.Кво = Кво / 100 * СпрЭтапы.КвоНорм;
							КонецЕсли;
						Иначе
							ТЗаказов.Кво = КвоКутеров * СпрЭтапы.КвоНорм;
						КонецЕсли;
						ТЗаказов.КвоФарша = ТЗаказов.НормыЗатрат.КвоПродукции * ТЗаказов.НормыЗатрат.КоэффициентПродукции * ТЗаказов.Кво;
						
						ТЗаказов.КвоЗамесов = КвоЗамесов;
						ТЗаказов.ЗаданиеНаПроизводство = ЗаданиеНаПроизводство;
						ТЗаказов.НомерЭтапа = СпрЭтапы.НомерЭтапа;
						
						ТекПродукция = ТЗаказов.Продукция;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ТЗаказов.Сортировать("Дата, Продукция");
		ТекЗаказ = ТекущийДокумент();
		ТекДата = Дата(0);
		ДокЗ = СоздатьОбъект("Документ.Заказ");
		
		ТЗаказов.ВыбратьСтроки();
		Пока ТЗаказов.ПолучитьСтроку() = 1 Цикл
			Если ТекДата <> ТЗаказов.Дата Тогда
				Если ДокЗ.КоличествоСтрок() > 0 Тогда
					ДокЗ.ПоследКод = ДокЗ.КоличествоСтрок();
					ДокЗ.Записать();
					ТекЗаказ = ДокЗ.ТекущийДокумент();
				КонецЕсли;
				ТекДата = ТЗаказов.Дата;
				
				ДокЗ.Новый();
				ДокЗ.ДатаДок = ТЗаказов.Дата;
				ДокЗ.СпособФормированияНалоговыхДокументов = 1;
				ДокЗ.Подразделение = Подразделение;
				ДокЗ.НеФормироватьЭтапы = 0;
				ДокЗ.ЗаказПредЭтапа = ТекЗаказ;
				ДокЗ.Автор = глПользователь;
				ДокЗ.Фирма = Фирма;
				глУстановитьНомер(ДокЗ);
				ДокЗ.Примечание = "Автоматическое формирование этапов";				
			КонецЕсли;
			
			ДокЗ.НоваяСтрока();
			ДокЗ.Продукция = ТЗаказов.Продукция;
			ДокЗ.Ед = ДокЗ.Продукция.ЕдиницаПоУмолчанию;
			ДокЗ.Коэффициент = ДокЗ.Продукция.ЕдиницаПоУмолчанию.Коэффициент;
			ДокЗ.КвоКутеров = ТЗаказов.Кво;
			ДокЗ.НормыЗатрат = ТЗаказов.НормыЗатрат;
			ДокЗ.Кво = ДокЗ.НормыЗатрат.КвоПродукции * ДокЗ.НормыЗатрат.КоэффициентПродукции * ДокЗ.КвоКутеров;
			ДокЗ.КвоЗамесов = ТЗаказов.КвоЗамесов;
			ДокЗ.КомментСтр = ТЗаказов.НомерЭтапа;
			ДокЗ.КодСтроки = ДокЗ.КоличествоСтрок();			
			ДокЗ.ПотериФарша = РассчитатьПотериФарша(ДокЗ.Продукция.ПотериФарша);
			ДокЗ.ЗаданиеНаПроизводство = ТЗаказов.ЗаданиенаПроизводство;
			ДокЗ.ФинальнаяПродукция = ТЗаказов.ФинальнаяПродукция;			
		КонецЦикла;
		
		Если ДокЗ.КоличествоСтрок() > 0 Тогда
			ДокЗ.ПоследКод = ДокЗ.КоличествоСтрок();
			ДокЗ.Записать();
		КонецЕсли;		
	КонецЕсли;		
КонецПроцедуры // ФормироватьЭтапы

//Процедура рассчитывает потери фарша по 
//заданным условия в продукции
Функция РассчитатьПотериФарша(фПродукция)
	
	//Если считаем как абсолютную величину тогда
	Если фПродукция.ПотериФаршаПроцент.Получить(ДатаДок) = 0 Тогда
		фПотериФарша = фПродукция.ПотериФарша.Получить(ДатаДок) * КвоЗамесов;
	Иначе //берем % потерь от количества Фврша факт
		фПотериФарша = фПродукция.ПотериФарша.Получить(ДатаДок)*(КвоФаршаФакт/100);
	КонецЕсли;
	
	Возврат фПотериФарша
	
КонецФункции //РассчитатьПотериФарша()

// ======================================
Процедура ПриЗаписи()
	глПроверкаДатыДок(Контекст,"Запись");
	Если глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	Попытка
		АвтоВремяОтключить();
		УстановитьВремя(7,0,0);		
	Исключение КонецПопытки;
	Автор = глПользователь;
	
	Если (ТекущийДокумент().Выбран() = 0) И (НеФормироватьЭтапы = 0) Тогда
		ФормироватьЭтапы();
	КонецЕсли;
КонецПроцедуры
// ======================================

Процедура Заполнить()
	// заполняем фактический фарш по списанию
	Если Итог("КвоФаршаФакт") <> 0  Тогда
	    Если Вопрос("Уже внесены фактически данные. Всё равно заполнить?", "Да+Нет") = "Нет" Тогда
	        Возврат;
	    КонецЕсли;
	КонецЕсли;
	ТекстЗ = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаДок по ДатаДок;
	|Фирма = Регистр.ПроизводственныеЗатраты.Фирма;
	|Материал = Регистр.ПроизводственныеЗатраты.Материал;
	|Заказ = Регистр.ПроизводственныеЗатраты.Заказ;
	|Количество = Регистр.ПроизводственныеЗатраты.Количество;
	|НеУчитыватьВОбщемВесе = Регистр.ПроизводственныеЗатраты.Материал.НеУчитыватьВОбщемВесе;
	|Продукция = Регистр.ПроизводственныеЗатраты.Продукция;
	|Функция КвоПриход = Приход(Количество);
	|Группировка Продукция без групп все;
	|Условие(Заказ = ТекущийДокумент());
	|Условие(НеУчитыватьВОбщемВесе = 0);
	|"//}}ЗАПРОС
	;
	
	Запрос = СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗ) = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если Запрос.Продукция = Продукция Тогда
			    КвоФаршаПлан = Запрос.КвоПриход;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОткрытьСписание()
	Если (Продукция.Выбран() = 1) и (ТекущийДокумент().Выбран() = 1) Тогда
		Док = НайтиПодчиненноеСписание(Продукция, КодСтроки);
		Если ТипЗначенияСтр(Док) = "Документ" Тогда
		    ОткрытьФорму(Док);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьВыпуск()
	Если (Продукция.Выбран() = 1) и (ТекущийДокумент().Выбран() = 1) Тогда
		НомСтр = 0;
		Док = НайтиПодчиненныйВыпуск(Продукция, НомСтр);
		Если НомСтр <> 0 Тогда
			ОткрытьФорму(Док, НомСтр);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура Проверка()
	ОткрытьФорму("Отчет.ПроверкаСписанийИВыпусков", ТекущийДокумент());
КонецПроцедуры

Функция ОтношениеРазницы()
	Разн = КвоФаршаФакт - КвоФаршаПлан;
	Возврат Формат(?(КвоФаршаПлан = 0, 0, Разн/КвоФаршаПлан) * 100, "Ч12.2");
КонецФункции  

//====================================================================== // --- УМК Сандомирский В.Ю. (11.07.15)
Процедура ЗаполнитьИзЗаданий()	
	ВыбЗначение = СоздатьОбъект("Документ.УМК_ЗаданиеНаПроизводство");
	Если ВыбЗначение.Выбрать("Выбор задания",) = 1 Тогда
		ВыбЗначение.ВыбратьСтроки();
		Пока ВыбЗначение.ПолучитьСтроку() = 1 Цикл
			ТекПродукция = ВыбЗначение.Продукция;
			Если ВыбЗначение.КвоФаршаИзКутеров <> 0 Тогда
				Если ПустоеЗначение(ВыбЗначение.Норма.КвоПродукции) = 0 Тогда
					ТекКво = Окр(ВыбЗначение.КвоФарша / ?(ВыбЗначение.Норма.КвоПродукции = 0, 1, ВыбЗначение.Норма.КвоПродукции), 2);
				КонецЕсли;
			Иначе
				ТекКво = ВыбЗначение.КвоКутеров/100;
				ТекНЗ = "";
			КонецЕсли;
			Если НеФормироватьЭтапы = 0 Тогда
				Этапы = СоздатьОбъект("Справочник.ЭтапыПроизводства");
				Этапы.ИспользоватьВладельца(ВыбЗначение.Продукция);
				Этапы.ПорядокРеквизита("НомерЭтапа");
				Этапы.ВыбратьЭлементы();
				Пока Этапы.ПолучитьЭлемент() = 1 Цикл
					Если Этапы.ПометкаУдаления() = 0 Тогда
						ТекПродукция = Этапы.Продукция;
						ТекНЗ = Этапы.НормыЗатрат;
						ТекКво = ТекКво * Этапы.КвоНорм;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НоваяСтрока();
			Продукция 	= ТекПродукция;
			глУстановкаБазЕд(Контекст,Продукция,Продукция.ЕдиницаПоУмолчанию.Единица);
			КвоКутеров 	= ТекКво;
			НормыЗатрат = ТекНЗ;
			Если ТекПродукция <> ВыбЗначение.Продукция Тогда
				ФинальнаяПродукция = ВыбЗначение.Продукция;
			КонецЕсли;
			ЗаданиеНаПроизводство = ВыбЗначение.ТекущийДокумент();
			Если ПустоеЗначение(НормыЗатрат) = 1 Тогда
				Пер = СоздатьОбъект("Периодический");
				Пер.ИспользоватьОбъект("НормыЗатрат", Продукция);
				Пер.ОбратныйПорядок();
				Пер.ВыбратьЗначения(, ДатаДок);
				Пока Пер.ПолучитьЗначение() = 1 Цикл
					Если Пер.Значение.ФДляЗаказа = 1 Тогда
						НормыЗатрат = Пер.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ПустоеЗначение(НормыЗатрат) = 0 Тогда
				ИзмКвоКут();
			КонецЕсли;
			КвоЗамесов = 1;
			ПотериФарша = РассчитатьПотериФарша(Продукция);
			ПоследКод = ПоследКод + 1;
			КодСтроки = ПоследКод;			
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры // ЗаполнитьИзЗаданий()

Функция ПолучитьИнфо(Прод)
	СтрИнфо = "";
	Если ПустоеЗначение(Продукция) = 0 Тогда
		Док = СоздатьОбъект("Документ");
		Док.УстановитьФильтр(1, 0);
		Док.ВыбратьПоЗначению(, ДатаДок, "Продукция", Продукция);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Вид() = "НормыЗатрат" Тогда
				Если Док.ТекущийДокумент() <> НормыЗатрат Тогда
					Если Док.Действует = 1 Тогда
						СтрИнфо = СтрИнфо + ?(СтрИнфо = "", "", "; ") + Строка(Док.ДатаДок) + " (" 
							+ СокрЛП(Док.Примечание) + ")";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат СтрИнфо;	
КонецФункции

//======================================================================
Функция НормыЗатратИнфо()
	Возврат ПолучитьИнфо(Продукция);
КонецФункции

//======================================================================
Процедура ПоказатьИнфоПоНЗ()
	Инфо = ПолучитьИнфо(Продукция);

	Если Инфо <> "" Тогда
		Предупреждение(Инфо);
	КонецЕсли;
КонецПроцедуры // гл

СписокДействий = глПолучитьСписокДействий("
	|СтруктураПодчиненности,
	|ВводНаОсновании,
	|ОткрытьВЖурнале,
	|Подчиненные");