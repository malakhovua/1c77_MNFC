Перем  ТаблицаВидовРабот_индекс, ТАут, Дл, ТЗДок, ТаблицаВидовРабот;
Перем СпТовар;

Процедура ОбработкаЯчейкиТаблицы(ТекЗначение,ТекФлагСтандОбраб,ТекТаблица,ТекАдрес)
	
	Если ТипЗначения(ТекЗначение) = 2 Тогда
		Таб = СоздатьОбъект("Таблица");
		Таб.ИсходнаяТаблица("Расшифровка");
		ТЗДок.ВыбратьСтроки();
		ИтогБаза = 0;
		ИтогСумма = 0;
		
		Таб.ВывестиСекцию("Заголовок");
		Пока ТЗДок.ПолучитьСтроку() = 1 Цикл
			Если ТЗДок.Ключ = ТекЗначение Тогда
				Таб.ВывестиСекцию("Строка");
				ИтогБаза = ИтогБаза + ТЗДок.База;
				ИтогСумма = ИтогСумма + ТЗДок.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		Таб.Защита(Константа.ФлагЗащитыТаблиц);
		Таб.ТолькоПросмотр(1);
		
		Если ИтогБаза <> 0 Тогда
			Таб.ВывестиСекцию("Итоги");
			Таб.Показать("Расшифровка");
		КонецЕсли;
		
	Иначе
		ОткрытьФорму(ТекЗначение);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСтрокуТАут(Продукция, КодТМЦ, КлючПоиска, База, Документ = "")
	
	КПоиска = КодТМЦ + "/" + КлючПоиска;
	
	сзКлюч = СоздатьОбъект("СписокЗначений");
	сзКлюч.ДобавитьЗначение(КПоиска);
	ТаблицаВидовРабот_индекс.Подмножество(сзКлюч, 1,"Индекс");
	ТаблицаВидовРабот_индекс.ВыбратьСтроки("Индекс");
	
	Пока ТаблицаВидовРабот_индекс.ПолучитьСтроку("Индекс") = 1 Цикл
		ТАут.НоваяСтрока();
		ТАут.Продукция = Продукция;
		ТАут.ВидРабот = ТаблицаВидовРабот_индекс.ВР;
		ТАут.Сумма = База * ?(фСумма = 1, ТаблицаВидовРабот_индекс.Тариф, 1);
		//Добавим строку в расшифровку.
		ТЗДок.НоваяСтрока();
		ТЗДок.Ключ = Строка(ТаблицаВидовРабот_индекс.ВР.Код) + ";" + Строка(Продукция.Код);
		ТЗДок.Документ = Документ;
		ТЗДок.База = База;
		ТЗДок.Тариф = ?(фСумма = 1, ТаблицаВидовРабот_индекс.Тариф, 1);
		ТЗДок.Сумма = ТАут.Сумма;
	КонецЦикла;
	
КонецПроцедуры

//Добавляет базу, продукцию, вид работы и тариф непосредсвенно из документа в котором произведено начисление 
//зарплаты
Процедура ДобавитьСтрокиТАутДокументы()
	
	рс = СоздатьОбъект("ODBCRecordset");
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора внесенные вручную изменения будут потеряны!!!
	ТекстЗапроса = "-- qryMaker:Отчет1.2025.05.01.13.20.26
		|SELECT ПереработкаМяса.IDDOC [Документ $Документ.ПереработкаМяса]
		|	, $ПереработкаМяса.Сотрудник [Сотрудник $Справочник.Сотрудники]
		|	, $ПереработкаМяса.КТУ База
		|	, $ПереработкаМяса.ВидРаботы [ВР $Справочник.ВидыРабот]
		|	, $ПереработкаМяса.НачисленоЗП Сумма
		|	, $СписаниеТМЦВПроизводство.ПродукцияШ [Продукция $Справочник.ТМЦ]
		|	, $ПоследнееЗначение.ВидыРабот.Тариф(ВидыРабот.ID, Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime)) Тариф
		|	, ВидыРабот.CODE Ключ
		|FROM _1SJOURN AS Журнал
		|	RIGHT OUTER JOIN $Документ.ПереработкаМяса AS ПереработкаМяса ON Журнал.IDDOC = ПереработкаМяса.IDDOC
		|	INNER JOIN $Документ.СписаниеТМЦВПроизводство AS СписаниеТМЦВПроизводство ON $ПереработкаМяса.ДокОснование = СписаниеТМЦВПроизводство.IDDOC
		|	INNER JOIN $Справочник.ВидыРабот AS ВидыРабот ON $ПереработкаМяса.ВидРаботы = ВидыРабот.ID
		|WHERE (Журнал.DATE_TIME_IDDOC >= :НачДата)
		|	AND (Журнал.DATE_TIME_IDDOC <= :КонДата~)
		|	AND ($ПереработкаМяса.Сотрудник <> $ПустойИд)
		|	AND ((Журнал.CLOSED & 1) = 1)
		|UNION ALL
		|SELECT ПереработкаМяса.IDDOC
		|	, $ПереработкаМяса.Сотрудник1
		|	, $ПереработкаМяса.КТУ1
		|	, $ПереработкаМяса.ВидРаботы1
		|	, $ПереработкаМяса.НачисленоЗП1
		|	, $СписаниеТМЦВПроизводство.ПродукцияШ
		|	, $ПоследнееЗначение.ВидыРабот.Тариф(ВидыРабот.ID, Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime))
		|	, ВидыРабот.CODE
		|FROM _1SJOURN AS Журнал
		|	RIGHT OUTER JOIN $Документ.ПереработкаМяса AS ПереработкаМяса ON Журнал.IDDOC = ПереработкаМяса.IDDOC
		|	INNER JOIN $Документ.СписаниеТМЦВПроизводство AS СписаниеТМЦВПроизводство ON $ПереработкаМяса.ДокОснование = СписаниеТМЦВПроизводство.IDDOC
		|	INNER JOIN $Справочник.ВидыРабот AS ВидыРабот ON $ПереработкаМяса.ВидРаботы1 = ВидыРабот.ID
		|WHERE (Журнал.DATE_TIME_IDDOC >= :НачДата)
		|	AND (Журнал.DATE_TIME_IDDOC <= :КонДата~)
		|	AND ($ПереработкаМяса.Сотрудник <> $ПустойИд)
		|	AND ((Журнал.CLOSED & 1) = 1)
		|";
	рс.УстановитьТекстовыйПараметр("НачДата", НачДата);
	рс.УстановитьТекстовыйПараметр("КонДата", КонДата);
	Результат = рс.ВыполнитьИнструкцию(ТекстЗапроса);
	Результат.ВыбратьСтроки();
	
	Пока Результат.ПолучитьСтроку() = 1 Цикл
		ТАут.НоваяСтрока();
		ТАут.Продукция =Результат. Продукция;
		ТАут.ВидРабот = Результат.ВР;
		ТАут.Сумма = Результат.База * ?(фСумма = 1, Результат.Тариф, 1);
		//Добавим строку в расшифровку.
		ТЗДок.НоваяСтрока();
		ТЗДок.Ключ = СокрЛП(Строка(Результат.Ключ)) + ";" + СокрЛП(Строка(Результат.Продукция.Код));
		ТЗДок.Документ = Результат.Документ;
		ТЗДок.База =Результат. База;
		ТЗДок.Тариф = Результат.Тариф;
		ТЗДок.Сумма = Результат.Сумма;
	КонецЦикла;
	
КонецПроцедуры //ДобавитьСтрокиТАутДокументы()

Процедура  ОбработатьСписЗаказов(СписЗаказов, КлючСпособа);
	
	Ключ1 = Строка(Перечисление.ТипБазыВР.КвоФарша) + "/" + КлючСпособа;
	Ключ2 = Строка(Перечисление.ТипБазыВР.Кутера) + "/" + КлючСпособа;
	
	рс = СоздатьОбъект("ODBCRecordset");
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора внесенные вручную изменения будут потеряны!!!
	
	ТекстЗапроса = 
	"SELECT $ЗаказСтроки.Продукция [Продукция $Справочник.ТМЦ]
	|	, $ЗаказСтроки.КвоФаршаФакт КвоФаршаФакт
	|	, $ЗаказСтроки.КвоКутеров КвоКутеров
	|	, ЗаказСтроки.IDDOC [ЗаказСсылка $Документ.Заказ]
	|   , CAST(LEFT(Жур.Date_Time_IDDoc, 8) as DateTime) as ДатаДок 
	|	, ТМЦ.CODE ТМЦ_Код
	|FROM $ДокументСтроки.Заказ AS ЗаказСтроки
	|	INNER JOIN $Справочник.ТМЦ AS ТМЦ ON $ЗаказСтроки.Продукция = ТМЦ.ID
	|   INNER JOIN _1SJourn as Жур ON Жур.IDDoc = ЗаказСтроки.IDDoc
	|   WHERE (ЗаказСтроки.IDDoc IN (SELECT val FROM #СписЗаказов))
	|";
	
	рс.УложитьСписокОбъектов(СписЗаказов, "#СписЗаказов");
	Результат = рс.ВыполнитьИнструкцию(ТекстЗапроса);
	Результат.ВыбратьСтроки();
	
	Пока Результат.ПолучитьСтроку() = 1 Цикл
			КлючПоиска1 = Ключ1 + "/" + Строка(Результат.ДатаДок);
			КлючПоиска2 = Ключ2 + "/" + Строка(Результат.ДатаДок);
			// ищем в таблице продукции и видов работ
			ДобавитьСтрокуТАут(Результат.Продукция, Результат.ТМЦ_Код, КлючПоиска1, Результат.КвоФаршаФакт, Результат.ЗаказСсылка);
			ДобавитьСтрокуТАут(Результат.Продукция, Результат.ТМЦ_Код, КлючПоиска2, Результат.КвоКутеров*100, Результат.ЗаказСсылка);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьЗапросПоВыпуску(НДата, КДата, СписЗ, Способ)
	
	рс = СоздатьОбъект("ODBCRecordset");
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора внесенные вручную изменения будут потеряны!!!
	ТекстЗапроса = "
		|SELECT ВыпускПродукцииОбороты.Продукция [Продукция $Справочник.ТМЦ]
		|	, ВыпускПродукцииОбороты.Заказ [Заказ $Документ.Заказ]
		|	, RIGHT(ВыпускПродукцииОбороты.ПозицияДокумента,9) [Док $Документ]
		|   , CAST(LEFT(ВыпускПродукцииОбороты.ПозицияДокумента, 8) as DateTime) as ДатаДок
		|   , CAST(LEFT(Жур.Date_Time_IDDoc, 8) as DateTime) as ДатаЗаказа
		|	, ВыпускПродукцииОбороты.ВидДокумента  as Док_вид
		|   , ТМЦ.Code as ТМЦ_Код
		|	, Sum(ВыпускПродукцииОбороты.КоличествоОборот) КвоСумма
		|FROM $РегистрОбороты.ВыпускПродукции(:НДата,
		|		:КДата~,
		|		Документ,,
		|		(Продукция IN (SELECT Val FROM #СпТовар))" + 
	    ?(Способ = 1," AND (Заказ IN (SELECT Val FROM #СписЗ))","") + ", 
		|		(Продукция, Заказ),
		|		Количество) AS ВыпускПродукцииОбороты
		| LEFT OUTER JOIN $Справочник.ТМЦ AS ТМЦ ON ВыпускПродукцииОбороты.Продукция = ТМЦ.ID 
		| LEFT OUTER JOIN
	    |_1SJourn as Жур ON Жур.IDDoc = ВыпускПродукцииОбороты.Заказ
		|GROUP BY ВыпускПродукцииОбороты.Продукция
		|	, ВыпускПродукцииОбороты.Заказ
		|	, ВыпускПродукцииОбороты.ПозицияДокумента
		|   , Жур.Date_Time_IDDoc
		|	, ВыпускПродукцииОбороты.ВидДокумента
		|   , ТМЦ.Code
		|";
	рс.УстановитьТекстовыйПараметр("НДата", НДата);
	рс.УстановитьТекстовыйПараметр("КДата", КДата);
	рс.УложитьСписокОбъектов(СпТовар, "#СпТовар");
	рс.УложитьСписокОбъектов(СписЗ, "#СписЗ");
	
	Результат = рс.ВыполнитьИнструкцию(ТекстЗапроса);
	//Сообщить(Строка(Способ));
	//Результат.ВыбратьСтроку();

	Возврат Результат;
КонецФункции

Процедура ДобавитьТПрод(Прод, ТПрод, НачСтр)
	Если ПустоеЗначение(Прод) = 1 Тогда
		Возврат;
	КонецЕсли;
		
	Наим = Формат(Прод.Наименование, "С"+Дл);
	Если Прод.ЭтоГруппа() = 1 Тогда
		Наим = "*" + Наим;
	КонецЕсли;
	Для Инд = НачСтр+1 По ТПрод.КоличествоСтрок() Цикл
		ТПрод.УстановитьЗначение(Инд, "ПолноеИмя", Наим + "\" + ТПрод.ПолучитьЗначение(Инд, "ПолноеИмя"));
	КонецЦикла;
	
	ТПрод.НоваяСтрока();
	ТПрод.Продукция = Прод;
	ТПрод.ПолноеИмя = Наим;
	ДобавитьТПрод(Прод.Родитель, ТПрод, НачСтр);
КонецПроцедуры

Процедура ВывестиТаблицу()
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Таблица");
	
	ТВР = СоздатьОбъект("ТаблицаЗначений");
	ТАут.Свернуть("Продукция,ВидРабот", "Сумма");
	ТАут.Сортировать("Продукция");
	ТАут.Выгрузить(ТВР,,,"ВидРабот,Сумма");
	ТВР.Свернуть("ВидРабот", "Сумма");
	ТВР.Сортировать("ВидРабот");
	Таб.ВывестиСекцию("Шапка|Основная");
	ТВР.ВыбратьСтроки();
	Пока ТВР.ПолучитьСтроку() = 1 Цикл
		Таб.ПрисоединитьСекцию("Шапка|ВР");
	КонецЦикла;
	Таб.Опции(0,0,Таб.ВысотаТаблицы(), 1);
	
	ТПрод = СоздатьОбъект("ТаблицаЗначений");
	ТПрод.НоваяКолонка("Продукция", "Справочник.ТМЦ");
	ТПрод.НоваяКолонка("ПолноеИмя", "Строка");
	СтарПрод = "";
	ТАут.ВыбратьСтроки();
	Пока ТАут.ПолучитьСтроку() = 1 Цикл
		Если СтарПрод <> ТАут.Продукция Тогда
			ДобавитьТПрод(ТАут.Продукция, ТПрод, ТПрод.КоличествоСтрок());
		КонецЕсли;
	КонецЦикла; 
	ТПрод.Свернуть("Продукция,ПолноеИмя", "Сумма");
	ТПрод.Сортировать("ПолноеИмя");
	
	ТПрод.ВыбратьСтроки();
	Пока ТПрод.ПолучитьСтроку() = 1 Цикл
		Если ТПрод.Продукция.ЭтоГруппа() = 1 Тогда
			Таб.ВывестиСекцию("Группа|Основная");
		Иначе
			ТВР.Заполнить(0,,,"Сумма");
			Стр = 0;
			Если ТАут.НайтиЗначение(ТПрод.Продукция, Стр, "Продукция") = 1 Тогда
				ТАут.ПолучитьСтрокуПоНомеру(Стр);
				Пока ТАут.Продукция = ТПрод.Продукция Цикл
					Стр = Стр + 1;
					Стр1 = 0;
					Если ТВР.НайтиЗначение(ТАут.ВидРабот, Стр1, "ВидРабот") = 1 Тогда
						ТВР.УстановитьЗначение(Стр1, "Сумма", ТАут.Сумма);
					КонецЕсли;					

					Если Стр > ТАут.КоличествоСтрок() Тогда
						Прервать;
					Иначе
						ТАут.ПолучитьСтрокуПоНомеру(Стр);
					КонецЕсли;					
				КонецЦикла;
				
				Таб.ВывестиСекцию("Строка|Основная");
				ТВР.ВыбратьСтроки();
				Пока ТВР.ПолучитьСтроку() = 1 Цикл
					Таб.ПрисоединитьСекцию("Строка|ВР");
				КонецЦикла;				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
    
	Таб.ВывестиСекцию("Итого|Основная");
	ТАут.Свернуть("ВидРабот", "Сумма");
	ТАут.Сортировать("ВидРабот");
	ТАут.ВыбратьСтроки();
	Пока ТАут.ПолучитьСтроку() = 1 Цикл
		Таб.ПрисоединитьСекцию("Итого|ВР");
	КонецЦикла;
	
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Продукция и ВР");	
КонецПроцедуры

//*******************************************
Процедура Сформировать()
	
	// алгоритм 
	// вначале формирум таблицу, где будут все сочетания дат и схем
	Состояние("Подготовка таблицы схем");
	спТовар = СоздатьОбъект("СписокЗначений");
	
	СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
	ТаблСхемРасчетаЗП = СоздатьОбъект("ТаблицаЗначений");
	ТаблСхемРасчетаЗП.НоваяКолонка("Продукция", "Справочник.ТМЦ");
	ТаблСхемРасчетаЗП.НоваяКолонка("ДатаНач", "Дата");
	ТаблСхемРасчетаЗП.НоваяКолонка("ДатаКон", "Дата");
	ТаблСхемРасчетаЗП.НоваяКолонка("Схема", "Документ.СхемаРасчетаЗП");
	
	мд=СоздатьОбъект("MetaDataWork");
	рс = СоздатьОбъект("ODBCRecordset");
	
	ТекстЗапроса = "select  objid [Продукция $Справочник.ТМЦ]
	|, value as [Схема $Документ.СхемаРасчетаЗП]
	|, DATE as ДатаНач
	|, CAST(:КонДата as DateTime) as ДатаКон
	| from _1sconst (nolock)
    |where objid in 
	|        (SELECT ТМЦ.ID [Ссылка $Справочник.ТМЦ]
    |          FROM $Справочник.ТМЦ AS ТМЦ "
	                       + ?(списТовар.РазмерСписка()>0,"WHERE ТМЦ.ID IN (SELECT Val FROM #списТовар)", "") +") 
    |and id=:СхемаРасчетаЗП
	|and DATE  BETWEEN :НачДата_next_day AND :КонДата
	|and value <> $ПустойИД
	|UNION ALL
	|SELECT ТМЦ.ID [Продукция $Справочник.ТМЦ]
	|, $ПоследнееЗначение.ТМЦ.СхемаРасчетаЗП(ТМЦ.ID, :НачДата) [Схема $Документ.СхемаРасчетаЗП]
	|, CAST(:НачДата as DateTime) as ДатаНач
	|, CAST(:КонДата as DateTime) as ДатаКон
    |FROM $Справочник.ТМЦ AS ТМЦ
	|where $ПоследнееЗначение.ТМЦ.СхемаРасчетаЗП(ТМЦ.ID, :НачДата)  <> $ПустойИД"  
	+ ?(списТовар.РазмерСписка()>0," and  ТМЦ.ID IN (SELECT Val FROM #списТовар)", "");
	   
	рс.УстановитьТекстовыйПараметр("НачДата", НачДата);
	рс.УстановитьТекстовыйПараметр("НачДата_next_day", НачДата+1);
	рс.УстановитьТекстовыйПараметр("КонДата", КонДата);
	рс.УстановитьТекстовыйПараметр("СхемаРасчетаЗП",мд.ИДОбъекта(метаданные.Справочник("ТМЦ").Реквизит("СхемаРасчетаЗП")));
	
	Если списТовар.РазмерСписка() > 0 Тогда
		рс.УложитьСписокОбъектов(списТовар, "#списТовар");
	КонецЕсли;
	
	
	ТаблСхемРасчетаЗП = рс.ВыполнитьИнструкцию(ТекстЗапроса);
	ТаблСхемРасчетаЗП.Сортировать("Продукция +, ДатаНач + ");
	
	//Список продукции содержащий схемы расчета з/п
    // опредилим временные границы действия схем
	Для индекс = 1 По ТаблСхемРасчетаЗП.КоличествоСтрок() Цикл
		
		ТаблСхемРасчетаЗП.ПолучитьСтрокуПоНомеру(Индекс);
		спТовар.ДобавитьЗначение(ТаблСхемРасчетаЗП.Продукция);
		
		Если индекс<>1 Тогда
			
			Продукция_2 = ТаблСхемРасчетаЗП.Продукция; 
			ДатаНач_2 = ТаблСхемРасчетаЗП.ДатаНач;
			
			ТаблСхемРасчетаЗП.ПолучитьСтрокуПоНомеру(Индекс-1);
			Продукция_1 = ТаблСхемРасчетаЗП.Продукция;	
						
			Если Продукция_1 = Продукция_2 Тогда
				ТаблСхемРасчетаЗП.ДатаКон = ДатаНач_2 - 1; //Граница с которой начинает действовать новая схема.
			КонецЕсли;

		КонецЕсли;
		
    КонецЦикла;	
	
	// теперь имеем таблицу значений, сколько дней действовала какая схема
	// её нужно развернуть в таблицу видов работ с датами
	ТаблицаВидовРабот = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаВидовРабот.НоваяКолонка("Продукция", "Справочник.ТМЦ");
	ТаблицаВидовРабот.НоваяКолонка("Дата", "Дата");
	ТаблицаВидовРабот.НоваяКолонка("Ключ", "Строка");
	ТаблицаВидовРабот.НоваяКолонка("ВР", "Справочник.ВидыРабот");

	//Массив документов схема расчета ЗП
	ТабМассивДокСхеРасчетаЗП = СоздатьОбъект("ТаблицаЗначений");
	
	//Таб. в разрезе Схема , ВР, База, Способ (без продукции)
	ТабВидовРаботПоДокСхема = СоздатьОбъект("ТаблицаЗначений");
	ТабВидовРаботПоДокСхема.НоваяКолонка("Схема", "Документ.СхемаРасчетаЗП");
	ТабВидовРаботПоДокСхема.НоваяКолонка("ВР", "Справочник.ВидыРабот");
	ТабВидовРаботПоДокСхема.НоваяКолонка("База", "Перечисление.ТипБазыВР");
	ТабВидовРаботПоДокСхема.НоваяКолонка("Способ", "Число");
	
	ТаблСхемРасчетаЗП.Выгрузить(ТабМассивДокСхеРасчетаЗП, ,,"Схема"); // выгрузим документы в Массив схем
	
	//Необходимо убрать дубли документов
	ТабМассивДокСхеРасчетаЗП.НоваяКолонка("С", "Число");//Для свертки таблицы
	ТабМассивДокСхеРасчетаЗП.Свернуть("Схема", "С");
	
	
	ТабМассивДокСхеРасчетаЗП.ВыбратьСтроки(); // Обходим документы схемы 
	
	Пока ТабМассивДокСхеРасчетаЗП.ПолучитьСтроку() = 1 Цикл
		Схема = ТабМассивДокСхеРасчетаЗП.Схема;
		Схема.ВыбратьСтроки();
		Пока Схема.ПолучитьСтроку() = 1 Цикл
			Если списВидР.РазмерСписка() > 0 Тогда
				Если Мин(списВидР.НайтиЗначение(Схема.ВидРабот), 1) = ?(фНЕВР = 1, 1, 0) Тогда
					Продолжить; //фильтруем по виду работ исходя из пользоват. условий
				КонецЕсли;
			КонецЕсли;
			ТабВидовРаботПоДокСхема.НоваяСтрока();
			ТабВидовРаботПоДокСхема.Схема = Схема;
			ТабВидовРаботПоДокСхема.ВР = Схема.ВидРабот;
			ТабВидовРаботПоДокСхема.Способ = Схема.ВидРабот.Способ;
			ТабВидовРаботПоДокСхема.База = Схема.ВидРабот.База;
		
		КонецЦикла;
	КонецЦикла;
	
	ТабВидовРаботПоДокСхема.Сортировать("Схема*");
	
	ВТ_ВидовРабот = СоздатьОбъект("ТаблицаЗначений");
	ВТ_ВидовРабот.НоваяКолонка("Ключ", "Строка");
	ВТ_ВидовРабот.НоваяКолонка("ВидРабот", "Справочник.ВидыРабот");
	
	ТаблСхемРасчетаЗП.ВыбратьСтроки();
	// Тут необходимо развернуть таблицу Схем расчета ЗП в разрезе видов работ
	Пока ТаблСхемРасчетаЗП.ПолучитьСтроку() = 1 Цикл
		// ищем схему в таблице и добавляем все её виды работ
		ВТ_ВидовРабот.УдалитьСтроки();
		индекс = 0;
		Если ТабВидовРаботПоДокСхема.НайтиЗначение(ТаблСхемРасчетаЗП.Схема, индекс, "Схема") = 1 Тогда
			ТабВидовРаботПоДокСхема.ПолучитьСтрокуПоНомеру(индекс);
			Пока ТабВидовРаботПоДокСхема.Схема = ТаблСхемРасчетаЗП.Схема Цикл
				ВТ_ВидовРабот.НоваяСтрока();
				ВТ_ВидовРабот.Ключ = Строка(ТабВидовРаботПоДокСхема.База) + "/" + ТабВидовРаботПоДокСхема.Способ;
				ВТ_ВидовРабот.ВидРабот = ТабВидовРаботПоДокСхема.ВР;
				индекс = индекс + 1;
				Если индекс > ТабВидовРаботПоДокСхема.КоличествоСтрок() Тогда
					Прервать;
				Иначе
					ТабВидовРаботПоДокСхема.ПолучитьСтрокуПоНомеру(индекс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Ключ = ТаблСхемРасчетаЗП.Продукция.Код;
		НДата = ТаблСхемРасчетаЗП.ДатаНач;
		Пока НДата <= ТаблСхемРасчетаЗП.ДатаКон Цикл
			ВТ_ВидовРабот.ВыбратьСтроки();
			Пока ВТ_ВидовРабот.ПолучитьСтроку() = 1 Цикл
				ТаблицаВидовРабот.НоваяСтрока();
				ТаблицаВидовРабот.Продукция = ТаблСхемРасчетаЗП.Продукция;
				ТаблицаВидовРабот.Дата = НДата;
				ТаблицаВидовРабот.Ключ = Ключ + "/" + ВТ_ВидовРабот.Ключ + "/" + Строка(НДата);
				ТаблицаВидовРабот.ВР = ВТ_ВидовРабот.ВидРабот;
			КонецЦикла;
			НДата=НДата+1;
		КонецЦикла;
		
	КонецЦикла;	
	
	//Добавим тарифы по виду работ
    рс = СоздатьОбъект("ODBCRecordSet");
    рс.ВыполнитьИнструкцию("IF OBJECT_ID(N'tempdb..#ВТ_ИЗ_ТЗ', N'U') IS NOT NULL DROP TABLE #ВТ_ИЗ_ТЗ");
    рс.Выполнить("Create table #ВТ_ИЗ_ТЗ (Продукция char(9), Дата DateTime,  Ключ varchar(150), ВР char(9))");
    рс.Подготовить("Insert Into #ВТ_ИЗ_ТЗ (Продукция, Дата, Ключ, ВР) Values (?,?,?,?)");
    рс.ВыполнитьSQL_ИзТЗ(ТаблицаВидовРабот);
	ТекстЗапроса = "SELECT
	|Продукция [Продукция $Справочник.ТМЦ]
	|, Дата
	|, Ключ
	|, ВР [ВР $Справочник.ВидыРабот]
	|,$ПоследнееЗначение.ВидыРабот.Тариф(ВР, Дата) Тариф
	|FROM #ВТ_ИЗ_ТЗ";
	
    ТаблицаВидовРабот = рс.ВыполнитьИнструкцию(ТекстЗапроса);
    рс.ВыполнитьИнструкцию("IF OBJECT_ID(N'tempdb..#ВТ_ИЗ_ТЗ', N'U') IS NOT NULL DROP TABLE #ВТ_ИЗ_ТЗ");
	
	ТаблицаВидовРабот.Сортировать("Ключ");

	//Поместим таблицу видов работ в индексированную таблицу
	ТаблицаВидовРабот_индекс = СоздатьОбъект("ИндексированнаяТаблица");
	ТаблицаВидовРабот_индекс.Загрузить(ТаблицаВидовРабот);
	ТаблицаВидовРабот_индекс.ДобавитьИндекс("Индекс", "Ключ");
	//ПоказатьТЗ(ТаблицаВидовРабот);
		
	ТАут = СоздатьОбъект("ТаблицаЗначений");
	ТАут.НоваяКолонка("Продукция", "Справочник.ТМЦ");
	ТАут.НоваяКолонка("ВидРабот", "Справочник.ВидыРабот");
	ТАут.НоваяКолонка("Сумма", "Число", 15, 3);
	
	//**************************************************
	//Подготовим таблицу необходимую для расшифровки базы начислений по документам
	ТЗДок = СоздатьОбъект("ТаблицаЗначений");
	ТЗДок.НоваяКолонка("Ключ"); //Вид работ код; Продукция код
	ТЗДок.НоваяКолонка("База");
	ТЗДок.НоваяКолонка("Тариф");
	ТЗДок.НоваяКолонка("Сумма");
	ТЗДок.НоваяКолонка("Документ");
	
	//ТабМассивДокСхеРасчетаЗП.ВыбратьСтроку();
	
	Состояние("База: к-во фарша или кутера");
	//**************************************************
	// теперь выполняем запросы по способам начисления
	// Вариат первый. (БазаВР = Перечисление.ТипБазыВР.КвоФарша) или (БазаВР = Перечисление.ТипБазыВР.Кутера)
	// Способ 0
	СписЗаказов = СоздатьОбъект("СписокЗначений");
	ДокЗаказ = СоздатьОбъект("Документ.Заказ");
	ДокЗаказ.УстановитьФильтр(1, 0);
	ДокЗаказ.ВыбратьДокументы(НачДата, КонДата);
	Пока ДокЗаказ.ПолучитьДокумент() = 1 Цикл
		СписЗаказов.ДобавитьЗначение(ДокЗаказ.ТекущийДокумент());
	КонецЦикла;
	ОбработатьСписЗаказов(СписЗаказов, 0);

	Состояние("База: к-во фарша или кутера в2");
	//**************************************************
	// теперь выполняем запросы по способам начисления
	// Вариат второй. (БазаВР = Перечисление.ТипБазыВР.КвоФарша) или (БазаВР = Перечисление.ТипБазыВР.Кутера)
	// Способ 1
	
	СписЗаказовВ = СоздатьОбъект("СписокЗначений");
	КДата = Мин(ПолучитьДатуТА(), КонДата);
	НДата = Мин(НачДата, КДата);
	
	рс = СоздатьОбъект("ODBCRecordset");
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора внесенные вручную изменения будут потеряны!!!
	ТекстЗапроса = 
	"SELECT ВыпускПродукцииОбороты.Продукция [Продукция $Справочник]
	|	, ВыпускПродукцииОбороты.Заказ [Заказ $Документ.Заказ]
	|	, Sum(ВыпускПродукцииОбороты.КоличествоОборот) СуммаКвоСумма
	|FROM $РегистрОбороты.ВыпускПродукции(:НДата,
	|		:КДата~,,,,
	|		(Продукция, Заказ),
	|		Количество) AS ВыпускПродукцииОбороты
	|GROUP BY ВыпускПродукцииОбороты.Продукция
	|	, ВыпускПродукцииОбороты.Заказ
	|ORDER BY ВыпускПродукцииОбороты.Заказ
	|";
	
	рс.УстановитьТекстовыйПараметр("НДата", НДата);
	рс.УстановитьТекстовыйПараметр("КДата", КДата);
	
	Результат = рс.ВыполнитьИнструкцию(ТекстЗапроса);
	
	Результат.ВыбратьСтроки();
	
	Пока Результат.ПолучитьСтроку() = 1 Цикл
		СписЗаказовВ.ДобавитьЗначение(Результат.Заказ);
	КонецЦикла;
	
	ОбработатьСписЗаказов(СписЗаказовВ, 1);
	
	Состояние("База: реализовано");
	// **************************
	// Вариант 3 (БазаВР = Перечисление.ТипБазыВР.Реализовано)
	рс = СоздатьОбъект("ODBCRecordset");
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора внесенные вручную изменения будут потеряны!!!
	ТекстЗапроса = 
	"SELECT ОборотыОбороты.ТМЦ [Продукция $Справочник.ТМЦ]
	|	, ОборотыОбороты.ВидУпаковки [ВидУпаковки $Справочник.ВидыУпаковки]
	|	, RIGHT(ОборотыОбороты.ПозицияДокумента,9) [Док $Документ]
	|	, ОборотыОбороты.ВидДокумента as Док_вид
	|   , УМК_РазрешенныеВидыУпаковкиТМЦ.ID [РВУ $Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ]
	|   , ТМЦ.Code as ТМЦ_Код
	|   , CAST(LEFT(ОборотыОбороты.ПозицияДокумента, 8) as DateTime) as ДатаДок
	|   , $ПоследнееЗначение.УМК_РазрешенныеВидыУпаковкиТМЦ.СчитатьВЗарплатуПоПеремещению(УМК_РазрешенныеВидыУпаковкиТМЦ.ID, CAST(LEFT(ОборотыОбороты.ПозицияДокумента, 8) as DateTime)) СчитатьВЗарплатуПоПеремещению
	|	, Sum(ОборотыОбороты.РасходКвоОборот) СуммаКоличество
	|FROM $РегистрОбороты.Обороты(:НДата,
	|		:КДата~,
	|		Документ,,
	|		(ТМЦ IN  (SELECT Val FROM #СпТовар)),
	|		(ТМЦ, ВидУпаковки),
	|		РасходКво) AS ОборотыОбороты
	|	LEFT OUTER JOIN $Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ AS УМК_РазрешенныеВидыУпаковкиТМЦ ON ОборотыОбороты.ТМЦ = УМК_РазрешенныеВидыУпаковкиТМЦ.PARENTEXT AND ОборотыОбороты.ВидУпаковки = $УМК_РазрешенныеВидыУпаковкиТМЦ.ВидУпаковки
	|	LEFT OUTER JOIN $Справочник.ТМЦ AS ТМЦ ON ОборотыОбороты.ТМЦ = ТМЦ.ID 
	|WHERE ОборотыОбороты.ВидУпаковки <> :НетУпак
	|GROUP BY ОборотыОбороты.ПозицияДокумента
	|	, ОборотыОбороты.ВидДокумента
	|	, ОборотыОбороты.ТМЦ
	|	, ОборотыОбороты.ВидУпаковки
	|   , УМК_РазрешенныеВидыУпаковкиТМЦ.ID
	|   , ТМЦ.Code
	|ORDER BY ОборотыОбороты.ПозицияДокумента
	|";
	
	рс.УложитьСписокОбъектов(СпТовар, "#СпТовар");
	рс.УстановитьТекстовыйПараметр("НДата", НДата);
	рс.УстановитьТекстовыйПараметр("КДата", КДата);
	рс.УстановитьТекстовыйПараметр("НетУпак", НетУп);
	
	Результат = рс.ВыполнитьИнструкцию(ТекстЗапроса);
	
	Результат.ВыбратьСтроки();
	
	СписПродДляПер = СоздатьОбъект("СписокЗначений");
	КлючПоиска1 = Строка(Перечисление.ТипБазыВР.Реализовано) + "/1";
	КлючПоиска2 = Строка(Перечисление.ТипБазыВР.Реализовано) + "/0";
	
	Пока Результат.ПолучитьСтроку() = 1 Цикл
		СписПродДляПер.ДобавитьЗначение(Результат.Продукция);
		КодТМЦ = Результат.ТМЦ_Код;
        РВУ = Результат.РВУ;					
		ДобавитьСтрокуТАут(Результат.Продукция, КодТМЦ, КлючПоиска2 + "/" + Строка(Результат.ДатаДок), Результат.СуммаКоличество, Результат.Док);
		Если ПустоеЗначение(РВУ) = 0 Тогда	
			Если Результат.СчитатьВЗарплатуПоПеремещению = 0 Тогда
				ДобавитьСтрокуТАут(Результат.Продукция, КодТМЦ, КлючПоиска1 + "/" + Строка(Результат.ДатаДок), Результат.СуммаКоличество, Результат.Док);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
   	
	Если СписПродДляПер.РазмерСписка() > 0 Тогда
	рс = СоздатьОбъект("ODBCRecordset");
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора внесенные вручную изменения будут потеряны!!!
	ТекстЗапроса = 
	"SELECT
	|    $ПеремещениеСтроки.Стало  as [Продукция $Справочник],
	|    $ПеремещениеСтроки.ВидУпаковкиСтало [ВидУпаковки $Справочник.ВидыУпаковки],
	|    Жур.IDDoc as [Док $Документ],
	|    Жур.IDDocDef as Док_вид,
	|    Жур.Date_Time_IDDoc,
	|    УМК_РазрешенныеВидыУпаковкиТМЦ.ID [РВУ $Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ],
	|    ТМЦ.Code as ТМЦ_Код,
	|    CAST(LEFT(Жур.Date_Time_IDDoc, 8) as DateTime) as ДатаДок,
	|    $ПоследнееЗначение.УМК_РазрешенныеВидыУпаковкиТМЦ.СчитатьВЗарплатуПоПеремещению(УМК_РазрешенныеВидыУпаковкиТМЦ.ID, CAST(LEFT(Жур.Date_Time_IDDoc, 8) as DateTime)) as СчитатьВЗарплатуПоПеремещению,
	|    SUM($ПеремещениеСтроки.Кво) as КвоСумма
	|FROM
	|    $ДокументСтроки.Перемещение as ПеремещениеСтроки
	|INNER JOIN
	|    $Документ.Перемещение as Док ON Док.IDDoc = ПеремещениеСтроки.IDDoc 
	|INNER JOIN
	|    _1SJourn as Жур ON Жур.IDDoc = ПеремещениеСтроки.IDDoc
	|LEFT OUTER JOIN $Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ AS УМК_РазрешенныеВидыУпаковкиТМЦ ON $ПеремещениеСтроки.Стало = УМК_РазрешенныеВидыУпаковкиТМЦ.PARENTEXT AND $ПеремещениеСтроки.ВидУпаковки = $УМК_РазрешенныеВидыУпаковкиТМЦ.ВидУпаковки
	|LEFT OUTER JOIN $Справочник.ТМЦ AS ТМЦ ON $ПеремещениеСтроки.Стало = ТМЦ.ID 
	|WHERE Жур.Date_Time_IDDoc BETWEEN :НДата AND :КДата~
	|AND
	|   Жур.Closed & 1 = 1
	|AND 
	|   $ПеремещениеСтроки.Стало IN  (SELECT Val FROM #СпТовар)
	|
	|GROUP BY
	|     $ПеремещениеСтроки.Стало
	|   , $ПеремещениеСтроки.ВидУпаковкиСтало
	|   , Жур.IDDoc
	|   , Жур.IDDocDef
	|   , Жур.Date_Time_IDDoc
	|   ,УМК_РазрешенныеВидыУпаковкиТМЦ.ID
	|   ,ТМЦ.Code
	|ORDER BY Жур.Date_Time_IDDoc
	|";
	
	рс.УложитьСписокОбъектов(СписПродДляПер, "#СпТовар");
	рс.УстановитьТекстовыйПараметр("НДата", НДата);
	рс.УстановитьТекстовыйПараметр("КДата", КДата);
	
	Результат = рс.ВыполнитьИнструкцию(ТекстЗапроса);
	Результат.ВыбратьСтроки();
	
	Пока Результат.ПолучитьСтроку() = 1 Цикл
		КодТМЦ = Результат.ТМЦ_Код;
		РВУ = Результат.РВУ;
		Если ПустоеЗначение(РВУ) = 0 Тогда
			Если Результат.СчитатьВЗарплатуПоПеремещению = 1 Тогда
				ДобавитьСтрокуТАут(Результат.Продукция, КодТМЦ, КлючПоиска1 + "/" + Строка(Результат.ДатаДок), Результат.КвоСумма, Результат.Док);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	КонецЕсли;
	
	Состояние("База: выпущено");
	// **************************
	// Вариант 4 (БазаВР = Перечисление.ТипБазыВР.Выпущено)
	// период по заказам. Способ 1
	МинДата = НачДата;
	МаксДата = КонДата;
	// вначале отберём заказы за период и определим мин и макс. дату выпуска
	Док = СоздатьОбъект("Документ");
	Для Инд = 1 По СписЗаказов.РазмерСписка() Цикл
		Док.УстановитьФильтр(1,0);
		Док.ВыбратьПодчиненныеДокументы(,,СписЗаказов.ПолучитьЗначение(Инд));
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Вид() = "ВыпускПродукции" Тогда
			    МинДата = Мин(МинДата, Док.ДатаДок);
				МаксДата = Макс(МаксДата, Док.ДатаДок);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Результат = ПолучитьЗапросПоВыпуску(МинДата, МаксДата, СписЗаказов, 1);
	КлючПоиска = Строка(Перечисление.ТипБазыВР.Выпущено) + "/1";
	
	Результат.ВыбратьСтроки();
	//Результат.ВыбратьСтроку();
	//Возврат;
	
	Пока Результат.ПолучитьСтроку() = 1 Цикл
		КодТМЦ = Результат.ТМЦ_Код;
		ДобавитьСтрокуТАут(Результат.Продукция, КодТМЦ, КлючПоиска + "/" + Строка(Результат.ДатаЗаказа), Результат.КвоСумма, Результат.Док);
	КонецЦикла;		
		
	Состояние("База: выпущено по зак.");
	// **************************
	// Вариант 4 (БазаВР = Перечисление.ТипБазыВР.Выпущено)
	// период по заказам. Способ 0
	Результат = ПолучитьЗапросПоВыпуску(НачДата, КонДата, СписЗаказов, 0);
	КлючПоиска = Строка(Перечисление.ТипБазыВР.Выпущено) + "/0";
	Результат.ВыбратьСтроки();
	
	Пока Результат.ПолучитьСтроку() = 1 Цикл
		КодТМЦ = Результат.ТМЦ_Код;
		ДобавитьСтрокуТАут(Результат.Продукция, КодТМЦ, КлючПоиска + "/" + Строка(Результат.ДатаДок), Результат.КвоСумма, Результат.Док);
	КонецЦикла;		

	// **************************
	// Вариант 4 (БазаВР = Перечисление.ТипБазыВР.Списано) ИЛИ (БазаВР = Перечисление.ТипБазыВР.Обвалка)
	// период по заказам. Способ 1
	рс = СоздатьОбъект("ODBCRecordset");
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора внесенные вручную изменения будут потеряны!!!
	ТекстЗапроса = "
	|SELECT ПартииОбороты.ТМЦ [Материал $Справочник.ТМЦ]
	|	, RIGHT(ПартииОбороты.ПозицияДокумента,9) [Док $Документ]
	|   , CAST(LEFT(ПартииОбороты.ПозицияДокумента, 8) as DateTime) as ДатаДок
	|	, ПартииОбороты.ВидДокумента as Док_вид
	|   ,  ТМЦ.Code as ТМЦ_Код
	|	, Sum(ПартииОбороты.ОстатокТовараРасход) КвоПриход
	|FROM $РегистрОбороты.Партии(:НДата,
	|		:КДата~,
	|		Документ,,
	|		(КодОперации = :КодОперации),
	|		ТМЦ,
	|		ОстатокТовара) AS ПартииОбороты
	|LEFT OUTER JOIN $Справочник.ТМЦ AS ТМЦ ON ПартииОбороты.ТМЦ = ТМЦ.ID
	|WHERE ТМЦ IN  (SELECT Val FROM #СпТовар)
 	|GROUP BY ПартииОбороты.ТМЦ
	|	, ПартииОбороты.ПозицияДокумента
	|	, ПартииОбороты.ВидДокумента
	|   , ТМЦ.Code
	|";
	
	рс.УложитьСписокОбъектов(СпТовар, "#СпТовар");
	рс.УстановитьТекстовыйПараметр("НДата", НДата);
	рс.УстановитьТекстовыйПараметр("КДата", КДата);
	рс.УстановитьТекстовыйПараметр("КодОперации", СписаниеВПроизводство);
	Результат = рс.ВыполнитьИнструкцию(ТекстЗапроса);
	//Результат.ВыбратьСтроку();
	
	
	КлючПоиска = Строка(Перечисление.ТипБазыВР.Списано) + "/0";
	КлючПоиска1 = Строка(Перечисление.ТипБазыВР.Обвалка) + "/0";
	Док = СоздатьОбъект("Документ");
	Результат.ВыбратьСтроки();
	Пока Результат.ПолучитьСтроку() = 1 Цикл
			ДобавитьСтрокуТАут(Результат.Материал,Результат.ТМЦ_Код, КлючПоиска + "/" + Строка(Результат.ДатаДок), Результат.КвоПриход, Результат.Док);
			Док.ВыбратьПодчиненныеДокументы(,,Результат.Док);
			Док.УстановитьФильтр(1,0);
			Пока Док.ПолучитьДокумент() = 1 Цикл
				Если Док.Вид() = "ПереработкаМяса" Тогда
					ДобавитьСтрокуТАут(Результат.Материал,Результат.ТМЦ_Код, КлючПоиска1 + "/" + Строка(Результат.ДатаДок), Док.Итог("ВесФакт"),Результат.Док);
				КонецЕсли;
			КонецЦикла;
	КонецЦикла;
		
	//Добавим строки в таблицы по документам, по которым начислено з/п непосредственно 
	ДобавитьСтрокиТАутДокументы();
	Состояние("Печать");
	ВывестиТаблицу();
	
КонецПроцедуры

Процедура ДобавитьВСписок(Элт, Спис)
	Если Спис.Принадлежит(Элт) = 0 Тогда
		Спис.ДобавитьЗначение(Элт, Элт.Наименование);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПодбора(Элт)
	Если Элт.Вид() = "ТМЦ" Тогда
		ДобавитьвСписок(Элт, списТовар);
	ИначеЕсли Элт.Вид() = "ВидыРабот" Тогда
		ДобавитьвСписок(Элт, списВидР);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьЭлементВСписок(НазваниеОбъекта, Один, ИмСп = "")
	ИмСпис = ИмСп;
	КФормы = 0;
	ОткрытьПодбор(НазваниеОбъекта, "ДляВыбора", КФормы, Один);
	КФормы.ВыборГруппы(1);
КонецПроцедуры

Процедура УдалитьЗначениеСписка(Спис)
	Если Спис.ТекущаяСтрока() <> 0 Тогда
		Спис.УдалитьЗначение(Спис.ТекущаяСтрока());
	КонецЕсли;
КонецПроцедуры

Дл = Метаданные.Справочник("ТМЦ").ДлинаНаименования;