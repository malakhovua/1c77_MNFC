// ===============================
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
// ===============================

Перем Таб;		
Перем Обновить;
Перем Расшифровка; 
// используются для стандартного механизма кнопок "Обновить" и "Настройка"

Перем КонтрагентДок;

Перем ТекСтрокаВТаблицеМФ; // текущая строка в таблице значений  МФ 

// переменные предназначены для запроса по периодам
Перем Запрос;
Перем Язык;


// ===============================
// "СЛУЖЕБНЫЕ" ПРОЦЕДУРЫ И ФУНКЦИИ
// ===============================

// ===============================
// Название: ПерерисовкаНазванийЗакладок
// Параметры:
// НЕТ
// Возвращаемое значение:
// Вызывается из формул элементов диалога:
// Наименование,.           
// Описание:
//  Добавляет "(!)" в заголовок закладки с множественным фильтром, когда этот фильтр задан
Функция ПерерисовкаНазванийЗакладок()      
	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
КонецФункции // ПерерисовкаНазванийЗакладок	

// ===============================
// Название: ДоходОтгрузки
// Параметры:
//   Док - кредитный документ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Наименование,.
// Описание:
//    вычисляет доход от товара, отгруженного по документу Док в валюте кредита покупателю 
Функция ДоходОтгрузки(Док)              
	
	Дох = 0;                             

	КонтрагентДокПоКредДок = глКонтрагентДок(Док);
	Если ПустоеЗначение(КонтрагентДокПоКредДок) = 1 Тогда
		КонтрагентДокПоКредДок = КонтрагентДок;
	КонецЕсли;	
	
	Рег = СоздатьОбъект("Регистр.Обороты");
	Рег.ВыбратьДвиженияДокумента(Док.ТекущийДокумент());
	Пока Рег.ПолучитьДвижение()>0 Цикл
		Если Рег.Фирма <> ВыбФирма Тогда
			Продолжить;
		КонецЕсли;
		Дох = Дох + Рег.Доход;
	КонецЦикла;
	
	Возврат Дох;
	
КонецФункции	// ДоходОтгрузки

// ===============================
// Название: ПоказатьДиаграммуПрибылейВПроцентах
// Параметры:
//	Диаграмма - диаграмма
//	ОтобранныеДанные - данные, сформированные отчетом 	
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//   
// Наименование,.
// Описание:
//    формирует диаграмму прибылей, выраженных в процентах
Процедура ПоказатьДиаграммуПрибылейВПроцентах(Диаграмма,ОтобранныеДанные) 
	
	Диаграмма.Обновление(0);
	
	Диаграмма.Заголовок = ?(Язык = "у", "Прибутки по контрагентам", "Прибыли по контрагентам");
	
	Серия1 = ?(Язык = "у", "по відвантаженню", "по отгрузке");
	Серия2 = ?(Язык = "у", "по оплаті", "по оплате");

	Диаграмма.УстановитьИмяСерии(1,Серия1); 
	Диаграмма.УстановитьИмяСерии(2,Серия2);
	
	ТаблицаЗапроса=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаЗапроса.НоваяКолонка("Наименование");
	ТаблицаЗапроса.НоваяКолонка("ПроцПрибылиПоОтгрузке");
	ТаблицаЗапроса.НоваяКолонка("ПроцПрибылиПоОплате");
	НомерСтроки = 0;
	ОтобранныеДанные.ВыбратьСтроки();
	Пока ОтобранныеДанные.ПолучитьСтроку() > 0 Цикл
		Если ОтобранныеДанные.Контрагент.ЭтоГруппа()=1 Тогда
			Продолжить;
		КонецЕсли;
		НомерСтроки = НомерСтроки+1;
		ТаблицаЗапроса.НоваяСтрока();
		ТаблицаЗапроса.ТекущаяСтрока(НомерСтроки);
		ТаблицаЗапроса.Наименование			 = " "+ОтобранныеДанные.Контрагент;
		ТаблицаЗапроса.ПроцПрибылиПоОтгрузке = ОтобранныеДанные.ПроцПрибылиПоОтгрузке;
		ТаблицаЗапроса.ПроцПрибылиПоОплате 	 = ОтобранныеДанные.ПроцПрибылиПоОплате;
	КонецЦикла;

	КвоТочекВДиаграмме = ТаблицаЗапроса.КоличествоСтрок();
	Если фОграничитьЧислоТочек=1 Тогда

		Если ОтгрузкаОплатаДиаграмма.ПолучитьЗначение(ОтгрузкаОплатаДиаграмма.ТекущаяСтрока())="Отгрузка" Тогда
			ТаблицаЗапроса.Сортировать("ПроцПрибылиПоОтгрузке-");
		Иначе
			ТаблицаЗапроса.Сортировать("ПроцПрибылиПоОплате-");
		КонецЕсли;

		КвоСтрокТабЗн = ТаблицаЗапроса.КоличествоСтрок();
		Если МаксКоличествоТочек < КвоСтрокТабЗн Тогда
			КвоТочекВДиаграмме = МаксКоличествоТочек+1;
			Для Инд=МаксКоличествоТочек+1 По КвоСтрокТабЗн Цикл
			    ТаблицаЗапроса.ПолучитьСтрокуПоНомеру(Инд);
		        ТаблицаЗапроса.Наименование = "<ПРОЧИЕ>";
			КонецЦикла;
			ТаблицаЗапроса.Свернуть("Наименование","ПроцПрибылиПоОтгрузке,ПроцПрибылиПоОплате");
			НомерСтроки = 0;
			Если ТаблицаЗапроса.НайтиЗначение("<ПРОЧИЕ>",НомерСтроки,"Наименование")=1 Тогда
			    ТаблицаЗапроса.ПолучитьСтрокуПоНомеру(НомерСтроки);
				ТаблицаЗапроса.ПроцПрибылиПоОтгрузке 	= ТаблицаЗапроса.ПроцПрибылиПоОтгрузке	/ (КвоСтрокТабЗн - МаксКоличествоТочек);
				ТаблицаЗапроса.ПроцПрибылиПоОплате 		= ТаблицаЗапроса.ПроцПрибылиПоОплате 	/ (КвоСтрокТабЗн - МаксКоличествоТочек);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ТаблицаЗапроса.Сортировать("Наименование");

	Для Инд=1 По КвоТочекВДиаграмме Цикл
	    ТаблицаЗапроса.ПолучитьСтрокуПоНомеру(КвоТочекВДиаграмме-Инд+1);
		Диаграмма.УстановитьИмяТочки(Инд,ТаблицаЗапроса.Наименование);
		ПроцПрибылиПоОтгрузке = Окр(ТаблицаЗапроса.ПроцПрибылиПоОтгрузке,1,1); 
		ПроцПрибылиПоОплате   = Окр(ТаблицаЗапроса.ПроцПрибылиПоОплате,  1,1);
		Диаграмма.УстановитьЗначение(Инд,1,ПроцПрибылиПоОтгрузке,ТаблицаЗапроса.Наименование+" "+ПроцПрибылиПоОтгрузке+"%"); 
		Диаграмма.УстановитьЗначение(Инд,2,ПроцПрибылиПоОплате,  ТаблицаЗапроса.Наименование+" "+ПроцПрибылиПоОплате  +"%");
		Состояние("Для диаграммы сформировано "+Инд+" значений.");
	КонецЦикла;

	Диаграмма.Обновление(1);
	
КонецПроцедуры		// ПоказатьДиаграммуПрибылейВПроцентах

// ===============================
// Название: ПоказатьДиаграммуАбсолютныхПрибылей
// Параметры:
//	Диаграмма - диаграмма
//	ОтобранныеДанные - данные, сформированные отчетом 	
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//   
// Наименование,.
// Описание:
//    формирует диаграмму абсолютных прибылей
Процедура ПоказатьДиаграммуАбсолютныхПрибылей(Диаграмма,ОтобранныеДанные) 
	Диаграмма.Обновление(0);
	
	Диаграмма.Заголовок = ?(Язык = "у", "Прибутки по контрагентам", "Прибыли по контрагентам");

	Серия1 = ?(Язык = "у", "по відвантаженню", "по отгрузке");
	Серия2 = ?(Язык = "у", "по оплаті", "по оплате");

	Диаграмма.УстановитьИмяСерии(1,Серия1); 
	Диаграмма.УстановитьИмяСерии(2,Серия2);
	
	ТаблицаЗапроса=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаЗапроса.НоваяКолонка("Наименование");
	ТаблицаЗапроса.НоваяКолонка("АбсПрибыльПоОтгрузке");
	ТаблицаЗапроса.НоваяКолонка("АбсПрибыльПоОплате");
	НомерСтроки = 0;
	ОтобранныеДанные.ВыбратьСтроки();
	Пока ОтобранныеДанные.ПолучитьСтроку() > 0 Цикл
		Если ОтобранныеДанные.Контрагент.ЭтоГруппа()=1 Тогда
			Продолжить;
		КонецЕсли;
		НомерСтроки = НомерСтроки+1;
		ТаблицаЗапроса.НоваяСтрока();
		ТаблицаЗапроса.ТекущаяСтрока(НомерСтроки);
		ТаблицаЗапроса.Наименование			= " "+ОтобранныеДанные.Контрагент;
		ТаблицаЗапроса.АбсПрибыльПоОтгрузке = ОтобранныеДанные.АбсПрибыльПоОтгрузке;
		ТаблицаЗапроса.АбсПрибыльПоОплате 	= ОтобранныеДанные.АбсПрибыльПоОплате;
	КонецЦикла;

	КвоТочекВДиаграмме = ТаблицаЗапроса.КоличествоСтрок();
	Если фОграничитьЧислоТочек=1 Тогда
		Если ОтгрузкаОплатаДиаграмма.ПолучитьЗначение(ОтгрузкаОплатаДиаграмма.ТекущаяСтрока())="Отгрузка" Тогда
			ТаблицаЗапроса.Сортировать("АбсПрибыльПоОтгрузке-");
		Иначе
			ТаблицаЗапроса.Сортировать("АбсПрибыльПоОплате-");
		КонецЕсли;
		КвоСтрокТабЗн = ТаблицаЗапроса.КоличествоСтрок();
		Если МаксКоличествоТочек < КвоСтрокТабЗн Тогда
			КвоТочекВДиаграмме = МаксКоличествоТочек+1;
			Для Инд=МаксКоличествоТочек+1 По КвоСтрокТабЗн Цикл
			    ТаблицаЗапроса.ПолучитьСтрокуПоНомеру(Инд);
		        ТаблицаЗапроса.Наименование = "<ПРОЧИЕ>";
			КонецЦикла;
			ТаблицаЗапроса.Свернуть("Наименование","АбсПрибыльПоОтгрузке,АбсПрибыльПоОплате");
		КонецЕсли;
	КонецЕсли;
	ТаблицаЗапроса.Сортировать("Наименование");

	Для Инд=1 По КвоТочекВДиаграмме Цикл
	    ТаблицаЗапроса.ПолучитьСтрокуПоНомеру(КвоТочекВДиаграмме-Инд+1);
		Диаграмма.УстановитьИмяТочки(Инд,ТаблицаЗапроса.Наименование);
		АбсПрибПоОтгрузке = Окр(ТаблицаЗапроса.АбсПрибыльПоОтгрузке,2,1); 
		АбсПрибПоОплате   = Окр(ТаблицаЗапроса.АбсПрибыльПоОплате,  2,1);
		Диаграмма.УстановитьЗначение(Инд,1,АбсПрибПоОтгрузке,ТаблицаЗапроса.Наименование+" "+АбсПрибПоОтгрузке+" "+Гривня);
		Диаграмма.УстановитьЗначение(Инд,2,АбсПрибПоОплате,  ТаблицаЗапроса.Наименование+" "+АбсПрибПоОплате  +" "+Гривня);
		Состояние("Для диаграммы сформировано "+Инд+" значений.");
	КонецЦикла;

	Диаграмма.Обновление(1);
	
КонецПроцедуры		// ПоказатьДиаграммуАбсолютныхПрибылей


// ===============================
// Название: ПоказатьДиаграммуОборотов
// Параметры:
//	Диаграмма - диаграмма
//	ОтобранныеДанные - данные, сформированные отчетом 	
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//   
// Наименование,.
// Описание:
//    формирует диаграмму оборотов
Процедура ПоказатьДиаграммуОборотов(Диаграмма,ОтобранныеДанные) 
	Диаграмма.Обновление(0);
	
	Диаграмма.Заголовок = ?(Язык = "у", "Обороти по контрагентам", "Обороты по контрагентам");
	
	Серия1 = ?(Язык = "у", "по відвантаженню", "по отгрузке");
	Серия2 = ?(Язык = "у", "по оплаті", "по оплате");

	Диаграмма.УстановитьИмяСерии(1,Серия1); 
	Диаграмма.УстановитьИмяСерии(2,Серия2);
	
	ТаблицаЗапроса=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаЗапроса.НоваяКолонка("Наименование");
	ТаблицаЗапроса.НоваяКолонка("АбсОтгрузка");
	ТаблицаЗапроса.НоваяКолонка("АбсОплата");
	НомерСтроки = 0;
	ОтобранныеДанные.ВыбратьСтроки();
	Пока ОтобранныеДанные.ПолучитьСтроку() > 0 Цикл
		Если ОтобранныеДанные.Контрагент.ЭтоГруппа()=1 Тогда
			Продолжить;
		КонецЕсли;
		НомерСтроки = НомерСтроки+1;
		ТаблицаЗапроса.НоваяСтрока();
		ТаблицаЗапроса.ТекущаяСтрока(НомерСтроки);
		ТаблицаЗапроса.Наименование	= " "+ОтобранныеДанные.Контрагент;
		ТаблицаЗапроса.АбсОтгрузка 	= ОтобранныеДанные.АбсОтгрузка;
		ТаблицаЗапроса.АбсОплата	= ОтобранныеДанные.АбсОплата;
	КонецЦикла;

	КвоТочекВДиаграмме = ТаблицаЗапроса.КоличествоСтрок();
	Если фОграничитьЧислоТочек=1 Тогда
		Если ОтгрузкаОплатаДиаграмма.ПолучитьЗначение(ОтгрузкаОплатаДиаграмма.ТекущаяСтрока())="Отгрузка" Тогда
			ТаблицаЗапроса.Сортировать("АбсОтгрузка-");
		Иначе
			ТаблицаЗапроса.Сортировать("АбсОплата-");
		КонецЕсли;
		КвоСтрокТабЗн = ТаблицаЗапроса.КоличествоСтрок();
		Если МаксКоличествоТочек < КвоСтрокТабЗн Тогда
			КвоТочекВДиаграмме = МаксКоличествоТочек+1;
			Для Инд=МаксКоличествоТочек+1 По КвоСтрокТабЗн Цикл
			    ТаблицаЗапроса.ПолучитьСтрокуПоНомеру(Инд);
		        ТаблицаЗапроса.Наименование = "<ПРОЧИЕ>";
			КонецЦикла;
			ТаблицаЗапроса.Свернуть("Наименование","АбсОтгрузка,АбсОплата");
		КонецЕсли;
	КонецЕсли;
	ТаблицаЗапроса.Сортировать("Наименование");

	Для Инд=1 По КвоТочекВДиаграмме Цикл
	    ТаблицаЗапроса.ПолучитьСтрокуПоНомеру(КвоТочекВДиаграмме-Инд+1);
		Диаграмма.УстановитьИмяТочки(Инд,ТаблицаЗапроса.Наименование);
		АбсОтгрузка = Окр(ТаблицаЗапроса.АбсОтгрузка,2,1); 
		АбсОплата   = Окр(ТаблицаЗапроса.АбсОплата,  2,1);
		Диаграмма.УстановитьЗначение(Инд,1,АбсОтгрузка,ТаблицаЗапроса.Наименование+" "+АбсОтгрузка+" "+Гривня); 
		Диаграмма.УстановитьЗначение(Инд,2,АбсОплата,  ТаблицаЗапроса.Наименование+" "+АбсОплата  +" "+Гривня);
		Состояние("Для диаграммы сформировано "+Инд+" значений.");
	КонецЦикла;

	Диаграмма.Обновление(1);
	
КонецПроцедуры		// ПоказатьДиаграммуОборотов


// ===============================
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА
// ===============================

// ===============================
// ВыбратьПоФильтру()
//
// Параметры:
//  Нет
//
// Описание:
//  Открывает обработку отбора элементов по произвольному фильтру
//
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру

// ===============================
// Название: ИзмПроцент
// Параметры:           
//		
//
// Вызывается из формул элементов диалога:
//		ПроцентКонтрагентов
// Описание:
//		Проверяет правильность введенного процента
//
Процедура ИзмПроцент(ИдентЭлемДиалога)
	Если ИдентЭлемДиалога="Контрагент" Тогда
		ПроцентКонтрагентов=Мин(ПроцентКонтрагентов,100);
	ИначеЕсли ИдентЭлемДиалога="Сумма" Тогда
		ПроцентСуммКонтрагентов=Мин(ПроцентСуммКонтрагентов,100);
	КонецЕсли; 
КонецПроцедуры //ИзмПроцент

// ===============================
// Название: ДоступностьЭлементов
// Параметры:
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Наименование,.
// Описание:
//    	управляет доступностью элементов
Процедура ДоступностьЭлементов(ВсеЭлементы=0)           

	ЭлементДиалога = Форма.АктивныйЭлемент();

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбФирма") Или (ЭлементДиалога="кХВыбФирма") Тогда
		Форма.кХВыбФирма.Доступность(ВыбФирма.Выбран()); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбКонтрагент") Или (ЭлементДиалога="кХВыбКонтрагент") Тогда
		Форма.кХВыбКонтрагент.Доступность(ВыбКонтрагент.Выбран()); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВклВО") Или (ЭлементДиалога="ВалютаВО") Тогда
		Форма.ОтгрузкаОплата.Доступность(ВклВО); 
		Форма.ВалютаВО.Доступность(ВклВО);
		Форма.ВклВООт.Доступность(ВклВО); 
		Форма.ВклВОДо.Доступность(ВклВО);
		ВклВООт=Мин(ВклВО,ВклВООт);
		ВклВОДо=Мин(ВклВО,ВклВОДо);;
		Форма.ВООт.Доступность(ВклВООт); 
		Форма.ВОДо.Доступность(ВклВОДо);
	КонецЕсли;
	
	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВклВООт") Тогда
		Форма.ВООт.Доступность(ВклВООт); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВклВОДо") Тогда
		Форма.ВОДо.Доступность(ВклВОДо);
	КонецЕсли;
	
	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВклПриб") Тогда
	    Форма.ТипПрибыли.Доступность(ВклПриб); 
		Форма.ВклПрибОт.Доступность(ВклПриб); 
		Форма.ВклПрибДо.Доступность(ВклПриб);
		ВклПрибОт=Мин(ВклПриб,ВклПрибОт);
		ВклПрибДо=Мин(ВклПриб,ВклПрибДо);;
		Форма.ПрибОт.Доступность(ВклПрибОт); 
		Форма.ПрибДо.Доступность(ВклПрибДо);
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВклПрибОт") Тогда
		Форма.ПрибОт.Доступность(ВклПрибОт); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВклПрибДо") Тогда
		Форма.ПрибДо.Доступность(ВклПрибДо);
	КонецЕсли;
	
	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВклОтборПоПроцКонтр") Тогда
		Форма.ПроцентКонтрагентов.Доступность(ВклОтборПоПроцКонтр); 
		Форма.ВозрастанияУбывания.Доступность(ВклОтборПоПроцКонтр);
		Форма.ОценкиПривлекательности.Доступность(ВклОтборПоПроцКонтр);
	КонецЕсли;
	                             
	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВклОтборПоПроцСуммКонтр") Тогда
		Форма.ПроцентСуммКонтрагентов.Доступность(ВклОтборПоПроцСуммКонтр); 
		Форма.ОценкиПривлекательности2.Доступность(ВклОтборПоПроцСуммКонтр);
	КонецЕсли;
	
	Если (ВсеЭлементы=1) Или (ЭлементДиалога="фДиаграмма") Тогда
		Форма.фОграничитьЧислоТочек.Доступность(фДиаграмма);
		фОграничитьЧислоТочек = Мин(фДиаграмма,фОграничитьЧислоТочек);
		Форма.МаксКоличествоТочек.Доступность(фОграничитьЧислоТочек);
		Форма.ОтгрузкаОплатаДиаграмма.Доступность(фОграничитьЧислоТочек);
		Форма.тОтгрузкаОплатаДиаграмма.Доступность(фОграничитьЧислоТочек);
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="фОграничитьЧислоТочек") Тогда
		Форма.МаксКоличествоТочек.Доступность(фОграничитьЧислоТочек);
		Форма.ОтгрузкаОплатаДиаграмма.Доступность(фОграничитьЧислоТочек);
		Форма.тОтгрузкаОплатаДиаграмма.Доступность(фОграничитьЧислоТочек);
	КонецЕсли;

КонецПроцедуры  	// ДоступностьЭлементов

// ===============================
// Название: Сформировать
// Параметры:
//   ЗакрытьЭкран - флаг того, что после формирования отчета надо закрыть экран	
//	 ГрупповаяОбработка - флаг запуска групповой обработки
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//   кнопки "Сформировать", "ОК" и "Групповая обратботка"
// Наименование,.
// Описание:
//    запускает отчет
Процедура Сформировать(ЗакрытьЭкран=0, ГрупповаяОбработка=0)    
	Перем Запрос;					// запрос
	        
	глПроверкаДаты(Дата1,Дата2);
	
	// Здесь формируется отчет, который использует регистры, критичные к
    // последовательности проведения документов
    // поэтому сравним установленные даты периода формируемого отчета с ГП 
    глПроверкаАктуальностиОтчета(Дата1,Дата2,ВыбФирма,0);
	
	//  Создание Таблицы для выходного отчета
	Если (ТипЗначенияСтр(Таб) <> "Таблица") Или (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;

	ПечФорма = "Таблица";
	Язык = глЯзык(ПечФорма); 
	глУстПропись(Гривня,Язык);
    Таб.ИсходнаяТаблица(ПечФорма);
    
	// все настройки помещаем в список
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Объект", "АВСПривлекательностьПокупателей");
    
	Расшифровка.Установить("Дата1", 		Дата1);
    Расшифровка.Установить("Дата2", 		Дата2);
	
	Расшифровка.Установить("ВыбФирма", 		ВыбФирма);
	Расшифровка.Установить("ВыбКонтрагент", ВыбКонтрагент);
	// запомним МФ только если он задан
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблицеМФ,Контекст); // записываем изменения если они были
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ);
	КонецЕсли;

	Расшифровка.Установить("фДиаграмма", 			 фДиаграмма);
	Расшифровка.Установить("фОграничитьЧислоТочек",  фОграничитьЧислоТочек);
	Расшифровка.Установить("МаксКоличествоТочек", 	 МаксКоличествоТочек);
	Расшифровка.Установить("ОтгрузкаОплатаДиаграмма",ОтгрузкаОплатаДиаграмма.ТекущаяСтрока()); 

	Расшифровка.Установить("ВклВО", 		ВклВО);
	Расшифровка.Установить("ВалютаВО", 		ВалютаВО); 
	Расшифровка.Установить("ВклВООт", 		ВклВООт); 
	Расшифровка.Установить("ВклВОДо", 		ВклВОДо);
	Расшифровка.Установить("ВООт", 			ВООт);
	Расшифровка.Установить("ВОДо", 			ВОДо);
	Расшифровка.Установить("ОтгрузкаОплата",ОтгрузкаОплата.ТекущаяСтрока()); 
	
	Расшифровка.Установить("ВклПриб", 	ВклВО);
	Расшифровка.Установить("ВклПрибОт", ВклПрибОт); 
	Расшифровка.Установить("ВклПрибДо", ВклПрибДо);
	Расшифровка.Установить("ПрибОт", 	ПрибОт);
	Расшифровка.Установить("ПрибДо", 	ПрибДо); 
	Расшифровка.Установить("ТипПрибыли",ТипПрибыли.ТекущаяСтрока()); 
	
	Расшифровка.Установить("ВклОтборПоПроцКонтр", 		ВклОтборПоПроцКонтр); 
	Расшифровка.Установить("ПроцентКонтрагентов", 		ПроцентКонтрагентов);
	Расшифровка.Установить("ВозрастанияУбывания", 		ВозрастанияУбывания.ТекущаяСтрока());
	Расшифровка.Установить("ОценкиПривлекательности", 	ОценкиПривлекательности.ТекущаяСтрока());
	
	Расшифровка.Установить("ВклОтборПоПроцСуммКонтр", 	ВклОтборПоПроцСуммКонтр); 
	Расшифровка.Установить("ПроцентСуммКонтрагентов", 	ПроцентСуммКонтрагентов);
	Расшифровка.Установить("ОценкиПривлекательности2", 	ОценкиПривлекательности2.ТекущаяСтрока());
	
	Если Дата2 >= ПолучитьДатуТА() Тогда
		ТекстЗапроса = "
			|Период с Дата1;";
	Иначе 
		ТекстЗапроса = "
			|Период с Дата1 по Дата2;";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
		|Обрабатывать НеПомеченныеНаУдаление;
		|Фирма=Регистр.ВзаиморасчетыПокупателей.Фирма;
		|Контрагент=Регистр.ВзаиморасчетыПокупателей.Контрагент; 
		|ТекДок=Регистр.ВзаиморасчетыПокупателей.ТекущийДокумент;
		|Долг=Регистр.ВзаиморасчетыПокупателей.ДолгОсн;                                        
		|КодОперации=Регистр.ВзаиморасчетыПокупателей.КодОперации;
		|Функция РасхДолг=Расход(Долг);
		|Функция ПрихДолг=Приход(Долг);
		|Группировка Контрагент;
		|Группировка ТекДок;
		|";
    
	Загол = "";
    
	Если глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Фирма", ВыбФирма, "ВыбФирма", ТекстЗапроса, Загол, Язык)=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по фирмам. Отчет не сформирован.");
		Возврат;
	ИначеЕсли глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Контрагент", ВыбКонтрагент, "ВыбКонтрагент", ТекстЗапроса, Загол, Язык, "КатегорииКонтрагентов")=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по контрагентам. Отчет не сформирован.");
		Возврат;
	КонецЕсли;

	// выполняем запрос
	Запрос=СоздатьОбъект("Запрос");
    Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
		Предупреждение("Запрос по движениям регистров не выполнился!");
		Возврат;
	КонецЕсли;          
	
	// обнуляем счетчик числа строк, выведенных в таблицу отчета
	глЧислоСтрок=0;                                                          
	
	Таб.ВывестиСекцию("Кнопки");              
	
	// выводим шапку отчета
	Таб.ВывестиСекцию("Отчет");  
	Таб.ВывестиСекцию("Шапка"); 
	глОживить(Таб.ВысотаСекции("Отчет")+Таб.ВысотаСекции("Шапка"));
    
	ОтобранныеДанные = СоздатьОбъект("ТаблицаЗначений");
	ОтобранныеДанные.НоваяКолонка("Контрагент");   // покупатель
	ОтобранныеДанные.НоваяКолонка("Себ"); 		// себестоимость отгр. товара	
	ОтобранныеДанные.НоваяКолонка("Отгрузка");	// отгрузка отгр. товара 
	ОтобранныеДанные.НоваяКолонка("Оплата");	// оплата отгр. товара
	              
	КолСтрокВОтобрДанных = 0;
		
	СписокКонтрагентовСГруппами = СоздатьОбъект("СписокЗначений");
	
	Пока Запрос.Группировка("Контрагент")>0 Цикл          
		            
		КонтрагентДок = Запрос.Контрагент;
					
		СписокКонтрагентовСГруппами.ДобавитьЗначение(КонтрагентДок);                    
		
		Пока Запрос.Группировка("ТекДок")>0 Цикл
			Док = Запрос.ТекДок; 
			Если Док.Выбран()=0 Тогда
				Продолжить;
			КонецЕсли;	                       
			             
			Отгр = Запрос.ПрихДолг; 
			Опл  = Запрос.РасхДолг;
			
			КолСтрокВОтобрДанных = КолСтрокВОтобрДанных+1; 
			ОтобранныеДанные.НоваяСтрока(КолСтрокВОтобрДанных);
			ОтобранныеДанные.ПолучитьСтрокуПоНомеру(КолСтрокВОтобрДанных);
			ОтобранныеДанные.Контрагент = КонтрагентДок; 
		    ОтобранныеДанные.Себ 		= Отгр - ДоходОтгрузки(Док);
			ОтобранныеДанные.Отгрузка 	= Отгр; 
			ОтобранныеДанные.Оплата 	= Опл;
			
		КонецЦикла;	    
	КонецЦикла;	
		
	ОтобранныеДанные.Свернуть("Контрагент","Себ,Отгрузка,Оплата");
	
	ОтобранныеДанные.НоваяКолонка("АбсОтгрузка");
	ОтобранныеДанные.НоваяКолонка("АбсОплата");
	ОтобранныеДанные.НоваяКолонка("ПрибыльПоОплате");
	ОтобранныеДанные.НоваяКолонка("ПрибыльПоОтгрузке");
	ОтобранныеДанные.НоваяКолонка("АбсПрибыльПоОплате");
	ОтобранныеДанные.НоваяКолонка("АбсПрибыльПоОтгрузке");
	ОтобранныеДанные.НоваяКолонка("ПроцПрибылиПоОплате");
	ОтобранныеДанные.НоваяКолонка("ПроцПрибылиПоОтгрузке");
	           
	// рассчитываем прибыли
	ОтобранныеДанные.ВыбратьСтроки();
	Пока ОтобранныеДанные.ПолучитьСтроку()>0 Цикл        
		
		ОтобранныеДанные.ПрибыльПоОплате 		= ОтобранныеДанные.Оплата   - ОтобранныеДанные.Себ; 
		ОтобранныеДанные.ПрибыльПоОтгрузке 		= ОтобранныеДанные.Отгрузка - ОтобранныеДанные.Себ;
		ОтобранныеДанные.ПроцПрибылиПоОплате 	= ?(ОтобранныеДанные.Себ<=0,0,Окр(ОтобранныеДанные.ПрибыльПоОплате  /ОтобранныеДанные.Себ*100,	2,1)); 
		ОтобранныеДанные.ПроцПрибылиПоОтгрузке 	= ?(ОтобранныеДанные.Себ<=0,0,Окр(ОтобранныеДанные.ПрибыльПоОтгрузке/ОтобранныеДанные.Себ*100,	2,1));

		ОтобранныеДанные.АбсОплата 				= ОтобранныеДанные.Оплата;
		ОтобранныеДанные.АбсОтгрузка 			= ОтобранныеДанные.Отгрузка;
		ОтобранныеДанные.АбсПрибыльПоОплате 	= ОтобранныеДанные.ПрибыльПоОплате; 
		ОтобранныеДанные.АбсПрибыльПоОтгрузке 	= ОтобранныеДанные.ПрибыльПоОтгрузке;
		
    КонецЦикла;
		                 
	СпособФильтраПоОтгрузкеОплате	= ОтгрузкаОплата.ПолучитьЗначение(ОтгрузкаОплата.ТекущаяСтрока()); 
	СпособФильтраПоПроцентуПрибыли 	= ТипПрибыли.ПолучитьЗначение(ТипПрибыли.ТекущаяСтрока()); 
	ПорядокВозрастаниеУбывание 		= ВозрастанияУбывания.ПолучитьЗначение(ВозрастанияУбывания.ТекущаяСтрока()); 
	СпособОценкиПривлекательности 	= ОценкиПривлекательности.ПолучитьЗначение(ОценкиПривлекательности.ТекущаяСтрока());
	СпособОценкиПривлекательности2 	= ОценкиПривлекательности2.ПолучитьЗначение(ОценкиПривлекательности2.ТекущаяСтрока());
	    
	// фильтруем по интервальным фильтрам
	Если ( (ВклВО<>0) И ( (ВклВООт<>0) Или (ВклВОДо<>0) ) ) // отбор по величине отгрузки-оплаты
		Или ( (ВклПриб<>0) И ( (ВклПрибОт<>0) Или (ВклПрибДо<>0) ) ) Тогда // или по проценту прибыли

		НомСтроки = ОтобранныеДанные.КоличествоСтрок()+1;
		Пока НомСтроки>1 Цикл
			НомСтроки = НомСтроки-1;
			Если (ВклВО<>0) И ( (ВклВООт<>0) Или (ВклВОДо<>0) ) Тогда
				// проверяем интервальный фильтр по отгрузке или оплате
				СуммаОО = ОтобранныеДанные.ПолучитьЗначение(НомСтроки,СпособФильтраПоОтгрузкеОплате);
				СуммаОО = глПересчет(СуммаОО,Гривня,ВалютаВО,Дата2);
					
				Если ( (ВклВООт<>0) И (ВООт>СуммаОО) ) Или ( (ВклВОДо<>0) И (ВОДо<СуммаОО) ) Тогда
					ОтобранныеДанные.УдалитьСтроку(НомСтроки);
					Продолжить;
				КонецЕсли;	
			КонецЕсли;	
	        
			Если (ВклПриб<>0) И ( (ВклПрибОт<>0) Или (ВклПрибДо<>0) ) Тогда	
				// проверяем интервальный фильтр по проценту прибыли
				ПроцПриб = ОтобранныеДанные.ПолучитьЗначение(НомСтроки,СпособФильтраПоПроцентуПрибыли);
				
				Если ( (ВклПрибОт<>0) И (ПрибОт>ПроцПриб)) Или ( (ВклПрибДо<>0) И (ПрибДо<ПроцПриб) ) Тогда
					ОтобранныеДанные.УдалитьСтроку(НомСтроки);
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
	
		КонецЦикла;	                                          
	КонецЕсли;  // 

	// накладываем фильтры по ABC
	ОбщееЧислоКонтрагентов = ОтобранныеДанные.КоличествоСтрок();
	ОтобранныеДанные.НоваяКолонка("Удален","Ч",1);
	Если ОбщееЧислоКонтрагентов > 0 Тогда
		ОтобранныеДанные.Заполнить(0,,,"Удален"); // начальная инициализация
	КонецЕсли;
	
	Если ВклОтборПоПроцКонтр<>0 Тогда
		ЧислоОставляемыхКонтрагентов = Окр(ОбщееЧислоКонтрагентов*ПроцентКонтрагентов/100,0,1);
	                   
		ОтобранныеДанные.Сортировать(СпособОценкиПривлекательности+ПорядокВозрастаниеУбывание);
		    
		Для НомерСтроки=(ЧислоОставляемыхКонтрагентов+1) По ОбщееЧислоКонтрагентов Цикл
			ОтобранныеДанные.УстановитьЗначение(НомерСтроки,"Удален",1);
		КонецЦикла;	
	КонецЕсли;

	Если ВклОтборПоПроцСуммКонтр<>0 Тогда
		ОбщаяСумма = ОтобранныеДанные.Итог(СпособОценкиПривлекательности2);
		
		Если ОбщаяСумма>0 Тогда
			БарьерСуммы = ОбщаяСумма*ПроцентСуммКонтрагентов/100;
			Если БарьерСуммы=0 Тогда
				ОтобранныеДанные.УдалитьСтроки();
				ОбщееЧилоКонтрагентов=0;
			ИначеЕсли БарьерСуммы<ОбщаяСумма Тогда
				ОтобранныеДанные.Сортировать(СпособОценкиПривлекательности2+"-");
				СуммаПервых 				= 0; 
				ЧислоОставляемыхКонтрагентов=0;
			    Пока (ЧислоОставляемыхКонтрагентов <= ОбщееЧислоКонтрагентов) И (СуммаПервых < БарьерСуммы) Цикл
			    	ЧислоОставляемыхКонтрагентов = ЧислоОставляемыхКонтрагентов + 1;
					СуммаПервых = СуммаПервых + ОтобранныеДанные.ПолучитьЗначение(ЧислоОставляемыхКонтрагентов,СпособОценкиПривлекательности2);
			    КонецЦикла;
				Для НомерСтроки=(ЧислоОставляемыхКонтрагентов+1) По ОбщееЧислоКонтрагентов Цикл
					ОтобранныеДанные.УстановитьЗначение(НомерСтроки,"Удален",1);
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	// удаляем помеченные на удаление строки
	НомСтр=0;
	Пока ОтобранныеДанные.НайтиЗначение(1,НомСтр,"Удален")>0 Цикл
		ОтобранныеДанные.УдалитьСтроку(НомСтр);
		НомСтр=0;
	КонецЦикла;
	
	Если ГрупповаяОбработка<>0 Тогда
		СписокКонтр = СоздатьОбъект("СписокЗначений");
		ОтобранныеДанные.Выгрузить(СписокКонтр,,,"Контрагент");
		Если СписокКонтр.РазмерСписка()=0 Тогда
			Предупреждение("Список контрагентов пуст");
		Иначе
			ОткрытьФорму("Обработка.ГрупповаяОбработкаСправочникаКонтрагентов",СписокКонтр);
		КонецЕсли;
		Возврат;
	КонецЕсли;	
	
	СписокГруппКонтрагентов = СоздатьОбъект("СписокЗначений");
	
	// начинаем формировать таблицу
	Для Индекс = 1 По СписокКонтрагентовСГруппами.РазмерСписка() Цикл
	    Контрагент = СписокКонтрагентовСГруппами.ПолучитьЗначение(Индекс);
		Если Контрагент.ЭтоГруппа()>0 Тогда    
		    СписокГруппКонтрагентов.ДобавитьЗначение(Контрагент);
			Продолжить;
		КонецЕсли;
		     
		НомерСтроки = 0;
		Если ОтобранныеДанные.НайтиЗначение(Контрагент,НомерСтроки,"Контрагент")>0 Тогда
			ОтобранныеДанные.ПолучитьСтрокуПоНомеру(НомерСтроки);  
		Иначе 
			Продолжить;
		КонецЕсли;	
		
		// выводим группы контрагентов
		Пока СписокГруппКонтрагентов.РазмерСписка()>0 Цикл
			ГруппаКонтрагентов = СписокГруппКонтрагентов.ПолучитьЗначение(1);
			Если Контрагент.ПринадлежитГруппе(ГруппаКонтрагентов)=1 Тогда
				Наим = глСмещениеГруппы(ГруппаКонтрагентов,0) + ГруппаКонтрагентов;
				// выводим строку в таблицу
				Таб.ВывестиСекцию("ГруппаКонтрагентов"); 
				глОживить(1);
			КонецЕсли;
			СписокГруппКонтрагентов.УдалитьЗначение(1);
		КонецЦикла;
		
		Наим = глСмещениеГруппы(Контрагент,0) + Контрагент;
		                                           
		ПечСебПродано 	= глФРМ(ОтобранныеДанные.Себ,		Гривня,1); 
		ПечОплата 		= глФРМ(ОтобранныеДанные.Оплата,	Гривня,1); 
		ПечОтгрузка 	= глФРМ(ОтобранныеДанные.Отгрузка,	Гривня,1);
		
		ПечПрибыльПоОплате 		= ?(ОтобранныеДанные.ПроцПрибылиПоОплате=0,  "",Шаблон("[ОтобранныеДанные.ПроцПрибылиПоОплате#Ч7.2] %"));         
		ПечПрибыльПоОтгрузке 	= ?(ОтобранныеДанные.ПроцПрибылиПоОтгрузке=0,"",Шаблон("[ОтобранныеДанные.ПроцПрибылиПоОтгрузке#Ч7.2] %"));         
		
		// выводим строку по контрагенту
		Таб.ВывестиСекцию("Контрагент"); 
		глОживить(1);
		
	КонецЦикла;                                        

	Если фДиаграмма = 1  Тогда
		Таб.ВывестиСекцию("ДиаграммаПрибылей"); 
		Таб.ВывестиСекцию("ДиаграммаАбсПрибылей");
		Таб.ВывестиСекцию("ДиаграммаОборотов"); 
	КонецЕсли;
	
	ФиксКвоСтрок = Таб.ВысотаСекции("Кнопки")+Таб.ВысотаСекции("Отчет")+Таб.ВысотаСекции("Шапка");
	ФиксКвоКолон = 1;
	Таб.Опции(0, 0, ФиксКвоСтрок, ФиксКвоКолон, "ПарамПечатиУпрABCПривлекательность", "РазмОкнаУпрABCПривлекательность");
	Таб.ОбластьПечати(Таб.ВысотаСекции("Кнопки")+1);

	// Вывод заполненной формы
	Таб.ТолькоПросмотр(1);
	Таб.Показать("ПЕЧАТЬ: ABC привлекательность покупателей ("+ПериодСтр(Дата1, Дата2)+?(ТипЗначения(ВыбФирма)=0, "", ", "+ВыбФирма)+")","");
	
	Если (Обновить = 2) Или (ЗакрытьЭкран=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры    	// Сформировать


// ===============================
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// ===============================

// ===============================
Процедура ПриВыбореЗакладки(Номер,Значение="")	// Предопределенная процедура
	// закладки
    Если Номер=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблицеМФ,Контекст); // записываем изменения если они были
    ИначеЕсли Номер=2 Тогда
		Форма.ИспользоватьСлой("Шапка,МФ,Подвал");
	КонецЕсли;      
	ПерерисовкаНазванийЗакладок();
	ДоступностьЭлементов(1);
КонецПроцедуры	// ПриВыбореЗакладки

// ===============================
Процедура ОбработкаПодбора(Значение)  // Предопределенная процедура
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
КонецПроцедуры  // ОбработкаПодбора

// ===============================
Процедура ПриОткрытии()	// Предопределенная процедура
	                           
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки отчета из списка
		Дата1 	= глРасшифровка.Получить("Дата1");
		Дата2 	= глРасшифровка.Получить("Дата2");
	                                                    
		ВыбФирма	  = глРасшифровка.Получить("ВыбФирма");
		ВыбКонтрагент = глРасшифровка.Получить("ВыбКонтрагент");
		Если ТипЗначенияСтр(глРасшифровка.Получить("ТаблицаМФ"))="ТаблицаЗначений" Тогда
			ТаблицаМФ.Загрузить(глРасшифровка.Получить("ТаблицаМФ"));
		КонецЕсли;
		
		фДиаграмма 				= глРасшифровка.Получить("фДиаграмма");
		фОграничитьЧислоТочек 	= глРасшифровка.Получить("фОграничитьЧислоТочек");
		МаксКоличествоТочек 	= глРасшифровка.Получить("МаксКоличествоТочек");
		ОтгрузкаОплатаДиаграмма.ТекущаяСтрока(глРасшифровка.Получить("ОтгрузкаОплатаДиаграмма")); 

		ВклВО 		= глРасшифровка.Получить("ВклВО");                          
        ВалютаВО	= глРасшифровка.Получить("ВалютаВО");                          
		ВклВООт 	= глРасшифровка.Получить("ВклВООт");                          
		ВклВОДо 	= глРасшифровка.Получить("ВклВОДо");                          
		ВООт 		= глРасшифровка.Получить("ВООт");                          
		ВОДо 		= глРасшифровка.Получить("ВОДо");                          
		ОтгрузкаОплата.ТекущаяСтрока(глРасшифровка.Получить("ОтгрузкаОплата")); 
		
		ВклПриб 	= глРасшифровка.Получить("ВклПриб");                          
        ВклПрибОт 	= глРасшифровка.Получить("ВклПрибОт");                          
		ВклПрибДо 	= глРасшифровка.Получить("ВклПрибДо");                          
		ПрибОт 		= глРасшифровка.Получить("ПрибОт");                          
		ПрибДо 		= глРасшифровка.Получить("ПрибДо");       
		ТипПрибыли.ТекущаяСтрока(глРасшифровка.Получить("ТипПрибыли")); 
		                                                 
		ВклОтборПоПроцКонтр = глРасшифровка.Получить("ВклОтборПоПроцКонтр");                          
		ПроцентКонтрагентов = глРасшифровка.Получить("ПроцентКонтрагентов");                          
		ВозрастанияУбывания.ТекущаяСтрока(глРасшифровка.Получить("ВозрастанияУбывания"));  
		ОценкиПривлекательности.ТекущаяСтрока(глРасшифровка.Получить("ОценкиПривлекательности")); 
        
		ВклОтборПоПроцСуммКонтр = глРасшифровка.Получить("ВклОтборПоПроцСуммКонтр");                          
		ПроцентСуммКонтрагентов = глРасшифровка.Получить("ПроцентСуммКонтрагентов");                          
		ОценкиПривлекательности2.ТекущаяСтрока(глРасшифровка.Получить("ОценкиПривлекательности2")); 
        
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;
	
	ТаблицаМФ.ВидимостьКолонки("Тип",				0);
	ТаблицаМФ.ВидимостьКолонки("Вид",				0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",	0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",				0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",		0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	                                                                                
	ПриВыбореЗакладки(1);
	
КонецПроцедуры		// ПриОткрытии

// ===============================
Процедура ВводНового()	// Предопределенная процедура
	// эта предопределенная процедура выполняется при восстановлении настройки
	ТекСтрокаВТаблицеМФ="";
	ПриВыбореЗакладки(1);
КонецПроцедуры		// ВводНового


// ===============================
// ТЕЛО МОДУЛЯ
// ===============================
                                     
// инициализация границ периодов
Дата2=ПолучитьДатуТА(); 
Дата1=глВосстановитьЗначение(,"ОсновнаяДатаНачалаОтчета");
Если ПустоеЗначение(Дата1)=0 Тогда
	Дата1=НачМесяца(Дата1);
КонецЕсли;         

// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);

// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");

//                  			тип			вид				переменная  	название
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Контрагенты",	"Контрагент",	"По контрагентам");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ВидыКатегорий","Контрагент",	"По категориям контрагентов");

ТекСтрокаВТаблицеМФ="";

// инициализация списков	                       
ОтгрузкаОплата.УдалитьВсе();
ОтгрузкаОплата.ДобавитьЗначение("Отгрузка","отгрузки");
ОтгрузкаОплата.ДобавитьЗначение("Оплата","оплаты"); 
ОтгрузкаОплата.ДобавитьЗначение("ПрибыльПоОтгрузке","прибыли по отгрузке");
ОтгрузкаОплата.ДобавитьЗначение("ПрибыльПоОплате","прибыли по оплате");
ОтгрузкаОплата.ТекущаяСтрока(1);

ТипПрибыли.УдалитьВсе();
ТипПрибыли.ДобавитьЗначение("ПроцПрибылиПоОтгрузке","по отгрузке");
ТипПрибыли.ДобавитьЗначение("ПроцПрибылиПоОплате","по оплате");
ТипПрибыли.ТекущаяСтрока(1);

ВозрастанияУбывания.УдалитьВсе();
ВозрастанияУбывания.ДобавитьЗначение("+","возрастания");
ВозрастанияУбывания.ДобавитьЗначение("-","убывания");
ВозрастанияУбывания.ТекущаяСтрока(1);

ОценкиПривлекательности.УдалитьВсе();
ОценкиПривлекательности.ДобавитьЗначение("АбсОтгрузка","отгрузки");
ОценкиПривлекательности.ДобавитьЗначение("АбсОплата","оплаты");
ОценкиПривлекательности.ДобавитьЗначение("АбсПрибыльПоОтгрузке","прибыли по отгрузке");
ОценкиПривлекательности.ДобавитьЗначение("АбсПрибыльПоОплате","прибыли по оплате");
ОценкиПривлекательности.ДобавитьЗначение("ПроцПрибылиПоОтгрузке","процентов прибыли по отгрузке");
ОценкиПривлекательности.ДобавитьЗначение("ПроцПрибылиПоОплате","процентов прибыли по оплате");
ОценкиПривлекательности.ТекущаяСтрока(1);

ОценкиПривлекательности2.УдалитьВсе();
ОценкиПривлекательности2.ДобавитьЗначение("АбсОтгрузка","отгрузки");
ОценкиПривлекательности2.ДобавитьЗначение("АбсОплата","оплаты");
ОценкиПривлекательности2.ДобавитьЗначение("АбсПрибыльПоОтгрузке","прибыли по отгрузке");
ОценкиПривлекательности2.ДобавитьЗначение("АбсПрибыльПоОплате","прибыли по оплате");
ОценкиПривлекательности2.ТекущаяСтрока(1);

ОтгрузкаОплатаДиаграмма.УдалитьВсе();
ОтгрузкаОплатаДиаграмма.ДобавитьЗначение("Отгрузка","отгрузке");
ОтгрузкаОплатаДиаграмма.ДобавитьЗначение("Оплата",  "оплате"); 
ОтгрузкаОплатаДиаграмма.ТекущаяСтрока(1);

ВалютаВО = Гривня;
