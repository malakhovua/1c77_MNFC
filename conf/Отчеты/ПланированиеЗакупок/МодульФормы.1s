// ===============================
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
// ===============================

Перем ТекСтрокаВТаблицеМФ; // текущая строка в таблице значений  МФ 

Перем Таб;		
Перем Обновить;
Перем Расшифровка; 
// используются для стандартного механизма кнопок "Обновить" и "Настройка"
    
Перем ЧислоРабочихДнейВНеделе;	// число рабочих дней в неделе
Перем ВидТовараУслуга;          // Перечисление.ВидыТоваров.Услуга

// переменные предназначены для запроса по периодам
Перем Запрос;
Перем Язык;


// ===============================
// "СЛУЖЕБНЫЕ" ПРОЦЕДУРЫ И ФУНКЦИИ
// ===============================

// ===============================
// Название: ПерерисовкаНазванийЗакладок
// Параметры:
// НЕТ
// Возвращаемое значение:
// Вызывается из формул элементов диалога:
// Наименование,.           
// Описание:
//  Добавляет "(!)" в заголовок закладки с множественным фильтром, когда этот фильтр задан
Функция ПерерисовкаНазванийЗакладок()      
	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
КонецФункции // ПерерисовкаНазванийЗакладок

// ===============================
// Название: ЯвляетсяРабочимДнем
// Параметры: Д - дата
// НЕТ
// Возвращаемое значение: 	1, если Д является рабочим днем
//							0, иначе
// Вызывается из формул элементов диалога:
// Наименование,.           
// Описание:
//  
Функция ЯвляетсяРабочимДнем(Д)
	Если НомерДняНедели(Д)>ЧислоРабочихДнейВНеделе Тогда
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;	
КонецФункции	// ЯвляетсяРабочимДнем


// ===============================
// Название: ЧислоРабочихДнейМежду
// Параметры: Д1 и Д2 - даты
// НЕТ
// Возвращаемое значение: 	число рабочих дней между Д1 и Д2 включительно
// Вызывается из формул элементов диалога:
// Наименование,.           
// Описание:
//  
Функция ЧислоРабочихДнейМежду(Знач Д1, Знач Д2)
Перем ЧислоРабочихДней;
	                            
	// если дата конца меньше даты начала, то число дней = 0
	Если Д1>Д2 Тогда
		Возврат 0;
	КонецЕсли;
	    
	ЧислоРабочихДней = 0;

	Пока (НомерДняНедели(Д1) <> 1) И (Д1 <= Д2) Цикл
		ЧислоРабочихДней = ЧислоРабочихДней + ЯвляетсяРабочимДнем(Д1);
		Д1 = Д1 + 1;
	КонецЦикла;

	Пока (НомерДняНедели(Д2) <> 7) И (Д1 <= Д2) Цикл
		ЧислоРабочихДней = ЧислоРабочихДней + ЯвляетсяРабочимДнем(Д2);
		Д2 = Д2 - 1;
	КонецЦикла;

	ЧислоРабочихДней = ЧислоРабочихДней + (Д2 - Д1 + 1) * ЧислоРабочихДнейВНеделе / 7;
	
	Возврат ЧислоРабочихДней;

КонецФункции	// ЧислоРабочихДнейМежду


// ===============================
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА
// ===============================

// ===============================
// ВыбратьПоФильтру()
//
// Параметры:
//  Нет
//
// Описание:
//  Открывает обработку отбора элементов по произвольному фильтру
//
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру


// ===============================
// Название: ПроверитьКорректностьДат
// Параметры:
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//   поля с датами отчета   
// Наименование,.
// Описание:
//    	проверяет даты на корректность (превышение ТА, дата конца закупок должна 
//		быть не меньше даты конца анализа продаж)
Процедура ПроверитьКорректностьДат()           
	Если Дата2>ПолучитьДатуТА() Тогда
		Предупреждение("Нельзя устанавливать дату анализа продаж больше Точки Актуальности!");
		Дата2 = ПолучитьДатуТА();
		Дата1 = Мин(Дата1,Дата2);
	КонецЕсли;                                 
	
	Если Дата1>Дата2 Тогда
		Предупреждение("Нельзя устанавливать дату начала анализа продаж больше даты конца!");
		Дата1 = Дата2;
	КонецЕсли;	

	Если ДатаЗакупки1>ДатаЗакупки2 Тогда
		Предупреждение("Нельзя устанавливать дату начала периода закупки больше даты конца!");
		ДатаЗакупки1 = ДатаЗакупки2;
	КонецЕсли;	
    
	Если ПустоеЗначение(ДатаЗакупки1)=1 Тогда
		ДатаЗакупки1 = Дата2+1;
	КонецЕсли;		

	Если ПустоеЗначение(ДатаЗакупки2)=1 Тогда
		ДатаЗакупки2 = ДатаЗакупки1;
	КонецЕсли;		
КонецПроцедуры  	// ПроверитьКорректностьДат
	                     
// ===============================
// Название: ДоступностьЭлементов
// Параметры:
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Наименование,.
// Описание:
//    	управляет доступностью элементов
Процедура ДоступностьЭлементов(ВсеЭлементы=0)           

	ЭлементДиалога = Форма.АктивныйЭлемент();

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбФирма") Или (ЭлементДиалога="кХВыбФирма") Тогда
		Форма.кХВыбФирма.Доступность(ВыбФирма.Выбран()); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбТовар") Или (ЭлементДиалога="кХВыбТовар") Тогда
		Форма.кХВыбТовар.Доступность(ВыбТовар.Выбран()); 
	КонецЕсли;

КонецПроцедуры  	// ДоступностьЭлементов

// ===============================
// Название: Сформировать
// Параметры:
//   ЗакрытьЭкран - флаг того, что после формирования отчета надо закрыть экран	
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//   кнопки "Сформировать" и "ОК"
// Наименование,.
// Описание:
//    запускает отчет
Процедура Сформировать(ЗакрытьЭкран=0)    
	Перем Запрос;					// запрос
	                              
	// проверяем заполнение дат 
	Если ПустоеЗначение(Дата1)=1 Тогда
		Предупреждение("Не выбрана дата начала анализа продаж"); 
		Возврат;
	КонецЕсли;	
	
	Если ПустоеЗначение(Дата2)=1 Тогда
		Предупреждение("Не выбрана дата конца анализа продаж"); 
		Возврат;
	КонецЕсли;	
	
	Если ПустоеЗначение(ДатаЗакупки1)=1 Тогда
		Предупреждение("Не выбрана дата начала периода закупки"); 
		Возврат;
	КонецЕсли;	
	
	// число рабочих дней в неделе
	ЧислоРабочихДнейВНеделе = 5;
	Если РабочаяНеделя.ТекущаяСтрока()>0 Тогда
		ЧислоРабочихДнейВНеделе = 4 + РабочаяНеделя.ТекущаяСтрока();
	КонецЕсли;	                    
	                                  
	ПроверитьКорректностьДат();
	
	// Здесь формируется отчет, который использует регистры, критичные к
    // последовательности проведения документов
    // поэтому сравним установленные даты периода формируемого отчета с ГП 
    глПроверкаАктуальностиОтчета(Дата1,Дата2,ВыбФирма,0);
	
	//  Создание Таблицы для выходного отчета
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;

	ПечФорма = "Таблица";
	Язык = глЯзык(ПечФорма); 
	глУстПропись(Гривня,Язык);
    Таб.ИсходнаяТаблица(ПечФорма);
    
	// все настройки помещаем в список
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Объект", "ПланированиеЗакупок");
    
	Расшифровка.Установить("Дата1", 		Дата1);
    Расшифровка.Установить("Дата2", 		Дата2);
	Расшифровка.Установить("ДатаЗакупки1", 	ДатаЗакупки1); 
	Расшифровка.Установить("ДатаЗакупки2", 	ДатаЗакупки2); 
	
	Расшифровка.Установить("ВыбФирма", 		ВыбФирма);
	Расшифровка.Установить("ВыбТовар", 		ВыбТовар);
	// запомним МФ только если он задан
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблицеМФ,Контекст); // записываем изменения если они были
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ);
	КонецЕсли;

	Расшифровка.Установить("РабочаяНеделя", 	РабочаяНеделя.ТекущаяСтрока()); 
	Расшифровка.Установить("ПорядокОкругления", ПорядокОкругления.ТекущаяСтрока()); 

	Расшифровка.Установить("ТолькоНеобходимыеЗакупки", 	ТолькоНеобходимыеЗакупки);
	Расшифровка.Установить("ОбъемЗакупкиВклРезерв", 	ОбъемЗакупкиВклРезерв);

	ВидТовараУслуга = Перечисление.ВидыТМЦ.Услуга;
	
	Если Дата2 >= ПолучитьДатуТА() Тогда
		ТекстЗапроса = "
			|Период с Дата1;";
	Иначе 
		ТекстЗапроса = "
			|Период с Дата1 по Дата2;";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + 
		"Фирма				= Регистр.Партии.Фирма;
		|Товар				= Регистр.Партии.ТМЦ; 
		|ВидТовара			= Регистр.Партии.ТМЦ.ВидТМЦ;
		|ПриходныйДокумент	= Регистр.Партии.ПрихДокумент;
		|ДокументДвижения	= Регистр.Партии.ТекущийДокумент;
		|ОстатокТовара		= Регистр.Партии.ОстатокТовара;

		|Группировка Товар Все; 
		|Группировка ДокументДвижения Упорядочить По ДокументДвижения.ДатаДок,ДокументДвижения.ВремяДок; 

		|Функция НачОстатокТовара	= НачОст(ОстатокТовара);
		|Функция КонОстатокТовара	= КонОст(ОстатокТовара);
		|Функция РасхОстатокТовара	= Расход(ОстатокТовара); 
		|Функция ПрихОстатокТовара	= Приход(ОстатокТовара);

		|Условие (ВидТовара<>ВидТовараУслуга);
		|";
    
	Загол="";
    
	Если глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Фирма", ВыбФирма, "ВыбФирма", ТекстЗапроса, Загол, Язык)=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по фирмам. Отчет не сформирован.");
		Возврат;
	ИначеЕсли глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Товар", ВыбТовар, "ВыбТовар", ТекстЗапроса, Загол, Язык, "КатегорииТоваров")=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по товарам. Отчет не сформирован.");
		Возврат;
	КонецЕсли;

	// выполняем запрос
	Запрос=СоздатьОбъект("Запрос");
    Если Запрос.Выполнить(ТекстЗапроса)=0 тогда
		Предупреждение("Запрос по Партиям не выполнился!");
		Возврат;
	КонецЕсли;          
	
	// обнуляем счетчик числа строк, выведенных в таблицу отчета
	глЧислоСтрок=0;                                                          
	
	Таб.ВывестиСекцию("Кнопки");              
	                                                                           
	// вычисляем, на какое число дней надо будет рассчитывать закупку товаров
	Если ПустоеЗначение(ДатаЗакупки2)>0 Тогда
		КоличествоДнейЗакупки = 0;
	Иначе	
		КоличествоДнейЗакупки = ЧислоРабочихДнейМежду(ДатаЗакупки1,ДатаЗакупки2);
	КонецЕсли;	
	    
	СписокВошедшихВЗапросТов = СоздатьОбъект("СписокЗначений");
	
	// цикл по товарам, отобранным запросом
	Запрос.ВНачалоВыборки();
	Пока Запрос.Группировка("Товар")>0 Цикл
		Товар = Запрос.Товар;
		Если ПустоеЗначение(Товар) = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Запрос.ЭтоГруппа("Товар")=1 Тогда	// это группа
			Продолжить;
		КонецЕсли;	
		
		СписокВошедшихВЗапросТов.ДобавитьЗначение(Товар);
	КонецЦикла;  
	
	ВремРегистры=СоздатьОбъект("Регистры");
	РегРезервы=ВремРегистры.Резервы; 
	РегОстатки=ВремРегистры.Остатки;
	Если (ДатаЗакупки1-1)<ПолучитьДатуТА() Тогда
		РегРезервы.УстановитьЗначениеФильтра("ТМЦ",СписокВошедшихВЗапросТов,2); 
		РегОстатки.УстановитьЗначениеФильтра("ТМЦ",СписокВошедшихВЗапросТов,2); 
		Если ВыбФирма.Выбран()=1 Тогда
			РегРезервы.УстановитьЗначениеФильтра("Фирма",ВыбФирма,1);
			РегОстатки.УстановитьЗначениеФильтра("Фирма",ВыбФирма,1);
		КонецЕсли;

		РегРезервы.ВременныйРасчет(); 
		РегОстатки.ВременныйРасчет();
		ВремРегистры.РассчитатьРегистрыПО(ДатаЗакупки1-1);
	КонецЕсли;
          
	// выводим шапку отчета
	Таб.ВывестиСекцию("Отчет");  
	Таб.ВывестиСекцию("Шапка"); 
	глОживить(6);
           
	СписокГруппТоваров = СоздатьОбъект("СписокЗначений");
	
	// цикл по товарам, отобранным запросом
	Запрос.ВНачалоВыборки();
	Пока Запрос.Группировка("Товар")>0 Цикл
		Товар = Запрос.Товар;
		Если ПустоеЗначение(Товар) = 1 Тогда
			Продолжить;
		КонецЕсли;
		        
		Если Запрос.ЭтоГруппа("Товар") = 1 Тогда	// это группа
			// помещаем в список встретившихся групп
			СписокГруппТоваров.ДобавитьЗначение(Товар);
			Продолжить;
		КонецЕсли;	
		
		КоличествоПроданногоЗаПериод = Запрос.РасхОстатокТовара; 
		КоличествоДнейПродажи = 0;         
		Если ВыбФирма.Выбран()=1 Тогда
			РезервТовара 						= РегРезервы.СводныйОстаток(ВыбФирма,Товар,,,,"Резерв"); 
			ОстатокТовараНаДатуНачалаЗакупки 	= РегОстатки.СводныйОстаток(ВыбФирма,Товар,,"ОстатокТовара");
		Иначе
			РезервТовара 						= РегРезервы.СводныйОстаток(		,Товар,,,,"Резерв"); 
			ОстатокТовараНаДатуНачалаЗакупки 	= РегОстатки.СводныйОстаток(		,Товар,,,,"ОстатокТовара");
		КонецЕсли;

		// подготавливаем данные для печати
		ПечПродано 			= глФРМКоличествоВОтчете(КоличествоПроданногоЗаПериод,		Товар); 
		ПечОстатокНаКонец 	= глФРМКоличествоВОтчете(ОстатокТовараНаДатуНачалаЗакупки,	Товар);
		ПечМинОстаток 		= глФРМКоличествоВОтчете(Товар.МинимальныйОстаток,			Товар);  
		ПечРезерв 			= глФРМКоличествоВОтчете(РезервТовара,						Товар); 
		                                   
		БылиДвиженияТовара = 0;
		ДатаПоследнегоДвижения = Дата1-1;
		Остаток = Запрос.НачОстатокТовара;
		 
		// цикл по всем движениям товаров
		Пока 1=1 Цикл	    
			
			ПолучилиНовоеДвижение = Запрос.Группировка("ДокументДвижения");
			НоваяДатаДвижения = 0;        
			
			Если ПолучилиНовоеДвижение>0 Тогда		// удалось получить очередное движение
				
				// документ движения остатка товара
			    ДокументДвижения = Запрос.ДокументДвижения;
				Если ПустоеЗначение(ДокументДвижения) = 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если БылиДвиженияТовара = 0 Тогда  	// это первое движение товара за период
					
					// движение первое => и дата движения не совпадает с датой предыдущего движения
					НоваяДатаДвижения = 1;
					БылиДвиженияТовара = 1;
					
				Иначе								// это не первое движение товара за период
					Если ДатаПоследнегоДвижения < ДокументДвижения.ДатаДок Тогда
						// дата движения не совпадает с датой предыдущего движения
						НоваяДатаДвижения = 1;
					КонецЕсли;	
				КонецЕсли;	
				
				Если НоваяДатаДвижения = 1 Тогда	// дата движения не совпадает с датой предыдущего движения
					ТекущийДеньУчтен = 0;		// эта новая дата движения еще не учтена как дата продажи товаров
				КонецЕсли;	
			КонецЕсли;                        
			
			// получили новое движение, произошедшее в новый день
			Если (НоваяДатаДвижения=1) Тогда	// день, когда произошла реальная отгрузка
				Если Остаток>0 Тогда	// на складе есть, что продавать
					
					// в число дней продажи надо включить все дни, начиная с даты предыдущего движения,
					// по дату текущего движения
					КоличествоДнейПродажи = КоличествоДнейПродажи + 
											ЧислоРабочихДнейМежду(ДатаПоследнегоДвижения+1,ДокументДвижения.ДатаДок-1);
				КонецЕсли;
										
				// передвигаем дату последнего обработанного движения
				ДатаПоследнегоДвижения = ДокументДвижения.ДатаДок;						
			КонецЕсли;                        
			
			// день еще не учтен и в этот день произошла отгрузка либо было, что продавать 
			Если (ТекущийДеньУчтен=0) И ( (Запрос.РасхОстатокТовара>0) Или (Остаток>0) ) Тогда
				// учитываем этот день как день отгрузки
			    КоличествоДнейПродажи = КоличествоДнейПродажи + 1;
				ТекущийДеньУчтен=1;
			КонецЕсли;	
			          
			// пересчитываем остатки
			Если ПолучилиНовоеДвижение>0 Тогда
			    Остаток = Остаток + Запрос.ПрихОстатокТовара - Запрос.РасхОстатокТовара;              
			КонецЕсли;	
			          
			Если ПолучилиНовоеДвижение<=0 Тогда		// Все движения обработаны
				Прервать;
			КонецЕсли;	

		КонецЦикла;	 // конец цикла по движениям 
		                                           
		// до конца периода анализа продаж не было движений
		Если ДатаПоследнегоДвижения<Дата2 Тогда        
			Если Остаток>0 Тогда	// но товар на складе лежал
				КоличествоДнейПродажи = КоличествоДнейПродажи + 
										ЧислоРабочихДнейМежду(ДатаПоследнегоДвижения+1,Дата2);
			КонецЕсли;	
		КонецЕсли;	
		                                    
		// рассчитываем скорость продаж и необходимый объем закупки
		СкоростьПродажи = 0;
		Если КоличествоДнейПродажи>0 Тогда
			СкоростьПродажи = КоличествоПроданногоЗаПериод/КоличествоДнейПродажи;
		КонецЕсли;	                             
		
		НеобходимыйОбъемЗакупки = Макс(Товар.МинимальныйОстаток + 
									СкоростьПродажи*КоличествоДнейЗакупки - ОстатокТовараНаДатуНачалаЗакупки + ?(ОбъемЗакупкиВклРезерв<>0,РезервТовара,0),0);
		                          
		Если ТолькоНеобходимыеЗакупки<>0 Тогда	// выводим только те товары. по которым необходимый объем закупки больше 0
			Если НеобходимыйОбъемЗакупки=0 Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
		
									
		// задан порядок округления объема закупки
		ВыбПорядокОкругления = ПорядокОкругления.ТекущаяСтрока();
		Если ВыбПорядокОкругления = 1 Тогда // не округлять
			ПечОбъемЗакупки = глФРМКоличествоВОтчете(НеобходимыйОбъемЗакупки,Товар);
		Иначе
			// переводим в единицы по умолчанию							
			ТочностьОкругления 	= ПорядокОкругления.ПолучитьЗначение(ВыбПорядокОкругления);
			СпособОкругления 	= 6 - ВыбПорядокОкругления;
			
			НеобходимыйОбъемЗакупки = глКоличествоВОтчете(НеобходимыйОбъемЗакупки,Товар);							
			ОкрНеобходимыйОбъемЗакупки = Окр(НеобходимыйОбъемЗакупки,СпособОкругления,1);					
			Если ОкрНеобходимыйОбъемЗакупки<НеобходимыйОбъемЗакупки Тогда	// в результате округления кол-во уменьшилось
				// добавляем точность округления
				НеобходимыйОбъемЗакупки = ОкрНеобходимыйОбъемЗакупки+ТочностьОкругления;
			Иначе
				НеобходимыйОбъемЗакупки = ОкрНеобходимыйОбъемЗакупки;
			КонецЕсли;	                                      
			
			ПечОбъемЗакупки = Строка(НеобходимыйОбъемЗакупки);
		КонецЕсли;
		
		// выводим группы товара
		Пока СписокГруппТоваров.РазмерСписка()>0 Цикл
			ГруппаТоваров = СписокГруппТоваров.ПолучитьЗначение(1);
			Если Товар.ПринадлежитГруппе(ГруппаТоваров)=1 Тогда
				Наим = глСмещениеГруппы(ГруппаТоваров,0) + ГруппаТоваров;
				// выводим строку в таблицу
				Таб.ВывестиСекцию("ГруппаТоваров"); 
				глОживить(1);
			КонецЕсли;
			СписокГруппТоваров.УдалитьЗначение(1);
		КонецЦикла;
		
		Наим = глСмещениеГруппы(Товар,0) + глТоварВОтчете(Товар,1,Запрос.ЭтоГруппа("Товар"), Запрос.ЗначениеУпорядочивания(1));
		// представление данных в таблице отчета							
		ПечДнейПродажи = Строка(КоличествоДнейПродажи);
		ПечСкоростьПродажи = глФРМКоличествоВОтчете(СкоростьПродажи,Товар);
		    
		// выводим строку по товару
		Таб.ВывестиСекцию("Товар"); 
		глОживить(1);
		
	КонецЦикла;	
	
	ФиксКвоСтрок = Таб.ВысотаСекции("Кнопки")+Таб.ВысотаСекции("Отчет")+Таб.ВысотаСекции("Шапка");
	ФиксКвоКолон = 1;
	Таб.Опции(0, 0, ФиксКвоСтрок, ФиксКвоКолон, "ПарамПечатиУпрПланированиеЗакупок", "РазмОкнаУпрПланированиеЗакупок");
	Таб.ОбластьПечати(Таб.ВысотаСекции("Кнопки")+1);

	// Вывод заполненной формы
	Таб.ТолькоПросмотр(1);
	Таб.Показать("ПЕЧАТЬ: Планирование закупок ("+ПериодСтр(Дата1, Дата2)+?(ТипЗначения(ВыбФирма)=0, "", ", "+ВыбФирма)+")","");
	
	Если (Обновить = 2) Или (ЗакрытьЭкран=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры    	// Сформировать



// ===============================
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// ===============================

// ===============================
Процедура ПриВыбореЗакладки(Номер,Значение="")	// Предопределенная процедура
	// закладки
    Если Номер=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблицеМФ,Контекст); // записываем изменения если они были
    ИначеЕсли Номер=2 Тогда
		Форма.ИспользоватьСлой("Шапка,МФ,Подвал");
	КонецЕсли;      
	ПерерисовкаНазванийЗакладок();
	ДоступностьЭлементов(1);
КонецПроцедуры	// ПриВыбореЗакладки

// ===============================
Процедура ОбработкаПодбора(Значение)  // Предопределенная процедура
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
КонецПроцедуры  // ОбработкаПодбора

// ===============================
Процедура ПриОткрытии()	// Предопределенная процедура
	                           
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки отчета из списка
		Дата1 			= глРасшифровка.Получить("Дата1");
		Дата2 			= глРасшифровка.Получить("Дата2");
	    ДатаЗакупки1 	= глРасшифровка.Получить("ДатаЗакупки1");
		ДатаЗакупки2 	= глРасшифровка.Получить("ДатаЗакупки2");
		
		ВыбФирма 		= глРасшифровка.Получить("ВыбФирма");
		ВыбТовар 		= глРасшифровка.Получить("ВыбТовар");
		Если ТипЗначенияСтр(глРасшифровка.Получить("ТаблицаМФ"))="ТаблицаЗначений" Тогда
			ТаблицаМФ.Загрузить(глРасшифровка.Получить("ТаблицаМФ"));
		КонецЕсли;

		РабочаяНеделя.		ТекущаяСтрока(глРасшифровка.Получить("РабочаяНеделя")); 
		ПорядокОкругления.	ТекущаяСтрока(глРасшифровка.Получить("ПорядокОкругления")); 

		ТолькоНеобходимыеЗакупки = глРасшифровка.Получить("ТолькоНеобходимыеЗакупки");
		ОбъемЗакупкиВклРезерв	 = глРасшифровка.Получить("ОбъемЗакупкиВклРезерв");
	
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;
	
	ТаблицаМФ.ВидимостьКолонки("Тип",				0);
	ТаблицаМФ.ВидимостьКолонки("Вид",				0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",	0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",				0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",		0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	                                                                                
	ПриВыбореЗакладки(1);
	
	// будем отслеживать только реальные изменения этих реквизитов
	Форма.Дата1.		ВыполнятьФормулуТолькоПриИзменении(1); 
	Форма.Дата2.		ВыполнятьФормулуТолькоПриИзменении(1); 
	Форма.ДатаЗакупки1.	ВыполнятьФормулуТолькоПриИзменении(1); 
	Форма.ДатаЗакупки2.	ВыполнятьФормулуТолькоПриИзменении(1); 
	
КонецПроцедуры		// ПриОткрытии

// ===============================
Процедура ВводНового()	// Предопределенная процедура
	// эта предопределенная процедура выполняется при восстановлении настройки
	ТекСтрокаВТаблицеМФ="";
	ПриВыбореЗакладки(1);
КонецПроцедуры		// ВводНового


// ===============================
// ТЕЛО МОДУЛЯ
// ===============================
                                     
// инициализация границ периодов
Дата2=ПолучитьДатуТА(); 
Дата1=глВосстановитьЗначение(,"ОсновнаяДатаНачалаОтчета");
Если ПустоеЗначение(Дата1)=0 Тогда
	Дата1=НачМесяца(Дата1);
КонецЕсли;         
ДатаЗакупки1=Дата2+1;
ДатаЗакупки2=ДатаЗакупки1;

// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);

// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");

ТаблицаМФ.ВидимостьКолонки("Тип",				0);
ТаблицаМФ.ВидимостьКолонки("Вид",				0);
ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",	0);          
ТаблицаМФ.ВидимостьКолонки("ТипМФ",				0);
ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",		0);

ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
                                                                                
//                  			тип			вид				переменная  	название
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ТМЦ",				"Товар",	"По номенклатуре");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ВидыКатегорий",	"Товар",	"По категориям номенклатуры");

ТекСтрокаВТаблицеМФ="";

// инициализация списков	                       
ПорядокОкругления.УдалитьВсе();
ПорядокОкругления.ДобавитьЗначение("", 		"не округлять");
ПорядокОкругления.ДобавитьЗначение(0.0001, 	"до 0.0001");
ПорядокОкругления.ДобавитьЗначение(0.001, 	"до 0.001");
ПорядокОкругления.ДобавитьЗначение(0.01, 	"до 0.01");
ПорядокОкругления.ДобавитьЗначение(0.1, 	"до 0.1");
ПорядокОкругления.ДобавитьЗначение(1, 		"до 1");
ПорядокОкругления.ДобавитьЗначение(10, 		"до 10");
ПорядокОкругления.ДобавитьЗначение(100, 	"до 100");
ПорядокОкругления.ДобавитьЗначение(1000, 	"до 1000");
ПорядокОкругления.ДобавитьЗначение(10000, 	"до 10000");
ПорядокОкругления.ТекущаяСтрока(1);

РабочаяНеделя.УдалитьВсе();
РабочаяНеделя.ДобавитьЗначение("5-дневная");
РабочаяНеделя.ДобавитьЗначение("6-дневная"); 
РабочаяНеделя.ДобавитьЗначение("7-дневная");
РабочаяНеделя.ТекущаяСтрока(1);

ТолькоНеобходимыеЗакупки = 1;


