Перем ТекСтрокаВТаблицеМФ; // текущая строка в таблице значений  МФ

// используются для стандартного механизма кнопок "Обновить" и "Настройка"
Перем Таб;
Перем Обновить;
Перем Расшифровка;
                        
// переменные предназначены для механизма универсальных группировок отчета
Перем СписокГруппировок;
Перем КоличествоГруппировок;
Перем НомерГруппировкиНоменклатура;

// переменные предназначены для запроса по периодам
Перем Запрос,ЗапросСПериодами,ТаблицаПериодов,Периодичность;
Перем Язык, УкрГруппировки;

Перем Заголовок, ПечЗаголовокСтолбца;

Перем ГруппировкиПоДвижениям;


// ===============================
Функция ПерерисовкаНазванийЗакладок()      

	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
	
КонецФункции // ПерерисовкаНазванийЗаклад

// ===============================
Процедура ДоступностьЭлементов(ВсеЭлементы=0)           
	
	ЭлементДиалога = Форма.АктивныйЭлемент();

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбФирма") Или (ЭлементДиалога="кХВыбФирма") Тогда
		Форма.кХВыбФирма.Доступность(ВыбФирма.Выбран()); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбНоменклатура") Или (ЭлементДиалога="кХВыбНоменклатура") Тогда
		Форма.кХВыбНоменклатура.Доступность(ВыбНоменклатура.Выбран()); 
	КонецЕсли;

	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбПокупатель") Или (ЭлементДиалога="кХВыбПокупатель") Тогда
		Форма.кХВыбПокупатель.Доступность(ВыбПокупатель.Выбран()); 
	КонецЕсли;
	
	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбВидУпаковки") Или (ЭлементДиалога="кХВыбВидУпаковки") Тогда
		Форма.кХВыбВидУпаковки.Доступность(ВыбВидУпаковки.Выбран()); 
	КонецЕсли;
	
	Если (ВсеЭлементы=1) Или (ЭлементДиалога="ВыбКатегорияЦен") Или (ЭлементДиалога="кХВыбКатегорияЦен") Тогда
		Форма.кХВыбКатегорияЦен.Доступность(ВыбКатегорияЦен.Выбран()); 
	КонецЕсли;
		
КонецПроцедуры  	// ДоступностьЭлементов

// ===============================
Процедура ПриВыбореЗакладки(Номер,Значение="")	
	// закладки
    Если Номер=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблицеМФ,Контекст); // записываем изменения если они были
	Иначе     
		Форма.ИспользоватьСлой("Шапка,МФ,Подвал");
	КонецЕсли;      
	ПерерисовкаНазванийЗакладок();
	ДоступностьЭлементов(1);
КонецПроцедуры	// ПриВыбореЗакладки

Функция ПолучитьКомментарий(Документ, Номенклатура)
	
	Перем Результат; //:ТаблицаЗначений
	ПримечаниеСтр = "";
	
	рс = СоздатьОбъект("ODBCRecordset");
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора внесенные вручную изменения будут потеряны!!!
	ТекстЗапроса = "
	|SELECT $УМК_ЗаказКлиентаСтроки.ПримечаниеСтроки ПримечаниеСтроки
	|FROM $ДокументСтроки.УМК_ЗаказКлиента AS УМК_ЗаказКлиентаСтроки
	|WHERE (УМК_ЗаказКлиентаСтроки.IDDOC = :Документ)
	|	AND ($УМК_ЗаказКлиентаСтроки.ТМЦ = :Номенклатура)
	|	AND ($УМК_ЗаказКлиентаСтроки.ПримечаниеСтроки <> '')
	|";
	рс.УстановитьТекстовыйПараметр("Документ", Документ);
	рс.УстановитьТекстовыйПараметр("Номенклатура", Номенклатура);
	Результат = рс.ВыполнитьИнструкцию(ТекстЗапроса);
	Результат.ВыбратьСтроки();
	
	Пока Результат.ПолучитьСтроку() = 1  Цикл
		ПримечаниеСтр = ПримечаниеСтр + Результат.ПримечаниеСтроки
	КонецЦикла;
	
	Комментарий = Документ.Примечание + " "+ Строка(ПримечаниеСтр);
	Комментарий = СтрЗаменить(Комментарий, "#1с8#","");
	
	Возврат Комментарий
	
КонецФункции

// ===============================
Процедура ПечатьПериода(Ном,НазваниеСекции,Запрос)

	Номенклатура = Запрос.Номенклатура;
	Если фКвоКг = 1 Тогда 
		ПечКвоКг = глФРМ(Запрос.КвоСумма,Гривня,0);
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|КвоКг");
	КонецЕсли;
	
	Если фКвоШт = 1 Тогда 
		ПечКвоШт = глФРМ(Запрос.КвоШтСумма,Гривня,0);
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|КвоШт");
	КонецЕсли;
	
	Если фКвоПересчет = 1 Тогда 
		ПечКвоПересчет = глФРМ(Запрос.КвоПересчетСумма,Гривня,0);
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|КвоПересчетКг");
	КонецЕсли;
	
	Если фСумма = 1 Тогда 
		ПечСумма = глФРМ(Запрос.СуммаСНДССумма,Гривня,1);
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|Сумма");
	КонецЕсли;
	
	Если фКомментарий = 1 Тогда 
		ПечКоммент = ПолучитьКомментарий(Запрос.Документ, Номенклатура);
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|Комментарий");
	КонецЕсли;

КонецПроцедуры //ПечатьПериода()

// ===============================
Процедура ПечатьСтроки(Ном,НазваниеГруппировки,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка = "",Значение = 0)
Перем Секция;
	
	Если ТипЗначенияСтр(Значение) = "Справочник" Тогда
		ЭтоГруппа = Значение.ЭтоГруппа();
		Если (фБезГрупп = 3) И (ЭтоГруппа = 0) Тогда
			
			Если (Значение.Вид() <> "ВидыУпаковки") И (Значение.Вид() <> "КатегорииЦен") Тогда
				Возврат;
			КонецЕсли;
		    
		ИначеЕсли ((фБезГрупп = 3) И (ЭтоГруппа = 0)) ИЛИ ((фБезГрупп = 4) И (Значение.ЭтоГруппа() = 0) И (Значение.Уровень() <> 2)) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Наим = ПечТекстСтроки;
	Значение = ТекРасшифровка;
	Секция = Таб.ПолучитьСекцию(НазваниеСекции+"|Наименование");
	Область = Секция.Область("R1C1:R1C8");
	Область.Подчеркнутый(ЭтоГруппа);
	Таб.ВывестиСекцию(Секция);
	
    ПечатьПериода(Ном, НазваниеСекции, Запрос);

	//Если (Периодичность <> 0) Тогда
	//	// выведем теперь все периоды, с разворотом вправо
	//	ТаблицаПериодов.ВыбратьСтроки();
	//	Пока ТаблицаПериодов.ПолучитьСтроку() = 1 Цикл
	//		глПозиционироватьЗапросПоПериодам(Запрос,ЗапросСПериодами,СписокГруппировок,КоличествоГруппировок,Ном,ТаблицаПериодов.РеалНачалоПериода);
	//		ПечатьПериода(Ном, НазваниеСекции, ЗапросСПериодами);
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры //ПечатьСтроки()

// ===============================
Процедура ВывестиГруппировки(Знач Ном=1)

	Если Ном > КоличествоГруппировок Тогда                           
		Возврат;
	КонецЕсли;

	НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(Ном);
	Пока Запрос.Группировка(Ном) = 1 Цикл

		НазваниеСекции="Группировка"+Ном;
		Значение = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
		
		Если Найти("Номенклатура,Счет,Поставщик,Покупатель,РегионПоставщика,РегионПокупателя,ВидДеятельности,ЧерезКого,КатегорияЦен,ВидУпаковки",НазваниеГруппировки) > 0 Тогда
			ПечТекстСтроки = глСмещениеГруппы(Значение,Мин(3, фБезГрупп)-1) + Значение;
		ИначеЕсли НазваниеГруппировки = "Договор" Тогда
			ПечТекстСтроки = ""+глДокументВОтчете(Значение,"с номером","с датой",Язык);
			Попытка
				Адрес = глАдресСтрокой(Значение.Адрес);
				Если СокрЛП(Адрес) <> "" Тогда
				    ПечТекстСтроки = ПечТекстСтроки + " / " + Адрес;
				КонецЕсли;
			Исключение КонецПопытки;
		Иначе // Договор,Счет,КредДокумент,Документ
			Если ПустоеЗначение(Значение)=0 Тогда
				ПечТекстСтроки = ""+глДокументВОтчете(Значение,"с номером","с датой",Язык);
			Иначе
				ПечТекстСтроки = "";
			КонецЕсли;
		КонецЕсли;
		
		ПечТекстСтроки = ?(ПустоеЗначение(ПечТекстСтроки)=1,глПредставлениеПустогоЗначения(НазваниеГруппировки,Язык),ПечТекстСтроки);

		ЗначениеРасшифровки = 0;
		Если НазваниеГруппировки = "Документ" Тогда
		    // остатки расшифровать до движений нельзя
			ЗначениеРасшифровки = Значение;
		Иначе
			// расшифровываем до движений, отбираем только текущие значения
			Расшифровка.Установить("Выб"+НазваниеГруппировки, Значение);
			Расшифровка.Установить("Группировки", ГруппировкиПоДвижениям);
			ЗначениеРасшифровки = Расшифровка;
		КонецЕсли;

		ПечатьСтроки(Ном,НазваниеГруппировки,НазваниеСекции,ПечТекстСтроки,ЗначениеРасшифровки,Значение);
		глОживить(1);

		ВывестиГруппировки(Ном+1);

	КонецЦикла;
	// очищаем отборы по расшифровке до движений
	Если Не( НазваниеГруппировки = "Документ") Тогда
		Расшифровка.Установить("Выб"+НазваниеГруппировки);
		Расшифровка.Установить("Группировки");
	КонецЕсли;

КонецПроцедуры // ВывестиГруппировки()

// ===============================
Процедура ВывестиШапкуПериода(НазваниеСекции,Период="")
		
	Если фКвоКг = 1 Тогда   
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|КвоКг");
	КонецЕсли;
	Если фКвоШт = 1 Тогда   
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|КвоШт");
	КонецЕсли;
	Если фКвоПересчет = 1 Тогда   
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|КвоПересчетКг");
	КонецЕсли;
	Если фСумма = 1 Тогда   
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|Сумма");
	КонецЕсли;
	Если фКомментарий = 1 Тогда   
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|Комментарий");
	КонецЕсли;
		
КонецПроцедуры 

// ===============================
Процедура ВывестиШапку()

	Если Периодичность<>0 Тогда 
		Таб.ВывестиСекцию("ШапкаПериод|Наименование");
		ВывестиШапкуПериода("ШапкаПериод",?(Язык="у", "Всього за період", "Всего за период"));
	    //ТаблицаПериодов.ВыбратьСтроки(); // выводим шапку для каждого периода
		//Пока ТаблицаПериодов.ПолучитьСтроку()=1 Цикл
		//	ВывестиШапкуПериода("ШапкаПериод",ПериодСтр(ТаблицаПериодов.НачалоПериода,ТаблицаПериодов.КонецПериода));
		//КонецЦикла;
		//Таб.ПрисоединитьСекцию("ШапкаПериод|Рамка");
		глОживить(1);
	КонецЕсли;

	Таб.ВывестиСекцию("Шапка|Наименование");
	ВывестиШапкуПериода("Шапка");
	//Если Периодичность<>0 Тогда 
	//    ТаблицаПериодов.ВыбратьСтроки(); // выводим шапку для каждого периода
	//	Пока ТаблицаПериодов.ПолучитьСтроку()=1 Цикл
	//		ВывестиШапкуПериода("Шапка");
	//	КонецЦикла;
	//КонецЕсли;
	глОживить(1);
	Таб.Область(5,1,5,Таб.ШиринаТаблицы()).ГоризонтальноеПоложение(1+4);
КонецПроцедуры 

// ===============================
Процедура УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
	                       
	СписокГруппировок = СоздатьОбъект("СписокЗначений");
	КвоГруппировок 				= Группировки.РазмерСписка();
	НомерГруппировкиНоменклатура= КвоГруппировок;

	Для Сч=1 По КвоГруппировок Цикл
		
		Если Группировки.Пометка(Сч)=1 Тогда
			ПредставлениеГрупп		=""; 
			УкрПредставлениеГрупп	="";
			ТекстГрупп = Группировки.ПолучитьЗначение(Сч,ПредставлениеГрупп);
			УкрГруппировки.ПолучитьЗначение(УкрГруппировки.НайтиЗначение(ТекстГрупп),УкрПредставлениеГрупп);
			
			ТекстБезУпорядочивания = "";
			ТекстБезГрупп = "";
			Если ( (ТекстГрупп = "Номенклатура") ИЛИ (ТекстГрупп = "КатегорияЦен") Или (ТекстГрупп = "Покупатель") Или
				 (ТекстГрупп = "ВидУпаковки")) И (фБезГрупп = 2) Тогда
					ТекстБезГрупп = " без групп";
			КонецЕсли;
			//Если (ТекстГрупп = "Счет") И (глОптимизацияОтчетов = 1) Тогда
			//    ТекстБезУпорядочивания = " без упорядочивания";
			//КонецЕсли;
			
			ТекстЗапроса= ТекстЗапроса 	+ "Группировка "+ТекстГрупп+ТекстБезУпорядочивания+ТекстБезГрупп+";";
			ТекстЗагол	= ТекстЗагол + " / "+?(Язык="у",УкрПредставлениеГрупп,ПредставлениеГрупп);
			СписокГруппировок.ДобавитьЗначение(ТекстГрупп,ПредставлениеГрупп);
			Если ТекстГрупп = "Номенклатура" Тогда
			    НомерГруппировкиНоменклатура = СписокГруппировок.РазмерСписка();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

	Если ПустаяСтрока(ТекстЗагол)=0 Тогда // удаляем ведущий разделитель " / "
		ТекстЗагол = Сред(ТекстЗагол,4)
	КонецЕсли;

КонецПроцедуры // УстановитьГруппировкиЗапроса()

Процедура УстановитьОбязательнуюГруппировку()
	
	Если фКомментарий = 1 Тогда	
		Зн = Группировки.НайтиЗначение("Документ");
		Группировки.Пометка(Зн, 1);
		фКвоКг = 1;
		фКвоШт = 1;
	КонецЕсли;
	
КонецПроцедуры

//====================================================================== //--- УМК Сандомирский В.Ю. (21.04.15)
Процедура Сформировать(ЗакрытьДиалог=0)
	
	//Перем ТекстЗапроса;
	
	глПроверкаДаты(НачДата,КонДата);	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") Или (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;
	ПечФорма = "Таблица";
	Язык = глЯзык(ПечФорма); 
	глУстПропись(Гривня,Язык);
	Таб.ИсходнаяТаблица(ПечФорма);
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "УМК_ОтчетПоЗаказамПокупателей");
		
	Расшифровка.Установить("НачДата", 		НачДата);
    Расшифровка.Установить("КонДата", 		КонДата);

	Расшифровка.Установить("ВыбФирма",			ВыбФирма);
	Расшифровка.Установить("ВыбНоменклатура",	ВыбНоменклатура);
	Расшифровка.Установить("ВыбПокупатель",		ВыбПокупатель);
	Расшифровка.Установить("ВыбВидУпаковки",	ВыбВидУпаковки);
	Расшифровка.Установить("ВыбКатегорияЦен",	ВыбКатегорияЦен);
	
	Расшифровка.Установить("фКвоКг",		фКвоКг);
	Расшифровка.Установить("фКвоШт",		фКвоШт);
	Расшифровка.Установить("фКвоПересчет",	фКвоПересчет);
	Расшифровка.Установить("фСумма",		фСумма);
	Расшифровка.Установить("фКомментарий",		фКомментарий);
	
	// запомним МФ только если он задан
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблицеМФ,Контекст); // записываем изменения если они были
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ);
	КонецЕсли;

	Расшифровка.Установить("Группировки",	Группировки);	
	Расшифровка.Установить("фБезГрупп",		фБезГрупп);

	УстановитьОбязательнуюГруппировку();
				
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ЗапросСПериодами = СоздатьОбъект("Запрос");
	               
		
	ТекстЗапроса = "
		|Период с НачДата по КонДата;
		|Фирма 			= Документ.УМК_ЗаказКлиента.Фирма;
		|Покупатель 	= Документ.УМК_ЗаказКлиента.Контрагент;
		|КатегорияЦен	= Документ.УМК_ЗаказКлиента.КатегорияЦен;
		|ВидУпаковки 	= Документ.УМК_ЗаказКлиента.ВидУпаковки;
		|Номенклатура 	= Документ.УМК_ЗаказКлиента.ТМЦ;
		|Кво 			= Документ.УМК_ЗаказКлиента.Кво;
		|КвоШт 			= Документ.УМК_ЗаказКлиента.КвоШт;
		|КвоПересчет 	= Документ.УМК_ЗаказКлиента.КвоПересчет;
		|СуммаСНДС 		= Документ.УМК_ЗаказКлиента.СуммаСНДС;	
		|Функция КвоСумма = Сумма(Кво);
		|Функция КвоШтСумма = Сумма(КвоШт);
		|Функция КвоПересчетСумма = Сумма(КвоПересчет + Кво);
		|Функция СуммаСНДССумма = Сумма(СуммаСНДС);
		|";
		
		
		
		//Группировка Фирма без групп без упорядочивания;
		//Группировка Контрагент без групп без упорядочивания;
		//Группировка ВидУпаковки без групп без упорядочивания;
		//Группировка Номенклатура без групп без упорядочивания;
		//Условие(Контрагент в Условия.ПолучитьЗначение(9,"Значение"));
		//|
		
	

	
	Загол = "";

	Если глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Фирма", ВыбФирма, "ВыбФирма", ТекстЗапроса, Загол, Язык)=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по фирмам. Отчет не сформирован.");
		Возврат;
	ИначеЕсли глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Номенклатура", ВыбНоменклатура, "ВыбНоменклатура", ТекстЗапроса, Загол, Язык,"КатегорииТоваров")=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по позициям номенклатуры. Отчет не сформирован.");
		Возврат;
	ИначеЕсли глФильтрПоПеременнойЗапроса(ТаблицаМФ,"КатегорияЦен", ВыбКатегорияЦен, "ВыбКатегорияЦен", ТекстЗапроса, Загол, Язык,"")=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по категориям цен. Отчет не сформирован.");
		Возврат;
	ИначеЕсли глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Покупатель", ВыбПокупатель, "ВыбПокупатель", ТекстЗапроса, Загол, Язык, "КатегорииКонтрагентов")=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по покупателям. Отчет не сформирован.");
		Возврат;
	ИначеЕсли глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ВидУпаковки", ВыбВидУпаковки, "ВыбВидУпаковки", ТекстЗапроса, Загол, Язык, "")=0 Тогда
		Предупреждение("Возникли ошибки при наложении фильтра по видам упаковки. Отчет не сформирован.");
		Возврат;
	КонецЕсли;
	
	
		
	//ТаблицаПериодов = СоздатьОбъект("ТаблицаЗначений");
	//Периодичность = ПериодСтрока();
	//Если Периодичность <> 0 Тогда
	//    ТекстЗапросаПоПериодам = ТекстЗапроса+ "Группировка " + Периодичность + ";";
	//КонецЕсли;

	ПечЗаголовокСтолбца = "";
	ТекстГруппировок 	= "";
	
	УстановитьГруппировкиЗапроса(ТекстГруппировок, ПечЗаголовокСтолбца);
	КоличествоГруппировок = СписокГруппировок.РазмерСписка();
	
	Если КоличествоГруппировок = 0 Тогда
		Предупреждение("Следует выбрать хотя бы одну группировку!");
		Возврат;
	КонецЕсли;
	
	//Если ((КоличествоГруппировок > 7) И (СписокПериодов.ТекущаяСтрока()=1)) 
	//	Или ((КоличествоГруппировок > 6) И (СписокПериодов.ТекущаяСтрока()>1)) Тогда
	//	Предупреждение("Нельзя сделать больше 7 группировок!",60);
	//	Возврат;
	//КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстГруппировок;
	
	//Если Периодичность <> 0 Тогда
	//    ТекстЗапросаПоПериодам = ТекстЗапросаПоПериодам + ТекстГруппировок;		
	//	Если ЗапросСПериодами.Выполнить(ТекстЗапросаПоПериодам)=0 Тогда
	//		Предупреждение("Запрос по периодам не выполнился!!!");
	//		Возврат;
	//	КонецЕсли;
	//	// Таблица с периодами
	//	глПолучитьТаблицуПериодов(ТаблицаПериодов,ЗапросСПериодами,Периодичность);
	//	ЗапросСПериодами.ВНачалоВыборки();
	//КонецЕсли;
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Предупреждение("Запрос по заказам не выполнился!");
		Возврат;
	КонецЕсли;  

	// обнуляем счетчик числа строк, выведенных в таблицу отчета
	глЧислоСтрок = 0;

	Таб.ВывестиСекцию("Кнопки|Наименование");
	Таб.ВывестиСекцию("Заголовок|Наименование");
	глОживить(Таб.ВысотаСекции("Заголовок"));
	
	Расшифровка.Установить("Обновить",0);
	Расшифровка.Установить("ТаблицаМФ", 0);
	
	ВывестиШапку();
	                         
	// ВЫВОД ГРУППИРОВОК ЗАПРОСА
	ВывестиГруппировки();
	
	// выводим итоги
	ПечатьСтроки(0,"","Итого",?(Язык="у", "Всього:", "Всего:"));

	ФиксКвоСтрок = Таб.ВысотаСекции("Кнопки")+Таб.ВысотаСекции("Заголовок")+?(Периодичность <> 0,Таб.ВысотаСекции("ШапкаПериод"),0)+Таб.ВысотаСекции("Шапка");
	ФиксКвоКолон = Таб.ШиринаСекции("Наименование");
	Таб.Опции(0, 0, ФиксКвоСтрок, ФиксКвоКолон, "ПарамПечатиУпрОбороты", "РазмОкнаУпрОбороты");
	Таб.ОбластьПечати(Таб.ВысотаСекции("Кнопки")+1);
	
	// Вывод заполненной формы
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);

	Таб.Показать("ПЕЧАТЬ: Заказы покупателей: ("+ПериодСтр(НачДата, КонДата)+?(ВыбФирма.Выбран()=0, "", ", "+ВыбФирма)+")","");
	
	Если (Обновить = 2) Или (ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры // Сформировать()
	
// ===============================
Процедура ПриОткрытии()	
	Если НазваниеНабораПрав() = "Заказ" Тогда
		фЗакупка = 0;
		Форма.фЗакупка.Доступность(0);
	ИначеЕсли (НазваниеНабораПрав() = "ПрочиеЗаказ") ИЛИ (НазваниеНабораПрав() = "МастерЭкспедиции") Тогда
		фЗакупка = 0;
		фДоход = 0;
		Форма.фЗакупка.Доступность(0);
		Форма.фДоход.Доступность(0);		
	КонецЕсли;
	
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		глФлагРасшифровки = 0;
		
		// восстанавливаем настройки из списка
		НачДата 		= глРасшифровка.Получить("НачДата");
		КонДата			= глРасшифровка.Получить("КонДата");

		ВыбФирма		= глРасшифровка.Получить("ВыбФирма");
		ВыбНоменклатура = глРасшифровка.Получить("ВыбНоменклатура");
		ВыбВидУпаковки	= глРасшифровка.Получить("ВыбВидУпаковки");		
		ВыбПокупатель	= глРасшифровка.Получить("ВыбПокупатель");
		ВыбКатегорияЦен = глРасшифровка.Получить("ВыбКатегорияЦен");
		
		фКвоКг			= глРасшифровка.Получить("фКвоКг");
		фКвоШт			= глРасшифровка.Получить("фКвоШт");
		фКвоПересчет	= глРасшифровка.Получить("фКвоПересчет");
		фСумма			= глРасшифровка.Получить("фСумма");
		фКомментарий    = глРасшифровка.Получить("фКомментарий");
		
		Если ТипЗначенияСтр(глРасшифровка.Получить("ТаблицаМФ"))="ТаблицаЗначений" Тогда
			ТаблицаМФ.Загрузить(глРасшифровка.Получить("ТаблицаМФ"));
		КонецЕсли;
		
		//СписокПериодов.ТекущаяСтрока(глРасшифровка.Получить("СписокПериодов"));

		фБезГрупп = глРасшифровка.Получить("фБезГрупп");
		глРасшифровка.Получить("Группировки").Выгрузить(Группировки);
				
		//--- УМК Сандомирский В.Ю (11.02.15)
		фСуммаУп   		= глРасшифровка.Получить("фСуммаУп");
		фСуммаВЦенах 	= глРасшифровка.Получить("фСуммаВЦенах");
		
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;            
	
	ТаблицаМФ.ВидимостьКолонки("Тип",				0);
	ТаблицаМФ.ВидимостьКолонки("Вид",				0);
	ТаблицаМФ.ВидимостьКолонки("ВидДляПустого",		0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",	0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",				0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",		0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	                                                                                
	ПриВыбореЗакладки(1);

КонецПроцедуры		// ПриОткрытии()       

// ===============================
Процедура ОбработкаПодбора(Значение)  

	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
	
КонецПроцедуры  // ОбработкаПодбора

Процедура ПриНачалеВыбораЗначения(Идент, Флаг)
	
	
КонецПроцедуры

// ===============================
// ТЕЛО МОДУЛЯ
// ===============================

КонДата	= ПолучитьДатуТА();
НачДата = НачМесяца(ПолучитьДатуТА());

// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);

// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.НоваяКолонка("ВидДляПустого",,,,"");

//                  			тип			вид					переменная  		название
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ТМЦ",				"Номенклатура",		"По позициям номенклатуры");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ВидыУпаковки",		"ВидУпаковки",		"По видам упаковки");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","КатегорииЦен",		"КатегорияЦен",		"По категориям цен");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Контрагенты",		"Покупатель",		"По покупателям");

ТекСтрокаВТаблицеМФ="";

Группировки.ДобавитьЗначение("Номенклатура",   	"Номенклатура");
Группировки.ДобавитьЗначение("ВидУпаковки",   	"Вид упаковки");
Группировки.ДобавитьЗначение("КатегорияЦен",   	"Категория цены");
Группировки.ДобавитьЗначение("Покупатель", 		"Покупатель");
Группировки.ДобавитьЗначение("Документ", 	    "Документ движения");
Группировки.ТекущаяСтрока(1);

// по умолчанию предпределенный набор "Продажи"
Группировки.Пометка(1,1);
//Группировки.Пометка(2,1);

// список украинских названий группировок для построения шапки отчета
УкрГруппировки = СоздатьОбъект("СписокЗначений");
УкрГруппировки.ДобавитьЗначение("Номенклатура",     "Номенклатура");
УкрГруппировки.ДобавитьЗначение("ВидУпаковки",   	"Вид пакування");
УкрГруппировки.ДобавитьЗначение("КатегорияЦен",     "Категорія ціни");
УкрГруппировки.ДобавитьЗначение("Покупатель", 		"Покупець");
УкрГруппировки.ДобавитьЗначение("Документ", 	    "Документ рухів");

// для расшифровки отчета по движениям
ГруппировкиПоДвижениям = СоздатьОбъект("СписокЗначений"); 
ГруппировкиПоДвижениям.ДобавитьЗначение("Документ",		"Документ движения");
ГруппировкиПоДвижениям.Пометка(1,1);

// расставляем флаги и значения
фБезГрупп  	= 1;
фЗакупка 	= 0;
фПродажа 	= 1;
фДоход   	= 0;

//// инициализация списков диалога
//СписокПериодов.УдалитьВсе();
//СписокПериодов.ДобавитьЗначение("Общий","Общие итоги");
//СписокПериодов.ДобавитьЗначение("День","День");
//СписокПериодов.ДобавитьЗначение("Неделя","Неделя");
//СписокПериодов.ДобавитьЗначение("Месяц","Месяц");  
//СписокПериодов.ДобавитьЗначение("Квартал","Квартал");
//СписокПериодов.ДобавитьЗначение("Год","Год");
//СписокПериодов.ТекущаяСтрока(1);

ргВозвр = 3;
ргВП = 1;
КэшЦен = СоздатьОбъект("ТаблицаЗначений");
КэшЦен.НоваяКолонка("Цена", "Число", 12, 2);
КэшЦен.НоваяКолонка("Ключ", "Строка");
