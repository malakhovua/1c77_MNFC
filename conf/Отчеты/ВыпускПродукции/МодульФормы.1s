// ===============================
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
// ===============================

Перем ТекСтрокаВТаблицеМФ; // текущая строка в таблице значений  МФ 
Перем  ПрефиксВыпуск; // + umk
// используются для стандартного механизма кнопок "Обновить" и "Настройка"
Перем Таб;
Перем Обновить;
Перем Расшифровка;
                        
// переменные предназначены для механизма универсальных группировок отчета
Перем СписокГруппировок;
Перем КоличествоГруппировок;
Перем НомерГруппировкиПоТМЦ;

// переменные предназначены для запроса по периодам
Перем Запрос,ЗапросСПериодами,ТаблицаПериодов,Периодичность;
Перем Язык, УкрГруппировки; 

Перем ГруппировкиПоДвижениям;
Перем ПринятоПродукцииИтого; // + umk

// ===============================
// "СЛУЖЕБНЫЕ" ПРОЦЕДУРЫ И ФУНКЦИИ
// ===============================

// ===============================
// ВыбратьПоФильтру()
//
// Параметры:
//  Нет
//
// Описание:
//  Открывает обработку отбора элементов по произвольному фильтру
//
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру

// ===============================
// ПерерисовкаНазванийЗакладок
//
// Параметры:
// 	Нет
//
// Описание:
//  Добавляет "(!)" в заголовок закладки с множественным фильтром, когда этот фильтр задан
//
Функция ПерерисовкаНазванийЗакладок()      

	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
	
КонецФункции // ПерерисовкаНазванийЗакладок	

// ===============================
// УправлениеДиалогом()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Управление доступностью элементов диалога.
//
Процедура УправлениеДиалогом()
	
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда           
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе     
		Форма.ИспользоватьСлой("Шапка,МФ,Подвал");
	КонецЕсли;
	
КонецПроцедуры //УправлениеДиалогом()   

// ===============================
// УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
//
// Параметры:  ТекстЗапроса - переданный по ссылке текст запроса
// 			   ТекстЗагол   - переданный по ссылке текст заголовка
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Дополняет строку запроса и заголовка в соответствии с выбранными группировками.
//       
Процедура УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
	                       
	СписокГруппировок = СоздатьОбъект("СписокЗначений");
	НомерГруппировкиПоТМЦ = 9999;
	
	Для Сч=1 По Группировки.РазмерСписка() Цикл
		
		Если Группировки.Пометка(Сч)=1 Тогда
			ПредставлениеГрупп=""; УкрПредставлениеГрупп="";
			ТекстГрупп		= Группировки.ПолучитьЗначение(Сч,ПредставлениеГрупп);
			УкрГруппировки.ПолучитьЗначение(УкрГруппировки.НайтиЗначение(ТекстГрупп),УкрПредставлениеГрупп);
			
			ТекстБезУпорядочивания = "";
			ТекстБезГрупп = "";
			Если  ( (ТекстГрупп = "Подразделение") Или (ТекстГрупп = "ВидДеятельности") Или (ТекстГрупп = "Продукция") ) 
				И (фБезГрупп = 1) Тогда
					ТекстБезГрупп = " без групп";
			ИначеЕсли ( (ТекстГрупп = "Заказ") Или (ТекстГрупп = "Партия") )
				И (глОптимизацияОтчетов = 1) Тогда
			    ТекстБезУпорядочивания = " без упорядочивания";
			КонецЕсли;
			ТекстЗапроса 	= ТекстЗапроса 	+ "Группировка "+ТекстГрупп+ТекстБезУпорядочивания+ТекстБезГрупп+";";
			ТекстЗагол	= ТекстЗагол + " / "+?(Язык="у",УкрПредставлениеГрупп,ПредставлениеГрупп);
			СписокГруппировок.ДобавитьЗначение(ТекстГрупп,ПредставлениеГрупп);
			Если  (ТекстГрупп = "Продукция") Тогда
			    НомерГруппировкиПоТМЦ = СписокГруппировок.РазмерСписка();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	Если ПустаяСтрока(ТекстЗагол)=0 Тогда // удаляем ведущий разделитель " / "
		ТекстЗагол = Сред(ТекстЗагол,4)
	КонецЕсли;
КонецПроцедуры // УстановитьГруппировкиЗапроса()

// ===============================
Функция ПериодСтрока()
	
	Попытка
		
			Зн = СписокПериодов.ПолучитьЗначение(СписокПериодов.ТекущаяСтрока());
	    Если Зн = "Общий" Тогда
	    	Возврат 0;
		Иначе
			Возврат Зн;
		КонецЕсли;
	
	Исключение
	
		Возврат 0;
		
	КонецПопытки;
	
КонецФункции //

//==================================ОБЛАСТЬ РАСЧЕТА СТРОКИ ВЫПУСК ПРОДУКЦИИ===================================// +umk

Функция ПолучитьКоличествоИзЗаказа(КвоКВН, КвоПотерь, Докуент, Продукция, Заказ)
	КвоКВ = 0;
	КвоКВН = 0;
	КвоПотерь = 0;
	Если ПустоеЗначение(Заказ) = 0 Тогда
		Заказ.ВыбратьСтроки();
		Пока Заказ.ПолучитьСтроку() = 1 Цикл
			Если Заказ.Продукция = Продукция Тогда
				КвоФаршаРасчётное = Заказ.КвоФаршаФакт - Заказ.ПотериФарша;
				КвоПотерь = КвоПотерь + Заказ.ПотериФарша;
				КвоКВ = КвоКВ + КвоФаршаРасчётное - (КвоФаршаРасчётное * Заказ.Продукция.ПроцПотерь.Получить(Докуент.ДатаДок)/100);
				КвоКВН = КвоКВН + Заказ.КвоФаршаПлан;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КвоКВ;	
КонецФункции

Функция ПотериФарша(Документ, Продукция, Заказ)
	КвоКВН = 0; КвоПотерь = 0;
	КвоКВ = ПолучитьКоличествоИзЗаказа(КвоКВН, КвоПотерь, Документ, Продукция, Заказ);
	
	Если КвоКВ <> 0 Тогда
	    Возврат КвоПотерь * (Документ.Кво / КвоКВ);
	Иначе		
		Возврат 0;
	КонецЕсли;	
КонецФункции

//Производит расчет значений по данным строки документа
//
Процедура РассчитатьСтроку(Документ, Продукция, НомерСтроки, ОтношениеРазницыКФаршу, КвоФарша, Термопотеря, ПроцентВыпуска)
	
	Если Документ.Вид() <> "ВыпускПродукции" Тогда
		Возврат;
	КонецЕсли;
	
	СтрЗаказа = "";
	КвоФарша = 0;
	Термопотеря = 0;
	ПроцентВыпуска = 0;
	
	ТЗЗак = СоздатьОбъект("ТаблицаЗначений");
	ТЗЗак.НоваяКолонка("Продукция");
	Попытка
		Документ.ПолучитьСтрокуПоНомеру(1);
		Если Документ.Заказ.Выбран() = 1 Тогда
			ТЗЗак = СоздатьОбъект("ТаблицаЗначений");
			Документ.Заказ.ВыгрузитьТабличнуюЧасть(ТЗЗак);
			ТЗЗак.НоваяКолонка("ТП", "Число");
			ТЗЗак.ВыбратьСтроки();
			Пока ТЗЗак.ПолучитьСтроку() = 1 Цикл
				//ТЗЗак.ТП = ТЗЗак.НормыЗатрат.ПроцПотерь;
				ТЗЗак.ТП = ТЗЗак.Продукция.ПроцПотерь.Получить(Документ.Заказ.ДатаДок);
			КонецЦикла;
		КонецЕсли;
	Исключение КонецПопытки;
	
	Документ.ПолучитьСтрокуПоНомеру(НомерСтроки);
	
	ТЗЗак.ВыбратьСтроки();
	Пока ТЗЗак.ПолучитьСтроку() = 1 Цикл
		Если ТЗЗак.Продукция = Продукция Тогда
			КвоФарша = КвоФарша + ТЗЗак.КвоФаршаФакт;			
			Термопотеря = ТЗЗак.ТП;
		КонецЕсли;
	КонецЦикла;

	ПФарша = ПотериФарша(Документ, Продукция, Документ.Заказ); 
	КвоФарша = (КвоФарша - ПФарша) * Документ.ПроцентВыпуска / 100;	
	Разн = КвоФарша - Документ.КвоГППриемки;
	ПроцентВыпуска = Документ.ПроцентВыпуска;
	
	ОтношениеРазницыКФаршу = ?(КвоФарша = 0, 0, Разн / КвоФарша) * 100;
	
КонецПроцедуры

//==================================КОНЕЦ ОБЛАСТЬ РАСЧЕТА СТРОКИ ВЫПУСК ПРОДУКЦИИ===================================// -umk

// ===============================
// ПечатьСтроки(Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка)
//
// Параметры:
//	Ном - Номер группировки запроса (Число)
//	НазваниеСекции - название секции, которую следует использовать (Строка)
//	ПечТекстСтроки - текстовое представление текущей строки
//	ТекРасшифровка - расшифровка текущей строки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит вывод в печатную форму одной строки запроса.
//                                                
Процедура ПечатьСтроки(Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка = "",ЭтоГруппа=0)
	
	Перем Секция, НазваниеГруппировки, ОтношениеРазницыКФаршу, ФаршКво, Термопотери, ПроцентВыпуска;
	
	Наим = ПечТекстСтроки;
	Значение = ТекРасшифровка;
	Секция = Таб.ПолучитьСекцию(НазваниеСекции+"|Наименование");
	Область = Секция.Область("R1C1:R1C7");
	Область.Подчеркнутый(ЭтоГруппа);
	Таб.ВывестиСекцию(Секция);
	
	
	//Вывод сумм без выделения брака
	ПечОбщСумма = глФРМ(Запрос.СумСумма,Гривня,1);
	ПечОбщКво = ?(фБазЕдВеса=1,Формат(Запрос.КвоСумма,глФорматКоличестваВОтчетах),
	             глФРМКоличествоВОтчете(Запрос.КвоСумма,Запрос.Продукция));
				 
				 
	//расчет строки документа
	Если (Периодичность = 0) И
	((фПроцТермопотерь = 1) ИЛИ (фФарш = 1) ИЛИ (фТермопотери = 1) ИЛИ (фПроцВыпуска = 1)) Тогда
		Если Ном <> 0 Тогда
			НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(Ном);
			Если НазваниеГруппировки = "Документ" Тогда
				Документ = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
				РассчитатьСтроку(Документ, Запрос.Продукция, Запрос.НомерСтроки, ОтношениеРазницыКФаршу, ФаршКво, Термопотери, ПроцентВыпуска);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Конец расчет строки документа
	
	//Вывод проц. выпуска
	Если (фПроцВыпуска = 1) И (Периодичность = 0) Тогда
		Если НазваниеГруппировки = "Документ" Тогда
			ПечПроцВыпуска = Формат(ПроцентВыпуска, "Ч15.0");
		КонецЕсли;
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|ПроцВыпуска");
	КонецЕсли;
				 				 
	Если (фФарш = 1) И (Периодичность = 0) Тогда
		Если НазваниеГруппировки = "Документ" Тогда
			ПечФаршКво = Формат(ФаршКво, "Ч15.0");
		КонецЕсли;
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|ФаршКво");
	КонецЕсли;
	
	Таб.ПрисоединитьСекцию(НазваниеСекции+"|ОбщаяКво");
	    
	//Вывод сумм с выделением брака
	Если фВыделятьБрак = 1 Тогда
		Если Запрос.КвоСумма <> 0 Тогда
			ПечБракПроцент = глФРМТ(Запрос.БракКвоСумма / Запрос.КвоСумма * 100,,0)
		Иначе
			ПечБракПроцент ="";
		КонецЕсли;
		ПечБракКво = глФРМКоличествоВОтчете(Запрос.БракКвоСумма,Запрос.Продукция);
		
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|Брак");
	КонецЕсли;
	
	//Вывод количество принятой продукции
	Если (фКолПринятоПродукции = 1) И (Периодичность = 0) Тогда
		КвоГППриемки = 0;
		Если Ном <> 0 Тогда
			НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(Ном);
			Если НазваниеГруппировки = "Документ" Тогда
				Документ = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
				Если Документ.Вид() = "ВыпускПродукции" Тогда
					Документ.ПолучитьСтрокуПоНомеру(Запрос.НомерСтроки);
					КвоГППриемки = Документ.КвоГППриемки;
				КонецЕсли;
				ПечКвоПринятоГП = Формат(КвоГППриемки, "Ч15.3");
				ПринятоПродукцииИтого = ПринятоПродукцииИтого + КвоГППриемки; 
			КонецЕсли;
		Иначе // Это Итог
			ПечКвоПринятоГП = Формат(ПринятоПродукцииИтого, "Ч15.3");
		КонецЕсли;
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|ПринятоПродукции");
	КонецЕсли;
	
	//Вывод сумм с термопотерями
	Если (фПроцТермопотерь = 1) И (Периодичность = 0) Тогда
		Если НазваниеГруппировки = "Документ" Тогда
			ПечПроцТермопотерь = Формат(ОтношениеРазницыКФаршу, "Ч15.0");
		КонецЕсли;
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|ПроцТермопотерь");
	КонецЕсли;
	
	Если (фТермопотери = 1) И (Периодичность = 0) Тогда
		Если НазваниеГруппировки = "Документ" Тогда
			ПечТермопотери = Формат(Термопотери, "Ч15.0");
		КонецЕсли;
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|Термопотери");
	КонецЕсли;
	    
	Если  фНеВыводитьСумму = 0 Тогда
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|ОбщаяСум");
	КонецЕсли;
	
	//Вывод с выделением давальческой части себестоимости продукции
	Если фВыделятьДавСумму = 1 Тогда
		ПечДавСумма = глФРМ(Запрос.ДавСумСумма,Гривня,1);
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|Давальч");
	КонецЕсли;
	
КонецПроцедуры //ПечатьСтроки()

// ===============================
// ПечатьПериода(Ном,НазваниеСекции)
//
// Параметры:
//	Ном - Номер группировки запроса (Число)
//	НазваниеСекции - название секции, которую следует использовать (Строка)
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит присоединение к печатнуй форме одного периода.
//                                                
Процедура ПечатьПериода(Ном,НазваниеСекции)
	
	Если (НазваниеСекции = "ПринятоПродукции")
	ИЛИ (НазваниеСекции = "ПроцТермопотерь") Тогда
		Возврат;
	КонецЕсли; // + umk (не будем выводить для этих секций).

	//Вывод сумм без выделения брака
	ПечОбщСумма = глФРМ(ЗапросСПериодами.СумСумма,Гривня,1);
	ПечОбщКво = глФРМКоличествоВОтчете(ЗапросСПериодами.КвоСумма,ЗапросСПериодами.Продукция);
	
	Таб.ПрисоединитьСекцию(НазваниеСекции+"|ОбщаяКво");
	
	//Вывод сумм с выделением брака
	Если фВыделятьБрак = 1 Тогда
		Если ЗапросСПериодами.КвоСумма <> 0 Тогда
			ПечБракПроцент = глФРМТ(ЗапросСПериодами.БракКвоСумма / ЗапросСПериодами.КвоСумма * 100,,0)
		Иначе
			ПечБракПроцент ="";
		КонецЕсли;
		ПечБракКво = глФРМКоличествоВОтчете(ЗапросСПериодами.БракКвоСумма,ЗапросСПериодами.Продукция);
		
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|Брак");
	КонецЕсли;
	
	Таб.ПрисоединитьСекцию(НазваниеСекции+"|ОбщаяСум");
	
	//Вывод с выделением давальческой части себестоимости продукции
	Если фВыделятьДавСумму = 1 Тогда
		ПечДавСумма = глФРМ(ЗапросСПериодами.ДавСумСумма,Гривня,1);
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|Давальч");
	КонецЕсли;

КонецПроцедуры //ПечатьПериода()

// ===============================
// ВывестиГруппировки(Ном)
//
// Параметры:
//	Ном - номер выводимой группировки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Выводит в печатную форму одну группировку запроса. Если
//	Есть нижележащие группировки, они выводятся также с использованием рекурсивного
//	вызова этой же процедуры.
//
Процедура ВывестиГруппировки(Ном=1)
	Если Ном <= КоличествоГруппировок Тогда                           
		НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(Ном);
		Пока Запрос.Группировка(Ном) = 1 Цикл
			НазваниеСекции="Группировка"+Ном;
			Значение = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
			
			Если НазваниеГруппировки = "Продукция" Тогда 
				ПечТекстСтроки = глСмещениеГруппы(Значение,фБезГрупп);
				Если ргИмя = 3 Тогда
					ПечТекстСтроки = ПечТекстСтроки + ?(Значение.ЭтоГруппа() = 1, Значение, Значение.ПолнНаименование);
				ИначеЕсли ргИмя = 2 Тогда
					ПечТекстСтроки = ПечТекстСтроки + Значение.Код + "0";					
				Иначе
					ПечТекстСтроки = ПечТекстСтроки + Значение;
				КонецЕсли;
			ИначеЕсли (НазваниеГруппировки <> "Документ") и (НазваниеГруппировки <> "Заказ") и (НазваниеГруппировки <> "Партия") Тогда
				ПечТекстСтроки = глСмещениеГруппы(Значение,фБезГрупп) + Значение;
			Иначе
				ПечТекстСтроки = ""+глДокументВОтчете(Значение,"с номером","с датой",Язык);
			КонецЕсли;
			
			ЗначениеРасшифровки = 0;
			Если НазваниеГруппировки = "Документ" Тогда
			    // остатки расшифровать до движений нельзя
				ЗначениеРасшифровки = Значение;
			Иначе
				// расшифровываем до движений, отбираем только текущие значения
				Расшифровка.Установить("Выб"+НазваниеГруппировки, Значение);
				Расшифровка.Установить("Группировки", ГруппировкиПоДвижениям);
				ЗначениеРасшифровки = Расшифровка;
			КонецЕсли;
			
			ПечТекстСтроки = ?(ПустоеЗначение(ПечТекстСтроки)=1,глПредставлениеПустогоЗначения(НазваниеГруппировки,Язык),ПечТекстСтроки);
			ПечатьСтроки(Ном,НазваниеСекции,ПечТекстСтроки,ЗначениеРасшифровки,Запрос.ЭтоГруппа(НазваниеГруппировки));
			
			Если (Периодичность <> 0) Тогда
				// выведем теперь все периоды, с разворотом вправо
				ТаблицаПериодов.ВыбратьСтроки();
				Пока ТаблицаПериодов.ПолучитьСтроку() = 1 Цикл
					глПозиционироватьЗапросПоПериодам(Запрос,ЗапросСПериодами,СписокГруппировок,КоличествоГруппировок,Ном,ТаблицаПериодов.РеалНачалоПериода);
					ПечатьПериода(Ном,НазваниеСекции);
				КонецЦикла;
			КонецЕсли;
			
			глОживить(1);

			// если есть более детальная группировка - выведем ее
			Если КоличествоГруппировок > Ном Тогда
				ВывестиГруппировки(Ном+1);
			КонецЕсли;
		КонецЦикла;
		// очищаем отборы по расшифровке до движений
		Если Не( НазваниеГруппировки = "Документ") Тогда
			Расшифровка.Установить("Выб"+НазваниеГруппировки);
			Расшифровка.Установить("Группировки");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВывестиГруппировки()

// ===============================
// Назначение:
//		
// Аргументы:
//		
Процедура ВывестиШапкуПериода(Период)
	
	//только для общего периода
	Если (фПроцВыпуска = 1) И (Периодичность = 0) Тогда
		Таб.ПрисоединитьСекцию("Шапка|ПроцВыпуска");
	КонецЕсли; 
	
	//только для общего периода
	Если (фФарш = 1) И (Периодичность = 0) Тогда
		Таб.ПрисоединитьСекцию("Шапка|ФаршКво");
	КонецЕсли; 
	
	Таб.ПрисоединитьСекцию("Шапка|ОбщаяКво");
	 
	Если фВыделятьБрак = 1 Тогда
		Таб.ПрисоединитьСекцию("Шапка|Брак");
	КонецЕсли;
	
	Если (фКолПринятоПродукции = 1) И (Периодичность = 0) Тогда
		Таб.ПрисоединитьСекцию("Шапка|ПринятоПродукции");
	КонецЕсли; 
	
	//только для общего периода
	Если (фПроцТермопотерь = 1) И (Периодичность = 0) Тогда
		Таб.ПрисоединитьСекцию("Шапка|ПроцТермопотерь");
	КонецЕсли; 
	
	//только для общего периода
	Если (фТермопотери = 1) И (Периодичность = 0) Тогда
		Таб.ПрисоединитьСекцию("Шапка|Термопотери");
	КонецЕсли; 
		
	Если фНеВыводитьСумму = 0 Тогда
		Таб.ПрисоединитьСекцию("Шапка|ОбщаяСум");
	КонецЕсли;
	
	Если фВыделятьДавСумму = 1 Тогда
		Таб.ПрисоединитьСекцию("Шапка|Давальч");
	КонецЕсли;
	
КонецПроцедуры //

// ===============================
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА
// ===============================

// ===============================
// Сформировать(ЗакрытьДиалог=0)
//
// Параметры:
//   ЗакрытьДиалог - флаг того, что после формирования отчета надо закрыть диалог	
//
// Возвращаемое значение: 
//	Нет
// 
// Вызывается из формул элементов диалога:
//   кнопки "Сформировать" и "ОК"
//
// Описание:   
//	Запускает отчет.
//
Процедура Сформировать(ЗакрытьДиалог=0)
	
	Перем ТекстЗапроса;
	ПринятоПродукцииИтого = 0; // +umk
	
	глПроверкаДаты(Дата1,Дата2);
	
	// Здесь формируется отчет, который использует регистры, критичные к
	// последовательности проведения документов
	// поэтому сравним установленные даты периода формируемого отчета с ГП
	
	ПечФорма = "ТаблицаУ";
	//Язык = глЯзык(ПечФорма); 
	//глУстПропись(Гривня,Язык);
	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;
	Таб.ИсходнаяТаблица(ПечФорма);
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "ВыпускПродукции");
	
	// все настройки помещаем в список
	Расшифровка.Установить("Дата1", 		Дата1);
    Расшифровка.Установить("Дата2", 		Дата2);
	Расшифровка.Установить("ВыбФирма",		ВыбФирма);
	Расшифровка.Установить("ВыбВидДеятельности",ВыбВидДеятельности);
	Расшифровка.Установить("ВыбПодразделение",	ВыбПодразделение);
	Расшифровка.Установить("ВыбПродукция",		ВыбПродукция);
	Расшифровка.Установить("ВыбЗаказ",		ВыбЗаказ);
	Расшифровка.Установить("ргИмя",			ргИмя);
	
	Расшифровка.Установить("Группировки",	Группировки);	
	Расшифровка.Установить("фБезГрупп",		фБезГрупп);
	Расшифровка.Установить("фВыделятьБрак",		фВыделятьБрак);
	Расшифровка.Установить("фВыделятьДавСумму",	фВыделятьДавСумму);
	Расшифровка.Установить("СписокПериодов",СписокПериодов.ТекущаяСтрока());
	Расшифровка.Установить("фПлановыйВыпуск", фПлановыйВыпуск);
	Расшифровка.Установить("фБазЕдВеса", фБазЕдВеса);
	Расшифровка.Установить("фФарш", фФарш);
	Расшифровка.Установить("фТермопотери", фТермопотери);
	Расшифровка.Установить("фПроцТермопотерь", фПроцТермопотерь);
	Расшифровка.Установить("фПроцВыпуска", фПроцВыпуска);
	Расшифровка.Установить("фНеВыводитьСумму", фНеВыводитьСумму);
		
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблицеМФ,Контекст); // записываем изменения если они были

	// запомним МФ только если он задан
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ);
	КонецЕсли;
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ЗапросСПериодами = СоздатьОбъект("Запрос");
	               
	Если Дата2 >= ПолучитьДатуТА() Тогда
		ТекстЗапроса = "
			|Период с Дата1;";
	Иначе 
		ТекстЗапроса = "
			|Период с Дата1 по Дата2;";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|Фирма 			= Регистр."+ПрефиксВыпуск+"ВыпускПродукции.Фирма;
	|ВидДеятельности= Регистр."+ПрефиксВыпуск+"ВыпускПродукции.ВидДеятельности;
	|Подразделение	= Регистр."+ПрефиксВыпуск+"ВыпускПродукции.Подразделение;
	|Продукция		= Регистр."+ПрефиксВыпуск+"ВыпускПродукции.Продукция;
	|Заказ			= Регистр."+ПрефиксВыпуск+"ВыпускПродукции.Заказ;
	|Партия     	= Регистр."+ПрефиксВыпуск+"ВыпускПродукции.Партия;
	|Кво			= Регистр."+ПрефиксВыпуск+"ВыпускПродукции.Количество;
	// + umk для получения строки документа
	|НомерСтроки    = Регистр."+ПрефиксВыпуск+"ВыпускПродукции.НомерСтроки;";
	
	Если фВыделятьБрак = 1 Тогда    
		ТекстЗапроса = ТекстЗапроса +
		"КвоБрака	= Регистр."+ПрефиксВыпуск+"ВыпускПродукции.КоличествоБрака;";
	КонецЕсли;                                                  
	
	Если фВыделятьДавСумму = 1 Тогда    
		ТекстЗапроса = ТекстЗапроса +
		"ДавСумма	= Регистр."+ПрефиксВыпуск+"ВыпускПродукции.СуммаДав;";
	КонецЕсли;                                                  
	
	ТекстЗапроса = ТекстЗапроса +
		"Сумма		= Регистр."+ПрефиксВыпуск+"ВыпускПродукции.Сумма;
		|Функция КвоСумма = Сумма(Кво);
		|Функция СумСумма = Сумма(Сумма);";
		
	Если фВыделятьБрак  = 1 Тогда    
		ТекстЗапроса = ТекстЗапроса +
		"Функция БракКвоСумма = Сумма(КвоБрака);";
	КонецЕсли;
	
	Если фВыделятьДавСумму = 1 Тогда    
		ТекстЗапроса = ТекстЗапроса +
		"Функция ДавСумСумма = Сумма(ДавСумма);";
	КонецЕсли;                                                  
		
	Загол="";
	
	НетОш = 1; // нет ошибок при наложении фильтров
	
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Фирма",			ВыбФирма,		"ВыбФирма",		ТекстЗапроса,Загол,Язык);
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Продукция",		ВыбПродукция,	"ВыбПродукция",	ТекстЗапроса,Загол,Язык,"КатегорииТоваров");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Подразделение",	ВыбПодразделение,"ВыбПодразделение",ТекстЗапроса,Загол,Язык);
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ,"ВидДеятельности",ВыбВидДеятельности,"ВыбВидДеятельности",ТекстЗапроса,Загол,Язык);
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ,"Заказ",			ВыбЗаказ,		"ВыбЗаказ",		ТекстЗапроса,Загол,Язык);
	Если глГруппыДоступаПродукции.РазмерСписка() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|Условие (Продукция В глГруппыДоступаПродукции);";
	КонецЕсли;	
	
	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Периодичность = ПериодСтрока();
	
	Если ПустоеЗначение(Периодичность) = 1 Тогда //--- УМК Сандомирский В.Ю. (18.06.15) нужно для формирования из монитора производственных заказов
		Периодичность = 0;
	КонецЕсли;
	
	ТаблицаПериодов = СоздатьОбъект("ТаблицаЗначений");
	Если Периодичность<>0 Тогда
	    ТекстЗапросаПоПериодам = ТекстЗапроса+ "Группировка " + Периодичность + ";";
	КонецЕсли;

	ПечЗаголовокСтолбца = "";
	ТекстГруппировок = "";
	
	УстановитьГруппировкиЗапроса(ТекстГруппировок, ПечЗаголовокСтолбца);
	КоличествоГруппировок = СписокГруппировок.РазмерСписка();
	
	Если КоличествоГруппировок > 7 Тогда
		Предупреждение("Нельзя сделать больше 7 группировок!",60);
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстГруппировок;
	Если Периодичность<>0 Тогда
 		ТекстЗапросаПоПериодам = ТекстЗапросаПоПериодам + ТекстГруппировок;		
		Если ЗапросСПериодами.Выполнить(ТекстЗапросаПоПериодам)=0 тогда
			Предупреждение("Запрос по периодам не выполнился!!!");
			Возврат;
		КонецЕсли;
 		глПолучитьТаблицуПериодов(ТаблицаПериодов,ЗапросСПериодами,Периодичность);
		ЗапросСПериодами.ВНачалоВыборки();
	КонецЕсли;
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;  
	
	глЧислоСтрок = 0;

	Таб.ВывестиСекцию("Кнопки");
	Таб.ВывестиСекцию("Заголовок");
	Таб.ВывестиСекцию("Шапка|Наименование");     
	
	Расшифровка.Установить("Обновить",0);
	Расшифровка.Установить("ТаблицаМФ", 0);
	
	// выводим шапку для итогов по периодам
	ВывестиШапкуПериода(?(Язык="у", "Всього за період", "Всего за период"));
	Если Периодичность<>0 Тогда
		// выводим шапку для каждого периода
	    ТаблицаПериодов.ВыбратьСтроки();
		Пока ТаблицаПериодов.ПолучитьСтроку()=1 Цикл
			ВывестиШапкуПериода(ПериодСтр(ТаблицаПериодов.НачалоПериода,ТаблицаПериодов.КонецПериода));
		КонецЦикла;
	КонецЕсли;
	Таб.ПрисоединитьСекцию("Шапка|Рамка");
	
	глОживить(1);
	
	Таб.Опции(0, 0, 8, 8, "Выпуск продукции", "Выпуск продукции");
	                         
	// ВЫВОД ГРУППИРОВОК ЗАПРОСА
	ВывестиГруппировки();
	
	ПечатьСтроки(0,"Итого",?(Язык="у", "Всього:", "Всего:"));
	Если (Периодичность <> 0) Тогда
		// выведем теперь все периоды, с разворотом вправо
		ТаблицаПериодов.ВыбратьСтроки();
		Пока ТаблицаПериодов.ПолучитьСтроку() = 1 Цикл
			глПозиционироватьЗапросПоПериодам(Запрос,ЗапросСПериодами,СписокГруппировок,КоличествоГруппировок,0,ТаблицаПериодов.РеалНачалоПериода);
			ПечатьПериода(0,"Итого");
		КонецЦикла;
	КонецЕсли;

	Если КоличествоГруппировок = 1 Тогда
	    Если Периодичность <> 0 Тогда
			Таб.ВывестиСекцию("ДиаграммаИ");  
		Иначе
			Таб.ВывестиСекцию("ДиаграммаЛ");  
		КонецЕсли;
	КонецЕсли;

	Таб.ОбластьПечати(2);
	
	// Вывод заполненной формы
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	
	Таб.Показать("Выпуск продукции", ""); 
	
	Если (Обновить = 2)ИЛИ(ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры // Сформировать()

// ===============================
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// ===============================

// ===============================
Процедура ПриОткрытии(ФлагВосстановленияНастройки)	
	
	Параметр = Форма.Параметр;
	
	Если ПустоеЗначение(Параметр) = 0 Тогда
		
		ПрефиксВыпуск                      = Параметр;
	Иначе
		
		ПрефиксВыпуск       = ?(фПлановыйВыпуск=1, "Плановый", "");
		
	КонецЕсли;// + umk
	
	Если ФлагВосстановленияНастройки = 0 Тогда     
		
		ВидРазделителя = 1;
		ВидЕдиницы 	   = 1;
		фБезГрупп 	   = 0;
		Дата1      = глВосстановитьЗначение(,"ОсновнаяДатаНачалаОтчета");
		Если ПустоеЗначение(Дата1) = 1 Тогда
			Дата1      = НачМесяца(Дата2);
		КонецЕсли;
	КонецЕсли;
	
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки из списка
		Дата1 = глРасшифровка.Получить("Дата1");
		Дата2 = глРасшифровка.Получить("Дата2");
		
		ВыбФирма			= глРасшифровка.Получить("ВыбФирма");
		ВыбВидДеятельности	= глРасшифровка.Получить("ВыбВидДеятельности");
		ВыбПодразделение	= глРасшифровка.Получить("ВыбПодразделение");
		ВыбПродукция		= глРасшифровка.Получить("ВыбПродукция");
		ВыбЗаказ			= глРасшифровка.Получить("ВыбЗаказ");
		
		фВыделятьБрак		= глРасшифровка.Получить("фВыделятьБрак");
		фВыделятьДавСумму	= глРасшифровка.Получить("фВыделятьДавСумму");
		фБезГрупп			= глРасшифровка.Получить("фБезГрупп");
		ргИмя				= глРасшифровка.Получить("ргИмя");
		фПлановыйВыпуск     = глРасшифровка.Получить("фПлановыйВыпуск");
		ПрефиксВыпуск       = ?(фПлановыйВыпуск=1, "Плановый", "");
		фБазЕдВеса          = глРасшифровка.Получить("фБазЕдВеса");
		фФарш               = глРасшифровка.Получить("фФарш");
		фТермопотери        = глРасшифровка.Получить("фТермопотери");
		фПроцТермопотерь    = глРасшифровка.Получить("фПроцТермопотерь");
		фПроцВыпуска        = глРасшифровка.Получить("фПроцВыпуска");
		фНеВыводитьСумму    = глРасшифровка.Получить("фНеВыводитьСумму");
		
		
		глРасшифровка.Получить("Группировки").Выгрузить(Группировки);	
		
		СписокПериодов.ТекущаяСтрока(глРасшифровка.Получить("СписокПериодов"));
		
		Если ТипЗначенияСтр(глРасшифровка.Получить("ТаблицаМФ"))="ТаблицаЗначений" Тогда
			ТаблицаМФ.Загрузить(глРасшифровка.Получить("ТаблицаМФ"));
		КонецЕсли;
		
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;            

	Если ргИмя = 0 Тогда
		ргИмя = 1;
	КонецЕсли;
	
	ПерерисовкаНазванийЗакладок();

	ТаблицаМФ.ВидимостьКолонки("Тип",0);
	ТаблицаМФ.ВидимостьКолонки("Вид",0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");

	УправлениеДиалогом();
	
КонецПроцедуры		// ПриОткрытии()       

// ===============================
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	ТекСтрокаВТаблицеМФ="";
	ПерерисовкаНазванийЗакладок();
	УправлениеДиалогом();       
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	
КонецПроцедуры // ВводНового()   

// ===============================
Процедура ПриВыбореЗакладки(Номер,Значение)	
	// закладки
    Если Номер=1 Тогда
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблицеМФ,Контекст); // записываем изменения если они были
	КонецЕсли;      
	УправлениеДиалогом();
	ПерерисовкаНазванийЗакладок();
	
КонецПроцедуры	// ПриВыбореЗакладки
                                       
// ===============================
Процедура ОбработкаПодбора(Значение)  
	
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
	
КонецПроцедуры  // ОбработкаПодбора

//******************************************************************************
// ПостроитьГистограмму(Диаграмма, ТИЗапрос)
//
// Параметры: 
//  Диаграмма - объект "диаграмма"       
//  Запрос - итоги, подготовленные для построения диаграммы
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Построение диаграммы на основе рассчитанных данных.
//
Процедура ПостроитьЛинейчатуюДиаграмму(Диаграмма, Запрос)
	СчТоч = 0;
	Пока Запрос.Группировка(1) = 1 Цикл
		СчТоч = СчТоч + 1;
		ЗначениеТочки = Запрос.КвоСумма;    
		Диаграмма.УстановитьЗначение(СчТоч,1,ЗначениеТочки);	// точка, серия, знач, расш	
		НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(1);
		Если (НазваниеГруппировки <> "Документ") и (НазваниеГруппировки <> "Заказ") и (НазваниеГруппировки <> "Партия") Тогда
			ПечТекстСтроки = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
		Иначе
			ПечТекстСтроки = ""+глДокументВОтчете(Запрос.ПолучитьАтрибут(НазваниеГруппировки),"с номером","с датой",Язык);
		КонецЕсли;
			
		Диаграмма.УстановитьИмяТочки(счТоч,ПечТекстСтроки);
	КонецЦикла;
КонецПроцедуры // ПостроитьГистограмму()
                   
// ===============================
Процедура ПостроитьИзометрическуюДиаграмму(Диаграмма, Запрос)
	//  трехмерная диаграмма с сериями по периодам, и точками по значениям группировки запроса
 	счСер = 0;
	Пока Запрос.Группировка(1) = 1 Цикл
		счСер = счСер + 1;
		счТоч = 0;
		ТаблицаПериодов.ВыбратьСтроки();
		Пока ТаблицаПериодов.ПолучитьСтроку() = 1 Цикл
			счТоч = счТоч + 1;
			глПозиционироватьЗапросПоПериодам(Запрос,ЗапросСПериодами,СписокГруппировок,КоличествоГруппировок,1,ТаблицаПериодов.РеалНачалоПериода);
			ЗначениеТочки = ЗапросСПериодами.КвоСумма;    
			Диаграмма.УстановитьЗначение(счТоч,счСер,ЗначениеТочки);	// точка, серия, знач, расш	
			    
			НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(1);
			Если (НазваниеГруппировки <> "Документ") и (НазваниеГруппировки <> "Заказ") и (НазваниеГруппировки <> "Партия") Тогда
				ПечТекстСтроки = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
			Иначе
				ПечТекстСтроки = ""+глДокументВОтчете(Запрос.ПолучитьАтрибут(НазваниеГруппировки),"с номером","с датой",Язык);
			КонецЕсли;
			
			Диаграмма.УстановитьИмяТочки(счТоч,ПериодСтр(ТаблицаПериодов.НачалоПериода,ТаблицаПериодов.КонецПериода));
		КонецЦикла;
		Диаграмма.УстановитьИмяСерии(счСер,ПечТекстСтроки);
	КонецЦикла;		
КонецПроцедуры // ПостроитьИзометрическуюДиаграмму()
// ===============================
// ТЕЛО МОДУЛЯ
// ===============================

//Устанавливает флаг группировки Документ, убирает флаг Заказ
//устанавливает период Общий
//для флагов по расшифровке данных строк выпуска
Процедура УстановитьГруппировкуДокумент(флаг)
	Если Флаг = 0 Тогда
		Возврат;
	КонецЕсли;
	ЗначениеГруппировки = Группировки.Пометка(Группировки.НайтиЗначение("Документ"),флаг);
	ЗначениеГруппировки = Группировки.Пометка(Группировки.НайтиЗначение("Заказ"),0);
	СписокПериодов.ТекущаяСтрока(1);
КонецПроцедуры //+umk

Дата2 = ПолучитьДатуТА();

// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

СписокПериодов.ДобавитьЗначение("Общий","Общие итоги");
СписокПериодов.ДобавитьЗначение("День","День");
СписокПериодов.ДобавитьЗначение("Неделя","Неделя");
СписокПериодов.ДобавитьЗначение("Месяц","Месяц");  
СписокПериодов.ДобавитьЗначение("Квартал","Квартал");
СписокПериодов.ДобавитьЗначение("Год","Год");

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
                                                                                
// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);

//                  			тип			вид				переменная  	название
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Подразделения","Подразделение","По подразделениям");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ВидыДеятельности","ВидДеятельности","По видам деятельности");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ТМЦ",			"Продукция",	"По продукции");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ВидыКатегорий","Продукция","По категориям продукции");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Документ","Заказ",	"Заказ",	"По заказам");

ТекСтрокаВТаблицеМФ="";

Группировки.ДобавитьЗначение("Подразделение", 	"Подразделение");           
Группировки.ДобавитьЗначение("ВидДеятельности",	"Вид деятельности");
Группировки.ДобавитьЗначение("Заказ", 			"Заказ");
Группировки.ДобавитьЗначение("Продукция",		"Продукция");
Группировки.ДобавитьЗначение("Партия", 			"Партия оприходования продукции");
Группировки.ДобавитьЗначение("Документ",		"Документ движения");

Группировки. Пометка(4,1);

ГруппировкиПоДвижениям = СоздатьОбъект("СписокЗначений"); // для расшифровки отчета по движениям
ГруппировкиПоДвижениям.ДобавитьЗначение("Документ",		"Документ движения");
ГруппировкиПоДвижениям.Пометка(1,1);

// список украинских названий группировок для построения шапки отчета
УкрГруппировки = СоздатьОбъект("СписокЗначений");
УкрГруппировки.ДобавитьЗначение("Подразделение", 	"Підрозділ");           
УкрГруппировки.ДобавитьЗначение("ВидДеятельности", 	"Вид діяльності");
УкрГруппировки.ДобавитьЗначение("Заказ", 			"Замовлення");
УкрГруппировки.ДобавитьЗначение("Продукция",		"Продукція");
УкрГруппировки.ДобавитьЗначение("Партия", 			"Партія оприбуткування продукції");
УкрГруппировки.ДобавитьЗначение("Документ",			"Документ рухів");
ргИмя = 1;
ПринятоПродукцииИтого = 0; // +umk
ПрефиксВыпуск = "";