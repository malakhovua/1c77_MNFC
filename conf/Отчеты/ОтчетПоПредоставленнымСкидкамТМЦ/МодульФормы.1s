Перем Расшифровка;
Перем Обновить;
Перем Таб;

///////////////////////////////////Расшифровка//////////////////////////////////////////////////////////////
Функция РасшифровкаОбновить(Обновить)
	Расшифровка.Установить("Обновить", Обновить);
	Возврат Расшифровка;
КонецФункции

///////////////////////////////////Область формирования отчета///////////////////////////////////////////////

Процедура Сформировать()
	Перем тз; //:ТаблицаЗначений
	
	Если Обновить = 2 Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	Расшифровка = СоздатьОбъект("СписокЗначений");
	
	рс = СоздатьОбъект("ODBCRecordset");
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора внесенные вручную изменения будут потеряны!!!
	ТекстЗапроса = "
	|SELECT Контрагенты.ID [Контрагент $Справочник.Контрагенты]
	|	, УстановкаСкидокТМЦ.IDDOC [УстановкаСкидокТМЦ $Документ.УстановкаСкидокТМЦ]
	|	, $УстановкаСкидокТМЦ.ДатаПо ПериодСкидкиОкончание
	|	, КатегорииЦен.ID [КатегорияЦен $Справочник.КатегорииЦен]
	|	, $УстановкаСкидокТМЦСтроки.ТМЦ [ТМЦ $Справочник.ТМЦ]
	|   , $УстановкаСкидокТМЦСтроки.КомментСтр КомментСтр
	|	, $УстановкаСкидокТМЦСтроки.СпособПредоставления [СпособПредоставления $Перечисление.СпособыПредоставленияСкидки]
	|	, $УстановкаСкидокТМЦСтроки.Скидка УстановкаСкидокТМЦСтрокиСкидка
	|   , $УстановкаСкидокТМЦСтроки.ОкруглятьДо УстановкаСкидокТМЦСтрокиОкруглятьДо
	|	, $УстановкаСкидокТМЦСтроки.Кво ПланПродажКол
	|	, Sum(ОборотыОбороты.РасходКвоОборот) СуммаПродажиКол
	|	, Sum(ОборотыОбороты.РасходСумОборот) СуммаСуммаРасход
	|FROM $Документ.РасходнаяНакладная AS РасходнаяНакладная
	|	INNER JOIN _1SJOURN AS Журнал ON РасходнаяНакладная.IDDOC = Журнал.IDDOC
	|	INNER JOIN $РегистрОбороты.Обороты(:НачалоПериода,
	|		:ОкончаниеПериода,
	|		Документ) AS ОборотыОбороты ON Журнал.DATE_TIME_IDDOC = ОборотыОбороты.ПозицияДокумента
	|	INNER JOIN $Документ.УстановкаСкидокТМЦ AS УстановкаСкидокТМЦ ON $РасходнаяНакладная.УстановкаСкидокТМЦ = УстановкаСкидокТМЦ.IDDOC
	|	INNER JOIN $ДокументСтроки.УстановкаСкидокТМЦ AS УстановкаСкидокТМЦСтроки ON УстановкаСкидокТМЦ.IDDOC = УстановкаСкидокТМЦСтроки.IDDOC AND $УстановкаСкидокТМЦСтроки.ТМЦ = ОборотыОбороты.ТМЦ
	|	INNER JOIN $Справочник.Контрагенты AS Контрагенты ON $РасходнаяНакладная.Контрагент = Контрагенты.ID
	|	LEFT OUTER JOIN $Справочник.КатегорииЦен AS КатегорииЦен ON $ПоследнееЗначение.Контрагенты.КатегорияЦен(Контрагенты.ID, Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime)) = КатегорииЦен.ID
	|WHERE (Журнал.DATE_TIME_IDDOC >= :НачалоПериода)
	|	AND (Журнал.DATE_TIME_IDDOC <= :ОкончаниеПериода~)
	|	AND ((Журнал.CLOSED & 1) = 1)
	|	AND ($РасходнаяНакладная.УстановкаСкидокТМЦ <> $ПустойИд)"   
	+ ?(списКонтрагентов.РазмерСписка()>0,"  and Контрагенты.ID IN (SELECT Val FROM #списКонтрагентов)", "")
	+ ?(списКатегорийЦен.РазмерСписка()>0 ,"  and КатегорииЦен.ID IN (SELECT Val FROM #списКатегорийЦен)", "")
	+ ?(списТМЦ.РазмерСписка()>0," and $УстановкаСкидокТМЦСтроки.ТМЦ IN (SELECT Val FROM #списТМЦ)", "") +"
	|GROUP BY Контрагенты.ID
	|	, УстановкаСкидокТМЦ.IDDOC
	|	, $УстановкаСкидокТМЦ.ДатаПо
	|	, КатегорииЦен.ID
	|	, $УстановкаСкидокТМЦСтроки.ТМЦ
	|   , $УстановкаСкидокТМЦСтроки.КомментСтр
	|	, $УстановкаСкидокТМЦСтроки.СпособПредоставления
	|	, $УстановкаСкидокТМЦСтроки.Скидка
	|   , $УстановкаСкидокТМЦСтроки.ОкруглятьДо
	|	, $УстановкаСкидокТМЦСтроки.Кво
	|UNION ALL
	|SELECT Контрагенты.ID
	|	, УстановкаСкидокТМЦ.IDDOC
	|	, $УстановкаСкидокТМЦ.ДатаПо
	|	, КатегорииЦен.ID
	|	, $УстановкаСкидокТМЦСтроки.ТМЦ
	|   , $УстановкаСкидокТМЦСтроки.КомментСтр
	|	, $УстановкаСкидокТМЦСтроки.СпособПредоставления
	|	, $УстановкаСкидокТМЦСтроки.Скидка
	|   , $УстановкаСкидокТМЦСтроки.ОкруглятьДо
	|	, $УстановкаСкидокТМЦСтроки.Кво
	|	, Sum(ОборотыОбороты.РасходКвоОборот)
	|	, Sum(ОборотыОбороты.РасходСумОборот)
	|FROM $Документ.ВозвратнаяНакладная AS ВозвратнаяНакладная
	|	INNER JOIN _1SJOURN AS Журнал ON ВозвратнаяНакладная.IDDOC = Журнал.IDDOC
	|	INNER JOIN $РегистрОбороты.Обороты(:НачалоПериода,
	|		:ОкончаниеПериода,
	|		Документ) AS ОборотыОбороты ON Журнал.DATE_TIME_IDDOC = ОборотыОбороты.ПозицияДокумента
	|	INNER JOIN $Документ.УстановкаСкидокТМЦ AS УстановкаСкидокТМЦ ON $ВозвратнаяНакладная.УстановкаСкидокТМЦ = УстановкаСкидокТМЦ.IDDOC
	|	INNER JOIN $ДокументСтроки.УстановкаСкидокТМЦ AS УстановкаСкидокТМЦСтроки ON УстановкаСкидокТМЦ.IDDOC = УстановкаСкидокТМЦСтроки.IDDOC AND $УстановкаСкидокТМЦСтроки.ТМЦ = ОборотыОбороты.ТМЦ
	|	INNER JOIN $Справочник.Контрагенты AS Контрагенты ON $ВозвратнаяНакладная.Контрагент = Контрагенты.ID
	|	LEFT OUTER JOIN $Справочник.КатегорииЦен AS КатегорииЦен ON $ПоследнееЗначение.Контрагенты.КатегорияЦен(Контрагенты.ID, Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime)) = КатегорииЦен.ID
	|WHERE (Журнал.DATE_TIME_IDDOC >= :НачалоПериода)
	|	AND (Журнал.DATE_TIME_IDDOC <= :ОкончаниеПериода~)
	|	AND ((Журнал.CLOSED & 1) = 1)
	|	AND ($ВозвратнаяНакладная.УстановкаСкидокТМЦ <> $ПустойИд)"   
	+ ?(списКонтрагентов.РазмерСписка()>0,"  and Контрагенты.ID IN (SELECT Val FROM #списКонтрагентов)", "")
	+ ?(списКатегорийЦен.РазмерСписка()>0 ,"  and КатегорииЦен.ID IN (SELECT Val FROM #списКатегорийЦен)", "")
	+ ?(списТМЦ.РазмерСписка()>0," and $УстановкаСкидокТМЦСтроки.ТМЦ IN (SELECT Val FROM #списТМЦ)", "") +"
	|GROUP BY Контрагенты.ID
	|	, УстановкаСкидокТМЦ.IDDOC
	|	, $УстановкаСкидокТМЦ.ДатаПо
	|	, КатегорииЦен.ID
	|	, $УстановкаСкидокТМЦСтроки.ТМЦ
	|   , $УстановкаСкидокТМЦСтроки.КомментСтр
	|	, $УстановкаСкидокТМЦСтроки.СпособПредоставления
	|	, $УстановкаСкидокТМЦСтроки.Скидка
	|   , $УстановкаСкидокТМЦСтроки.ОкруглятьДо
	|	, $УстановкаСкидокТМЦСтроки.Кво
	|ORDER BY УстановкаСкидокТМЦ.IDDOC
	|";
	
	Если списКонтрагентов.РазмерСписка() > 0 Тогда
		рс.УложитьСписокОбъектов(списКонтрагентов, "#списКонтрагентов","Контрагенты");
	КонецЕсли;
	
	Если списКатегорийЦен.РазмерСписка() > 0 Тогда
		рс.УложитьСписокОбъектов(списКатегорийЦен, "#списКатегорийЦен", "КатегорииЦен");
	КонецЕсли;
	
	Если списТМЦ.РазмерСписка() > 0 Тогда
		рс.УложитьСписокОбъектов(списТМЦ, "#списТМЦ","ТМЦ");
	КонецЕсли;
	
	рс.УстановитьТекстовыйПараметр("НачалоПериода", НачалоПериода);
	рс.УстановитьТекстовыйПараметр("ОкончаниеПериода", ОкончаниеПериода);
	
	тз = рс.ВыполнитьИнструкцию(ТекстЗапроса);
	тз.НоваяКолонка("ПериодСкидкиНало","Дата");
	тз.НоваяКолонка("СхемаЦенообразования","Справочник.СхемыЦенообразования");
	тз.НоваяКолонка("Цена","Число", 15,2);
	тз.НоваяКолонка("ЦенаСоСкидкой","Число", 15,2);
	тз.НоваяКолонка("ПланПродажСумма", "Число", 15,2);
	
	//Расшифровка
	Расшифровка.Установить("НачалоПериода", НачалоПериода);
	Расшифровка.Установить("ОкончаниеПериода", ОкончаниеПериода);
	Расшифровка.Установить("списКонтрагентов",списКонтрагентов);
	Расшифровка.Установить("списКатегорийЦен", списКатегорийЦен);
	Расшифровка.Установить("списТМЦ", списТМЦ);
	
	Расшифровка.Установить("Обновить");
	
	// Подготовка к заполнению выходных форм данными запроса
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить=0) Тогда
		Таб = СоздатьОбъект("Таблица");
	Иначе
		Таб.Очистить();
	КонецЕсли;
	
	Таб.ИсходнаяТаблица("Отчет");
	
	//Кнопки
	Таб.ВывестиСекцию("Кнопки");
	
	// Заполнение полей "Заголовок"
	Таб.ВывестиСекцию("Заголовок");

	//Шапка таблицы
	Таб.ВывестиСекцию("Шапка");
	
	Таб.Опции(0, 0, Таб.ВысотаТаблицы(), 0);
	
	Состояние("Заполнение выходной таблицы...");
	
	
	тз.ВыбратьСтроки();
	
	//Расчет недостающих полей отчета
	Пока тз.ПолучитьСтроку() = 1  Цикл
		
		СхемаЦенообразования = "";
		УстановкаСкидокТМЦ =тз.УстановкаСкидокТМЦ;
		Номенкклатура = тз.ТМЦ;
		ДатаЦены = УстановкаСкидокТМЦ.ДатаДок;
		КатегорияЦен = тз.КатегорияЦен;
		СпособПредоставления = тз.СпособПредоставления;
		Скидка = тз.УстановкаСкидокТМЦСтрокиСкидка;
		
		//Цена
		тз.ПериодСкидкиНало = УстановкаСкидокТМЦ.ДатаДок;
		тз.Цена = глВернутьЦену(Номенкклатура, КатегорияЦен, ДатаЦены, Гривня,,, СхемаЦенообразования);
		
		//Цена со скидкой
		Цена = тз.Цена;
		ЦенаСоСкидкой = тз.Цена;
		ОкруглятьДо = тз.УстановкаСкидокТМЦСтрокиОкруглятьДо;
		ЦенаСоСкидкой = глРассчитатьЦенуСоСкидкой(ДатаЦены, Цена, Номенкклатура, "", СпособПредоставления, Скидка, ОкруглятьДо, УстановкаСкидокТМЦ);
		тз.ЦенаСоСкидкой = ЦенаСоСкидкой;
		
		//План продаж
		тз.ПланПродажСумма = тз.ЦенаСоСкидкой * тз.ПланПродажКол; 
		тз.СхемаЦенообразования = СхемаЦенообразования;
		
		//Вывод строки
		Таб.ВывестиСекцию("Строка");
		
	КонецЦикла;
	
	//Вывод итогово
	Таб.ВывестиСекцию("Итоги");
	
	//ПоказатьТЗ(тз);
	
	// Вывод заполненной формы
	Таб.ТолькоПросмотр(1);
	ЗаголовокОтчета = "Отчет по скидкам цен и продажам продукции за период " +ПериодСтр(НачалоПериода,ОкончаниеПериода);
	Таб.Показать(ЗаголовокОтчета, "");
	
	
КонецПроцедуры

///////////////////////////////////Работа со списками отбора и подбором///////////////////////////////////////

Процедура ДобавитьВСписок(Элт, Спис)
	
	Если Спис.Принадлежит(Элт) = 0 Тогда
		Спис.ДобавитьЗначение(Элт, Элт.Наименование);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПодбора(Элт)
	
	Если Элт.Вид() = "Контрагенты" Тогда
		ДобавитьвСписок(Элт, списКонтрагентов);
	ИначеЕсли Элт.Вид() = "КатегорииЦен" Тогда
		ДобавитьвСписок(Элт, списКатегорийЦен);
	ИначеЕсли Элт.Вид() = "ТМЦ" Тогда
		ДобавитьвСписок(Элт, списТМЦ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЭлементВСписок(НазваниеОбъекта, Один, ИмСп = "")
	
	ИмСпис = ИмСп;
	КФормы = 0;
	ОткрытьПодбор(НазваниеОбъекта, "ДляВыбора", КФормы, Один);
	КФормы.ВыборГруппы(1);
	
КонецПроцедуры

Процедура УдалитьЗначениеСписка(Спис)
	
	Если Спис.ТекущаяСтрока() <> 0 Тогда
		Спис.УдалитьЗначение(Спис.ТекущаяСтрока());
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////Предопределенные процедуры//////////////////////////////////////////////// 
Процедура ПриОткрытии()
	
	Если глФлагРасшифровки = 1 Тогда 
		
		Обновить = глОбновить;
		
		НачалоПериода = глРасшифровка.Получить("НачалоПериода");
		ОкончаниеПериода = глРасшифровка.Получить("ОкончаниеПериода");
		глРасшифровка.Получить("списКонтрагентов").Выгрузить(списКонтрагентов);
		глРасшифровка.Получить("списКатегорийЦен").Выгрузить(списКатегорийЦен);
		глРасшифровка.Получить("списТМЦ").Выгрузить(списТМЦ);
		
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;
	
	Форма.КнопкаПоУмолчанию("Сформировать");
	
КонецПроцедуры
