Перем ОшибкаЗаполнения;

// ===============================
Функция Получить(Секция,нСтроки,нКолонки)
    Возврат Секция.Область(нСтроки,нКолонки,нСтроки,нКолонки).Текст;
КонецФункции

// ===============================
Функция НайтиЭлемент(НазвСправочника,Код)
	Поиск = СоздатьОбъект("Справочник."+НазвСправочника);
	Если Поиск.НайтиПоКоду(Код)=1 Тогда
		Возврат Поиск.ТекущийЭлемент();
	Иначе
		Возврат ПолучитьПустоеЗначение("Справочник."+НазвСправочника);
	КонецЕсли;
КонецФункции
                                  
// ===============================
Процедура ПолучитьНеопределенный(Секция,нСтроки,нКолонки,Спр,Реквизит)
	
	ТипЗн = Секция.Область(нСтроки,нКолонки,нСтроки,нКолонки).Текст;
	Зн = Секция.Область(нСтроки,нКолонки+1,нСтроки,нКолонки+1).Текст;
	
	Если ПустоеЗначение(ТипЗн) = 1 Тогда
	    Возврат;
	ИначеЕсли СокрЛП(ТипЗн) = "Счет" Тогда
	    Рез = СчетПоКоду(Зн);
		Спр.НазначитьТип(Реквизит,ТипЗн);
	ИначеЕсли СокрЛП(ТипЗн) = "Строка" Тогда
	    Рез = Зн;
		Спр.НазначитьТип(Реквизит,ТипЗн);
	Иначе
		Попытка
			Поиск = СоздатьОбъект("Справочник."+СокрЛП(ТипЗн));
		Исключение 
			Сообщить(ТипЗн);
		КонецПопытки;
		
		Поиск.НайтиПоКоду(Зн);
		Рез = Поиск.ТекущийЭлемент();
		Спр.НазначитьТип(Реквизит,"Справочник",ТипЗн);
	КонецЕсли;
	Спр.УстановитьАтрибут(Реквизит,Рез);
	
КонецПроцедуры
                          
// ===============================
Процедура ЗаполнитьШкалаСтавок()
	Состояние("Заполняется справочник налогов и отчислений...");
	Спр = СоздатьОбъект("Справочник.ШкалаСтавок");
	
	Т = СоздатьОбъект("Таблица");
	Т.ИсходнаяТаблица("ШкалаСтавок");
	Высота = Т.ВысотаСекции("ШкалаСтавок");
	Секция = Т.ПолучитьСекцию("ШкалаСтавок");
	Для номСтроки=1 по Высота Цикл
		Код = Получить(Секция,номСтроки,1);
		Если ПустоеЗначение(Код)=0 Тогда
			Если Спр.НайтиПоКоду(Код)=0 Тогда
				КодРодителя = Получить(Секция,номСтроки,4);
				Попытка
					Спр.ИспользоватьРодителя(НайтиЭлемент("ШкалаСтавок",КодРодителя));
				Исключение   
					глКомментарий("Существующая информация в справочнике налогов и отчислений не позволяет выполнить первоначальное заполнение элемента с кодом "+Код+"! Элемент с кодом "+КодРодителя+" должен быть группой.",0);
					ОшибкаЗаполнения = 1;					
					Возврат;
				КонецПопытки;
				ЭтоГруппа = Число(Получить(Секция,номСтроки,3));
				Если ЭтоГруппа = 1 Тогда
					Спр.НоваяГруппа();
				Иначе
					Спр.Новый();
				КонецЕсли;
				Спр.Код = Код;
				//глКомментарий("Создан элемент спр. шкала ставок "+Код+"");
			КонецЕсли;
			Спр.Наименование = Получить(Секция,номСтроки,2);
			Спр.Счет = СчетПоКоду(Получить(Секция,номСтроки,5));
			Спр.Записать();
		Иначе
			ДатаЗнач = Дата(Получить(Секция,номСтроки,2));
			Если Спр.ЭтоГруппа()=0 Тогда
				Знач1 = Число(Получить(Секция,номСтроки,6));
				Если ПустоеЗначение(Знач1)=0 Тогда
				    Спр.Ставка.Установить(ДатаЗнач,Знач1);
				КонецЕсли;
				
				Знач2 = Число(Получить(Секция,номСтроки,7));
			    Если ПустоеЗначение(Знач2)=0 Тогда
					Спр.Предел.Установить(ДатаЗнач,Знач2);
				КонецЕсли;
			КонецЕсли;
			Знач3 = Получить(Секция,номСтроки,8);
		    Если ПустоеЗначение(Знач3)=0 Тогда
				Спр.Дополнительно.Установить(ДатаЗнач,Знач3);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// ===============================
Процедура ЗаполнитьСловарь()
	Состояние("Заполняется справочник русско-украинский словарь...");
	Спр = СоздатьОбъект("Справочник.Словарь");
	
	Т = СоздатьОбъект("Таблица");
	Т.ИсходнаяТаблица("Словарь");
	Высота = Т.ВысотаСекции("Словарь");
	Секция = Т.ПолучитьСекцию("Словарь");
	
	Для номСтроки=1 по Высота Цикл
		Код = Получить(Секция,номСтроки,1);
		КодРодителя = Получить(Секция,номСтроки,4);
		Если ПустоеЗначение(Код)=0 Тогда
			ПолныйКод = ?(ПустоеЗначение(КодРодителя)=1,"",КодРодителя+"/")+Код;
			Если Спр.НайтиПоКоду(ПолныйКод,2)=0 Тогда
				Попытка
					Спр.ИспользоватьРодителя(НайтиЭлемент("Словарь",КодРодителя));
				Исключение   
					глКомментарий("Существующая информация в справочнике русско-украинский словарь не позволяет выполнить первоначальное заполнение элемента с кодом "+ПолныйКод+"! Элемент с кодом "+КодРодителя+" должен быть группой.",0);
					ОшибкаЗаполнения = 1;					
					Возврат;
				КонецПопытки;
				ЭтоГруппа = Число(Получить(Секция,номСтроки,3));
				Если ЭтоГруппа = 1 Тогда
					Спр.НоваяГруппа();
				Иначе
					Спр.Новый();
				КонецЕсли;
				//глКомментарий("Создан элемент спр. Словарь "+Код+"");
				Спр.Код = Код;
			КонецЕсли;
			Спр.Наименование = Получить(Секция,номСтроки,2);
			Спр.Перевод = Получить(Секция,номСтроки,5);
			Спр.Записать();
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// ===============================
Процедура ЗаполнитьПланСчетов()
	Состояние("Заполняются наименования в плане счетов...");
	Спр = СоздатьОбъект("Счет.Основной");
	
	Т = СоздатьОбъект("Таблица");
	Т.ИсходнаяТаблица("ПланСчетов");
	Высота = Т.ВысотаСекции("ПланСчетов");
	Секция = Т.ПолучитьСекцию("ПланСчетов");
	
	Для номСтроки=1 по Высота Цикл
		Код = Получить(Секция,номСтроки,1);
		Если ПустоеЗначение(Код)=0 Тогда
			Если Спр.НайтиПоКоду(Код)=0 Тогда
				глКомментарий("Создан элемент спр. основания без уплаты "+Код+"");
			КонецЕсли;
			Спр.ПолнНаименование = Получить(Секция,номСтроки,2);
			Спр.НаименованиеУкр = Получить(Секция,номСтроки,3);
			Спр.Записать();
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// ===============================
Процедура ЗаполнитьСтатьиКалькуляции()
	Состояние("Заполняется справочник статьи калькуляции...");
	Спр = СоздатьОбъект("Справочник.СтатьиКалькуляции");
	
	Т = СоздатьОбъект("Таблица");
	Т.ИсходнаяТаблица("СтатьиКалькуляции");
	Высота = Т.ВысотаСекции("СтатьиКалькуляции");
	Секция = Т.ПолучитьСекцию("СтатьиКалькуляции");
	
	Для номСтроки=1 по Высота Цикл		
		Код = Получить(Секция,номСтроки,1);
		Если ПустоеЗначение(Код)=0 Тогда
			Если Спр.НайтиПоКоду(Код)=0 Тогда
				Спр.Новый();
				//глКомментарий("Создан элемент спр. Статьи калькуляции"+Код+"");
				Спр.Код = Код;
			КонецЕсли;
			Спр.Наименование = Получить(Секция,номСтроки,2);
			Спр.ПолнНаименование = Получить(Секция,номСтроки,3);
			Спр.ДетализироватьДоМатериалов = Получить(Секция,номСтроки,4);
			Спр.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// ===============================
Процедура ЗаполнитьВидыЗатрат()
	Состояние("Заполняется справочник виды затрат...");
	Спр = СоздатьОбъект("Справочник.ВидыЗатрат");
	СпрСК = СоздатьОбъект("Справочник.СтатьиКалькуляции");
	
	Т = СоздатьОбъект("Таблица");
	Т.ИсходнаяТаблица("ВидыЗатрат");
	Высота = Т.ВысотаСекции("ВидыЗатрат");
	Секция = Т.ПолучитьСекцию("ВидыЗатрат");
	
	Для номСтроки=1 по Высота Цикл		
		Код = Получить(Секция,номСтроки,1);
		КодРодителя = Получить(Секция,номСтроки,4);
		Если ПустоеЗначение(Код)=0 Тогда
			Если Спр.НайтиПоКоду(Код)=0 Тогда
				Попытка
					Спр.ИспользоватьРодителя(НайтиЭлемент("ВидыЗатрат",КодРодителя));
				Исключение   
					глКомментарий("Существующая информация в справочнике видов затрат не позволяет выполнить первоначальное заполнение элемента с кодом "+Код+"! Элемент с кодом "+КодРодителя+" должен быть группой.",0);
					ОшибкаЗаполнения = 1;					
					Возврат;
				КонецПопытки;
				ЭтоГруппа = Число(Получить(Секция,номСтроки,3));
				Если ЭтоГруппа = 1 Тогда
					Спр.НоваяГруппа();
				Иначе
					Спр.Новый();
				КонецЕсли;
				//глКомментарий("Создан элемент спр. Виды затрат"+Код+"");
				Спр.Код = Код;
			КонецЕсли;
			Спр.Наименование = Получить(Секция,номСтроки,2);
			Спр.ПолнНаименование = Получить(Секция,номСтроки,5);
			Спр.Счет = СчетПоКоду(Получить(Секция,номСтроки,6));
			Спр.Постоянный = Получить(Секция,номСтроки,7);
			СпрСК.НайтиПоНаименованию(Получить(Секция,номСтроки,8),0,1);
			Спр.СтатьяКалькуляции = СпрСК.ТекущийЭлемент();
			Спр.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// ===============================
Процедура ЗаполнитьВидыДеятельности()
	Состояние("Заполняется справочник виды деятельности...");
	Спр = СоздатьОбъект("Справочник.ВидыДеятельности");
	
	Т = СоздатьОбъект("Таблица");
	Т.ИсходнаяТаблица("ВидыДеятельности");
	Высота = Т.ВысотаСекции("ВидыДеятельности");
	Секция = Т.ПолучитьСекцию("ВидыДеятельности");
	
	Для номСтроки=1 по Высота Цикл
		Код = Получить(Секция,номСтроки,1);
		Если ПустоеЗначение(Код)=0 Тогда
			Если Спр.НайтиПоКоду(Код)=0 Тогда
				Спр.Новый();
				//глКомментарий("Создан элемент спр. основания без уплаты "+Код+"");
				Спр.Код = Код;
			КонецЕсли;
			Спр.Наименование = Получить(Секция,номСтроки,2);
			Спр.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры    


// ===============================
Процедура ЗаполнитьВалДоходыРасходы()
	Состояние("Заполняется справочник валовые доходы и расходы...");
	Спр = СоздатьОбъект("Справочник.ВалДоходыРасходы");
	
	Т = СоздатьОбъект("Таблица");
	Т.ИсходнаяТаблица("ВалДоходыРасходы");
	Высота = Т.ВысотаСекции("ВалДоходыРасходы");
	Секция = Т.ПолучитьСекцию("ВалДоходыРасходы");
	
	Для номСтроки=1 по Высота Цикл		
		Код = Получить(Секция,номСтроки,1);
		КодРодителя = Получить(Секция,номСтроки,4);
		Если ПустоеЗначение(Код)=0 Тогда
			ПолныйКод = ?(ПустоеЗначение(КодРодителя)=1,"",КодРодителя+"/")+Код;
			Если Спр.НайтиПоКоду(ПолныйКод,2)=0 Тогда
				Попытка
					Спр.ИспользоватьРодителя(НайтиЭлемент("ВалДоходыРасходы",КодРодителя));
				Исключение   
					глКомментарий("Существующая информация в справочнике валовых доходов и расходов не позволяет выполнить первоначальное заполнение элемента с кодом "+ПолныйКод+"! Элемент с кодом "+КодРодителя+" должен быть группой.",0);
					ОшибкаЗаполнения = 1;					
					Возврат;
				КонецПопытки;
				ЭтоГруппа = Число(Получить(Секция,номСтроки,3));
				Если ЭтоГруппа = 1 Тогда
					Спр.НоваяГруппа();
				Иначе
					Спр.Новый();
				КонецЕсли;
				//глКомментарий("Создан элемент спр. ВалДоходыРасходы"+Код+"");
				Спр.Код = Код;
			КонецЕсли;
			Спр.Наименование = Получить(Секция,номСтроки,2);
			Спр.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры                 

// ===============================
Процедура ЗаполнитьЕдиницы()
	Состояние("Заполняется справочник классификатор единиц измерения...");
	Спр = СоздатьОбъект("Справочник.КлассификаторЕдИзм");
	
	Т = СоздатьОбъект("Таблица");
	Т.ИсходнаяТаблица("Единицы");
	Высота = Т.ВысотаСекции("Единицы");
	Секция = Т.ПолучитьСекцию("Единицы");
	
	Для номСтроки=1 по Высота Цикл		
		Наименование = Получить(Секция,номСтроки,1);
		Если ПустоеЗначение(Наименование)=0 Тогда
			Если Спр.НайтиПоНаименованию(Наименование,,1)=0 Тогда
			    Спр.Новый();
				Спр.Наименование = Наименование;
			КонецЕсли;
			Спр.ПолнНаименование = Получить(Секция,номСтроки,2);
			Спр.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// ===============================
Функция УстановитьЕдиницуПоУмолчанию(СпрТМЦ,БазоваяЕдиница)
	НоваяБазоваяЕдиница = СоздатьОбъект("Справочник.Единицы");
	НоваяБазоваяЕдиница.ИспользоватьВладельца(СпрТМЦ.ТекущийЭлемент());
	НоваяБазоваяЕдиница.Новый();
	НоваяБазоваяЕдиница.Наименование = БазоваяЕдиница.Наименование;
	НоваяБазоваяЕдиница.Единица = БазоваяЕдиница;
	НоваяБазоваяЕдиница.Коэффициент = 1;
	НоваяБазоваяЕдиница.Записать();
	Возврат НоваяБазоваяЕдиница.ТекущийЭлемент();
КонецФункции

// ===============================
Процедура ЗаполнитьСправочникиДляКонстант()
	Спр = СоздатьОбъект("Справочник.Валюты");
	Если Спр.НайтиПоКоду("980") = 0 Тогда
		Спр.Новый();        
		Спр.Код = "980";
		Спр.Наименование = "Гривня";
		Спр.Кратко = "грн";		
		Спр.ФайлПрописиРус = "uah.spl";
		Спр.ФайлПрописиУкр = "uahukr.spl";
		Спр.Записать();
		Спр.Кратность.Установить('01.01.1980', 1);
		Спр.Курс.Установить('01.01.1980', 1);
	КонецЕсли;
	Если Спр.НайтиПоКоду("840") = 0 Тогда
		Спр.Новый();        
		Спр.Код = "840";
		Спр.Наименование = "Доллар США";
		Спр.Кратко = "usd";		
		Спр.ФайлПрописиРус = "usd.spl";
		Спр.ФайлПрописиУкр = "usdukr.spl";
		Спр.Записать();
		Спр.Кратность.Установить('01.01.1980', 1);
		Спр.Курс.Установить('01.01.1980', 1);
	КонецЕсли;
	Спр = СоздатьОбъект("Справочник.Фирмы");
	Спр.ВыбратьЭлементы();
	Если Спр.ПолучитьЭлемент() = 0 Тогда
		Спр.Новый();
		Спр.Код = 0;
		Спр.Наименование = "Наша фирма";
		Спр.ПолнНаименование = "Наша фирма";
		Спр.Записать();
	КонецЕсли;
	БазФирма = Спр.ТекущийЭлемент();

	СпрВД = СоздатьОбъект("Справочник.ВидыДеятельности");
	Если СпрВД.НайтиПоКоду(1) = 1 Тогда
		БазВидДеятельности = СпрВД.ТекущийЭлемент();
	КонецЕсли;
	
	СпрЕД = СоздатьОбъект("Справочник.КлассификаторЕдИзм");
	Если СпрЕД.НайтиПоНаименованию("шт.") = 1 Тогда
		БазЕд = СпрЕД.ТекущийЭлемент();
	КонецЕсли;
	
	СпрНиО = СоздатьОбъект("Справочник.ШкалаСтавок");
	Если СпрНиО.НайтиПоКоду("НДС20") = 1 Тогда
		БазСтавкаНДС = СпрНиО.ТекущийЭлемент();
	КонецЕсли;

	Спр = СоздатьОбъект("Справочник.ТМЦ");
	Если Спр.НайтиПоКоду(10) = 0 Тогда
		Спр.НоваяГруппа();
		Спр.Код = "10";
		Спр.Наименование = "Служебные";
		Спр.Записать();
		ТекущийРодитель = Спр.ТекущийЭлемент();
	КонецЕсли;
    
	Если Спр.НайтиПоКоду(11) = 0 Тогда
		Спр.Новый();        
		Спр.Код = 11;
		Спр.Наименование = "Бланки строгой отчетности";
		Спр.ПолнНаименование = "Бланки строгой отчетности";
		Спр.ВидТМЦ = Перечисление.ВидыТМЦ.Материал;
		Спр.Счет = СчетПоКоду("20.9.1");
		Спр.Родитель = ТекущийРодитель;
		Спр.ВидДеятельности = БазВидДеятельности;
		Спр.СтавкаНДС = БазСтавкаНДС;
		Спр.БазоваяЕдиница = БазЕд;
		Спр.Записать();
		Спр.ЕдиницаПоУмолчанию = УстановитьЕдиницуПоУмолчанию(Спр,БазЕд);
		Спр.Записать();
	КонецЕсли;
		                                   
	Если Спр.НайтиПоКоду(12) = 0 Тогда
		Спр.Новый();        
		Спр.Код = 12;
		Спр.Наименование = "Служебный ТМЦ";
		Спр.ПолнНаименование = "Служебный ТМЦ";
		Спр.ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
		Спр.Счет = СчетПоКоду("28.1");
		Спр.Родитель = ТекущийРодитель;
		Спр.ВидДеятельности = БазВидДеятельности;
		Спр.СтавкаНДС = БазСтавкаНДС;
		Спр.БазоваяЕдиница = БазЕд;
		Спр.Записать();
		Спр.ЕдиницаПоУмолчанию = УстановитьЕдиницуПоУмолчанию(Спр,БазЕд);
		Спр.Записать();
	КонецЕсли;

	Если Спр.НайтиПоКоду(13) = 0 Тогда
		Спр.Новый();        
		Спр.Код = 13;
		Спр.Наименование = "Авансовый платеж";
		Спр.ПолнНаименование = "Авансовый платеж";
		Спр.ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
		Спр.Счет = СчетПоКоду("28.1");
		Спр.Родитель = ТекущийРодитель;
		Спр.ВидДеятельности = БазВидДеятельности;
		Спр.СтавкаНДС = БазСтавкаНДС;
		Спр.БазоваяЕдиница = БазЕд;
		Спр.Записать();
		Спр.ЕдиницаПоУмолчанию = УстановитьЕдиницуПоУмолчанию(Спр,БазЕд);
		Спр.Записать();
	КонецЕсли;

	Если Спр.НайтиПоКоду(14) = 0 Тогда
		Спр.Новый();        
		Спр.Код = 14;
		Спр.Наименование = "Частичная отгрузка товара";
		Спр.ПолнНаименование = "Частичная отгрузка товара";
		Спр.ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
		Спр.Счет = СчетПоКоду("28.1");
		Спр.Родитель = ТекущийРодитель;
		Спр.ВидДеятельности = БазВидДеятельности;
		Спр.СтавкаНДС = БазСтавкаНДС;
		Спр.БазоваяЕдиница = БазЕд;
		Спр.Записать();
		Спр.ЕдиницаПоУмолчанию = УстановитьЕдиницуПоУмолчанию(Спр,БазЕд);
		Спр.Записать();
	КонецЕсли;

	Если Спр.НайтиПоКоду(15) = 0 Тогда
		Спр.Новый();        
		Спр.Код = 15;
		Спр.Наименование = "Товары в ассортименте";
		Спр.ПолнНаименование = "Товары в ассортименте";
		Спр.ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
		Спр.Счет = СчетПоКоду("28.1");
		Спр.Родитель = ТекущийРодитель;
		Спр.ВидДеятельности = БазВидДеятельности;
		Спр.СтавкаНДС = БазСтавкаНДС;
		Спр.БазоваяЕдиница = БазЕд;
		Спр.Записать();
		Спр.ЕдиницаПоУмолчанию = УстановитьЕдиницуПоУмолчанию(Спр,БазЕд);
		Спр.Записать();
	КонецЕсли;
	
	Если Спр.НайтиПоКоду(16) = 0 Тогда
		Спр.Новый();        
		Спр.Код = 16;
		Спр.Наименование = "Курсовая разница";
		Спр.ПолнНаименование = "Курсовая разница";
		Спр.ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
		Спр.Счет = СчетПоКоду("28.1");
		Спр.Родитель = ТекущийРодитель;
		Спр.ВидДеятельности = БазВидДеятельности;
		Спр.СтавкаНДС = БазСтавкаНДС;
		Спр.БазоваяЕдиница = БазЕд;
		Спр.Записать();
		Спр.ЕдиницаПоУмолчанию = УстановитьЕдиницуПоУмолчанию(Спр,БазЕд);
		Спр.Записать();
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура ЗаполнитьНазначенияПлатежей()
	СпрНП = СоздатьОбъект("Справочник.НазначенияПлатежей");
		
	Имя = "Уплата налогов";
	Если СпрНП.НайтиПоНаименованию(Имя,0,1) = 0 Тогда
		СпрНП.Новый();
		СпрНП.Наименование = Имя;
		СпрНП.ПолнНаименование = "+;[Фирма.ТерриториальныйКодНалоговойИнспекции];101; ; ; ;[Формат(КонМесяца(ДобавитьМесяц(ДатаДок,-1)),""ДДДММГГГГ"")]; ;[ВидНалога.Содержание]";
		СпрНП.Шаблон = 1;
		СпрНП.Записать();
	КонецЕсли;
	
	Имя = "Уплата налогов (старый формат)";
	Если СпрНП.НайтиПоНаименованию(Имя,0,1) = 0 Тогда
		СпрНП.Новый();
		СпрНП.Наименование = Имя;
		СпрНП.ПолнНаименование = "*;[Фирма.ЕДРПОУ];[СокрЛП(ВидНалога.КодПлатежа)];01;[ВидНалога.Содержание]";
		СпрНП.Шаблон = 1;
		СпрНП.Записать();
	КонецЕсли;
КонецПроцедуры


// ===============================
Процедура ЗаполнитьКонстанты()
	Состояние("Заполняются константы..."); 
	
	ЗаполнитьСправочникиДляКонстант();
	
	СпрВал = СоздатьОбъект("Справочник.Валюты");
	СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
	СпрНиО = СоздатьОбъект("Справочник.ШкалаСтавок");
	СпрВДР = СоздатьОбъект("Справочник.ВалДоходыРасходы");
	СпрВЗ = СоздатьОбъект("Справочник.ВидыЗатрат");
	СпрВД = СоздатьОбъект("Справочник.ВидыДеятельности");
	СпрФир = СоздатьОбъект("Справочник.Фирмы");
	
	
	Константа.НомерРелиза = Лев(Метаданные.Константа("НомерРелиза").Комментарий,8);
	Константа.ВыдаватьСообщения = 1;
	Константа.ФлагЗащитыТаблиц = 1;
	Константа.ФормыНаУкраинском = Да;
	Константа.ДатаНачалаРаботы = НачГода(РабочаяДата());
	Константа.ДатаЗапретаРедактирования = Дата(1980,1,1);
	
	Константа.ЗапрашиватьКоличество = Да;
	Константа.ПроводкиПоКассеТолькоОрдерами = Да;
	                  
	СпрЕД = СоздатьОбъект("Справочник.КлассификаторЕдИзм");
	Если СпрЕД.НайтиПоНаименованию("шт.") = 1 Тогда
		Константа.БазЕдиница = СпрЕД.ТекущийЭлемент();
	КонецЕсли;  
	Если СпрЕД.НайтиПоНаименованию("кг.") = 1 Тогда
		Константа.ЕдиницаВеса = СпрЕД.ТекущийЭлемент();
	КонецЕсли;
	Если СпрТМЦ.НайтиПоКоду(13) = 1 Тогда
	    Константа.АвансовыйПлатеж = СпрТМЦ.ТекущийЭлемент();
	КонецЕсли;
	Если СпрТМЦ.НайтиПоКоду(14) = 1 Тогда
	    Константа.ЧастичнаяОтгрузка = СпрТМЦ.ТекущийЭлемент();
	КонецЕсли; 
	Если СпрТМЦ.НайтиПоКоду(15) = 1 Тогда
	    Константа.ТоварыВАссортименте = СпрТМЦ.ТекущийЭлемент();
	КонецЕсли; 
	Если СпрТМЦ.НайтиПоКоду(16) = 1 Тогда
	    Константа.КурсоваяРазница = СпрТМЦ.ТекущийЭлемент();
	КонецЕсли;
	               
	Константа.ВыделятьАвансы = Да;
	ИспользоватьСчетаРасходов = Класс89;
	
	Если СпрВД.НайтиПоКоду(1) = 1 Тогда
		Константа.БазВидДеятельности = СпрВД.ТекущийЭлемент();
	КонецЕсли;

    Если СпрФир.НайтиПоКоду(0) = 1 Тогда
		Константа.БазФирма = СпрФир.ТекущийЭлемент();
	КонецЕсли;
	
	Если СпрНиО.НайтиПоКоду("НДС20") = 1 Тогда
	    Константа.БазНДС = СпрНиО.ТекущийЭлемент();
	КонецЕсли;
	
	Если СпрВДР.НайтиПоКоду("1/1/1") = 1 Тогда
	    Константа.БазВаловыйДоход = СпрВДР.ТекущийЭлемент();
	КонецЕсли;
	
	Если СпрВДР.НайтиПоКоду("2/1/5") = 1 Тогда
	    Константа.БазВаловыйРасход = СпрВДР.ТекущийЭлемент();
	КонецЕсли;

	Если СпрВал.НайтиПоКоду("980") = 1 Тогда
	    Константа.БазоваяВалюта = СпрВал.ТекущийЭлемент();
	КонецЕсли;
	
	Константа.ПроверятьДублиСтрок = Да;
	Константа.РазрешитьОтрицОстатки = Нет;
	Константа.РезервироватьТоварНаСегодня = Нет;
	Константа.РезервироватьТолькоСвободныйТовар = Нет;
	Константа.ПоказыватьОстаткиТМЦ = Да;
	Константа.ИспользоватьСкидку = Да;
	Константа.ИспользоватьСписокКорректныхПроводок = Да;
	Константа.НДСПоВходящимНН = Нет;
	
	Если СпрВДР.НайтиПоКоду(0) = 1 Тогда
	    Константа.НиДоходНиРасход = СпрВДР.ТекущийЭлемент();
	КонецЕсли;
	
	Если СпрВДР.НайтиПоКоду("1/1/2") = 1 Тогда
	    Константа.БартерВалДох = СпрВДР.ТекущийЭлемент();
	КонецЕсли;
	Если СпрВДР.НайтиПоКоду("2/1/18") = 1 Тогда
	    Константа.БартерВалРасх = СпрВДР.ТекущийЭлемент();
	КонецЕсли;
	Если СпрВДР.НайтиПоКоду("1/2/4") = 1 Тогда
	    Константа.ВаловыйДоходВалюта = СпрВДР.ТекущийЭлемент();
	КонецЕсли;
	Если СпрВДР.НайтиПоКоду("2/2/9") = 1 Тогда
	    Константа.ВаловыйРасходВалюта = СпрВДР.ТекущийЭлемент();
	КонецЕсли;
	Если СпрВДР.НайтиПоКоду("1/2/5") = 1 Тогда
	    Константа.ВаловыйДоходЗадолж = СпрВДР.ТекущийЭлемент();
	КонецЕсли;
	Если СпрВДР.НайтиПоКоду("2/2/10") = 1 Тогда
	    Константа.ВаловыйРасходЗадолж = СпрВДР.ТекущийЭлемент();
	КонецЕсли;

	Если СпрТМЦ.НайтиПоКоду(11) = 1 Тогда
	    Константа.ТМЦБланкиСтрогойОтчетности = СпрТМЦ.ТекущийЭлемент();
	КонецЕсли;
	Если СпрТМЦ.НайтиПоКоду(12) = 1 Тогда
	    Константа.СлужебныйТМЦ = СпрТМЦ.ТекущийЭлемент();
	КонецЕсли;
    
	Если СпрВЗ.НайтиПоКоду(10) = 1 Тогда
	    Константа.ВидЗатратОперКР = СпрВЗ.ТекущийЭлемент();
	КонецЕсли;
	Если СпрВЗ.НайтиПоКоду(19) = 1 Тогда
	    Константа.ВидЗатратНеоперКР = СпрВЗ.ТекущийЭлемент();
	КонецЕсли;
	Если СпрВЗ.НайтиПоКоду(57) = 1 Тогда
		Константа.ВидЗатратСебестРеалВалюты = СпрВЗ.ТекущийЭлемент();
	КонецЕсли;
	Если СпрВЗ.НайтиПоКоду(58) = 1 Тогда
		Константа.ВидЗатратСебестРеалПроизвЗапасов = СпрВЗ.ТекущийЭлемент();
	КонецЕсли;
	
	Константа.ОсновнойВидТорговли = Перечисление.ВидыТорговли.Кредит;
	Константа.ОсновнаяЦена = Перечисление.ВидыЦенВДокументах.ЦенаБезНДС;
	Константа.ЦеныВНакладных = Перечисление.ВариантыОтображенияЦенВНакладных.ОбеЦены;
	Константа.ОсновнаяДатаНачалаОтчета = НачГода(РабочаяДата());
	Константа.ПодставлятьОсновнойДоговор = Нет;
	Константа.РазрешитьПревышениеКредита = Нет;
	Константа.РазрешитьПродаватьРезерв = Нет;
	
	Константа.РассчитыватьЗарплатуВКонфигурации = 1;
	Константа.ОтражатьТЗРвОборотах = 1;
	Константа.ОтражатьКурсовуюРазницуВОборотах = 1;
	Константа.ОтражатьФактСебестВОборотах = 2;
	
	Константа.СпособПриходованияПродукции = Перечисление.СпособыПриходованияПродукции.ПоПлановойСебестоимости;
	Константа.МетодРасчетаСебестоимостиПродукции.Установить(Константа.ДатаНачалаРаботы,Перечисление.МетодыРасчетаСебестоимости.ПоСреднему);
	Константа.МетодРасчетаСебестоимостиПроизводственныхЗапасов.Установить(Константа.ДатаНачалаРаботы,Перечисление.МетодыРасчетаСебестоимости.ПоСреднему);
	Константа.МетодРасчетаСебестоимостиТоваров.Установить(Константа.ДатаНачалаРаботы,Перечисление.МетодыРасчетаСебестоимости.ПоСреднему);
	
КонецПроцедуры
                               
// ===============================
Процедура ПриОткрытии(ФлагЧтенияНастройки)
	
	НачатьТранзакцию();
	
	// значение параметра формы:
	// 1 - открываем при первом запуске из глобального модуля
	// 0 - открываем "вручную" из списка обработок
	
	ОшибкаЗаполнения = 0;
	ЗаполнитьПланСчетов();
	
	Если Число(Форма.Параметр) = 1 Тогда
		Константа.НомерРелиза = Лев(Метаданные.Константа("НомерРелиза").Комментарий,8);
		
		ЗаполнитьСтатьиКалькуляции(); 

		ЗаполнитьВидыЗатрат(); 
		
		ЗаполнитьВидыДеятельности();

		ЗаполнитьВалДоходыРасходы();

		ЗаполнитьШкалаСтавок();
		
		ЗаполнитьСловарь();
		
		ЗаполнитьЕдиницы();
		
		ЗаполнитьНазначенияПлатежей();

		ЗаполнитьКонстанты();
	КонецЕсли;
	
	Если ОшибкаЗаполнения>0 Тогда
		// при заполнении произошла ошибка, отменим все сделанные изменения
		глКомментарий("Не удалось выполнить первоначальное заполнение справочников!!!",0);
		ОтменитьТранзакцию();     
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	СтатусВозврата(0);
КонецПроцедуры
