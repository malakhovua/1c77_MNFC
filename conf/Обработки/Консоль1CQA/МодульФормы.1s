Перем Неопределено;

Перем Обработка;
Перем ОбработкаПуть;
Перем ОбработкаФайл;

Перем БазаКаталог;

Перем ФормаПараметр;
Перем ФормаУжеОткрыта;
Перем УжеПослеОткрытия;
Перем НомерОкна;
Перем КонтекстВладелец;

Перем ИмяКаталогаЗапросов;

Перем ФормаСервис,гРасшФорма,гРФорма;
Перем гФПараметры;
Перем гМеню;

Перем ФормаБаза; 
Перем ФормаЗапрос; 

Перем гЗащитаОтАльфа;

Перем MetaInfoClasses;
Перем dbfCollaties;
Перем dbfCollateValue;

Перем ЗапросРезультат;
Перем ТекстПланВыполнения;

Перем qryConsole;				// консоль с конструктором запросов
Перем qryConsoleXMLData;		// XML-сериализованный текст запроса для загрузки в конструктор
Перем ТекстЗапроса0;

Перем ОкноТипСобытия0;

Перем ЦветКрасныйТекст;

Перем ТабДвижения;
Перем ТабДерево;
Перем СписокЗащитыОтЗацикливания;

Перем ТабОписание;
Перем ТабОписаниеСпец;

Процедура ПривязатьЭУ() Далее
Процедура гРасшФормаСкорректировать() Далее

Функция ТПараметров_Имя_Выбрать() Далее
Функция ТПараметров_Тип_Выбрать() Далее

Процедура ВывестиОписание() Далее
Процедура ВывестиОписаниеСпецКомментариев() Далее
	

Функция ПроверкаСтрокиТипа(Знач Тип,Еррор=0,Знач Иерархия=0) Далее

Функция ПолучитьЦвет(Красный = 0,Зеленый = 0,Синий = 0) Экспорт
	// функция для формирования значения цвета из составляющих (RGB)
	Возврат Макс(0,Синий)*65536+Макс(0,Зеленый)*256+Макс(0,Красный);
КонецФункции

Функция ЦветРаскраскиТЗ(Красный, Зеленый, Синий, КомпонентРаскраски=0)
	Красный=Цел(Красный);
	Если Красный<=0 Тогда
		Красный=0;
	КонецЕсли;
	Если Красный>=255 Тогда
		Красный=255;
	КонецЕсли;
	Зеленый=Цел(Зеленый);
	Если Зеленый<=0 Тогда
		Зеленый=0;
	КонецЕсли;
	Если Зеленый>=255 Тогда
		Зеленый=255;
	КонецЕсли;
	Синий=Цел(Синий);
	Если Синий<=0 Тогда
		Синий=0;
	КонецЕсли;
	Если Синий>=255 Тогда
		Синий=255;
	КонецЕсли;
	
	Если КомпонентРаскраски=0 Тогда
		КомпонентРаскраски="BRUSH";
	ИначеЕсли КомпонентРаскраски=1 Тогда 
		КомпонентРаскраски="FONT";
	Иначе
		КомпонентРаскраски="BRUSH";
	КонецЕсли;

	Возврат КомпонентРаскраски+"["+ПолучитьЦвет(Красный,Зеленый,Синий)+"]";
КонецФункции 

Процедура ТабSetCellFormat(Cell,Color,isBold,Шрифт=8,Рамка=3,ГорПолож=1,ВерПолож=1)
	CellРМ=Цел(Рамка);
	CellШР=Цел(Шрифт);
	CellГП=Цел(ГорПолож);
	CellВП=Цел(ВерПолож);
	Cell.Рамка(CellРМ,CellРМ,CellРМ,CellРМ);
	Cell.РазмерШрифта(CellШР);
	Cell.ВертикальноеПоложение(CellВП);
	Cell.ГоризонтальноеПоложение(CellГП);
	Cell.Полужирный(?(ПустоеЗначение(isBold)=1,0,1));
	Cell.ЦветТекста(Color);
КонецПроцедуры

Функция сзКолонкиШирина_Макс(СЗ,Знач Зна,Знач Кол)
	Шир=Цел(СЗ.Получить("Ширина"+Цел(Кол)));
	Если Шир<=3 Тогда
		Шир=3;
	КонецЕсли;
	ЗнаСтр=Строка(Зна);
	Для ооо=1 по СтрКоличествоСтрок(ЗнаСтр) Цикл
		ТекСтр=СтрПолучитьСтроку(ЗнаСтр,ооо); 
		Шир=Макс(Шир,СтрДлина(ТекСтр));
	КонецЦикла;
	Если Шир>=128 Тогда
		Шир=128;
	КонецЕсли;
	СЗ.Установить("Ширина"+Цел(Кол),Шир);
	Возврат Шир;
КонецФункции

Процедура Печать(ПечТЗ,Таб,ТабЗаголовок,СтрТаб)	
	Если ТипЗначенияСтр(Таб)="Таблица" Тогда
	Иначе
		Таб=СоздатьОбъект("Таблица");
	КонецЕсли;
	
	Если (ТипЗначения(СтрТаб)<>1) ИЛИ (ПустоеЗначение(СтрТаб)=1) Тогда
		СтрТаб=1;
	КонецЕсли;
	
	СтрТаб=СтрТаб+1; // пустая строка до заголовка
    Cell=Таб.Область(СтрТаб,1,,);
	Cell.ВысотаСтроки(6);
	
	Сolor=0;
	КолТаб=1;
	
    Cell=Таб.Область(СтрТаб,КолТаб,,);
	ТабSetCellFormat(Cell,Сolor,1,9,0);
	Cell.Контроль(4);
	Cell.ШиринаСтолбца(20);
	Cell.Текст=ТабЗаголовок;
	
	КолТаб=КолТаб+1;
	
    Cell=Таб.Область(СтрТаб,КолТаб,,);
    ТабSetCellFormat(Cell,Сolor,1,9,0);
	Cell.ВысотаСтроки(0);
	Cell.ШиринаСтолбца(6);
	Cell.Текст="";
	
    Raw=Таб.Область(СтрТаб,1,СтрТаб,КолТаб);
	Raw.Объединить(); 
	
	СтрТаб=СтрТаб+1; // пустая строка после заголовка 
    Cell=Таб.Область(СтрТаб,1,,);
	Cell.ВысотаСтроки(6);
	
	Сolor=0;
	СтрТаб=СтрТаб+1;
	КолТаб=1;
	
    Cell=Таб.Область(СтрТаб,КолТаб,,);
    ТабSetCellFormat(Cell,Сolor,1);
	Cell.ШиринаСтолбца(6);
	Cell.Текст="№";
	
	сзКолонкиШирина=СоздатьОбъект("СписокЗначений");
	
	Для Кол=1 по ПечТЗ.КоличествоКолонок() Цикл
		ЗагКол="";
		ИмяКол = ПечТЗ.ПолучитьПараметрыКолонки(Кол,,,,ЗагКол,,,);
		КолТаб = КолТаб + 1;
	    Cell = Таб.Область(СтрТаб,КолТаб,,);
	    ТабSetCellFormat(Cell, Сolor, 1);
		Cell.Контроль(4);
		ЗнаСтр=СокрЛП(ЗагКол);
		Шир=сзКолонкиШирина_Макс(сзКолонкиШирина,ЗнаСтр,Кол);
		Cell.ШиринаСтолбца(Шир);
		Cell.Текст=ЗнаСтр;
	КонецЦикла;
	
	Таб.ПовторятьПриПечатиСтроки(1,СтрТаб);
	
	КС=ПечТЗ.КоличествоСтрок();
	
	Для Стр=1 по КС Цикл
		Состояние("Вывод результатов запроса ("+КС+") в документ..."+Стр);
		СтрТаб=СтрТаб+1;
		КолТаб=1;
	    Cell=Таб.Область(СтрТаб,КолТаб,,);
	    ТабSetCellFormat(Cell,Сolor,0,8,3,1,2);
		Cell.ВысотаСтроки(0);
		Cell.Текст=СокрЛП(Стр);
		Для Кол=1 по ПечТЗ.КоличествоКолонок() Цикл
			ИмяКол = ПечТЗ.ПолучитьПараметрыКолонки(Кол,,,,,,,);
			КолТаб = КолТаб + 1;
			Зна=ПечТЗ.ПолучитьЗначение(Стр,Кол);
		    Cell=Таб.Область(СтрТаб,КолТаб,,);
		    ТабSetCellFormat(Cell,Сolor,0);
			Cell.Контроль(4); 
			ЗнаСтр=Строка(Зна);
			Шир=сзКолонкиШирина_Макс(сзКолонкиШирина,ЗнаСтр,Кол);
			Cell.ШиринаСтолбца(Шир);
			Cell.Текст=ЗнаСтр;
			Cell.Расшифровка(Зна,);
		КонецЦикла;
	КонецЦикла;
	СтрТаб=СтрТаб+1; // пустая строка после вывода строк  
    Cell=Таб.Область(СтрТаб,1,,);
	Cell.ВысотаСтроки(6);
КонецПроцедуры

Функция глВзятьКонтекст(Конт) Экспорт
	Возврат Конт;
КонецФункции

Процедура СформироватьДвиженияДокумента(Док,Таб="") Экспорт 
	ЗаданДок=0;
	Если ПустоеЗначение(Док)=0 Тогда
		Если ТипЗначения(Док)=12 Тогда
			ЗаданДок=1;
		КонецЕсли;
	КонецЕсли;
	Если ЗаданДок=0 Тогда
		Предупреждение("Не задан документ !!!");
		Возврат;
	КонецЕсли;

	Регистры=СоздатьОбъект("ТаблицаЗначений");
	Регистры.НоваяКолонка("МетаРег",,,,,,,);
	Регистры.НоваяКолонка("Измерения","СписокЗначений",,,,,,);
	Регистры.НоваяКолонка("Ресурсы","СписокЗначений",,,,,,);
	Регистры.НоваяКолонка("Реквизиты","СписокЗначений",,,,,,);
	Для инд = 1 По Метаданные.Регистр() Цикл
		МетаРег=Метаданные.Регистр(инд);
		Рег=СоздатьОбъект("Регистр."+МетаРег.Идентификатор);
		Если Рег.ВыбратьДвиженияДокумента(Док)=0 Тогда
			Продолжить;
		КонецЕсли;
		Регистры.НоваяСтрока();
		Регистры.МетаРег=МетаРег;
		Регистры.Измерения=СоздатьОбъект("СписокЗначений");
		Регистры.Ресурсы=СоздатьОбъект("СписокЗначений") ;
		Регистры.Реквизиты=СоздатьОбъект("СписокЗначений");
	КонецЦикла;

	Регистры.ВыбратьСтроки();
	Пока Регистры.ПолучитьСтроку()=1 цикл 
		МетаРег = Регистры.МетаРег;
		Для инд = 1 По МетаРег.Измерение() Цикл 
			Регистры.Измерения.ДобавитьЗначение(МетаРег.Измерение(инд),);
		КонецЦикла;
		Для инд = 1 По МетаРег.Ресурс() Цикл
			Регистры.Ресурсы.ДобавитьЗначение(МетаРег.Ресурс(инд),);
		КонецЦикла;
		Для инд = 1 По МетаРег.Реквизит() Цикл
			Регистры.Реквизиты.ДобавитьЗначение(МетаРег.Реквизит(инд),);
		КонецЦикла;
	КонецЦикла;
	
	Справочники=СоздатьОбъект("ТаблицаЗначений");
	Справочники.НоваяКолонка("СпрВид",,,,,,,);
	Справочники.НоваяКолонка("Реквизиты","СписокЗначений",,,,,,);
	
	СправочникиИстория=СоздатьОбъект("ТаблицаЗначений");
	СправочникиИстория.НоваяКолонка("СпрВид","Строка",,,,,,);
	СправочникиИстория.НоваяКолонка("Ссылка","Справочник",,,,,,);
	СправочникиИстория.НоваяКолонка("НомерСтроки","Число",,,,,,);
	СправочникиИстория.НоваяКолонка("Реквизит",,,,,,,);
	СправочникиИстория.НоваяКолонка("ДатаЗнач","Дата",,,,,,);
	СправочникиИстория.НоваяКолонка("Значение",,,,,,,);
	СправочникиИстория.НоваяКолонка("Каунт","Число",,,,,,);
	
	ИсторияТаСамаяКоторая=СоздатьОбъект("Периодический");
	Рез=ИсторияТаСамаяКоторая.ВыбратьПоДокументу(Док);
	Если Рез>0 Тогда
		Пока ИсторияТаСамаяКоторая.ПолучитьЗначение()=1 Цикл
			Ссылка=ИсторияТаСамаяКоторая.ТекущийОбъект();
			СпрВид=Ссылка.Вид();
			Реквизит = СтрЗаменить(ИсторияТаСамаяКоторая.ТекущийРеквизит(),СпрВид+".","");
			НомерСтроки  = ИсторияТаСамаяКоторая.НомерСтроки();
			СправочникиИстория.НоваяСтрока();
			СправочникиИстория.СпрВид = СпрВид;
			СправочникиИстория.Ссылка = Ссылка;
			СправочникиИстория.Реквизит = Реквизит;
			СправочникиИстория.НомерСтроки = НомерСтроки;
			СправочникиИстория.ДатаЗнач = ИсторияТаСамаяКоторая.ДатаЗнач;
			СправочникиИстория.Значение = ИсторияТаСамаяКоторая.Значение;
			СправочникиИстория.Каунт = 1;
			НомСтр=0;
			МетаСпр=Метаданные.Справочник(СпрВид);
			Рез1=Справочники.НайтиЗначение(СпрВид,НомСтр,"СпрВид");
			Если Рез1=0 Тогда
				Реквизиты=СоздатьОбъект("СписокЗначений");
				Справочники.НоваяСтрока();
				Справочники.СпрВид = СпрВид;
				Справочники.Реквизиты = Реквизиты;
			Иначе
				Реквизиты = Справочники.ПолучитьЗначение(НомСтр,"Реквизиты");
			КонецЕсли;
			Если Реквизиты.НайтиЗначение(Реквизит)=0 Тогда
				РеквизитП=Метаданные.Справочник(СпрВид).Реквизит(Реквизит).Представление();
				Реквизиты.ДобавитьЗначение(Реквизит,РеквизитП);
				Реквизиты.Сортировать();
			КонецЕсли;
		КонецЦикла;
		СправочникиИстория.Сортировать("СпрВид+,НомерСтроки+,Ссылка+");
		итзСправочникиИстория=СоздатьОбъект("ИндексированнаяТаблица");
		итзСправочникиИстория.Загрузить(СправочникиИстория);
		итзСправочникиИстория.Группировать("СпрВид:СпрВид;Ссылка:Ссылка","Каунт",1);
	КонецЕсли;
	
	ЕстьЗаписиЖурнРасчетов=0;
	Если (Метаданные.ЖурналРасчетов()>0)и(Метаданные.Документ(Док.Вид()).Расчет=1) Тогда
		Для Инд=1 По Метаданные.ЖурналРасчетов() Цикл
			МетаданныеЖР = Метаданные.ЖурналРасчетов(Инд);
			ЖР = СоздатьОбъект(МетаданныеЖР.ПолныйИдентификатор());
			Если ЖР.ВыбратьЗаписиПоДокументу(Док)=1 Тогда
				ЕстьЗаписиЖурнРасчетов=ЕстьЗаписиЖурнРасчетов+1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗначенияСтр(Таб)="Таблица" Тогда
		Таб.Очистить();
	Иначе
		Таб = СоздатьОбъект("Таблица");
	КонецЕсли;
	Таб.ИсходнаяТаблица("ДвиженияДокумента");
	
	 // сервис обновления отчета - в глобальном модуле должна быть прописана обработка значения расшифровки
	РасшифровкаОбновить=СоздатьОбъект("СписокЗначений");
	РасшифровкаОбновить.Установить("<<ОбновитьДвиженияДокумента>>",666);
	РасшифровкаОбновить.Установить("ДокументСсылка",Док);
	РасшифровкаОбновить.Установить("Таблица",Таб);
	//Таб.ВывестиСекцию("Кнопки");
	
	Таб.ВывестиСекцию("Отчет");
	Таб.ОбластьПечати(Таб.ВысотаТаблицы(),,,);
	
	Если 
	(Регистры.КоличествоСтрок()+Док.СуществуетОперация()+ЕстьЗаписиЖурнРасчетов+Справочники.КоличествоСтрок()
	)=0 Тогда
		Если Док.Проведен()=1 Тогда
			ИмяСек="НетДвиженийПроведен";
		ИначеЕсли Док.ПометкаУдаления()=1 Тогда
			ИмяСек="НетДвиженийУдален";
		Иначе
			ИмяСек="НетДвиженийНеПроведен";
		КонецЕсли;
		Таб.ВывестиСекцию(ИмяСек);
		Перейти ~Таб_Показать;
	КонецЕсли;
	
	// движения по регистрам ОУ
	НомерРег = 0;
	Регистры.ВыбратьСтроки();
	Пока Регистры.ПолучитьСтроку()=1 цикл
		МетаРег = Регистры.МетаРег;
		Измерения = Регистры.Измерения;
		Ресурсы = Регистры.Ресурсы;
		Реквизиты = Регистры.Реквизиты;
		
		Рег=СоздатьОбъект("Регистр."+МетаРег.Идентификатор);
		Если Рег.ВыбратьДвиженияДокумента(Док)=1 Тогда
			НомерРег=НомерРег+1;
			//	Сообщить(Рег.Вид());
			
			Таб.ВывестиСекцию("ШапкаРег1");
			Таб.ВывестиСекцию("ШапкаРег2|N");
			
			Для инд=1 По Измерения.РазмерСписка() Цикл
				Таб.ПрисоединитьСекцию("ШапкаРег2|Изм");
			КонецЦикла;
			Для инд=1 По Ресурсы.РазмерСписка() Цикл
				Таб.ПрисоединитьСекцию("ШапкаРег2|Рс");
			КонецЦикла;
			Для инд=1 По Реквизиты.РазмерСписка() Цикл
				Таб.ПрисоединитьСекцию("ШапкаРег2|Рекв");
			КонецЦикла;
			
			Пока Рег.ПолучитьДвижение()=1 Цикл
				Секция=Таб.ПолучитьСекцию("СтрокаРег|N");
				Область=Секция.Область();
				Если Рег.Приход=0 тогда 
					Область.ЦветТекста(255,0,0); 
				Иначе 
					Область.ЦветТекста(0,255,0); 
				КонецЕсли;
				Таб.ВывестиСекцию(Секция);	
				Для инд=1 По Измерения.РазмерСписка() Цикл
					Изм=Рег.ПолучитьАтрибут(Измерения.ПолучитьЗначение(инд,));
					Секция=Таб.ПолучитьСекцию("СтрокаРег|Изм");
					Область=Секция.Область();
					Область.ЦветТекста(0,0,0);
					Таб.ПрисоединитьСекцию(Секция);
				КонецЦикла;
				Для инд=1 По Ресурсы.РазмерСписка() Цикл
					Рс=Рег.ПолучитьАтрибут(Ресурсы.ПолучитьЗначение(инд,));
					Секция=Таб.ПолучитьСекцию("СтрокаРег|Рс");
					Область=Секция.Область();
					Область.ЦветТекста(0,0,0);
					Таб.ПрисоединитьСекцию(Секция);
					//Сообщить(""+Изм+" "+Рс+" пр. "+Рег.Приход+" рас. "+Рег.Расход);
				КонецЦикла;
				Для инд=1 По Реквизиты.РазмерСписка() Цикл
					Рекв=Рег.ПолучитьАтрибут(Реквизиты.ПолучитьЗначение(инд,));
					Секция=Таб.ПолучитьСекцию("СтрокаРег|Рекв");
					Область=Секция.Область();
					Область.ЦветТекста(0,0,0);
					Таб.ПрисоединитьСекцию(Секция);
					//Сообщить(""+Изм+" "+Рс+" пр. "+Рег.Приход+" рас. "+Рег.Расход);
				КонецЦикла;
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	// движения по бухгалтерским проводкам
	Если Док.СуществуетОперация()=1 Тогда
		НомерРег=НомерРег+1;
		Опер=Док.Операция;
		
		Таб.ВывестиСекцию("Опер1");
		Таб.ВывестиСекцию("Орер2|N");
		
		ИзмИмя="Корреспонденция Дт  /  Кт";
		Таб.ПрисоединитьСекцию("Орер2|Изм");
		ИзмИмя="Аналитика Дт  /  Кт";
		Таб.ПрисоединитьСекцию("Орер2|Изм");
		
		РесИмя="Сумма";
		Таб.ПрисоединитьСекцию("Орер2|Рс");
		РесИмя="Кол-во";
		Таб.ПрисоединитьСекцию("Орер2|Рс");
		РеквИмя="Валюта";
		Таб.ПрисоединитьСекцию("Орер2|Рекв");
		РесИмя="Вал.Сумма";
		Таб.ПрисоединитьСекцию("Орер2|Рс");
		
		Для инд=1 По Метаданные.РеквизитПроводки() Цикл
			МетаРекв=Метаданные.РеквизитПроводки(инд);
			РеквИмя=МетаРекв.Представление();
			Таб.ПрисоединитьСекцию("Орер2|Рекв");
		КонецЦикла;
		
		Опер.ВыбратьПроводки();
		Пока Опер.ПолучитьПроводку()=1 Цикл
			Таб.ВывестиСекцию("Проводка|N");
			
			Изм=""+Опер.Дебет.Счет+"  /  "+Опер.Кредит.Счет;
			Таб.ПрисоединитьСекцию("Проводка|Изм");
			Изм=""+Опер.ПредставлениеСубконто();
			Таб.ПрисоединитьСекцию("Проводка|Изм");
			
			Рс=Опер.Сумма;
			Таб.ПрисоединитьСекцию("Проводка|Рс");
			Рс=Опер.Количество;
			Таб.ПрисоединитьСекцию("Проводка|Рс");
			Рекв=Опер.Валюта;
			Таб.ПрисоединитьСекцию("Проводка|Рекв");
			Рс=Опер.ВалСумма;
			Таб.ПрисоединитьСекцию("Проводка|Рс");
			
			Для инд=1 По Метаданные.РеквизитПроводки() Цикл
				МетаРекв=Метаданные.РеквизитПроводки(инд);
				РеквИмя=МетаРекв.Идентификатор;
				Рекв=Опер.ПолучитьАтрибут(РеквИмя);
				Таб.ПрисоединитьСекцию("Проводка|Рекв");
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	// движения по журналам расчетов
	Если ЕстьЗаписиЖурнРасчетов<>0 Тогда
		Для Номер=1 По Метаданные.ЖурналРасчетов() Цикл
			МетаданныеЖР = Метаданные.ЖурналРасчетов(Номер);
			ЖР = СоздатьОбъект(МетаданныеЖР.ПолныйИдентификатор());
			
			Если ЖР.ВыбратьЗаписиПоДокументу(Док)=1 Тогда
				НомерРег=НомерРег+1;

				Таб.ВывестиСекцию("ЖР1");
				Таб.ВывестиСекцию("ЖР2|N");
				
				ИзмИмя="Объект расчета";
				Таб.ПрисоединитьСекцию("ЖР2|Изм");
				ИзмИмя="Вид расчета";
				
				Таб.ПрисоединитьСекцию("ЖР2|Изм");
				ИзмИмя="Период регистрации";
				Таб.ПрисоединитьСекцию("ЖР2|Изм");
				РеквИмя="Период действия";
				Таб.ПрисоединитьСекцию("ЖР2|Рекв");
				
				РесИмя="Результат";
				Таб.ПрисоединитьСекцию("ЖР2|Рс");

				Для инд=1 По МетаданныеЖР.Реквизит() Цикл
					МетаРекв=МетаданныеЖР.Реквизит(инд);
					РеквИмя=МетаРекв.Представление();
					Таб.ПрисоединитьСекцию("ЖР2|Рекв");
				КонецЦикла;
				
				Пока ЖР.ПолучитьЗапись()=1 Цикл 
					
					ВидДвиж = "";
					ВидДвиж=ВидДвиж+?(ЖР.Рассчитана=0,"Нерс","Расч");
					ВидДвиж=ВидДвиж+?(ЖР.Исправлена=0,"","-Исп");
					ВидДвиж=ВидДвиж+?(ЖР.Перерасчет=0,"","-Пер");
					ВидДвиж=ВидДвиж+?(ЖР.Сторно=0,"","-Сторно");
					ВидДвиж=ВидДвиж+?(ЖР.Фиксирована=0,"-Нефик","-Фикси");
					Таб.ВывестиСекцию("Запись|N");
					
					Изм=ЖР.Объект;
					Таб.ПрисоединитьСекцию("Запись|Изм");
					Изм=ЖР.ВидРасч;
					Таб.ПрисоединитьСекцию("Запись|Изм");
					
					Изм=ЖР.ПериодРегистрации.ОписательПериода;
					Таб.ПрисоединитьСекцию("Запись|Изм");
					Изм=ЖР.ПериодДействия.ОписательПериода;
					Таб.ПрисоединитьСекцию("Запись|Изм");
										
					Рс=ЖР.Результат;
					Таб.ПрисоединитьСекцию("Запись|Рс");
					
					Для инд=1 По Метаданные.ЖурналРасчетов(Номер).Реквизит() Цикл
						МетаРекв=Метаданные.ЖурналРасчетов(Номер).Реквизит(инд);
						РеквИмя=МетаРекв.Идентификатор;
						Попытка
							Рекв=ЖР.ПолучитьАтрибут(РеквИмя);
						Исключение
							Рекв="ерр!";
						КонецПопытки;
						Таб.ПрисоединитьСекцию("Запись|Рекв");
					КонецЦикла;
										
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// движения по истории реквизитов справочников
	Справочники.ВыбратьСтроки();
	Пока Справочники.ПолучитьСтроку()=1 цикл
		НомерРег=НомерРег+1;
		
		СпрВид=Справочники.СпрВид;
		
		НомСтр=итзСправочникиИстория.НайтиСтроку("СпрВид",СпрВид,0,1);
		Если НомСтр=0 Тогда
			// но такого быть не должно
			Продолжить;
		КонецЕсли;
		
		Реквизиты=Справочники.Реквизиты;
		Таб.ВывестиСекцию("ШапкаСпр1|N");
		Таб.ПрисоединитьСекцию("ШапкаСпр1|Изм");
		Для инд=1 По Реквизиты.РазмерСписка() Цикл
			Таб.ПрисоединитьСекцию("ШапкаСпр1|Рекв");
		КонецЦикла;
		ТабСтр1=Таб.ВысотаТаблицы();
		
		ТабКол1=0;
		Таб.ВывестиСекцию("ШапкаСпр2|N");
		ТабСтр2=Таб.ВысотаТаблицы();
		ТабКол1=ТабКол1+Таб.ШиринаСекции("ШапкаСпр2|N");
		
		Таб.ПрисоединитьСекцию("ШапкаСпр2|Изм");
		ТабКол1=ТабКол1+Таб.ШиринаСекции("ШапкаСпр2|Изм");
		
		ТабКол2=ТабКол1;
		Для инд=1 По Реквизиты.РазмерСписка() Цикл
			РеквИмя="";
			Реквизиты.ПолучитьЗначение(инд,РеквИмя);
			Таб.ПрисоединитьСекцию("ШапкаСпр2|Рекв");
			ТабКол2=ТабКол2+Таб.ШиринаСекции("ШапкаСпр2|Рекв");
		КонецЦикла;
		Таб.Область(ТабСтр2-1,ТабКол1+1,ТабСтр2-1,ТабКол2).Объединить();
		
		ДвиженияС=итзСправочникиИстория.тзПотомки;
		ДвиженияС.ВыбратьСтроки("");
		Пока ДвиженияС.ПолучитьСтроку("")=1 цикл
			ДатаЗнач=ДвиженияС.ДатаЗнач;
			Ссылка=ДвиженияС.Ссылка;
			Таб.ВывестиСекцию("СтрокаСпр|N");
			Таб.ПрисоединитьСекцию("СтрокаСпр|Изм");
			ДвиженияР=ДвиженияС.тзПотомки;
			ДвиженияР.ДобавитьИндекс("СсылкаРеквизит","Ссылка,Реквизит");
			Для инд=1 По Реквизиты.РазмерСписка() Цикл
				РеквИд=Реквизиты.ПолучитьЗначение(инд,);
				сзФильтр=СоздатьОбъект("СписокЗначений");
				сзФильтр.ДобавитьЗначение(Ссылка);
				сзФильтр.ДобавитьЗначение(РеквИд);
				НомСтр=ДвиженияР.НайтиСтроку("СсылкаРеквизит",сзФильтр,0,1);
				Если НомСтр=0 Тогда
					Значение="<<.нет движений.>>";
				Иначе
					Значение=ДвиженияР.Значение;
				КонецЕсли;
				Таб.ПрисоединитьСекцию("СтрокаСпр|Рекв");
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;

~Таб_Показать:
	
	// Вывод заполненной формы
	Таб.ТолькоПросмотр(1);
	Таб.Показать("", "");

КонецПроцедуры

//*******************************************
//	НачДата - начальная дата выборки (если пустое - выборка не ограничена с низу)
//	КонДата - конечная дата выборки (если пустое - выборка не ограничена с верху)
//	фВидДокумента - флаг включения по видам документов:
//		фВидДокумента = "Строка" (допускается указывать несколько типов через запятую или через точку с запятой)
//		фВидДокумента = "СписокЗначений":
//		ВидыДокументов контролируются по Метаданным (вид документа исключается из фильтра, если его нет в метаданных)
//	фПроведен - флаг включения по признаку проведения:
//		фПроведен > 0 - включаются только проведенные
//		фПроведен = 0 - выборка не контролируется по признаку проведенности
//		фПроведен < 0 - включаются только НЕПРОВЕДЕННЫЕ
//	фУдален - флаг включения по признаку пометки на удаление:
//		фУдален > 0 - включаются только помеченные на удаление
//		фУдален = 0 - выборка не контролируется по признаку пометки на удаление
//		фУдален < 0 - включаются только НЕ ПОМЕЧЕННЫЕ на удаление
//
Функция глВыборкаПодчиненныхSQL(Запрос,ДокВладелец,НачДата=0,КонДата=0,фВидДокумента="",фПроведен=0,фУдален=0) Экспорт
	тзДок=СоздатьОбъект("ТаблицаЗначений");
	тзДок.НоваяКолонка("Ссылка","Документ");
	
	Если (ТипЗначения(ДокВладелец)<>12)ИЛИ(ПустоеЗначение(ДокВладелец)=1) Тогда
		Возврат тзДок;
	КонецЕсли;
	
	Попытка
		ВидДокВладелец=ДокВладелец.Вид();
		СсылкаГД=ДокВладелец.ТекущийДокумент()
	Исключение
		Возврат тзДок;
	КонецПопытки;
	
	спВидыДокументов=СоздатьОбъект("СписокЗначений");
	Если ПустоеЗначение(фВидДокумента)=0 Тогда
		ТипЗна=ТипЗначенияСтр(фВидДокумента);
		Если ТипЗна="Строка" Тогда
			ВидыДокумента=СокрЛП(фВидДокумента);
			ВидыДокумента=СтрЗаменить(ВидыДокумента,",",";");
			ВидыДокумента=СтрЗаменить(ВидыДокумента,";",РазделительСтрок);
			Для о=1 По СтрКоличествоСтрок(ВидыДокумента) Цикл
				ТекВидДокумента=СокрЛП(СтрПолучитьСтроку(ВидыДокумента,о));
				Если Метаданные.Документ(ТекВидДокумента).Выбран()=1 Тогда
					спВидыДокументов.ДобавитьЗначение(ТекВидДокумента);
				Иначе
					Сообщить(
					"Исключение текущего значения из фильтра по видам документов:
					|Текущего вида документов нет в конфигурации
					|ВидДокумента = "+ТекВидДокумента+" ","i");
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗна="СписокЗначений" Тогда
			Для о=1 По фВидДокумента.РазмерСписка() Цикл
				ТекВидДокумента=СокрЛП(фВидДокумента.ПолучитьЗначение(о));
				Если Метаданные.Документ(ТекВидДокумента).Выбран()=1 Тогда
					спВидыДокументов.ДобавитьЗначение(ТекВидДокумента);
				Иначе
					Сообщить(
					"Исключение текущего значения из фильтра по видам документов:
					|Текущего вида документов нет в конфигурации
					|ВидДокумента = "+ТекВидДокумента+" ","i");
				КонецЕсли;
			КонецЦикла;
		Иначе
			Сообщить(
			"Непредвиденный тип значения фильтра по видам документов:
			|(отмена фильтра по видам документов)
			|ТипЗначения = '"+ТипЗна+"'
			|Значение = "+фВидДокумента,"i");
		КонецЕсли;
		Если спВидыДокументов.РазмерСписка()=0 Тогда
			Сообщить(
			"Отмена фильтра по видам документов:
			|пустой фильтр по видам документов
			|после проверки по метаданным !!!","!");
		КонецЕсли;
	КонецЕсли;
	
	ЭтоЗапросSQL=0;
	ТипЗнч=ТипЗначенияСтр(Запрос);
	Если (ТипЗнч="ODBCRecordSet")ИЛИ(ТипЗнч="OLEDBCommand") Тогда
		//Сообщить("Передали прямой запрос","i");
		ЭтоЗапросSQL=1;
	КонецЕсли;
	
	Если ЭтоЗапросSQL=0 Тогда
		// нет прямого запроса к базе - заполняем построчно через курсорный объект
		ДокКурсор=СоздатьОбъект("Документ");
		Если (ПустоеЗначение(НачДата)=1)И(ПустоеЗначение(КонДата)=1) Тогда 
			Рез=ДокКурсор.ВыбратьПодчиненныеДокументы(,,СсылкаГД);
		ИначеЕсли (ПустоеЗначение(НачДата)=0)И(ПустоеЗначение(КонДата)=1) Тогда
			Рез=ДокКурсор.ВыбратьПодчиненныеДокументы(НачДата,,СсылкаГД);
		ИначеЕсли (ПустоеЗначение(НачДата)=1)И(ПустоеЗначение(КонДата)=0) Тогда
			Рез=ДокКурсор.ВыбратьПодчиненныеДокументы(,КонДата,СсылкаГД);
		ИначеЕсли (ПустоеЗначение(НачДата)=0)И(ПустоеЗначение(КонДата)=0) Тогда 
			Рез=ДокКурсор.ВыбратьПодчиненныеДокументы(НачДата,КонДата,СсылкаГД);
		КонецЕсли;
		Если Рез>0 Тогда
			Пока ДокКурсор.ПолучитьДокумент() = 1 Цикл
				Если фПроведен>0 Тогда
					Если ДокКурсор.Проведен()=0 Тогда
						Продолжить;
					КонецЕсли;
				ИначеЕсли фПроведен<0 Тогда
					Если ДокКурсор.Проведен()=1 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если фУдален>0 Тогда
					Если ДокКурсор.ПометкаУдаления()=0 Тогда
						Продолжить;
					КонецЕсли;
				ИначеЕсли фУдален<0 Тогда
					Если ДокКурсор.ПометкаУдаления()=1 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				тзДок.НоваяСтрока();
				тзДок.Ссылка = ДокКурсор.ТекущийДокумент();
			КонецЦикла;
		КонецЕсли;
		Возврат тзДок;
	КонецЕсли;
		
	УсловиеПериод="";
	УсловиеУдален="";
	УсловиеПроведен="";
	
	Если ЭтоБазаSQL=0 Тогда
		Если (ПустоеЗначение(НачДата)=0)И(ПустоеЗначение(КонДата)=1) Тогда
			УсловиеПериод="(Отбор.ChildDate>=:НачДата~~)";
		ИначеЕсли (ПустоеЗначение(НачДата)=1)И(ПустоеЗначение(КонДата)=0) Тогда
			УсловиеПериод="(Отбор.ChildDate<=:КонДата~~)";
		ИначеЕсли (ПустоеЗначение(НачДата)=0)И(ПустоеЗначение(КонДата)=0) Тогда 
			УсловиеПериод="(Отбор.ChildDate BETWEEN :НачДата~~ AND КонДата~~)";
		КонецЕсли;
		
		Если фУдален>0 Тогда
			УсловиеУдален="(Жур.IsMark  = '*')";
		ИначеЕсли фУдален<0 Тогда
			УсловиеУдален="(Жур.IsMark <> '*')";
		КонецЕсли;
		
		Если фПроведен>0 Тогда
			УсловиеПроведен="(Жур.Closed-2*CAST(Жур.Closed/2 as int) = 1)";
		ИначеЕсли фПроведен<0 Тогда
			УсловиеПроведен="(Жур.Closed-2*CAST(Жур.Closed/2 as int) = 0)";
		КонецЕсли;
	Иначе
		Если (ПустоеЗначение(НачДата)=0)И(ПустоеЗначение(КонДата)=1) Тогда
			УсловиеПериод="(Отбор.Child_Date_Time_IDDoc>=:НачДата)";
		ИначеЕсли (ПустоеЗначение(НачДата)=1)И(ПустоеЗначение(КонДата)=0) Тогда
			УсловиеПериод="(Отбор.Child_Date_Time_IDDoc<=:КонДата~)";
		ИначеЕсли (ПустоеЗначение(НачДата)=0)И(ПустоеЗначение(КонДата)=0) Тогда 
			УсловиеПериод="(Отбор.Child_Date_Time_IDDoc BETWEEN :НачДата AND КонДата~)";
		КонецЕсли;
		
		Если фУдален>0 Тогда
			УсловиеУдален="(Жур.IsMark = 1)";
		ИначеЕсли фУдален<0 Тогда
			УсловиеУдален="(Жур.IsMark = 0)";
		КонецЕсли;
		
		Если фПроведен>0 Тогда
			УсловиеПроведен="(Жур.Closed & 1 = 1)";
		ИначеЕсли фПроведен<0 Тогда
			УсловиеПроведен="(Жур.Closed & 1 = 0)";
		КонецЕсли;
	КонецЕсли;
	УсловиеВидДокумента="";
	Если спВидыДокументов.РазмерСписка()>0 Тогда
		Для о=1 По спВидыДокументов.РазмерСписка() Цикл
			ТекВидДокумента=спВидыДокументов.ПолучитьЗначение(о);
			УсловиеВидДокумента=
			УсловиеВидДокумента+?(ПустоеЗначение(УсловиеВидДокумента)=1,"",")OR(")+"Жур.IDDocDef=$ВидДокумента."+ТекВидДокумента;
		КонецЦикла;
		УсловиеВидДокумента="(("+УсловиеВидДокумента+"))";
	КонецЕсли;
	
	СтрДопУсловие=
	УсловиеПериод+
	?((ПустоеЗначение(УсловиеПериод)=0)И(ПустоеЗначение(УсловиеУдален)=0),"AND","")+
	УсловиеУдален;
	
 	СтрДопУсловие=
	СтрДопУсловие+
	?((ПустоеЗначение(СтрДопУсловие)=0)И(ПустоеЗначение(УсловиеПроведен)=0),"AND","")+
	УсловиеПроведен;

 	СтрДопУсловие=
	СтрДопУсловие+
	?((ПустоеЗначение(СтрДопУсловие)=0)И(ПустоеЗначение(УсловиеВидДокумента)=0),"AND","")+
	УсловиеВидДокумента;
	
	Если ЭтоБазаSQL=0 Тогда
		ТекстЗапроса=
		"SELECT
		|	Жур.IDDoc    as [Ссылка$Документ], 
		|	Жур.IDDocDef as Ссылка_вид
		|FROM 
		|	1SJourn as Жур
		|INNER JOIN 
		|  	1SCRDOC as Отбор ON (Отбор.ChildID = Жур.IDDoc)
		|	AND (Отбор. MDID = '   0')
		|	AND (Отбор.ParentVal = :СсылкаГД*) 
		|	"+?(ПустоеЗначение(СтрДопУсловие)=1,"","AND "+СтрДопУсловие)+"
		|ORDER BY
		|Жур.Date, Жур.Time asc, Жур.IDDoc asc
		|";
	Иначе
		ТекстЗапроса=
		"SELECT
		|	Жур.IDDoc    as [Ссылка$Документ], 
		|	Жур.IDDocDef as Ссылка_вид
		|FROM 
		|	_1SJourn as Жур (NOLOCK)
		|INNER JOIN 
		|  	_1SCRDOC as Отбор (NOLOCK) ON (Отбор.ChildID = Жур.IDDoc)
		|	AND (Отбор. MDID = 0)
		|	AND (Отбор.ParentVal = :СсылкаГД*) 
		|	"+?(ПустоеЗначение(СтрДопУсловие)=1,"","AND "+СтрДопУсловие)+"
		|ORDER BY
		|Жур.Date_Time_IDDoc asc
		|";
	КонецЕсли;
	
	Запрос.УстановитьТекстовыйПараметр("СсылкаГД",СсылкаГД);
	Запрос.УстановитьТекстовыйПараметр("НачДата",НачДата);
	Запрос.УстановитьТекстовыйПараметр("КонДата",КонДата); 
	
	//ФормаЗапрос.Отладка(1);
	//Сообщить(ТекстЗапроса);
	
	//Состояние("Запрос к БД ... Подчиненные ... ");
	//Попа0=_GetPerformanceCounter();
	тзЗапрос=СоздатьОбъект("ТаблицаЗначений");	
	Попытка
		тзЗапрос=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	Исключение
		Сообщить("Выборка 'глВыборкаПодчиненныхSQL' не открыта. Ошибка:","!");
		Сообщить(ОписаниеОшибки());
		Возврат тзДок;
	КонецПопытки;
	//Попа1=_GetPerformanceCounter();
	//Состояние("");
	
	Если тзЗапрос.КоличествоСтрок()=0 Тогда
		Возврат тзДок;
	Иначе
		Возврат тзЗапрос;
	КонецЕсли;
	
КонецФункции

Функция глЕстьРеквизитШапки(ИмяРеквизита, ВидДокумента) Экспорт
	
	Если ПустоеЗначение(ИмяРеквизита) = 1 Тогда
		Возврат 0;
		
	ИначеЕсли Метаданные.ОбщийРеквизитДокумента(ИмяРеквизита).Выбран() = 1 Тогда
		Возврат 1;
		
	ИначеЕсли ПустоеЗначение(ВидДокумента) = 1 Тогда
		Возврат 0;
		
	ИначеЕсли Метаданные.Документ(ВидДокумента).РеквизитШапки(ИмяРеквизита).Выбран() = 1 Тогда
		Возврат 1;
		
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции //глЕстьРеквизитШапки()

Функция глСуммаДокументаВЖурнале(Док, ТипВозврата="строка") Экспорт	
	СуммаДок = 0;
	
	Если ПустоеЗначение(Док)=1 Тогда
		Если ТипВозврата = "строка" Тогда
			Возврат "";
		Иначе
			Возврат СуммаДок;
		КонецЕсли;
	КонецЕсли;
	
	ВидДок=Док.Вид();
		
	РеквСумма=Метаданные.Документ(ВидДок).РеквизитШапки("Сумма");
		
	Если РеквСумма.Выбран()=1 Тогда
		СуммаДок= Док.Сумма;
	Иначе
		РеквСумма=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("Сумма");
		Если РеквСумма.Выбран()=1 Тогда
			Если РеквСумма.ИтогПоКолонке=1 Тогда
				СуммаДок=Док.Итог("Сумма");
			КонецЕсли;
		Иначе
			РеквСумма=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("СуммаРуб");
			Если РеквСумма.Выбран()=1 Тогда
				Если РеквСумма.ИтогПоКолонке=1 Тогда
					СуммаДок=Док.Итог("СуммаРуб");
				КонецЕсли; 
			Иначе
				РеквСумма=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("Всего");
				Если РеквСумма.Выбран()=1 Тогда
					Если РеквСумма.ИтогПоКолонке=1 Тогда
						СуммаДок=Док.Итог("Всего");
					КонецЕсли; 
				Иначе
					РеквСумма=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("Итого");
					Если РеквСумма.Выбран()=1 Тогда
						Если РеквСумма.ИтогПоКолонке=1 Тогда
							СуммаДок=Док.Итог("Итого");
						КонецЕсли; 
					Иначе
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипВозврата = "строка" Тогда
		Возврат СокрЛ(Формат(СуммаДок,"Ч015.2. "));
	Иначе
		Возврат СуммаДок;
	КонецЕсли;
	
КонецФункции //глСуммаДокументаВЖурнале()   

Функция ПредставлениеДокумента(Док,ДокОснования)
	ВидДок=Док.Вид();
	ПечДок=""+Док.ПредставлениеВида()+" № "+Док.НомерДок+" от "+Док.ДатаДок;
	ПечСумма = глСуммаДокументаВЖурнале(Док);
	Если ПустоеЗначение(ПечСумма) = 0 Тогда
		РеквВал=Метаданные.Документ(ВидДок).РеквизитШапки("Валюта");
		Если РеквВал.Выбран()=1 Тогда
			ПечСумма = "" + ПечСумма + " "+Док.Валюта;
		КонецЕсли;
		ПечДок= ПечДок + РазделительСтрок+" Сумма: " + ПечСумма;
	КонецЕсли;
	
	Удален=0;
	Если Док.ПометкаУдаления()=1 Тогда
		Удален=1;
	КонецЕсли;
	
	Проведен=0;
	Если Док.Проведен()=1 Тогда
		Проведен=1;
	КонецЕсли;
	Если Проведен=0 Тогда
		Если Метаданные.ПланСчетов()>0 Тогда
			Если Док.Вид()="Операция" Тогда
				Если Док.Операция.ВключитьПроводки()=1 Тогда
					Проведен=1; // если проводки включены - считаем операцию проведенной
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Удален=1 Тогда
		ПечДок=ПечДок+" (Пометка удаления!)";
	ИначеЕсли Проведен=0 Тогда
		ПечДок=ПечДок+" (Не проведен!)";
	КонецЕсли;
	
	Возврат ПечДок;
КонецФункции

Функция НайтиКорень(Док)
	// Эта Функция помогает формировать Дерево подчиненных документов
	СписокЗащитыОтЗацикливания.ДобавитьЗначение(Док);
	ВД=Док.Вид();
	КореньДок=ПолучитьПустоеЗначение("Документ");
	Для Н=1 По Метаданные.Документ(ВД).РеквизитШапки() Цикл
		МетаРек=Метаданные.Документ(ВД).РеквизитШапки(Н);
		Если СокрЛП(МетаРек.Тип)<>"Документ" Тогда
			Продолжить;
		КонецЕсли;
		РеквДок=Док.ПолучитьАтрибут(Метаданные.Документ(ВД).РеквизитШапки(Н));
		Если ТипЗначенияСтр(РеквДок)="Документ" Тогда
			Если РеквДок.Выбран()=1 Тогда
				Если СписокЗащитыОтЗацикливания.НайтиЗначение(РеквДок)>0 Тогда
					Продолжить;
				КонецЕсли;
				КореньДок=РеквДок;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если КореньДок.Выбран()=0 Тогда
		Возврат Док;
	Иначе
		Возврат НайтиКорень(КореньДок);
	КонецЕсли;
КонецФункции

Процедура ВывестиПодчиненные(Таб,Докум,ДокОснования,Док,Последний,Уровень,Уровни,ОтменитьРекурсию)
	// Эта процедура помогает формировать Дерево подчиненных документов
	
	Таб.ВывестиСекцию("GrEmpty|Empty");
	// если это первый уровень...
	Если Уровень=1 Тогда
		//...выведем Г-образную линию...
		Если Последний=1 Тогда
			Таб.ПрисоединитьСекцию("GrHook|Lines");
			// ...или Т-образную линию
		Иначе
			Таб.ПрисоединитьСекцию("GrTSect|Lines");
		КонецЕсли;
	Иначе
		// для первого уровня выведем линию или пустоту
		Если Уровни.ПолучитьЗначение(1)=1 Тогда
			Таб.ПрисоединитьСекцию("GrLine|Lines");
		Иначе
			Таб.ПрисоединитьСекцию("GrEmpty|Lines");
		КонецЕсли;
		// для остальных уровней присоединим линию или пустоту
		Для Сч=2 По Уровень-1 Цикл
			Если Уровни.ПолучитьЗначение(Сч)=1 Тогда
				Таб.ПрисоединитьСекцию("GrLine|Lines");
			Иначе
				Таб.ПрисоединитьСекцию("GrEmpty|Lines");
			КонецЕсли;
		КонецЦикла;
		Если Последний=1 Тогда
			Таб.ПрисоединитьСекцию("GrHook|Lines");
		Иначе
			Таб.ПрисоединитьСекцию("GrTSect|Lines");
		КонецЕсли;
	КонецЕсли;
	
	// только теперь - присоединим секцию документа
	ПечДок=ПредставлениеДокумента(Док,ДокОснования);

	Если ОтменитьРекурсию=0 Тогда
		Если Докум=Док Тогда
			Таб.ПрисоединитьСекцию("ТекДок|Body");
		Иначе
			Таб.ПрисоединитьСекцию("Group|Body");
		КонецЕсли;
	Иначе
		Если Докум=Док Тогда
			Таб.ПрисоединитьСекцию("ТекДокПетля|Body");
		Иначе
			Таб.ПрисоединитьСекцию("GroupПетля|Body");
		КонецЕсли;
	КонецЕсли;

	Уровень=Уровень+1;
	
	тзДок=СоздатьОбъект("ТаблицаЗначений");
	тзДок=глВыборкаПодчиненныхSQL(ФормаЗапрос,Док.ТекущийДокумент());

	Начало=1;
	ТекСТР = 0;          
	тзДок.ВыбратьСтроки();
	Пока тзДок.ПолучитьСтроку()=1 Цикл
		ДокПодч=тзДок.Ссылка;
		ТекСТР=ТекСТР+1;
	
		Если СписокЗащитыОтЗацикливания.НайтиЗначение(ДокПодч.ТекущийДокумент())>0 Тогда
			ОтменаРекурсии=1;
		Иначе
			СписокЗащитыОтЗацикливания.ДобавитьЗначение(ДокПодч.ТекущийДокумент());
			ОтменаРекурсии=0;
		КонецЕсли;
		
		Если Начало=1 Тогда
			Начало=0;
		КонецЕсли;
		Если Док=ДокПодч.ТекущийДокумент() Тогда
			Продолжить;
		КонецЕсли;
		Если ТекСТР <> тзДок.КоличествоСтрок() Тогда
		    ПровДокПодч = тзДок.ПолучитьЗначение(ТекСТР+1,"Ссылка");
			Если Док=ПровДокПодч.ТекущийДокумент() Тогда 
				Уровни.УстановитьЗначение(Уровень,0);
				Последний=1;
			Иначе
				Уровни.УстановитьЗначение(Уровень,1);
				Последний=0;
			КонецЕсли;
		Иначе
			Уровни.УстановитьЗначение(Уровень,0);
			Последний=1;
		КонецЕсли;
		Если ОтменитьРекурсию=0 Тогда
			ВывестиПодчиненные(Таб,Докум,Док,ДокПодч.ТекущийДокумент(),Последний,Уровень,Уровни,ОтменаРекурсии);
		КонецЕсли;
	КонецЦикла;
	
	Уровень=Уровень-1;
КонецПроцедуры

Процедура СформироватьДеревоДокументов(Док,Таб="")
	// Эта процедура формирует Дерево подчиненных документов
	
	ЗаданДок=0;
	Если ПустоеЗначение(Док)=0 Тогда
		Если ТипЗначения(Док)=12 Тогда
			ЗаданДок=1;
		КонецЕсли;
	КонецЕсли;
	Если ЗаданДок=0 Тогда
		Предупреждение("Не задан документ !!!");
		Возврат;
	КонецЕсли;
	
	ВыбДокумент=Док;
	СписокЗащитыОтЗацикливания=СоздатьОбъект("СписокЗначений");
		
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.Установить("Отчет", "ДеревоДокументов");
	Расшифровка.Установить("Док", ВыбДокумент);
	Расшифровка.Установить("Обновить", 1);
	
	// сначала поднимемся по подчиненности вверх и найдем корень
	КореньДок=НайтиКорень(ВыбДокумент);
	
	// теперь от корня спускаемся вниз, показывая все на своем пути
	
	// сначала заполним массив уровней нулями
	Уровень=0;
	Уровни=СоздатьОбъект("СписокЗначений");
	Для Сч=1 По 20 Цикл
		Уровни.ДобавитьЗначение(0);
	КонецЦикла;
	
	// И почистим список защиты, чтобы ничего не пропустить
	СписокЗащитыОтЗацикливания.УдалитьВсе();               
	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") Тогда
		Таб=СоздатьОбъект("Таблица");
	Иначе
		Таб.Очистить();
	КонецЕсли;
	
	Таб.ИсходнаяТаблица("ДеревоДокументов");
	Таб.ВывестиСекцию("Кнопки");
	
	тзДок=СоздатьОбъект("ТаблицаЗначений");
	тзДок=глВыборкаПодчиненныхSQL(ФормаЗапрос,КореньДок.ТекущийДокумент());
   
	Уровень=1;
	ПечДок=ПредставлениеДокумента(КореньДок,КореньДок);
	Если Док=КореньДок Тогда
		Таб.ВывестиСекцию("КореньТекДок");
	Иначе
		Таб.ВывестиСекцию("Header");
	КонецЕсли;
	
	Начало=1; 
	ТекСТР = 0;          
	тзДок.ВыбратьСтроки();
	Пока тзДок.ПолучитьСтроку()=1 Цикл
		ДокПодч=тзДок.Ссылка;
		ТекСТР=ТекСТР+1;
		Если Начало=1 Тогда
			Начало=0;
		КонецЕсли;
		Если КореньДок=ДокПодч.ТекущийДокумент() Тогда
			Продолжить;
		КонецЕсли;
		Если ТекСТР <> тзДок.КоличествоСтрок() Тогда
			ПровДокПодч = тзДок.ПолучитьЗначение(ТекСТР+1,"Ссылка");
			Если КореньДок=ПровДокПодч.ТекущийДокумент() Тогда
				Уровни.УстановитьЗначение(1,0);
				Последний=1;
			Иначе
				Уровни.УстановитьЗначение(1,1);
				Последний=0;
			КонецЕсли;
		Иначе
			Уровни.УстановитьЗначение(1,0);
			Последний=1;
		КонецЕсли;
		ВывестиПодчиненные(Таб,Док,КореньДок,ДокПодч.ТекущийДокумент(),Последний,Уровень,Уровни,0);
	КонецЦикла;
	
	// Вывод заполненной формы
	Таб.Опции(0, 0, 3, 0,"ДеревоДокументов", "ДеревоДокументов");
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Дерево подчиненности документов",);
	
КонецПроцедуры

Функция МенюСпецДействийСоСправочником(Ссылка)
	ПодМеню=СоздатьОбъект("СписокЗначений");
	
	// "особые" спецдействия
	ОсобыеСД=0;
	ОбработкаЕЕ="EDITREKV";
	ОбработкаЕХ=ОбработкаПуть+ОбработкаЕЕ+".ert";
	ПодМеню=СоздатьОбъект("СписокЗначений");
	Если (ФС.СуществуетФайл(ОбработкаЕХ)=1)ИЛИ(Метаданные.Обработка(Обработка).Выбран() = 1) Тогда
		ПодМеню.ДобавитьЗначение(10010,"Открыть в 'Редакторе Реквизитов'");
		ОсобыеСД=ОсобыеСД+1;
	КонецЕсли;
	Если ОсобыеСД>0 Тогда
		ПодМеню.ДобавитьЗначение("-","-");
	КонецЕсли;
	
	Если Ссылка.ПометкаУдаления()=0 Тогда
		ПодМеню.ДобавитьЗначение(10002,"Пометить на удаление");
	Иначе
		ПодМеню.ДобавитьЗначение(10003,"Снять метку на удаление");
	КонецЕсли;
	ПодМеню.ДобавитьЗначение(10004,"Удалить непосредственно");
	Возврат ПодМеню;
КонецФункции

Функция МенюСпецДействийСДокументом(Ссылка)
	ПодПодМеню=СоздатьОбъект("СписокЗначений");
	
	// "особые" спецдействия
	ОсобыеСД=0;
	ОбработкаЕЕ="EDITREKV";
	ОбработкаЕХ=ОбработкаПуть+ОбработкаЕЕ+".ert";
	ПодПодМеню=СоздатьОбъект("СписокЗначений");
	Если (ФС.СуществуетФайл(ОбработкаЕХ)=1)ИЛИ(Метаданные.Обработка(Обработка).Выбран() = 1) Тогда
		ПодПодМеню.ДобавитьЗначение(10010,"Открыть в 'Редакторе Реквизитов'");
		ОсобыеСД=ОсобыеСД+1;
	КонецЕсли;
	ОбработкаЕЕ="ИзменениеВремениДокумента";
	ОбработкаЕХ=ОбработкаПуть+ОбработкаЕЕ+".ert";
	Если (ФС.СуществуетФайл(ОбработкаЕХ)=1)ИЛИ(Метаданные.Обработка(ОбработкаЕЕ).Выбран() = 1) Тогда
		ПодПодМеню.ДобавитьЗначение(10005,"Изменить время документа");
		ОсобыеСД=ОсобыеСД+1;
	КонецЕсли;
	Если ОсобыеСД>0 Тогда
		ПодПодМеню.ДобавитьЗначение("-","-");
	КонецЕсли;
	
	Если Ссылка.ПометкаУдаления()=0 Тогда
		Если Ссылка.Проведен()=0 Тогда
			ПодПодМеню.ДобавитьЗначение(10000,"Провести");
		Иначе
			ПодПодМеню.ДобавитьЗначение(10000,"Перепровести");
		КонецЕсли;
	КонецЕсли;
	Если Ссылка.Проведен()=1 Тогда
		ПодПодМеню.ДобавитьЗначение(10001,"Отменить проведение");
	КонецЕсли;
	Если Ссылка.ПометкаУдаления()=0 Тогда
		ПодПодМеню.ДобавитьЗначение(10002,"Пометить на удаление");
	Иначе
		ПодПодМеню.ДобавитьЗначение(10003,"Снять метку на удаление");
	КонецЕсли;
	ПодПодМеню.ДобавитьЗначение(10004,"Удалить непосредственно");
	Возврат ПодПодМеню;
КонецФункции

Процедура ОбработкаЯчейкиТаблицы(Расшифровка, СтандартнаяОбработка, Таблица, Адрес) Экспорт
	
	Если (ТипЗначенияСтр(Расшифровка) = "СписокЗначений") Тогда
		ВидРасшифровки=СокрЛП(Расшифровка.Получить("!ВидРасшифровки!"));
		Если ВидРасшифровки="!ПриОткрытии_НепоказыватьСпецКомментарии" Тогда
			СтандартнаяОбработка=0;
			
			Установка=Цел(ВосстановитьЗначение("ПриОткрытии_НепоказыватьСпецКомментарии"));
			
			Меню=СоздатьОбъект("СписокЗначений");
			Меню.ДобавитьЗначение(0,"При открытии: ''Показывать''");
			Меню.ДобавитьЗначение(1,"При открытии: ''Не показывать''");
			Поз=Меню.НайтиЗначение(Установка);
			Если Поз>0 Тогда
				Меню.Пометка(Поз,1);
			КонецЕсли;
			
			рез=ФормаСервис.ВыбратьЗначение(Меню,Установка,"",0,1);
			Если рез<>1 Тогда
				Возврат;
			КонецЕсли;
						
			СохранитьЗначение("ПриОткрытии_НепоказыватьСпецКомментарии",Установка);
			ВывестиОписаниеСпецКомментариев();
			Возврат;
		Иначе
			// идем дальше
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗначения(Расшифровка)=0 Тогда
		СтандартнаяОбработка=1;
		Возврат;
	ИначеЕсли (ТипЗначения(Расшифровка)<=10) Тогда
		// Перечисления и примитивные
		СтандартнаяОбработка=0;
		Тип=ТипЗначенияСтр(Расшифровка);
		Попытка
			ТипВид=Тип+"."+Расшифровка.Вид();
		Исключение
			ТипВид=Тип;
		КонецПопытки;
		ВвестиЗначение(Расшифровка,"Значение в ячейке:"+?(ПустаяСтрока(Адрес)=1,""," '"+Адрес+"'"),ТипВид);
	ИначеЕсли ТипЗначения(Расшифровка)=11 Тогда
		// Справочник
		РасшифровкаВид=Расшифровка.Вид();
		СтандартнаяОбработка=0;
		Если Расшифровка.Выбран()=0 Тогда
			Предупреждение(
			"Значение справочника
			|вида """+?(ПустаяСтрока(РасшифровкаВид)=1,"<<Неопределенный>>",РасшифровкаВид)+""""+
			?(ПустаяСтрока(СокрЛП(Расшифровка))=1,"
			|не выбрано !","
			|"+Расшифровка+" - не существует !"),30);
			Возврат;
		КонецЕсли;	
		
		Выб=0;
		Меню=СоздатьОбъект("СписокЗначений");
		Меню.ДобавитьЗначение(1,"Открыть на просмотр");
		Меню.ДобавитьЗначение(0,"Открыть на редактирование");
		Меню.ДобавитьЗначение("-","-");
		Меню.ДобавитьЗначение(100,"Перейти в список");
		ПодМеню=МенюСпецДействийСоСправочником(Расшифровка);
		Если ПодМеню.РазмерСписка()>0 Тогда
			Меню.ДобавитьЗначение("-","-");
			Меню.ДобавитьЗначение(ПодМеню,"Спецдействия...");
		КонецЕсли;
		рез=ФормаСервис.ВыбратьЗначение(Меню,Выб,"",0,3);
		Если рез<>1 Тогда
			Возврат;
		КонецЕсли;
			
		Если (Выб=0)ИЛИ(Выб=1) Тогда
			// Открыть форму элемента справочника
			ОткрытьФорму(Расшифровка,,Выб);
		ИначеЕсли (Выб=100) Тогда
			// Перейти в список справочника
			ВидСпр=Расшифровка.Вид();
			ФормИД=Метаданные.Справочник(ВидСпр).ОсновнаяФорма.Идентификатор;
			ФФФ=Расшифровка;
			ОткрытьФорму("Справочник."+ВидСпр+"."+ФормИД,ФФФ);
			Если ТипЗначения(ФФФ)=100 Тогда
				ФФФ.ИерархическийСписок(0,1);
				Попытка
					ФФФ.РедактироватьВДиалоге(0,1);
					ФФФ.УстановитьОтбор("",);
				Исключение
				КонецПопытки;
				ФФФ.АктивизироватьОбъект(Расшифровка);
			КонецЕсли;
		ИначеЕсли (Выб=10002) Тогда 
			// Пометить на удаление
			ответ=Вопрос(
			"Вы действительно хотите пометить
			|на удаление элемент справочника ???",4,30);
			Если ответ<>6 Тогда
				Возврат;
			КонецЕсли;
			Попытка
				Спр=СоздатьОбъект("Справочник."+РасшифровкаВид);
				Спр.НайтиЭлемент(Расшифровка);
				Спр.Удалить(0);
			Исключение
				Сообщить("Ошибки при пометке на удаление "+Расшифровка+":","!");
				Сообщить(""+ОписаниеОшибки(),"I");
			КонецПопытки;
		ИначеЕсли (Выб=10003) Тогда 
			// Снять метку на удаление
			ответ=Вопрос(
			"Вы действительно хотите
			|снять метку на удаление
			|с элемента справочника ???",4,30);
			Если ответ<>6 Тогда
				Возврат;
			КонецЕсли;
			Попытка
				Спр=СоздатьОбъект("Справочник."+РасшифровкаВид);
				Спр.НайтиЭлемент(Расшифровка);
				Спр.СнятьПометкуУдаления();
			Исключение
				Сообщить("Ошибки при снятии метки на удаление с "+Расшифровка+":","!");
				Сообщить(""+ОписаниеОшибки(),"I");
			КонецПопытки;
		ИначеЕсли (Выб=10004) Тогда
			// Удалить непосредственно
			ответ=Вопрос(
			"Вы действительно хотите
			|непосредственно удалить элемент ???",4,30);
			Если ответ<>6 Тогда
				Возврат;
			КонецЕсли;
			ответ=Вопрос(
			"Не случайно ли вы выбрали пункт
			|'Удалить непосредственно' ???
			|
			|При таком удалении элемент
			|будет безвозвратно утерян !!!",4,30);
			Если ответ=6 Тогда
				Возврат;
			КонецЕсли;
			Попытка
				Спр=СоздатьОбъект("Справочник."+РасшифровкаВид);
				Спр.НайтиЭлемент(Расшифровка);
				Спр.Удалить(1);
			Исключение
				Сообщить("Ошибки при непосредственном удалении "+Расшифровка+":","!");
				Сообщить(""+ОписаниеОшибки(),"I");
			КонецПопытки;
		ИначеЕсли (Выб=10010) Тогда
			ОбработкаЕЕ="EDITREKV";
			ОбработкаЕХ=ОбработкаПуть+ОбработкаЕЕ+".ert";
			Если ФС.СуществуетФайл(ОбработкаЕХ)=1 Тогда
				ОткрытьФорму("Обработка#",Расшифровка,ОбработкаЕХ);
			ИначеЕсли Метаданные.Обработка(ОбработкаЕЕ).Выбран() = 1 Тогда
				ОткрытьФорму("Обработка."+ОбработкаЕЕ+"#",Расшифровка);
			Иначе
				Сообщить("Не найдена обработка '"+ОбработкаЕЕ+"' !","!");
			КонецЕсли;
		Иначе
			СтандартнаяОбработка=1;
		КонецЕсли;
	ИначеЕсли (ТипЗначения(Расшифровка)=12) Тогда
		// Документ
		РасшифровкаВид=Расшифровка.Вид();
		СтандартнаяОбработка = 0; 
		Если Расшифровка.Выбран()=0 Тогда
			Предупреждение(
			"Значение документа 
			|вида """+?(ПустаяСтрока(РасшифровкаВид)=1,"<<Неопределенный>>",РасшифровкаВид)+""""+
			?(ПустаяСтрока(СокрЛП(Расшифровка))=1,"
			|не выбрано !","
			|"+Расшифровка+" - не существует !"),30);
			Возврат;
		КонецЕсли;
		Выб=0;
		Меню=СоздатьОбъект("СписокЗначений");
		Меню.ДобавитьЗначение(1,"Открыть на просмотр");
		Меню.ДобавитьЗначение(0,"Открыть на редактирование");
		Меню.ДобавитьЗначение("-","-");
		Меню.ДобавитьЗначение(10006,"Отчет о движениях документа");
		Меню.ДобавитьЗначение("-","-");
		ПодМеню=СоздатьОбъект("СписокЗначений");
		ПодМеню.ДобавитьЗначение(100,"Перейти в журнал");
		Меню.ДобавитьЗначение(ПодМеню,"Действия...");
		Если (Метаданные.Обработка("ДеревоДокументов").Выбран()=1)ИЛИ
			 (Метаданные.Отчет("ДеревоДокументов").Выбран()=1) Тогда
			ПодМеню.ДобавитьЗначение(102,"Структура подчиненности");
		КонецЕсли;
		ПодМеню.ДобавитьЗначение(103,"Ввести на основании");
		ПодМеню=МенюСпецДействийСДокументом(Расшифровка);
		Если ПодМеню.РазмерСписка()>0 Тогда
			Меню.ДобавитьЗначение("-","-");
			Меню.ДобавитьЗначение(ПодМеню,"Спецдействия...");
		КонецЕсли;
		
		рез=ФормаСервис.ВыбратьЗначение(Меню,Выб,"",0,2);
		Если рез<>1 Тогда
			Возврат;
		КонецЕсли;
		Если (Выб=0)ИЛИ(Выб=1) Тогда
			// Открыть форму документа
			ОткрытьФорму(Расшифровка,,Выб);
		ИначеЕсли (Выб=100) Тогда
			// Перейти в журнал документа
			ФФФ=Расшифровка;
			ОткрытьФорму("Журнал."+Расшифровка.Вид()+"#!Список!Документов!",ФФФ);
			Если ТипЗначения(ФФФ)=100 Тогда
				ФФФ.УстановитьИнтервал(Расшифровка.ДатаДок,Расшифровка.ДатаДок,1);
				ФФФ.АктивизироватьОбъект(Расшифровка);
				ФФФ.Форма.Заголовок(" (список)",1);
			КонецЕсли;
		ИначеЕсли (Выб=102) Тогда
			// Струтура подчиненноси
			СформироватьДеревоДокументов(Расшифровка,ТабДерево);
		ИначеЕсли (Выб=10006) Тогда
			// Движения документа
			СформироватьДвиженияДокумента(Расшифровка,ТабДвижения);
		ИначеЕсли (Выб=103) Тогда
			// Ввести на основании
			СписокВидов = СоздатьОбъект("СписокЗначений");
			Для Счетчик=1 По Метаданные.Документ(РасшифровкаВид).ВводимыеНаОснованииДокументы.Количество() Цикл
				ИД = Метаданные.Документ(РасшифровкаВид).ВводимыеНаОснованииДокументы.Получить(Счетчик).Идентификатор;
				Представление = Метаданные.Документ(РасшифровкаВид).ВводимыеНаОснованииДокументы.Получить(Счетчик).Представление();
				СписокВидов.ДобавитьЗначение(ИД,Представление);
			КонецЦикла;
			Позиция = 1;   
			Если СписокВидов.РазмерСписка() = 0 Тогда
				Возврат;
			ИначеЕсли СписокВидов.РазмерСписка() = 1 Тогда
				ВидПодч = СписокВидов.ПолучитьЗначение(1); 
				Рез = 1;
			Иначе
				ВидПодч = "";   
			    Рез = СписокВидов.ВыбратьЗначение(ВидПодч,"Выбор вида документа для ввода на основании",Позиция,,);
			КонецЕсли;
			Если Рез<=0 Тогда
				Возврат;
			КонецЕсли;
			ОткрытьФорму("Документ."+ВидПодч,,Расшифровка); 
		ИначеЕсли (Выб=10000) Тогда
			// Провести
			Если Расшифровка.Проведен()=0 Тогда
				ответ=Вопрос(
				"Вы действительно хотите
				|провести документ ???",4,30);
			Иначе
				ответ=Вопрос(
				"Вы действительно хотите
				|перепровести документ ???",4,30);
			КонецЕсли;
			Если ответ<>6 Тогда
				Возврат;
			КонецЕсли;
			Попытка
				Дока=СоздатьОбъект("Документ");
				Дока.НайтиДокумент(Расшифровка);
				Дока.Провести(,);
			Исключение
				Сообщить("Ошибки при проведении "+Расшифровка+":","!");
				Сообщить(""+ОписаниеОшибки(),"I");
			КонецПопытки;
		ИначеЕсли (Выб=10001) Тогда
			// Отменить проведение
			ответ=Вопрос(
			"Вы действительно хотите
			|отменить проведение документа ???",4,30);
			Если ответ<>6 Тогда
				Возврат;
			КонецЕсли;
			Попытка
				Дока=СоздатьОбъект("Документ");
				Дока.НайтиДокумент(Расшифровка);
				Дока.СделатьНеПроведенным();
			Исключение
				Сообщить("Ошибки при отмене проведения "+Расшифровка+":","!");
				Сообщить(""+ОписаниеОшибки(),"I");
			КонецПопытки;
		ИначеЕсли (Выб=10002) Тогда 
			// Пометить на удаление
			ответ=Вопрос(
			"Вы действительно хотите
			|пометить на удаление документ ???",4,30);
			Если ответ<>6 Тогда
				Возврат;
			КонецЕсли;
			Попытка
				Дока=СоздатьОбъект("Документ");
				Дока.НайтиДокумент(Расшифровка);
				Дока.Удалить(0);
			Исключение
				Сообщить("Ошибки при пометке на удаление "+Расшифровка+":","!");
				Сообщить(""+ОписаниеОшибки(),"I");
			КонецПопытки;
		ИначеЕсли (Выб=10003) Тогда 
			// Снять метку на удаление
			ответ=Вопрос(
			"Вы действительно хотите
			|снять метку на удаление
			|с документа ???",4,30);
			Если ответ<>6 Тогда
				Возврат;
			КонецЕсли;
			Попытка
				Дока=СоздатьОбъект("Документ");
				Дока.НайтиДокумент(Расшифровка);
				Дока.СнятьПометкуУдаления();
			Исключение
				Сообщить("Ошибки при снятии метки на удаление с "+Расшифровка+":","!");
				Сообщить(""+ОписаниеОшибки(),"I");
			КонецПопытки;
		ИначеЕсли (Выб=10004) Тогда
			// Удалить непосредственно
			ответ=Вопрос(
			"Вы действительно хотите
			|непосредственно удалить документ ???",4,30);
			Если ответ<>6 Тогда
				Возврат;
			КонецЕсли;
			ответ=Вопрос(
			"Не случайно ли вы выбрали пункт
			|'Удалить непосредственно' ???
			|----------------------------------
			|При таком удалении документ
			|будет безвозвратно утерян !!!",4,30);
			Если ответ=6 Тогда
				Возврат;
			КонецЕсли;
			Попытка
				Дока=СоздатьОбъект("Документ");
				Дока.НайтиДокумент(Расшифровка);
				Дока.Удалить(1);
			Исключение
				Сообщить("Ошибки при непосредственном удалении "+Расшифровка+":","!");
				Сообщить(""+ОписаниеОшибки(),"I");
			КонецПопытки;
		ИначеЕсли (Выб=10005) Тогда
			ОбработкаЕЕ="ИзменениеВремениДокумента";
			ОбработкаЕХ=ОбработкаПуть+ОбработкаЕЕ+".ert";
			сзПараметры=СоздатьОбъект("СписокЗначений");
			сзПараметры.Установить("ДокументСсылка",Расшифровка);
			Если ФС.СуществуетФайл(ОбработкаЕХ)=1 Тогда
				ОткрытьФормуМодально("Обработка#",сзПараметры,ОбработкаЕХ);
			ИначеЕсли Метаданные.Обработка(ОбработкаЕЕ).Выбран() = 1 Тогда
				ОткрытьФормуМодально("Обработка."+ОбработкаЕЕ+"#",сзПараметры);
			Иначе
				Сообщить("Не найдена обработка '"+ОбработкаЕЕ+"' !","!");
			КонецЕсли;
		ИначеЕсли (Выб=10010) Тогда
			ОбработкаЕЕ="EDITREKV";
			ОбработкаЕХ=ОбработкаПуть+ОбработкаЕЕ+".ert";
			Если ФС.СуществуетФайл(ОбработкаЕХ)=1 Тогда
				ОткрытьФорму("Обработка#",Расшифровка,ОбработкаЕХ);
			ИначеЕсли Метаданные.Обработка(ОбработкаЕЕ).Выбран() = 1 Тогда
				ОткрытьФорму("Обработка."+ОбработкаЕЕ+"#",Расшифровка);
			Иначе
				Сообщить("Не найдена обработка '"+ОбработкаЕЕ+"' !","!");
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = 1;
		КонецЕсли;
	ИначеЕсли 
		(ТипЗначения(Расшифровка)=13)ИЛИ
		(ТипЗначения(Расшифровка)=14)Тогда
		// Календарь, ВидРасчета 
		
		СтандартнаяОбработка=0;
		// - игнорятся функцией ВвестиЗначение() с возвратом результата = 0
		Рез=ВвестиЗначение(Расшифровка,"Значение в ячейке:"+?(ПустаяСтрока(Адрес)=1,""," '"+Адрес+"'"));
		//Сообщить("Рез="+рез);
		
		Меню = СоздатьОбъект("СписокЗначений");
		// поэтому выбираем из списка
		Если (ТипЗначения(Расшифровка)=13) Тогда
			Для Инд = 1 По Метаданные.Календарь() Цикл
				Ссылка = Календари.ПолучитьАтрибут(Метаданные.Календарь(Инд).Идентификатор);
				Меню.ДобавитьЗначение(Ссылка,Метаданные.Календарь(Инд).Представление());
			КонецЦикла;
		ИначеЕсли (ТипЗначения(Расшифровка)=14) Тогда
			Для Инд = 1 По Метаданные.ВидРасчета() Цикл
				Ссылка = ВидРасчета.ПолучитьАтрибут(Метаданные.ВидРасчета(Инд).Идентификатор);
				Меню.ДобавитьЗначение(Ссылка,Метаданные.ВидРасчета(Инд).Представление());
			КонецЦикла;
		КонецЕсли;
		Если Меню.РазмерСписка() = 0 Тогда
			Возврат;
		КонецЕсли;
		Меню.ВыбратьЗначение(Расшифровка,"Значение в ячейке:"+?(ПустаяСтрока(Адрес)=1,""," '"+Адрес+"'"),,180,0);
	ИначеЕсли ТипЗначения(Расшифровка)=15 Тогда
		// Бухг.счет
		РасшифровкаВид=Расшифровка.Вид();
		СтандартнаяОбработка=0;
		Если Расшифровка.Выбран()=0 Тогда
			Предупреждение(
			"Значение бухг.счета
			|вида """+?(ПустаяСтрока(РасшифровкаВид)=1,"<<Неопределенный>>",РасшифровкаВид)+""""+
			?(ПустаяСтрока(СокрЛП(Расшифровка))=1,"
			|не выбрано !","
			|"+Расшифровка+" - не существует !"),30);
			Возврат;
		КонецЕсли;	
		
		Выб=0;
		Меню=СоздатьОбъект("СписокЗначений");
		Меню.ДобавитьЗначение(1,"Открыть на просмотр");
		Меню.ДобавитьЗначение(0,"Открыть на редактирование");
		Меню.ДобавитьЗначение("-","-");
		Меню.ДобавитьЗначение(100,"Перейти в список");
		ПодМеню=МенюСпецДействийСоСправочником(Расшифровка);
		Если ПодМеню.РазмерСписка()>0 Тогда
			Меню.ДобавитьЗначение("-","-");
			Меню.ДобавитьЗначение(ПодМеню,"Спецдействия...");
		КонецЕсли;
		рез=ФормаСервис.ВыбратьЗначение(Меню,Выб,"",0,3);
		Если рез<>1 Тогда
			Возврат;
		КонецЕсли;
			
		Если (Выб=0)ИЛИ(Выб=1) Тогда
			// Открыть форму элемента справочника
			ОткрытьФорму(Расшифровка,,Выб);
		ИначеЕсли (Выб=100) Тогда
			// Перейти в список справочника
			ВидСпр=Расшифровка.Вид();
			ФормИД=Метаданные.Справочник(ВидСпр).ОсновнаяФорма.Идентификатор;
			ФФФ=Расшифровка;
			ОткрытьФорму("Счет."+ВидСпр+"."+ФормИД,ФФФ);
			Если ТипЗначения(ФФФ)=100 Тогда
				ФФФ.ИерархическийСписок(0,1);
				Попытка
					ФФФ.РедактироватьВДиалоге(0,1);
					ФФФ.УстановитьОтбор("",);
				Исключение
				КонецПопытки;
				ФФФ.АктивизироватьОбъект(Расшифровка);
			КонецЕсли;
		ИначеЕсли (Выб=10002) Тогда 
			// Пометить на удаление
			ответ=Вопрос(
			"Вы действительно хотите
			|пометить на удаление бухг.счет ???",4,30);
			Если ответ<>6 Тогда
				Возврат;
			КонецЕсли;
			Попытка
				Спр=СоздатьОбъект("Счет."+РасшифровкаВид);
				Спр.НайтиСчет(Расшифровка);
				Спр.Удалить(0);
			Исключение
				Сообщить("Ошибки при пометке на удаление "+Расшифровка+":","!");
				Сообщить(""+ОписаниеОшибки(),"I");
			КонецПопытки;
		ИначеЕсли (Выб=10003) Тогда 
			// Снять метку на удаление
			ответ=Вопрос(
			"Вы действительно хотите
			|снять метку на удаление
			|с бухг.счета ???",4,30);
			Если ответ<>6 Тогда
				Возврат;
			КонецЕсли;
			Попытка
				Спр=СоздатьОбъект("Счет."+РасшифровкаВид);
				Спр.НайтиЭлемент(Расшифровка);
				Спр.СнятьПометкуУдаления();
			Исключение
				Сообщить("Ошибки при снятии метки на удаление с "+Расшифровка+":","!");
				Сообщить(""+ОписаниеОшибки(),"I");
			КонецПопытки;
		ИначеЕсли (Выб=10004) Тогда
			// Удалить непосредственно
			ответ=Вопрос(
			"Вы действительно хотите
			|непосредственно удалить бухг.счет ???",4,30);
			Если ответ<>6 Тогда
				Возврат;
			КонецЕсли;
			ответ=Вопрос(
			"Не случайно ли вы выбрали пункт
			|'Удалить непосредственно' ???
			|----------------------------------
			|При таком удалении бухг.счет
			|будет безвозвратно утерян !!!",4,30);
			Если ответ=6 Тогда
				Возврат;
			КонецЕсли;
			Попытка
				Спр=СоздатьОбъект("Счет."+РасшифровкаВид);
				Спр.НайтиСчет(Расшифровка);
				Спр.Удалить(1);
			Исключение
				Сообщить("Ошибки при непосредственном удалении "+Расшифровка+":","!");
				Сообщить(""+ОписаниеОшибки(),"I");
			КонецПопытки;
		Иначе
			СтандартнаяОбработка=1;
		КонецЕсли;
	ИначеЕсли 
		(ТипЗначения(Расшифровка)=17)ИЛИ
		(ТипЗначения(Расшифровка)=16)Тогда
		// ПланСчетов, ВидСубконто
		ВвестиЗначение(Расшифровка,"Значение в ячейке:"+?(ПустаяСтрока(Адрес)=1,""," '"+Адрес+"'"));
	ИначеЕсли (ТипЗначенияСтр(Расшифровка) = "СписокЗначений") Тогда
		// просмотр списка в диалоге
		СтандартнаяОбработка=0;
		Расшифровка.ВыбратьЗначение(,"Расшифровка - список значений",,,0);
	ИначеЕсли (ТипЗначенияСтр(Расшифровка) = "ТаблицаЗначений") Тогда
		// просмотр таблицы значений в диалоге
		СтандартнаяОбработка=0;
		Расшифровка.ВыбратьСтроку(,"Расшифровка - таблица значений",);
	ИначеЕсли (ТипЗначенияСтр(Расшифровка) = "ТаблицаЗначений") Тогда
		// просмотр таблицы значений в диалоге
		СтандартнаяОбработка=0;
		Расшифровка.ВыбратьСтроку(,"Расшифровка - индексированная таблица",);
	Иначе
		СтандартнаяОбработка = 1;
	КонецЕсли;
КонецПроцедуры // ОбработкаЯчейкиТаблицы

Процедура кнПодборОК_Клик()
	
	ЕрроТекст="";
	ЗапросРезультатТипЗначения=ТипЗначения(ЗапросРезультат);
	ЗапросРезультатТипЗначенияСтр=ТипЗначенияСтр(ЗапросРезультат);
	Если ЗапросСтатусОшибки<0 Тогда
		ЕрроТекст="Последний запрос не выполнен (без ошибок) !!!";
	ИначеЕсли ЗапросСтатусОшибки>0 Тогда
		ЕрроТекст="Последний запрос выполнен с ошибками !!!";
	ИначеЕсли ЗапросРезультатТипЗначенияСтр="ТаблицаЗначений" Тогда
		// вернем выборку данных из подбора
	ИначеЕсли ЗапросРезультатТипЗначения=0 Тогда
		ЕрроТекст="Запрос ни разу не выполнялся !!!";
	Иначе
		ЕрроТекст=
		"Результатом запроса является
		|не множество набора строк !!!
		|---------------------------------
		|ТипЗначения='"+ЗапросРезультатТипЗначенияСтр+"'
		|---------------------------------";
	КонецЕсли;
	Если ПустоеЗначение(ЕрроТекст)=0 Тогда
		// сообщим о причине отмены подбора выборки данных
		Предупреждение(ЕрроТекст,60);
		Возврат;
	КонецЕсли;
		
	ЗначВыбора=СоздатьОбъект("ТаблицаЗначений");
	ЗначВыбора.Загрузить(ЗапросРезультат);
	
	Если СервисИмитацияПодбора=0 Тогда
		// для встроенной в конфигурацию обработки работает штатный механизм подбора
		Форма.ВыполнитьВыбор(ЗначВыбора);
		Если Форма.РежимВыбора()>1 Тогда
			// множественный подбор запретим
			Сообщить("Множественный подбор выборки данных запрещен","!");
			Форма.Закрыть();
		КонецЕсли;
	Иначе
		// для внешней обработки ... приходится имитировать подбор вызовом процедуры в контексте формы владельца
		Если ТипЗначенияСтр(КонтекстВладелец)<>"ГрупповойКонтекст" Тогда
			Форма.Закрыть();
			Возврат; // молча закроем ...
		КонецЕсли;
		Еррор=0;
		Попытка
			сзАргументы=СоздатьОбъект("СписокЗначений");
			сзАргументы.ДобавитьЗначение(ЗначВыбора);
			сзАргументы.ДобавитьЗначение(глВзятьКонтекст(Контекст));
			ФормаСервис.ВыполнитьПроцедуру(КонтекстВладелец,"ОбработкаПодбора",сзАргументы);
		Исключение
			Еррор=Еррор+1;
			ЕрроТекст=ОписаниеОшибки();
		КонецПопытки;
		Если Еррор=0 Тогда
			Форма.Закрыть();
		Иначе
			Сообщить(
			"Ошибка имитации обработки подбора в форме-владельце:
			|"+ЕрроТекст,"!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура кнПодборОтмена_Клик()
	Форма.Закрыть();
КонецПроцедуры

Процедура НовоеОкно()
	сзПараметры=СоздатьОбъект("СписокЗначений");
	// увеличим номер окна
	сзПараметры.Установить("НомерОкна",НомерОкна+1);
	// запомним в списке остальные параметры
	сзПараметры.Установить("гФПараметры",гФПараметры);
	сзПараметры.Установить("ТекстЗапроса",ТекстЗапроса);
	сзПараметры.Установить("Параметры",ТПараметров);
	сзПараметры.Установить("ИмяКаталогаЗапросов",ИмяКаталогаЗапросов);
	сзПараметры.Установить("ВыводитьТекст",ВыводитьТекст);
	сзПараметры.Установить("RPCMode",RPCMode);
	сзПараметры.Установить("ЗапросЧерезИнструцию",ЗапросЧерезИнструцию); 
	сзПараметры.Установить("qryConsoleUse",qryConsoleUse); 
	Если qryConsoleUse<>0 Тогда
		сзПараметры.Установить("qryConsoleXMLData",qryConsoleXMLData); 
	Иначе
		сзПараметры.Установить("qryConsoleXMLData",""); 
	КонецЕсли;
	сзПараметры.Установить("dbfCollateValue",dbfCollateValue); 
	Если ПустаяСтрока(ОбработкаФайл)=1 Тогда
		ОткрытьФорму("Обработка."+Обработка+"#",сзПараметры);
	Иначе 	// всегда в новом отдельном окне 
		ОткрытьФорму("Обработка"+"#",сзПараметры,ОбработкаПуть+ОбработкаФайл);
	КонецЕсли;
КонецПроцедуры

Функция Тип1С(Тип)
	//Сообщить(Тип);
	Если Тип=1 Тогда
		Возврат "Строка";
	ИначеЕсли Тип=2 Тогда
		Возврат "Число";
	ИначеЕсли Тип=3 Тогда
		Возврат "Дата";
	//ИначеЕсли Тип=5 Тогда
	//	Возврат "Число";
	//ИначеЕсли Тип=7 Тогда
	//	Возврат "Число";
	//ИначеЕсли Тип=8 Тогда
	//	Возврат "Число";
	//ИначеЕсли Тип=9 Тогда
	//	Возврат "Число";
	Иначе
		Возврат "Строка";
	КонецЕсли;
КонецФункции

Функция ФорматВремя(Время)
	МС=Время%1000;
	Время=Цел(Время/1000);
	Ч=Цел(Время/3600);
	М=Цел((Время-Ч*3600)/60);
	С=Время-Ч*3600-М*60;
	Возврат Формат(Ч,"Ч(0)2")+":"+Формат(М,"Ч(0)2")+":"+Формат(С,"Ч(0)2")+"."+Формат(МС,"Ч(0)3");
КонецФункции

Процедура ОчиститьИнфор()
	Форма.тСостояние.Заголовок("");
	Форма.тВремяЗапроса.Заголовок("");
	Форма.тСтрокКол.Заголовок("");
	Форма.тКолонокКол.Заголовок("");
КонецПроцедуры

Процедура ВидПровайдера_Изменение()
	Если ВидПровайдера<=0 Тогда
		ВидПровайдера=1;
	ИначеЕсли ВидПровайдера>=3 Тогда
		ВидПровайдера=2;
	КонецЕсли;
	Если ВидПровайдера=1 Тогда
		Если MetaInfoClasses.ПолучитьВерсию()<1816 Тогда
			Если RPCMode<>0 Тогда
				Форма.подписьRPCMode.Доступность(0);
				Форма.RPCMode.Доступность(0);
				RPCMode=0;
			Иначе
			Форма.подписьRPCMode.Доступность(1);
			Форма.RPCMode.Доступность(1);
			КонецЕсли;
		КонецЕсли;
		Форма.подписьНаборСтрок.Доступность(1);
		Форма.НаборСтрок.Доступность(1);
	Иначе
		Форма.подписьRPCMode.Доступность(0);
		Форма.RPCMode.Доступность(0);
		Если RPCMode<>0 Тогда
			RPCMode=0;
		КонецЕсли;
		Форма.подписьНаборСтрок.Доступность(0);
		Форма.НаборСтрок.Доступность(0);
		Если НаборСтрок<>0 Тогда
			НаборСтрок=0;
		КонецЕсли;
	КонецЕсли;
	сзМетодыВыполнения.УдалитьВсе();
	Если ВидПровайдера=1 Тогда
		// методы объекта ODBCRecordSet
		сзМетодыВыполнения.ДобавитьЗначение(0,"Открыть+ВыгрузитьТЗ");
		сзМетодыВыполнения.ДобавитьЗначение(1,"ВыполнитьИнструкцию");
		сзМетодыВыполнения.ДобавитьЗначение(2,"Выполнить");
		сзМетодыВыполнения.ДобавитьЗначение(3,"ВыполнитьСкалярный");
		сзМетодыВыполнения.ДобавитьЗначение(4,"ВыполнитьXML");
	Иначе
		// методы объекта OLEDBCommand
		//сзМетодыВыполнения.ДобавитьЗначение(0,"Открыть");
		сзМетодыВыполнения.ДобавитьЗначение(1,"ВыполнитьИнструкцию");
		сзМетодыВыполнения.ДобавитьЗначение(2,"Выполнить");
		//сзМетодыВыполнения.ДобавитьЗначение(3,"ВыполнитьСкалярный");
		//сзМетодыВыполнения.ДобавитьЗначение(4,"ВыполнитьXML");
	КонецЕсли;
	Если сзМетодыВыполнения.РазмерСписка()=0 Тогда
		ЗапросЧерезИнструцию=0;
	Иначе
		Поз=сзМетодыВыполнения.НайтиЗначение(ЗапросЧерезИнструцию);
		Если Поз=0 Тогда
			Поз=1;
			ЗапросЧерезИнструцию=сзМетодыВыполнения.ПолучитьЗначение(Поз);
		КонецЕсли;
		сзМетодыВыполнения.ТекущаяСтрока(Поз);
	КонецЕсли;
КонецПроцедуры

Процедура Запрос_УстановитьПараметры(Запрос,ЗапросаТекст)
	Пока Найти(ЗапросаТекст,"##")>0 Цикл
		// защита от дурака
		ЗапросаТекст=СтрЗаменить(ЗапросаТекст,"##","#");
	КонецЦикла;
	ТПараметров.ВыбратьСтроки();
	Пока ТПараметров.ПолучитьСтроку()=1 Цикл
		Параметр=СокрЛП(ТПараметров.Параметр);
		Если ПустаяСтрока(Параметр)=1 Тогда
			Продолжить;
		КонецЕсли;
		Параметр0=Параметр;
		ПараметрКоррекция=0;
		Значение=ТПараметров.Значение;
		Тип=СокрЛП(ТПараметров.Тип);
		Если Лев(Тип,16)="ДокументПозиция." Тогда
			ЗначениеВыбрно=0;
			Если (ТипЗначения(Значение)=12) Тогда
				Если Значение.Выбран()=1 Тогда
					// берем сам документ
					ЗначениеВыбрно=1;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеВыбрно=0 Тогда
				// если документ не выбран - берем самый последний документ в базе
				Док=СоздатьОбъект("Документ");
				Док.ОбратныйПорядок(1);
				Если Док.ВыбратьДокументы(,)=1 Тогда
					ЗначениеВыбрно=1;
					Значение=Док.ТекущийДокумент();
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеВыбрно=1 Тогда
				// берем позицию документа
				Позиция=Значение.ПолучитьПозицию();
			Иначе
				// если нет ни одного документа в базе - берем позицию текущего времени
				ЧЧ=0; ММ=0; СС=0; ТекущееВремя(ЧЧ,ММ,СС);
				Позиция=СформироватьПозициюДокумента(ЧЧ,ММ,СС,1);
			КонецЕсли;
			Запрос.УстановитьТекстовыйПараметр(Параметр,Позиция);
		ИначеЕсли Лев(Тип,14)="СписокСсылок9." Тогда 
			Пока Найти(Параметр,"#")>0 Цикл
				// защита от дурака
				Параметр=СтрЗаменить(Параметр,"#","");
				ПараметрКоррекция=ПараметрКоррекция+1;
			КонецЦикла;
			Если (ТипЗначенияСтр(Значение)<>"СписокЗначений")И(ПустоеЗначение(Значение)=1) Тогда
				Значение=СоздатьОбъект("СписокЗначений")
			КонецЕсли;
			//ТипВид=Сред(Тип,15);
			Если ВидПровайдера=2 Тогда
				ИмяВТ="";
				Запрос.УложитьСписокОбъектов(Значение,ИмяВТ,"");
				// заменяем в тексте запроса символическое имя таблицы #<ИмяПараметра> - на то что вернул объект 'OLEDBCommand'
				ЗапросаТекст=СтрЗаменить(ЗапросаТекст,"#"+Параметр,ИмяВТ);
			Иначе
				Запрос.УложитьСписокОбъектов(Значение,"#"+Параметр,"");
			КонецЕсли;
		ИначеЕсли Лев(Тип,15)="СписокСсылок13." Тогда 
			Пока Найти(Параметр,"#")>0 Цикл
				// защита от дурака
				Параметр=СтрЗаменить(Параметр,"#","");
				ПараметрКоррекция=ПараметрКоррекция+1;
			КонецЦикла;
			Если (ТипЗначенияСтр(Значение)<>"СписокЗначений")И(ПустоеЗначение(Значение)=1) Тогда
				Значение=СоздатьОбъект("СписокЗначений")
			КонецЕсли;
			//ТипВид=Сред(Тип,16);
			Если ВидПровайдера=2 Тогда
				Продолжить; // пока не поддерживается
				ИмяВТ="";
				Запрос.УложитьСписокОбъектов13(Значение,ИмяВТ);
				// заменяем в тексте запроса символическое имя таблицы #<ИмяПараметра> - на то что вернул объект 'OLEDBCommand'
				ЗапросаТекст=СтрЗаменить(ЗапросаТекст,"#"+Параметр,ИмяВТ);
			Иначе
				Запрос.УложитьСписокОбъектов13(Значение,"#"+Параметр);
			КонецЕсли;
		ИначеЕсли Лев(Тип,16)="ИерархияСсылок9." Тогда 
			Пока Найти(Параметр,"#")>0 Цикл
				// защита от дурака
				Параметр=СтрЗаменить(Параметр,"#","");
				ПараметрКоррекция=ПараметрКоррекция+1;
			КонецЦикла;
			Если (ТипЗначенияСтр(Значение)<>"СписокЗначений")И(ПустоеЗначение(Значение)=1) Тогда
				Значение=СоздатьОбъект("СписокЗначений")
			КонецЕсли;
			ТипВид=Сред(Тип,17);
			Поза=Найти(ТипВид,".");
			Вид=Сред(ТипВид,Поза+1);
			Если ПустаяСтрока(Вид)=1 Тогда
				Продолжить;
			КонецЕсли;
			Если ВидПровайдера=2 Тогда
				Если Лев(ТипВид,11)="ПланСчетов." Тогда
					Продолжить;
				КонецЕсли;
				ИмяВТ="";
				Запрос.УложитьСписокОбъектов(Значение,ИмяВТ,Вид);
				// заменяем в тексте запроса символическое имя таблицы #<ИмяПараметра> - на то что вернул объект 'OLEDBCommand'
				ЗапросаТекст=СтрЗаменить(ЗапросаТекст,"#"+Параметр,ИмяВТ);
			Иначе
				Запрос.УложитьСписокОбъектов(Значение,"#"+Параметр,Вид);
			КонецЕсли;
		Иначе
			Запрос.УстановитьТекстовыйПараметр(Параметр,Значение);
		КонецЕсли;
		Если ПараметрКоррекция>0 Тогда
			Сообщить("Из имени параметра запроса '"+Параметр0+"' удалены символы '#'","i");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПроверитьПараметры()
	Еррорс=0;
	ТПараметров.ВыбратьСтроки();
	Пока ТПараметров.ПолучитьСтроку()=1 Цикл
		ТПараметров.Цвет="";
		Параметр=СокрЛП(ТПараметров.Параметр);
		Если ПустаяСтрока(Параметр)=1 Тогда
			Продолжить;
		КонецЕсли;
		Тип=ТПараметров.Тип;
		Ерр=0;
		ПроверкаСтрокиТипа(Тип,Ерр);
		Если Ерр<>0 Тогда
			Сообщить("Параметр '"+Параметр+"' >>> недопустимый тип - '"+Тип+"'","!");
			ТПараметров.Цвет=ЦветКрасныйТекст;
			Еррорс=Еррорс+1;
			Продолжить;
		КонецЕсли;
		Если Лев(Тип,15)="СписокСсылок13." Тогда 
			Если ВидПровайдера=2 Тогда
				Сообщить("Параметр '"+Параметр+"' >>> ч/з OLEDB тип 'СписокСсылок13' пока не поддерживается","!");
				ТПараметров.Цвет=ЦветКрасныйТекст;
				Еррорс=Еррорс+1;
				Продолжить;
			КонецЕсли;
		ИначеЕсли Лев(Тип,16)="ИерархияСсылок9." Тогда
			ТипВид=Сред(Тип,17);
			Поза=Найти(ТипВид,".");
			Вид=Сред(ТипВид,Поза+1);
			Если Лев(ТипВид,11)="ПланСчетов." Тогда
				Если ПустаяСтрока(Вид)=1 Тогда
					Сообщить("Параметр '"+Параметр+"' >>> для типа параметра 'ИерархияСсылок9' не указан Вид объектов","!");
					ТПараметров.Цвет=ЦветКрасныйТекст;
					Еррос=Еррос+1;
					Продолжить;
				КонецЕсли;
				Если ВидПровайдера=2 Тогда
					Сообщить("Параметр '"+Параметр+"' >>> ч/з OLEDB тип 'ИерархияСсылок9' для ""Бухг.счетов"" пока не поддерживается","!");
					ТПараметров.Цвет=ЦветКрасныйТекст;
					Еррос=Еррос+1;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Еррорс;
КонецФункции
	
Функция ВыполнитьODBC(Запрос,ЗапросаТекст,ЗапросМетод,ИмяБатча,ОшибкаТекст)
	Перем ЗапросРезультат;
	Перем СтатусВыполнения;
	
	ЗапросРезультат=Неопределено;
	СтатусВыполнения=0;
	ОшибкаТекст="";
		
	Запрос.АвтоТипизация();
		
	Если RPCMode=1 Тогда
		Запрос.RPCMode(1);
	КонецЕсли;
	
	Если НаборСтрок<>0 Тогда
		Запрос.УстРазмерМножестваСтрок(НаборСтрок);
	КонецЕсли;
		
	Запрос_УстановитьПараметры(Запрос,ЗапросаТекст);
		
	Если ЗапросМетод=0 Тогда
		// метод ODBCRecordset:Открыть()+ПолучитьРезультатыВ_ТЗ
		Время=_GetPerformanceCounter();
		ЭтоЧислоСтрок=0;
		
		Попытка
			Рез=Запрос.Открыть(ЗапросаТекст);
		Исключение
			СтатусВыполнения=-1;
			Ошибка=ОписаниеОшибки();
			ОшибкаТекст="ODBCRecordset:Открыть() error:"+РазделительСтрок+Ошибка;
			Возврат СтатусВыполнения;
		КонецПопытки;
		Если Рез=0 Тогда
			Ошибка=Запрос.ПолучитьОписаниеОшибки();
			Если ПустаяСтрока(Ошибка)=1 Тогда
				Ошибка="<<Выборка не открыта>>";
			КонецЕсли;
			СтатусВыполнения=-1;
			ОшибкаТекст="ODBCRecordset:Открыть() error:"+РазделительСтрок+Ошибка;
			Возврат СтатусВыполнения;
		КонецЕсли;
				
		ВремяЗапроса=_GetPerformanceCounter()-Время;
	
		Время=_GetPerformanceCounter();
		
		Форма.тСостояние.Заголовок("Идет получение...");
		
		ЗапросРезультат=СоздатьОбъект("ТаблицаЗначений");
		Попытка
			Запрос.ПолучитьРезультатыВ_ТЗ(ЗапросРезультат,1);
		Исключение
			СтатусВыполнения=-1;
			Ошибка=ОписаниеОшибки();
			ОшибкаТекст="ODBCRecordset:Открыть() error:"+РазделительСтрок+Ошибка;
			Возврат СтатусВыполнения;
		КонецПопытки;
		
		ВремяПолучения=_GetPerformanceCounter()-Время;
		
	ИначеЕсли ЗапросМетод=1 Тогда
		// метод ODBCRecordset:ВыполнитьИнструкцию()
		Время=_GetPerformanceCounter();
		ЭтоЧислоСтрок=1;
								
		Попытка
			ЗапросРезультат=Запрос.ВыполнитьИнструкцию(ЗапросаТекст);
		Исключение
			ЗапросРезультат=Неопределено;
			Ошибка=ОписаниеОшибки();
			СтатусВыполнения=-1;
			ОшибкаТекст="ODBCRecordset:ВыполнитьИнструкцию() error:"+РазделительСтрок+Ошибка;
			Возврат СтатусВыполнения;
		КонецПопытки;
				
		ВремяЗапроса=_GetPerformanceCounter()-Время;
		
		ВремяПолучения=0;
						
	ИначеЕсли ЗапросМетод=2 Тогда
		// метод ODBCRecordset:Выполнить()
		Время=_GetPerformanceCounter();
		ЭтоЧислоСтрок=-1;
		
		Попытка
			Рез=Запрос.Выполнить(ЗапросаТекст);
		Исключение
			СтатусВыполнения=-1;
			Ошибка=ОписаниеОшибки();
			ОшибкаТекст="ODBCRecordset:Выполнить() error:"+РазделительСтрок+Ошибка;
			Возврат СтатусВыполнения;
		КонецПопытки;
		Если Рез=0 Тогда
			Ошибка=Запрос.ПолучитьОписаниеОшибки();
			Если ПустаяСтрока(Ошибка)=1 Тогда
				Ошибка="<<Не документированная ошибка>>";
			КонецЕсли;
			СтатусВыполнения=-1;
			ОшибкаТекст="ODBCRecordset:Выполнить() error:"+РазделительСтрок+Ошибка;
			Возврат СтатусВыполнения;
		КонецЕсли;
		
		ВремяЗапроса=_GetPerformanceCounter()-Время;
						
		ЗапросРезультат=1; // будет в таблице результатов: "Команда завершена успешно."
						
		ВремяПолучения=0;
		
	ИначеЕсли ЗапросМетод=3 Тогда
		// метод ODBCRecordset:ВыполнитьСкалярный()
		Время=_GetPerformanceCounter();
		ЭтоЧислоСтрок=0;
								
		Попытка
			ЗапросРезультат=Запрос.ВыполнитьСкалярный(ЗапросаТекст);
		Исключение
			ЗапросРезультат=Неопределено;
			Ошибка=ОписаниеОшибки();
			СтатусВыполнения=-1;
			ОшибкаТекст="ODBCRecordset:ВыполнитьСкалярный() error:"+РазделительСтрок+Ошибка;
			Возврат СтатусВыполнения;
		КонецПопытки;
		
		ВремяЗапроса=_GetPerformanceCounter()-Время;
		
		Время=_GetPerformanceCounter();
		
		Если ТипЗначенияСтр(ЗапросРезультат)="Структура" Тогда
			ТЗ=СоздатьОбъект("ТаблицаЗначений");
			Для Инд=1 По ЗапросРезультат.Количество() Цикл
				ИмяКол="";
				ЗнаКол=ЗапросРезультат.Получить(Инд,ИмяКол);
				ТипКол=ТипЗначенияСтр(ЗнаКол);
				Попытка
					ВидКол=ТипКол.Вид();
				Исключение
					ВидКол="";
				КонецПопытки;
				Если ПустаяСтрока(ВидКол)=0 Тогда
					ТипКол=ТипКол+"."+ВидКол;
				КонецЕсли;
				Если ПустаяСтрока(ИмяКол)=1 Тогда
					ТЗ.НоваяКолонка(,ТипКол);
				Иначе
					ТЗ.НоваяКолонка(ИмяКол,ТипКол);
				КонецЕсли;
			КонецЦикла;
			ТЗ.НоваяСтрока();
			Для Инд=1 По ЗапросРезультат.Количество() Цикл
				ЗнаКол=ЗапросРезультат.Получить(Инд,);
				ТЗ.УстановитьЗначение(1,Инд,ЗнаКол);
			КонецЦикла;
		КонецЕсли;
				
		ВремяПолучения=_GetPerformanceCounter()-Время;
		
	ИначеЕсли ЗапросМетод=4 Тогда
		// метод ODBCRecordset:ВыполнитьXML()
		Время=_GetPerformanceCounter();
		ЭтоЧислоСтрок=0;
		
		Попытка
			ЗапросРезультат=Запрос.ВыполнитьXML(ЗапросаТекст);
		Исключение
			ЗапросРезультат=Неопределено;
			Ошибка=ОписаниеОшибки();
			СтатусВыполнения=-1;
			ОшибкаТекст="ODBCRecordset:ВыполнитьXML() error:"+РазделительСтрок+Ошибка;
			Возврат СтатусВыполнения;
		КонецПопытки;		
		
		ВремяЗапроса=_GetPerformanceCounter()-Время;
		
	Иначе
		ЗапросРезультат=Неопределено;
		Ошибка="Непредусмотренное значение метода исполнения запроса: ЗапросМетод="+ЗапросМетод+" !";
		СтатусВыполнения=-1;
		ОшибкаТекст="ODBCRecordset error:"+РазделительСтрок+Ошибка;
		Возврат СтатусВыполнения;
	КонецЕсли;
	
	Если (ЭтоБазаSQL=1) Тогда
		Если РежимВыполнения = 2 Тогда
			ЗапросРезультат.УдалитьКолонку("StmtId");
			ЗапросРезультат.УдалитьКолонку("NodeId");
			ЗапросРезультат.УдалитьКолонку("Parent");
			ЗапросРезультат.УдалитьКолонку("PhysicalOp");
			ЗапросРезультат.УдалитьКолонку("LogicalOp");
			ЗапросРезультат.УдалитьКолонку("Argument");
			ЗапросРезультат.УдалитьКолонку("DefinedValues");
			
			ТекстПланВыполнения.ДобавитьСтроку("");
			ТекстПланВыполнения.ДобавитьСтроку("-------"""+ИмяБатча+"""-------");
			Если ЗапросРезультат.КоличествоСтрок() > 1 Тогда
				ЗапросРезультат.ВыбратьСтроки();
				Пока ЗапросРезультат.ПолучитьСтроку() = 1 Цикл
					//Сообщить(ЗапросРезультат.StmtText);
					ТекстПланВыполнения.ДобавитьСтроку(ЗапросРезультат.StmtText);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтатусВыполнения=1;
	
	тзРезультаты.НоваяСтрока();
	тзРезультаты.ИмяБатча = ИмяБатча;
	тзРезультаты.ЗапросРезультат = ЗапросРезультат;
	тзРезультаты.ВремяЗапроса = ВремяЗапроса;
	тзРезультаты.ВремяПолучения = ВремяПолучения;
	тзРезультаты.РежимВыполнения = РежимВыполнения;
	тзРезультаты.ЭтоЧислоСтрок = ЭтоЧислоСтрок;
	
	Возврат СтатусВыполнения;
КонецФункции

Функция ВыполнитьOLEDB(Запрос,ЗапросаТекст,ЗапросМетод,ИмяБатча,ОшибкаТекст)
	Перем ЗапросРезультат;
	Перем СтатусВыполнения;
	
	ЗапросРезультат=Неопределено;
	СтатусВыполнения=0;
	ОшибкаТекст="";
									
	Запрос_УстановитьПараметры(Запрос,ЗапросаТекст);
		
	Если ЗапросМетод=1 Тогда
		// метод ODBCRecordset:ВыполнитьИнструкцию()
		Время=_GetPerformanceCounter();
		ЭтоЧислоСтрок=0;
		
		Попытка
			ЗапросРезультат = Запрос.ВыполнитьИнструкцию(ЗапросаТекст);
		Исключение
			ЗапросРезультат=Неопределено;
			Ошибка=ОписаниеОшибки();
			СтатусВыполнения=-1;
			ОшибкаТекст="OLEDBCommand error:"+РазделительСтрок+Ошибка;
			Возврат СтатусВыполнения;
		КонецПопытки;
		
		ВремяЗапроса=_GetPerformanceCounter()-Время;
		ВремяПолучения=0;
	ИначеЕсли ЗапросМетод=2 Тогда
		// метод ODBCRecordset:Выполнить()
		Время=_GetPerformanceCounter();
		ЭтоЧислоСтрок=1;
		
		Попытка
			ЗапросРезультат = Запрос.Выполнить(ЗапросаТекст);
		Исключение
			ЗапросРезультат=Неопределено;
			Ошибка=ОписаниеОшибки();
			СтатусВыполнения=-1;
			ОшибкаТекст="OLEDBCommand error:"+РазделительСтрок+Ошибка;
			Возврат СтатусВыполнения;
		КонецПопытки;
		
		ВремяЗапроса=_GetPerformanceCounter()-Время;
		ВремяПолучения=0;
	Иначе
		ЗапросРезультат=Неопределено;
		Ошибка="Непредусмотренное значение метода исполнения запроса: ЗапросМетод="+ЗапросМетод+" !";
		СтатусВыполнения=-1;
		ОшибкаТекст="OLEDBCommand error:"+РазделительСтрок+Ошибка;
		Возврат СтатусВыполнения;
	КонецЕсли;
								
	Если (ЭтоБазаSQL=1) Тогда
		Если РежимВыполнения = 2 Тогда
			ЗапросРезультат.УдалитьКолонку("StmtId");
			ЗапросРезультат.УдалитьКолонку("NodeId");
			ЗапросРезультат.УдалитьКолонку("Parent");
			ЗапросРезультат.УдалитьКолонку("PhysicalOp");
			ЗапросРезультат.УдалитьКолонку("LogicalOp");
			ЗапросРезультат.УдалитьКолонку("Argument");
			ЗапросРезультат.УдалитьКолонку("DefinedValues");
	
			ТекстПланВыполнения.ДобавитьСтроку("");
			ТекстПланВыполнения.ДобавитьСтроку("-------"""+ИмяБатча+"""-------");
			Если ЗапросРезультат.КоличествоСтрок() > 1 Тогда
				ЗапросРезультат.ВыбратьСтроки();
				Пока ЗапросРезультат.ПолучитьСтроку() = 1 Цикл
					//Сообщить(ЗапросРезультат.StmtText);
					ТекстПланВыполнения.ДобавитьСтроку(ЗапросРезультат.StmtText);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтатусВыполнения=1;
	
	тзРезультаты.НоваяСтрока();
	тзРезультаты.ИмяБатча = ИмяБатча;
	тзРезультаты.ЗапросРезультат = ЗапросРезультат;
	тзРезультаты.ВремяЗапроса = ВремяЗапроса;
	тзРезультаты.ВремяПолучения = ВремяПолучения;
	тзРезультаты.РежимВыполнения = РежимВыполнения;
	тзРезультаты.ЭтоЧислоСтрок = ЭтоЧислоСтрок;
	
	Возврат СтатусВыполнения;
КонецФункции

Процедура Форма_Результаты_Контроль()
	КС=тзРезультаты.КоличествоСтрок();
	Если КС>0 Тогда
		Если ЗапросСтатусОшибки=0 Тогда
			Если КС>1 Тогда
				Форма.Результаты.Доступность(1);
			Иначе
				Форма.Результаты.Доступность(0);
			КонецЕсли;
		Иначе
			Форма.Результаты.Доступность(1);
		КонецЕсли;
	Иначе
		Результаты.УдалитьВсе();
		Результаты.ДобавитьЗначение("<<Нет результатов выполнения>>");
		Результаты.ТекущаяСтрока(1);
		Форма.Результаты.Доступность(0);
	КонецЕсли;
КонецПроцедуры

Процедура Результаты()
	КС=Результаты.РазмерСписка();
	ТС=Результаты.ТекущаяСтрока();
	Если КС*ТС=0 Тогда
		Возврат;
	КонецЕсли;
	Если КС<тзРезультаты.КоличествоСтрок() Тогда
		Сообщить("Результаты() >>> 'тзРезультаты' не соответствует 'Результаты'","!");
		Возврат;
	КонецЕсли;
		
	ИмяБатча		= тзРезультаты.ПолучитьЗначение(ТС,"ИмяБатча");
	ВремяЗапроса	= тзРезультаты.ПолучитьЗначение(ТС,"ВремяЗапроса");
	ВремяПолучения	= тзРезультаты.ПолучитьЗначение(ТС,"ВремяПолучения");
	ЗапросРезультат	= тзРезультаты.ПолучитьЗначение(ТС,"ЗапросРезультат");
	РежВыполнения	= тзРезультаты.ПолучитьЗначение(ТС,"РежимВыполнения");
	ЭтоЧислоСтрок	= тзРезультаты.ПолучитьЗначение(ТС,"ЭтоЧислоСтрок");
	
		//Если ТипЗначенияСтр(ЗапросРезультат) <> "ТаблицаЗначений" Тогда
		//	ЗапросРезультат = ТЗ;
		//КонецЕсли;
	
	Форма.тСостояние.Заголовок("Загрузка результата...");
	Если ТипЗначенияСтр(ЗапросРезультат)="ТаблицаЗначений" Тогда
		// запрос вернул набор строк
		ЗапросРезультат.Выгрузить(Результат);	
	ИначеЕсли ТипЗначения(ЗапросРезультат)=1 Тогда
		// запрос вернул числовое значение
		Результат.Очистить();
		Результат.НоваяКолонка("Результат","Строка",,,"Результат """+ИмяБатча+"""",200);
		Результат.НоваяСтрока();
		
		Если ЭтоЧислоСтрок=0 Тогда
			// числовое значение рассматривается как результат запроса 
			Результат.Результат = ЗапросРезультат;
		ИначеЕсли ЭтоЧислоСтрок<0 Тогда
			// числовое значение рассматривается как признак успешности выполнения команды
			Если ЗапросРезультат>0 Тогда
				Результат.Результат = "Команда завершена успешно.";
			Иначе
				Результат.Результат = "Команда не выполнена !!!";
			КонецЕсли;
		ИначеЕсли ЭтоЧислоСтрок>0 Тогда
			// числовое значение рассматривается как число обработанных строк
			Если (РежВыполнения = 1) Тогда
				// при проверке синтаксиса - признак успешности
				Результат.Результат = "Команда завершена успешно.";
			Иначе
				Результат.Результат = "Обработано строк: " + ЗапросРезультат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// запрос вернул скалярную величину не числового типа
		Результат.Очистить();
		Результат.НоваяКолонка("Результат","Строка",,,"Результат """+ИмяБатча+"""",200);
		Результат.НоваяСтрока();
		Результат.Результат = ЗапросРезультат;
	КонецЕсли;
	
	СтрВремяЗапроса = ФорматВремя(ВремяЗапроса);
	Если ВремяПолучения>0 Тогда
		СтрВремяЗапроса=СтрВремяЗапроса+" / "+ФорматВремя(ВремяПолучения);
	КонецЕсли;
	Форма.тВремяЗапроса.Заголовок(СтрВремяЗапроса);
	
	Форма.тСтрокКол.Заголовок(Результат.КоличествоСтрок());
	Форма.тКолонокКол.Заголовок(Результат.КоличествоКолонок());
		
	Форма.тСостояние.Заголовок("");
КонецПроцедуры

Процедура Выполнить(РежВыполнения=0)
	Перем База;
	Перем Запрос;
	
	РежимВыполнения=РежВыполнения;
	Если РежимВыполнения=0 Тогда
		// просто 'Выполнить запрос' (все типы доступа к данным)
	ИначеЕсли РежимВыполнения=1 Тогда
		// 'Проверить синтаксис и компиляцию' (ODBC:SQL)
	ИначеЕсли РежимВыполнения=2 Тогда
		// 'Вывести план выполнения запроса'  (ODBC:SQL)
	Иначе // РежимВыполнения = 0
		РежимВыполнения=0;
	КонецЕсли;
	
	// проверим параметры запроса на допустимость типов
	Еррорс=ПроверитьПараметры();
	// если что - спросим
	Если Еррорс<>0 Тогда
		Ответ=Вопрос(
		"Обнаружены параметры запроса ("+Еррорс+" шт.),
		|имеющие недопустимые типы значения!
		|------------------------------
		|ПРОДОЛЖИТЬ ???",4,180);
		Если Ответ<>6 Тогда
			// не-да
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НеСпрашиватьПроОчистку=ВосстановитьЗначение("НеСпрашиватьПроОчистку");
	Если (тзРезультаты.КоличествоСтрок()<>0)И(НеСпрашиватьПроОчистку=0) Тогда
		Ответ=Вопрос(
		"Таблица текущих результатов
		|запроса будет очищена!
		|------------------------------
		|ПРОДОЛЖИТЬ ???",4,180);
		Если Ответ<>6 Тогда
			// не-да
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	// метод выполнения запроса
	Если ВидПровайдера=1 Тогда
		// для ODBC ч/з ODBCRecordSet
		Если ЗапросЧерезИнструцию<=0 Тогда
			ЗапросМетод=0;
		ИначеЕсли ЗапросЧерезИнструцию>=4 Тогда
			ЗапросМетод=4;
		Иначе
			ЗапросМетод=ЗапросЧерезИнструцию;
		КонецЕсли;
		
		Если ЭтоБазаSQL=1 Тогда
			Если РежимВыполнения = 1 Тогда
				// Проверить синтаксис и компиляцию
				ЗапросМетод=1;
			ИначеЕсли РежимВыполнения = 2 Тогда
				// Вывести план выполнения запроса
				ЗапросМетод=1;
			Иначе // РежимВыполнения = 0
				// Выполнить запрос
			КонецЕсли;
		Иначе // РежимВыполнения = 0
			// Выполнить запрос
		КонецЕсли;
	Иначе
		// для OLEDB ч/з OLEDBCommand
		Если ЗапросЧерезИнструцию<=1 Тогда
			ЗапросМетод=1;
		ИначеЕсли ЗапросЧерезИнструцию>=2 Тогда
			ЗапросМетод=2;
		Иначе
			ЗапросМетод=ЗапросЧерезИнструцию;
		КонецЕсли;
		
		Если ЭтоБазаSQL=1 Тогда
			Если РежимВыполнения = 1 Тогда
				// Проверить синтаксис и компиляцию
				ЗапросМетод=1;
			ИначеЕсли РежимВыполнения = 2 Тогда
				// Вывести план выполнения запроса
				ЗапросМетод=1;
			Иначе // РежимВыполнения = 0
				// Выполнить запрос
			КонецЕсли;
		Иначе // РежимВыполнения = 0
			// Выполнить запрос
		КонецЕсли;
	КонецЕсли;
	
	// формируем список батчей запроса		
	Еррорс=0;
	спЗапросы = СоздатьОбъект("СписокЗначений");
	ЧислоБатчей=0;
	ТекЗапрос = "";
	Для ъ = 1 По СтрКоличествоСтрок(ТекстЗапроса) Цикл
		ТекСтрока = СтрПолучитьСтроку(ТекстЗапроса, ъ);
		Если Врег(Лев(СокрЛП(ТекСтрока),2)) = "GO" Тогда
			ЧислоБатчей=ЧислоБатчей+1;
			ИмяБатча = СокрЛП(Сред(ТекСтрока,3));
			Если Лев(ИмяБатча,2)="--" Тогда
				ИмяБатча = СокрЛП(Сред(ИмяБатча,3))
			КонецЕсли;
			Если ПустаяСтрока(ИмяБатча)=1 Тогда
				ИмяБатча = "Батч № "+ЧислоБатчей;
			КонецЕсли;
			Если ПустаяСтрока(ТекЗапрос) = 0 Тогда
				спЗапросы.ДобавитьЗначение(ТекЗапрос,ИмяБатча);
			КонецЕсли;
			ТекЗапрос = "";
		ИначеЕсли (ПустаяСтрока(ТекСтрока) = 0) Или (ПустаяСтрока(ТекЗапрос) = 0) Тогда
			Если ПустаяСтрока(ТекЗапрос) = 0 Тогда
				ТекЗапрос = ТекЗапрос + РазделительСтрок + ТекСтрока;
			Иначе
				ТекЗапрос = ТекСтрока;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ПустаяСтрока(ТекЗапрос) = 0 Тогда
		ЧислоБатчей=ЧислоБатчей+1;
		Если ЧислоБатчей=1 Тогда
			ИмяБатча = "Запрос";
		Иначе
			ИмяБатча = "Батч № "+ЧислоБатчей;
		КонецЕсли;
		
		Если ЗапросМетод=4 Тогда
			// ВыполнитьXML - проверим наличие конструкции SELECT ... FOR XML 
			Если (Найти(ВРег(ТекЗапрос),"SELECT")=0)И(Найти(ВРег(ТекЗапрос),"FOR XML")=0) Тогда 
				Еррорс=Еррорс+1;
				Сообщить("Ошибки в тексте запроса '"+ИмяБатча+"'  >>>  Не найдена конструкция:  SELECT ... FOR XML !","!!!");
			КонецЕсли;
		КонецЕсли;
		
		спЗапросы.ДобавитьЗначение(ТекЗапрос,ИмяБатча);
	КонецЕсли;
	Если Еррорс>0 Тогда 
		Предупреждение("Ошибки в тексте запроса !",180);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(dbfCollateValue)=1 Тогда
		dbfCollateValue=dbfCollaties.ПолучитьЗначение(1);
	КонецЕсли;
	
	ОчиститьОкносообщений();
	ЗапросСтатусОшибки=0;
	
	Если ЭтоБазаSQL=1 Тогда
		// база в формате MS SQL
		ВидПровайдера=1;
		Если ВидПровайдера=1 Тогда
			Запрос=СоздатьОбъект("ODBCRecordset");
			//Запрос.УстБД1С();
		Иначе
			Возврат; // для ясности
			Соединение1 =
			"Provider=SQLNCLI; Server=myServerAddress;"+
			"Database=myDataBase; Uid=myUsername; Pwd=myPassword;"+
			"Trusted_Connection=yes; MARS Connection=True; Encrypt=yes;";
							
			//База = СоздатьОбъект("OLEDBData");
			//Попытка
			//	Рез = База.Соединение(Соединение1);
			//Исключение
			//	Рез = -1;
			//	Ошибка = ОписаниеОшибки();
			//КонецПопытки;
			//Если Рез>0 Тогда
			//	Запрос = База.СоздатьКоманду();
			//Иначе
			//	Если Рез=0 Тогда
			//		Ошибка = "Почему-то не удалось подключиться к базе по OLEDB !";
			//	КонецЕсли;
			//	Сообщить("OLEDBData:Соединение() error:"+РазделительСтрок+Ошибка,"!");
			//	ЗапросСтатусОшибки=1;
			//	ОчиститьИнфор();
			//	Возврат;
			//КонецЕсли;
		КонецЕсли;
	Иначе
		// база в формате DBF
		Если (МонопольныйРежим()=1)И(МожноМонопольноDBF=0) Тогда
			Ответ=Вопрос(
			"Для баз в формате DBF
			|в монопольном режиме
			|без специальных ухищрений 
			|прямые запросы не доступны!
			|------------------------------
			|ПРОДОЛЖИТЬ ???",4,180);
			Если Ответ<>6 Тогда
				// не-да
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ВидПровайдера=1 Тогда
			// ч/з ODBC для DBF, увы, не работает ... [Диспетчер драйверов ODBC] Драйвер не поддерживает данной функции
			Соединение1 =
			"DRIVER={Microsoft Visual FoxPro Driver}; "+
			"SourceType=DBF; SourceDB="+БазаКаталог+"; "+
			"Deleted=No; Null=Yes; Exclusive=No; BackgroundFetch=No; "+ //
			"Collate="+dbfCollateValue; // {MACHINE, RUSSIAN}
			База=СоздатьОбъект("ODBCDatabase");
			Рез = База.Соединение(Соединение1);
			Если Рез > 0 Тогда
				Запрос=СоздатьОбъект("ODBCRecordset");
				Запрос.УстБД(База);
			Иначе
				Ошибка=База.ПолучитьОписаниеОшибки();
				Сообщить("ODBCDatabase:Соединение() error:"+РазделительСтрок+Ошибка,"!");
				ЗапросСтатусОшибки=1;
				ОчиститьИнфор();
				Возврат;
			КонецЕсли;
		Иначе
			// ч/з OLEDB вроде работает ... и как обещали - только в разделенном режиме
			Соединение1 =
			"Provider=VFPOLEDB.1; "+
			"Data Source="+БазаКаталог+"; "+ // Deleted=Yes; // - на этот параметр матерится - типа не соответствует спецификации OLEDB
			"Mode=ReadWrite; Extended Properties=''; DSN=''; "+
			"User ID=''; Password=''; Mask Password=False; "+
			"Collating="+dbfCollateValue; // {MACHINE, RUSSIAN} Sequence
							
			База = СоздатьОбъект("OLEDBData");
			Попытка
				Рез = База.Соединение(Соединение1);
			Исключение
				Рез = -1;
				Ошибка = ОписаниеОшибки();
			КонецПопытки;
			Если Рез>0 Тогда
				Запрос = База.СоздатьКоманду();
			Иначе
				Если Рез=0 Тогда
					Ошибка = "Почему-то не удалось подключиться к базе по OLEDB !";
				КонецЕсли;
				Сообщить("OLEDBData:Соединение() error:"+РазделительСтрок+Ошибка,"!");
				ЗапросСтатусОшибки=1;
				ОчиститьИнфор();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыводитьТекст=1 Тогда
		Запрос.Отладка(1);
	КонецЕсли;
		
	Если ЭтоБазаSQL=1 Тогда
		Если РежимВыполнения = 1 Тогда
			// Проверить синтаксис и компиляцию
			Запрос.ВыполнитьИнструкцию("SET NOEXEC ON");
		ИначеЕсли РежимВыполнения = 2 Тогда
			// Вывести план выполнения запроса
			Запрос.ВыполнитьИнструкцию("SET SHOWPLAN_ALL ON");
		Иначе // РежимВыполнения = 0
			// Выполнить запрос
		КонецЕсли;
	Иначе // РежимВыполнения = 0
		// Выполнить запрос
	КонецЕсли;
			
	тзРезультаты.УдалитьСтроки();	
	Если РежимВыполнения = 2 Тогда
		ТекстПланВыполнения=СоздатьОбъект("Текст");
	КонецЕсли;
	
	// установка опций выполнения запроса по спецкомментариям в его тексте
	Транзакция=0;
	ТранзакцияОткатить=0;
	Если Найти(ТекстЗапроса,"--!ExecuteTransaction")>0 Тогда
		Транзакция=1;
		ТранзакцияОткатить=0;
	КонецЕсли;
	Если Найти(ТекстЗапроса,"--!ExecuteRollback")>0 Тогда
		Транзакция=1;
		ТранзакцияОткатить=1;
	КонецЕсли;	
	
	Если (Транзакция=1)ИЛИ(ТранзакцияОткатить=1) Тогда
		НачатьТранзакцию();
		Сообщить("Открыта транзакция...");
	КонецЕсли;
	
	Еррорс=0;
	ОшибкаТексты = "";
	Для ъ = 1 По спЗапросы.РазмерСписка() Цикл
		ИмяБатча = "";
		ТекЗапрос = спЗапросы.ПолучитьЗначение(ъ,ИмяБатча);
		
		Форма.тСостояние.Заголовок("Идет выполнение..."+ИмяБатча);
		
		ОшибкаТекст = "";
		Если ВидПровайдера=1 Тогда
			Рез = ВыполнитьODBC(Запрос,ТекЗапрос,ЗапросМетод,ИмяБатча,ОшибкаТекст);
		Иначе
			Рез = ВыполнитьOLEDB(Запрос,ТекЗапрос,ЗапросМетод,ИмяБатча,ОшибкаТекст);
		КонецЕсли;
		
		Если Рез<=0 Тогда
			ЗапросСтатусОшибки=1;
			Сообщить(""+ИмяБатча+" >>> "+ОшибкаТекст,?(Рез=0,"!","!!!"));
			Еррорс=Еррорс+1;
			ОшибкаТексты=ОшибкаТексты+?(ПустаяСтрока(ОшибкаТексты)=1,"",РазделительСтрок)+ОшибкаТекст;
		КонецЕсли;
	КонецЦикла;
	
	Если (ТранзакцияОткатить=1) Тогда
		ОтменитьТранзакцию();
		Сообщить("...Транзакция отменена согласно спец.опциям в тексте запроса","!");
	ИначеЕсли (Транзакция=1) Тогда
		Если Еррорс=0 Тогда
			ЗафиксироватьТранзакцию();
			Сообщить("...Транзакция зафиксирована","i");
		Иначе
			ОтменитьТранзакцию();
			Сообщить("...Транзакция отменена из-за ошибок!!!","!");
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПровайдера=1 Тогда
		Если ЭтоБазаSQL=1 Тогда
			Если РежимВыполнения = 1 Тогда
				Запрос.ВыполнитьИнструкцию("SET NOEXEC OFF");
			ИначеЕсли РежимВыполнения = 2 Тогда
				Запрос.ВыполнитьИнструкцию("SET SHOWPLAN_ALL OFF");
			КонецЕсли;
		КонецЕсли;
		Запрос.Закрыть();
	Иначе
		Запрос.Закрыть();
		База.Закрыть();
	КонецЕсли;
		
	Результаты.УдалитьВсе();

	КС=тзРезультаты.КоличествоСтрок();
	Если КС > 0 Тогда
		тзРезультаты.ВыбратьСтроки();
		Пока тзРезультаты.ПолучитьСтроку() = 1 Цикл
			ИмяБатча=СокрЛП(тзРезультаты.ИмяБатча);
			Результаты.ДобавитьЗначение("Результаты: """+ИмяБатча+"""");
		КонецЦикла;
		Результаты.ТекущаяСтрока(КС);
	КонецЕсли;
	
	Результаты();
	Форма_Результаты_Контроль();
	
	Если ЗапросСтатусОшибки=1 Тогда
		ОчиститьИнфор();
	КонецЕсли;
	
	Если РежимВыполнения = 2 Тогда
		ТекстПланВыполнения.Показать("План выполнения запроса");
	КонецЕсли;
	
	Если (МонопольныйРежим()=1)И(ЭтоБазаSQL=0) Тогда
		Если ЗапросСтатусОшибки<=0 Тогда
			МожноМонопольноDBF=1;
		Иначе
			Если Найти(ОшибкаТексты,"Cannot open file")>0 Тогда
				МожноМонопольноDBF=0;
			Иначе
				//МожноМонопольноDBF=0; // не меняем
			КонецЕсли;
		КонецЕсли;
		СохранитьЗначение("МожноМонопольноDBF",МожноМонопольноDBF);
	КонецЕсли;
		
	Форма.тСостояние.Заголовок("");
	
КонецПроцедуры

Процедура кнВыполнить_Клик()
	
	// выберем режим выполнения
	Меню=СоздатьОбъект("СписокЗначений");
	Команда=СоздатьОбъект("Структура");
	Команда.Вставить("Имя","Выполнить");
	Команда.Вставить("Значение",0);
	ВыбКоманда=Команда;
	Меню.ДобавитьЗначение(Команда,"Выполнить запрос");
	Если (кнВыполнить_ДопРежимы=1) Тогда
		Если (ЭтоБазаSQL=1) Тогда
			Меню.ДобавитьЗначение("-","-");
			Команда=СоздатьОбъект("Структура");
			Команда.Вставить("Имя","Выполнить");
			Команда.Вставить("Значение",1);
			Меню.ДобавитьЗначение(Команда,"Проверить синтаксис и компиляцию");
			
			Команда=СоздатьОбъект("Структура");
			Команда.Вставить("Имя","Выполнить");
			Команда.Вставить("Значение",2);
			Меню.ДобавитьЗначение(Команда,"Вывести план выполнения запроса");
		Иначе
			Меню.ДобавитьЗначение("-","-");
			ПодМеню=СоздатьОбъект("СписокЗначений");
			Меню.ДобавитьЗначение(ПодМеню,"Параметр '"+
											?(ВидПровайдера=1,"Collate","Collating") // Sequence
											+"' ");
			Для о=1 По dbfCollaties.РазмерСписка() Цикл
				КомандаЗначение=dbfCollaties.ПолучитьЗначение(о);
				Команда=СоздатьОбъект("Структура");
				Команда.Вставить("Имя","Выбрать_dbfCollateValue");
				Команда.Вставить("Значение",КомандаЗначение);
				ПодМеню.ДобавитьЗначение(Команда,"'"+КомандаЗначение+"'");
				Если dbfCollateValue=КомандаЗначение Тогда
					ПодМеню.Пометка(о,1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Меню.РазмерСписка()>1 Тогда
		Рез=ФормаСервис.ВыбратьЗначение(Меню,ВыбКоманда,"",0,1);
		Если Рез<>1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		КомандаИмя=ВыбКоманда.Имя;
		КомандаЗначение=ВыбКоманда.Значение;
	Исключение
		Сообщить("кнВыполнить_Клик() >>> "+ОписаниеОшибки(),"!!!");
		Возврат;
	КонецПопытки;
	
	Если КомандаИмя="Выполнить" Тогда
		Выполнить(КомандаЗначение);
	ИначеЕсли КомандаИмя="Выбрать_dbfCollateValue" Тогда
		dbfCollateValue=КомандаЗначение;
	Иначе
		Сообщить(
		"кнВыполнить_Клик() >>> не предусмотренная команда:
		|КомандаИмя='"+КомандаИмя+"'; КомандаЗначение="""+КомандаЗначение+"""","i");
	КонецЕсли;
КонецПроцедуры

Процедура ОчиститьЗапрос()
	Меню=СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение(-1,"Очистить 'результаты' Запроса");
	Меню.ДобавитьЗначение(1,"Выполнить 'перезагрузку' Запроса");
	Меню.ДобавитьЗначение("-","-");
	Меню.ДобавитьЗначение(2,"Очистить Запрос");
	Меню.Пометка(1,1);
	
	Выб=1;
	рез=ФормаСервис.ВыбратьЗначение(Меню,Выб,"",0,3);
	Если рез<>1 Тогда
		Возврат;
	КонецЕсли;

	Если Выб=-1 Тогда
		тзРезультаты.УдалитьСтроки();
		Результат.Очистить();
	ИначеЕсли Выб=1 Тогда
		// 'перезагрузим' запрос ...
		ТекстЗапроса0=ТекстЗапроса;
		qryConsoleXMLData0=qryConsoleXMLData;
		// ... то есть - выполним запрос с пустым текстом
		ТекстЗапроса="";
		Выполнить(0);
		тзРезультаты.УдалитьСтроки();
		Результат.УдалитьСтроки();
		ТекстЗапроса=ТекстЗапроса0;
		qryConsoleXMLData=qryConsoleXMLData0;
		Форма.Обновить(0);
		Сообщить("Запрос 'перезагружен' !","i");
	ИначеЕсли Выб=2 Тогда
		Если (ПустаяСтрока(ТекстЗапроса)=0)ИЛИ(ТПараметров.КоличествоСтрок()>0) Тогда
			ответ=Вопрос(
			"Очистить текст запроса
			|вместе с параметрами ?"+?(Результат.КоличествоСтрок()=0,"","
			|----------------------
			|Результат запроса
			|будет также очищен !"),4,30);
			Если Ответ<>6 Тогда
				// не-да
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ТекстЗапроса="";
		qryConsoleXMLData="";
		ТПараметров.УдалитьСтроки();
		тзРезультаты.УдалитьСтроки();
		Результат.УдалитьСтроки();
	КонецЕсли;
	Форма_Результаты_Контроль();
	ОчиститьИнфор();
	ЗапросСтатусОшибки=-1;
КонецПроцедуры

Функция qryConsole_Создать()
	Попытка
		qryConsole=СоздатьОбъект("AddIn.qryConsole");
	Исключение
		Сообщить("qryConsole_Создать() >>> ошибка: "+ОписаниеОшибки(),"!");
		qryConsole=Неопределено;
		Возврат -1;
	КонецПопытки;
	Возврат +1;
КонецФункции

Процедура qryConsoleКонструктор_Клик()
	Если qryConsole=Неопределено Тогда
		Если qryConsole_Создать()<=0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Форма.qryConsoleUse.Доступность(0);
	Форма.qryConsoleКонструктор.Доступность(0);
	
	ЗапросТекст=qryConsole.ПостроитьЗапрос(qryConsoleXMLData);
	
	Форма.qryConsoleUse.Доступность(1);
	Форма.qryConsoleКонструктор.Доступность(1);
	
	Если ПустаяСтрока(ЗапросТекст)=0 Тогда
		ТекстЗапроса=ЗапросТекст;
		qryConsoleXMLData=qryConsole.ПолучитьXMLЗапроса();
		сзПараметры=qryConsole.ПолучитьПараметрыЗапроса();
		Для о=1 По сзПараметры.РазмерСписка() Цикл
			Параметр="";
			Тип=сзПараметры.ПолучитьЗначение(о,Параметр);
			Стр=0;
			Рез=ТПараметров.НайтиЗначение(Параметр,Стр,"Параметр");
			Если Рез=0 Тогда
				ТПараметров.НоваяСтрока();
				ТПараметров.Параметр = Параметр;
				ТПараметров.ТипПредс = ПроверкаСтрокиТипа(Тип,);
				ТПараметров.ЗначениеПредс = "";
				ТПараметров.Значение = Неопределено;
				ТПараметров.Тип = Тип;
				Продолжить;
			КонецЕсли;
			Тип0=ТПараметров.ПолучитьЗначение(Стр,"Тип");
			Если Тип0<>Тип Тогда
				ТПараметров.УстановитьЗначение(Стр,"ТипПредс",ПроверкаСтрокиТипа(Тип,));
				ТПараметров.УстановитьЗначение(Стр,"ЗначениеПредс","");
				ТПараметров.УстановитьЗначение(Стр,"Значение",Неопределено);
				ТПараметров.УстановитьЗначение(Стр,"Тип",Тип);
				Если ПустаяСтрока(Тип0)=0 Тогда
					Сообщить("В строке "+Стр+" для параметра запроса '"+Параметр+"' изменен тип с '"+Тип0+"' на '"+Тип+"'","i");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТекстЗапроса_Изменение()
	Если ТекстЗапроса0<>СокрЛП(ТекстЗапроса) Тогда
		ТекстЗапроса0=СокрЛП(ТекстЗапроса);
		qryConsoleXMLData="";
	КонецЕсли;
КонецПроцедуры

Процедура гРФормаВыровнять()
	Если гРФорма<>Неопределено Тогда
		Если гФПараметры=0 Тогда
			гРФорма.Выровнять("ТекстЗапроса","R","ТПараметров","R",0);
		Иначе
			гРФорма.Выровнять("ТекстЗапроса","R","ТПараметров","L",-гРФорма.РазмерРазделителя);
		КонецЕсли;
		ПривязатьЭУ();
		гРФорма.Привязать();
	КонецЕсли;
КонецПроцедуры

Процедура ПоказатьПараметры(Корректировать)
	Если гРФорма<>Неопределено Тогда
		Форма.ТПараметров.Видимость(гФПараметры);
		Если ПустоеЗначение(Корректировать)=0 Тогда
			гРасшФормаСкорректировать();
		КонецЕсли;
		гРФормаВыровнять();
	Иначе
		// отобразим и все тут!!!
		гФПараметры=1;
		Форма.ТПараметров.Видимость(гФПараметры);
	КонецЕсли;
КонецПроцедуры

Процедура кнПараметры_Клик()
	Перем Таб;
	
	Меню=СоздатьОбъект("СписокЗначений");
	Если гФПараметры=1 Тогда
		Меню.ДобавитьЗначение(0,"Скрыть параметры запроса");
	Иначе
		Меню.ДобавитьЗначение(0,"Отобразить параметры запроса");
	КонецЕсли;
	
	Меню.ДобавитьЗначение("-","-");
	Меню.ДобавитьЗначение(1,"Распечатать параметры запроса");
	Меню.ДобавитьЗначение(2,"Распечатать результаты запроса");
	
	Меню.ДобавитьЗначение("-","-");
	ПодМеню=СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение(ПодМеню,"Описание...");
	ПодМеню.ДобавитьЗначение(3,"Описание обработки");
	ПодМеню.ДобавитьЗначение(4,"Описание спец-комментариев в тексте запроса");
	
	Выб=0;
	Рез=ФормаСервис.ВыбратьЗначение(Меню,Выб,"",0,0);
	Если Рез<>1 Тогда
		Возврат;
	КонецЕсли;
	Если Выб=0 Тогда
		Если гФПараметры=1 Тогда
			гФПараметры=0;
		Иначе
			гФПараметры=1;
		КонецЕсли;
		ПоказатьПараметры(1);  
	ИначеЕсли  Выб=1 Тогда  
		Если ТПараметров.КоличествоСтрок()=0 Тогда
			Предупреждение("Таблица параметров запроса пуста!",180);
			Возврат;
		КонецЕсли;
		СтрТаб=1;  
		ТабЗаголовок="Параметры запроса"; 
		Печать(ТПараметров,Таб,ТабЗаголовок,СтрТаб);
		Таб.ТолькоПросмотр(1);
		Таб.Опции(,,1,1,Обработка); 
		Если ПустаяСтрока(ТабЗаголовок)=1 Тогда
			Таб.Показать(""+Форма.Заголовок(),,);
		Иначе
			Таб.Показать(""+Форма.Заголовок()+": "+ТабЗаголовок,,);
		КонецЕсли;
	ИначеЕсли  Выб=2 Тогда 
		Если тзРезультаты.КоличествоСтрок()=0 Тогда
			Предупреждение("Таблица результатов запроса пуста!",180);
			Возврат;
		КонецЕсли;
		СтрТаб=1;  
		тзРезультаты.ВыбратьСтроки();
		Пока тзРезультаты.ПолучитьСтроку() = 1 Цикл
			ИмяБатча=СокрЛП(тзРезультаты.ИмяБатча);
			ЗапросРезультат=тзРезультаты.ЗапросРезультат;
			
			ВремяЗапроса=тзРезультаты.ВремяЗапроса;
			ВремяПолучения=тзРезультаты.ВремяПолучения;
			
			ТабЗаголовок=""+тзРезультаты.НомерСтроки+") Результаты: """+ИмяБатча+"""
			|ВремяЗапроса="+ВремяЗапроса;
			Если ПустоеЗначение(ВремяПолучения)=0 Тогда 
				ТабЗаголовок=ТабЗаголовок+"; ВремяПолучения="+ВремяПолучения;
			КонецЕсли;
			
			РежВыполнения=тзРезультаты.РежимВыполнения;
			ЭтоЧислоСтрок=тзРезультаты.ЭтоЧислоСтрок;
			
			Если ТипЗначенияСтр(ЗапросРезультат)="ТаблицаЗначений" Тогда
				// запрос вернул набор строк
				ПечТЗ=ЗапросРезультат; 
				ТабЗаголовок=ТабЗаголовок+";    ЧислоСтрок="+ПечТЗ.КоличествоСтрок()+"; ЧислоКолонок="+ПечТЗ.КоличествоКолонок();
			ИначеЕсли ТипЗначения(ЗапросРезультат)=1 Тогда
				// запрос количество обработанных строк
						
				ПечТЗ=СоздатьОбъект("ТаблицаЗначений");
				ПечТЗ.НоваяКолонка("Результат","Строка",,,"Результат """+ИмяБатча+"""",200);
				ПечТЗ.НоваяСтрока();
				
				Если ЭтоЧислоСтрок=0 Тогда
					// числовое значение рассматривается как результат запроса 
					ПечТЗ.Результат = ЗапросРезультат;
				ИначеЕсли ЭтоЧислоСтрок<0 Тогда
					// числовое значение рассматривается как признак успешности выполнения команды
					Если ЗапросРезультат>0 Тогда
						ПечТЗ.Результат = "Команда завершена успешно.";
					Иначе
						ПечТЗ.Результат = "Команда не выполнена !!!";
					КонецЕсли;
				ИначеЕсли ЭтоЧислоСтрок>0 Тогда
					// числовое значение рассматривается как число обработанных строк
					Если (ПечТЗ = 1) Тогда
						// при проверке синтаксиса - признак успешности
						ПечТЗ.Результат = "Команда завершена успешно.";
					Иначе
						ПечТЗ.Результат = "Обработано строк: " + ЗапросРезультат;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// запрос вернул некую скалярную величину
				ПечТЗ=СоздатьОбъект("ТаблицаЗначений");
				ПечТЗ.НоваяКолонка("Результат","Строка",,,"Результат """+ИмяБатча+"""",200);
				ПечТЗ.НоваяСтрока();
				ПечТЗ.Результат = ЗапросРезультат;
			КонецЕсли;
			
			Печать(ПечТЗ,Таб,ТабЗаголовок,СтрТаб);
		КонецЦикла;
		Таб.ТолькоПросмотр(1);
		Таб.Опции(,,1,1,Обработка); 
		Если ПустаяСтрока(ТабЗаголовок)=1 Тогда
			Таб.Показать(""+Форма.Заголовок(),,);
		Иначе
			Таб.Показать(""+Форма.Заголовок()+": "+ТабЗаголовок,,);
		КонецЕсли;
	ИначеЕсли  Выб=3 Тогда
		ВывестиОписание();
	ИначеЕсли  Выб=4 Тогда
		ВывестиОписаниеСпецКомментариев();
	Иначе
	КонецЕсли;
КонецПроцедуры

Функция ОдынCPP_ПротестироватьОбъекты(ЕрроТекст="")
	Результ=1;
	Попытка
		MetaInfoClasses=СоздатьОбъект("MetaInfoClasses");
		Если MetaInfoClasses.ЭтоSQL_Версия() = 0 Тогда
			ЭтоБазаSQL=0;
		Иначе
			ЭтоБазаSQL=1;
		КонецЕсли;
		Если ЭтоБазаSQL=1 Тогда
			//База=Неопределено;
			Запрос=СоздатьОбъект("ODBCRecordSet");
		Иначе
			База=СоздатьОбъект("OLEDBData");
			//Запрос=Неопределено;
		КонецЕсли;
	Исключение
		ЭтоБазаSQL=-1;
		Результ=-1;
		ЕрроТекст=ОписаниеОшибки();
	КонецПопытки;
	Возврат Результ;
КонецФункции

Функция ОдынCPP_ЗагрузитьВК()
	
	// попытаемся прогрузить 1CPP.dll по умолчанию
	Попытка
		Рез1 = ЗагрузитьВнешнююКомпоненту("1CPP.dll");
	Исключение
		Рез1 = -1;
	КонецПопытки;
	
	Если Рез1<=0 Тогда
		//не получилось - попытаемся тоже самое из каталога обработки
		Если ПустоеЗначение(ОбработкаПуть)=0 Тогда
			Попытка
				Рез1 = ЗагрузитьВнешнююКомпоненту(ОбработкаПуть+"1CPP.dll");
			Исключение
				Рез1 = -1;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Рез1>0 Тогда
		// удалось загрузить 1CPP
		Возврат 1; // ... все ОК, отвалим
	Иначе
		Если МонопольныйРежим()=1 Тогда
			Сообщить("Не удалось загрузить компоненту 1CPP.dll ","!");
		КонецЕсли;
		Возврат -1;
	КонецЕсли;
КонецФункции

Функция FormEx_ИнициироватьОбъекты(ЕрроТекст="")
	Результ=1;
	Попытка
		ФормаСервис=СоздатьОбъект("Сервис"); // объект сервис для выбора из списков меню
		гРасшФорма=СоздатьОбъект("РасширениеФормы"); // расширение формы
		гРасшФорма.УстановитьФорму(Форма);
		//гРасшФорма.ЗагрузитьМодуль();
	Исключение
		Результ=-1;
		ЕрроТекст=ОписаниеОшибки();
	КонецПопытки;
	Если Результ=1 Тогда
		ФормаСервис.ВключитьРаскраскуТаблиц();
	КонецЕсли;
	Возврат Результ;
КонецФункции

Функция FormEx_ЗагрузитьВК()
	// попытаемся прогрузить FormEx.dll по умолчанию	
	Попытка
		Рез2 = ЗагрузитьВнешнююКомпоненту("FormEx.dll");
	Исключение
		Рез2 = -1;
	КонецПопытки;
	
	Если Рез2<=0 Тогда
		//не получилось - попытаемся тоже самое из каталога обработки
		Если ПустоеЗначение(ОбработкаПуть)=0 Тогда
			Попытка
				Рез2 = ЗагрузитьВнешнююКомпоненту(ОбработкаПуть+"FormEx.dll");
			Исключение
				Рез2 = -1;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Рез2>0 Тогда
		// удалось загрузить FormEx
		Возврат 1; // ... все ОК, отвалим
	Иначе
		Если МонопольныйРежим()=1 Тогда
			Сообщить("Не удалось загрузить компоненту FormEx.dll отдельно","!");
		КонецЕсли;
		Возврат -1;
	КонецЕсли;
КонецФункции

Функция Запрос1CPP_Construct(База,Запрос,СообщитьБы=1)
	Если ЭтоБазаSQL=0 Тогда
		База=СоздатьОбъект("OLEDBData");
		Соединение1 =
		"Provider=VFPOLEDB.1; Data Source="+БазаКаталог+"; "+ // Deleted=Yes; 
		"Mode=ReadWrite; Extended Properties=''; DSN=''; "+
		"User ID=''; Password=''; Mask Password=False; Collating Sequence=MACHINE";
		Попытка
			Рез = База.Соединение(Соединение1);
		Исключение
			Рез = -1;
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		Если Рез>0 Тогда
			Запрос = База.СоздатьКоманду();
		Иначе
			Запрос = Неопределено;
			Если ПустоеЗначение(СообщитьБы)=0 Тогда
				Если Рез=0 Тогда
					Ошибка = "Почему-то не удалось подключиться к базе по OLEDB !";
				КонецЕсли;
				Сообщить("OLEDBData:Соединение() error:"+РазделительСтрок+Ошибка,"!");
			КонецЕсли;
			Возврат -1;
		КонецЕсли;
		Возврат +1;
	Иначе
		База=Неопределено;
		Запрос=СоздатьОбъект("ODBCRecordSet");
		Возврат 1;
	КонецЕсли;
КонецФункции // 

Функция Запрос1CPP_DBF_МонопольноТест(Запрос)
	Если МонопольныйРежим()=0 Тогда
		Возврат +1;
	КонецЕсли;
	Если ЭтоБазаSQL=0 Тогда
		Попытка
			Запрос.ВыполнитьИнструкцию("count(*) from 1susers");
		Исключение
			Возврат -1;
		КонецПопытки;
	КонецЕсли;
	Возврат +1;
КонецФункции // 

Процедура Запрос1CPP_Destruct(База,Запрос,ЗакрытьБазу=1)
	Попытка
		Если Запрос<>Неопределено Тогда
			Запрос.Закрыть();
		КонецЕсли;
	Исключение
	КонецПопытки;
	Запрос=Неопределено;
	Если ПустоеЗначение(ЗакрытьБазу)=0 Тогда
		Попытка
			Если База<>Неопределено Тогда
				База.Закрыть();
			КонецЕсли;
		Исключение
		КонецПопытки;
		База=Неопределено;
	КонецЕсли;
КонецПроцедуры

Процедура ТПараметров_Формат_Инит()
	ТПараметров.ВидимостьКолонки("Цвет,Значение,Тип",0);
КонецПроцедуры

Процедура ТПараметров_Инит()
	ТПараметров.Очистить();
	ТПараметров.НоваяКолонка("Цвет","",,,"",0);
	ТПараметров.НоваяКолонка("Параметр","Строка",,,"Параметр",10);
	ТПараметров.НоваяКолонка("ТипПредс","Строка",4,,"Тип",3);
	ТПараметров.НоваяКолонка("ЗначениеПредс","",,,"Значение",15);
	ТПараметров.НоваяКолонка("Значение","",,,"",0);
	ТПараметров.НоваяКолонка("Тип","Строка",,,"",0);
	ТПараметров_Формат_Инит();
КонецПроцедуры

Функция СписокЗначений_в_Строку(СЗ, Подпись="", Знач РазмерОграничение=0)
	Если ТипЗначенияСтр(СЗ)<>"СписокЗначений" Тогда
		Возврат "";
	КонецЕсли;
	
	РС = СЗ.РазмерСписка();
	Если Подпись<>"" Тогда
		// попытаемся установить свойства надписи в диалоге, связанной со списком
		Попытка
			Если РС=0 Тогда
				//Подпись.Цвет(0,0,0);
				Подпись.Доступность(0);
				Возврат "<<пустой список>>";
			Иначе
				//Подпись.Цвет(255,0,0);
				Подпись.Доступность(1);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	СтрВозврата="";
	Если РС=1 Тогда
		ТекЗначение=СЗ.ПолучитьЗначение(1);
		Попытка
			ТекЗначениеВид=ТекЗначение.Вид();
			ТекЗначениеЭтоГруппа=ТекЗначение.ЭтоГруппа();
		Исключение
			ТекЗначениеЭтоГруппа=-1;
		КонецПопытки;
		Если ТекЗначениеЭтоГруппа=1 Тогда
			Если ТипЗначения(ТекЗначение)=11 Тогда
				Если Метаданные.Справочник(ТекЗначениеВид).ОсновноеПредставление="Код" Тогда
					СтрВозврата=ТекЗначение.ПолныйКод();
				Иначе
					СтрВозврата=ТекЗначение.ПолноеНаименование();
				КонецЕсли;
			Иначе
				СтрВозврата=СокрЛП(ТекЗначение);
			КонецЕсли;
		Иначе
			СтрВозврата=СокрЛП(ТекЗначение);
		КонецЕсли;
	Иначе
		Для о=1 По РС Цикл
			ТекЗначение=СЗ.ПолучитьЗначение(о);
			ТекИмя=СокрЛП(ТекЗначение);
			СтрВозврата=СтрВозврата+?(ПустаяСтрока(СтрВозврата)=1,"","; ")+ТекИмя;
		КонецЦикла;
		Если ПустаяСтрока(СтрВозврата)=0 Тогда
			СтрВозврата="{"+СтрВозврата+"}";
		КонецЕсли;
	КонецЕсли;
	
	РазмерОграничение=Число(РазмерОграничение);
	Если (РазмерОграничение<=0) Тогда
		Возврат СтрВозврата;
	Иначе
		Если СтрДлина(СтрВозврата)<=РазмерОграничение Тогда
			// по длине проходит
			Возврат СтрВозврата;
		КонецЕсли;
		Если РС=0 Тогда
			Возврат СтрВозврата;
		ИначеЕсли РС=1 Тогда
			Возврат СтрВозврата;
		ИначеЕсли (РС>=2)И(РС<=4) Тогда
			Возврат "{"+РС+"элемента}";
		Иначе
			Возврат "{"+РС+"элементов}";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрВозврата;
КонецФункции

Процедура ТПараметров_Загрузить(Параметры)
	Если ТПараметров.КоличествоКолонок()=0 Тогда
		ТПараметров_Инит();
	КонецЕсли;
	//Параметры.Выгрузить(ТПараметров);
	ТПараметров.УдалитьСтроки();
	Если (ТипЗначенияСтр(Параметры)<>"ТаблицаЗначений")ИЛИ(ПустоеЗначение(Параметры)=1) Тогда
		// пустое значение или не таблица значений
		Возврат;
	КонецЕсли;
	Попытка
		Параметры.ПолучитьПараметрыКолонки("Параметр");
		Параметры.ПолучитьПараметрыКолонки("Значение");
	Исключение
		// нет нужных колонок - не грузим
		Возврат;
	КонецПопытки;
	Попытка
		Параметры.ПолучитьПараметрыКолонки("Тип");
		ЕстьТип=1;
	Исключение
		ЕстьТип=0;
	КонецПопытки;
	Попытка
		Параметры.ПолучитьПараметрыКолонки("ЗначениеПредс");
		ЕстьЗП=1;
	Исключение
		ЕстьЗП=0;
	КонецПопытки;
	Параметры.ВыбратьСтроки();
	Пока Параметры.ПолучитьСтроку()=1 Цикл
		Параметр=СокрЛП(Параметры.Параметр);
		Если Параметр="" Тогда
			// не задано имя параметра - пропустим молча
			Продолжить;
		КонецЕсли;
		Значение=Параметры.Значение;
		ТипЗнч=ТипЗначенияСтр(Значение);
		Если ЕстьТип=1 Тогда
			// берем из загружаемых данных
			Тип=СокрЛП(Параметры.Тип);
		Иначе
			// определяем по значению - для обратной совместимости
			Попытка
				Тип=ТипЗнч+"."+Значение.Вид();
			Исключение
				Тип=ТипЗнч;
			КонецПопытки;
			Еррор=0;
		КонецЕсли;
		Цвет="";
		ТипПредс=ПроверкаСтрокиТипа(Тип,Еррор);
		Если Еррор<>0 Тогда
			// не совместимый тип - пропустим и сообщим
			Сообщить("У параметра '"+Параметр+"' >>> недопустимый тип - '"+Тип+"'","!");
			Цвет=ЦветКрасныйТекст;
			Тип="";
			ТипПредс="???";
		КонецЕсли;
		Если ЕстьЗП=1 Тогда
			// берем из загружаемых данных
			ЗначениеПредс=СокрЛП(Параметры.ЗначениеПредс);
		Иначе
			// определяем по значению - для обратной совместимости
			Если ТипЗнч="СписокЗначений" Тогда
				ЗначениеПредс=СписокЗначений_в_Строку(Значение,,20);
			Иначе
				ЗначениеПредс=СокрЛП(Значение);
			КонецЕсли;
		КонецЕсли;
		// наконец добавим строчку в таблицу параметров
		ТПараметров.НоваяСтрока();
		ТПараметров.Цвет = Цвет;
		ТПараметров.Параметр = Параметр;
		ТПараметров.ТипПредс = ТипПредс;
		ТПараметров.Значение = Значение;
		ТПараметров.ЗначениеПредс = ЗначениеПредс;
		ТПараметров.Тип = Тип;
	КонецЦикла;
	ТПараметров_Формат_Инит();
КонецПроцедуры

Процедура ПриПовторномОткрытии()
	//Форма.Параметр=глВзятьКонтекст(Контекст); // принудительно вернем контекст через параметр
КонецПроцедуры

Процедура Форма_qryConsole_Контроль()
	Форма.qryConsoleUse.Доступность(qryConsoleЕсть);
	Форма.qryConsoleКонструктор.Доступность(qryConsoleЕсть);
	Если qryConsoleUse=0 Тогда
		Форма.ТекстЗапроса.Доступность(1);
	Иначе
		Форма.ТекстЗапроса.Доступность(0);
	КонецЕсли;
КонецПроцедуры

Процедура qryConsoleUse_Изменение()
	Если (qryConsoleUse=0) Тогда
		Если (ПустаяСтрока(qryConsoleXMLData)=0) Тогда
			ответ=Вопрос(
			"Вы действительно хотите
			|отключить режим редактирования 
			|запроса в конструкторе ?
			|--------------------------------------
			|При этом настройки запроса в диалоге
			|конструктора будут утеряны !!!
			|--------------------------------------
			|ПРОДОЛЖИТЬ ???
			|",4,30);
			Если Ответ<>6 Тогда
				// не-да
				qryConsoleUse=1;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		qryConsoleXMLData="";
	КонецЕсли;
	Если (qryConsole=Неопределено)И(qryConsoleUse=1) Тогда
		Если qryConsole_Создать()<=0 Тогда
			qryConsoleUse=0;
		qryConsoleXMLData="";
		КонецЕсли;
	КонецЕсли;
	Форма_qryConsole_Контроль();
КонецПроцедуры

Процедура сзМетодыВыполнения_Выбор()
	Если (сзМетодыВыполнения.РазмерСписка()=0)ИЛИ(сзМетодыВыполнения.ТекущаяСтрока()=0)  Тогда
		ЗапросЧерезИнструцию=0;
	Иначе
		ЗапросЧерезИнструцию=сзМетодыВыполнения.ПолучитьЗначение(сзМетодыВыполнения.ТекущаяСтрока());
	КонецЕсли;
КонецПроцедуры

Процедура НастройкиФормыВосстановить(Параметры)
	гФПараметры=ВосстановитьЗначение("ФПараметры");
	Если ТипЗначения(гФПараметры)=0 Тогда
		// по умолчанию - отображаем параметры
		гФПараметры=1;
	КонецЕсли;
	ТекстЗапроса=ВосстановитьЗначение("ТекстЗапроса");
	Параметры=ВосстановитьЗначение("Параметры");
	ИмяКаталогаЗапросов=ВосстановитьЗначение("ИмяКаталогаЗапросов");
	ВыводитьТекст=ВосстановитьЗначение("ВыводитьТекстЗапроса");
	RPCMode=ВосстановитьЗначение("RPCMode");
	ЗапросЧерезИнструцию=1;
	qryConsoleUse=ВосстановитьЗначение("qryConsoleUse");
	Если qryConsoleUse<>0 Тогда
		qryConsoleXMLData=СокрЛП(ВосстановитьЗначение("qryConsoleXMLData"));
	Иначе
		qryConsoleXMLData="";
	КонецЕсли;
	dbfCollateValue=СокрЛП(ВосстановитьЗначение("dbfCollateValue"));
	Если ПустаяСтрока(dbfCollateValue)=1 Тогда
		dbfCollateValue=dbfCollaties.ПолучитьЗначение(1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	Перем Параметры;
	
	ПравоЕсть=1;
	ПравоЕсть=ПравоЕсть
	*ПравоДоступа("УдалениеПомеченныхОбъектов")
	*ПравоДоступа("ПоискСсылокНаОбъекты")
	*ПравоДоступа("ИспользованиеЛюбыхВнешнихОтчетов")
	*ПравоДоступа("ГрупповоеПроведениеДокументов")
	*ПравоДоступа("УправлениеБухгалтерскимиИтогами")
	*ПравоДоступа("УправлениеОперативнымиИтогами")
	*ПравоДоступа("МонопольныйРежим")
	*ПравоДоступа("СохранениеИВыгрузкаДанных")
	*ПравоДоступа("АдминистративныеФункции"); // по совокупности крутых прав
	Если (ПравоЕсть=0) Тогда
		Предупреждение("Недостаточно круты права доступа !!!",60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	//Если (НазваниеНабораПрав()<>"Администратор") Тогда
	//	Предупреждение("Недостаточно прав доступа !!!",60);
	//	СтатусВозврата(0);
	//	Возврат;
	//КонецЕсли;
	
	ОкноТипСобытия0=-1;
				
	ЕрроТекст="";
	Рез=ОдынCPP_ПротестироватьОбъекты();
	Если Рез<=0 Тогда
		Рез=ОдынCPP_ЗагрузитьВК();
		Если Рез>0 Тогда
			Рез=ОдынCPP_ПротестироватьОбъекты(ЕрроТекст);
		Иначе
			Сообщить(
			"Отмена открытия обработки '"+Обработка+"'
			|ошибка: "+ОписаниеОшибки(),"!!!");
			Сообщить("Требуется компонента 1CPP.dll","!!!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Рез<=0 Тогда
		Сообщить(
		"Отмена открытия обработки '"+Обработка+"'
		|ошибка тестирования объектов 1CPP.dll: "+ЕрроТекст,"!!!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	ЕрроТекст="";
	Рез=FormEx_ИнициироватьОбъекты();
	Если Рез<=0 Тогда
		Рез=FormEx_ЗагрузитьВК();
		Если Рез>0 Тогда
			Рез=FormEx_ИнициироватьОбъекты(ЕрроТекст);
		Иначе
			Сообщить(
			"Отмена открытия обработки '"+Обработка+"'
			|ошибка: "+ОписаниеОшибки(),"!!!");
			Сообщить("Требуется компонента FormEx.dll или ее ядро в составе компоненты 1CPP.dll","!!!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Рез<=0 Тогда
		Сообщить(
		"Отмена открытия обработки '"+Обработка+"'
		|ошибка создания объектов FormEx.dll: "+ЕрроТекст,"!!!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьСлой("Невидимый",0);
	Форма.ПанельИнструментов(0);
		
	ФормаПараметр=Форма.Параметр;
	СервисИмитацияПодбора=0;
	Если ТипЗначенияСтр(ФормаПараметр)="СписокЗначений" Тогда
		НомерОкна=Число(ФормаПараметр.Получить("НомерОкна"));
		СервисИмитацияПодбора=ФормаПараметр.Получить("СервисИмитацияПодбора");
		КонтекстВладелец=ФормаПараметр.Получить("КонтекстВладелец");
		Если СервисИмитацияПодбора<>0 Тогда
			Если ТипЗначенияСтр(КонтекстВладелец)<>"ГрупповойКонтекст" Тогда
				Сообщить(
				"Отмена открытия обработки '"+Обработка+"' в режиме имитации подбора
				|ошибка: Не передан контекст формы-владельца, вызвывающей подбор !","!!!");
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;

			НастройкиФормыВосстановить(Параметры);
		Иначе
			гФПараметры=Число(ФормаПараметр.Получить("гФПараметры"));
			Если ТипЗначения(гФПараметры)=0 Тогда
				// прочитаем, что запомнили при закрытии
				гФПараметры=ВосстановитьЗначение("ФПараметры");
				Если ТипЗначения(гФПараметры)=0 Тогда
					// по умолчанию - отображаем параметры
					гФПараметры=1;
				КонецЕсли;
			КонецЕсли;
			ТекстЗапроса=ФормаПараметр.Получить("ТекстЗапроса");
			Параметры=ФормаПараметр.Получить("Параметры");
			ИмяКаталогаЗапросов=СокрЛП(ФормаПараметр.Получить("ИмяКаталогаЗапросов"));
			ВыводитьТекст=ФормаПараметр.Получить("ВыводитьТекст");
			RPCMode=ФормаПараметр.Получить("RPCMode");
			ЗапросЧерезИнструцию=ФормаПараметр.Получить("ЗапросЧерезИнструцию");
			qryConsoleUse=СокрЛП(ФормаПараметр.Получить("qryConsoleUse"));
			Если qryConsoleUse<>0 Тогда
				qryConsoleXMLData=СокрЛП(ФормаПараметр.Получить("qryConsoleXMLData"));
			Иначе
				qryConsoleXMLData="";
			КонецЕсли;
			dbfCollateValue=СокрЛП(ФормаПараметр.Получить("qryConsoleUse"));
			Если ПустаяСтрока(dbfCollateValue)=1 Тогда
				dbfCollateValue=dbfCollaties.ПолучитьЗначение(1);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НомерОкна=0;
		НастройкиФормыВосстановить(Параметры);
	КонецЕсли;
	Если ТипЗначенияСтр(Параметры)="ТаблицаЗначений" Тогда
		ТПараметров_Загрузить(Параметры);
	Иначе
		ТПараметров_Инит();
	КонецЕсли;
		
	ТекстЗапроса0=СокрЛП(ТекстЗапроса);
	
	Форма.кнПараметры.Доступность(1);
	Попытка
		гРФорма=СоздатьОбъект("Общие.Форма.Привязка");
	Исключение
		гФПараметры=1;
		Сообщить(
		"В конфигурации не обнаружен класс КОП 'Общие.Форма.Привязка' !
		|Привязки элементов диалога в форме обработки не работают !!!","i");
		гРФорма=Неопределено;
		Форма.кнПараметры.Доступность(0);
	КонецПопытки;
	
	Если гРФорма<>Неопределено Тогда
		гРФорма.УстановитьФорму(Форма);
		ПривязатьЭУ();
	Иначе
	КонецЕсли;
			
	ЭтоБазаSQL=Число(ЭтоБазаSQL);
	МожноМонопольноDBF=0;
	
	Рез=Запрос1CPP_Construct(ФормаБаза,ФормаЗапрос);
	Если ЭтоБазаSQL=0 Тогда
		Если Рез<=0 Тогда
			Запрос1CPP_Destruct(ФормаБаза,ФормаЗапрос);
		Иначе
			Если (МонопольныйРежим()=1) Тогда
				Если Запрос1CPP_DBF_МонопольноТест(ФормаЗапрос)<=0 Тогда
					Предупреждение(
					"Для данной инсталляции 1С-7.7 
					|с данным провайдером данных 
					|для баз формата DBF прямые запросы
					|в монопольном режиме не работают !",30);
					Запрос1CPP_Destruct(ФормаБаза,ФормаЗапрос);
				Иначе
					МожноМонопольноDBF=1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	кнВыполнить_ДопРежимы=0;
	Если ЭтоБазаSQL=1 Тогда
		Форма.ВидПровайдера.Доступность(0);
		Форма.ВидПровайдера1.Доступность(0);
		ВидПровайдера=1;
		BaseInfo="Тип базы: 'SQL'";
		//Форма.кнВыполнить_ДопРежимы.Видимость(1);
		//Форма.кнВыполнить_ДопРежимы.Доступность(1);
	Иначе
		Форма.ВидПровайдера.Доступность(1);
		Форма.ВидПровайдера1.Доступность(1);
		ВидПровайдера=2;
		BaseInfo="Тип базы: 'DBF'";
		//Форма.кнВыполнить_ДопРежимы.Видимость(0);
		//Форма.кнВыполнить_ДопРежимы.Доступность(0);
	КонецЕсли;
	Если МонопольныйРежим()=1 Тогда
		BaseInfo=BaseInfo+" (монопольно!)";
	КонецЕсли;
	BaseInfo=BaseInfo+";   ";
	
	BaseInfo=BaseInfo+"Каталог базы: '"+КаталогИБ()+"'; ";
	BaseInfo=BaseInfo+"Компьютер: '"+ИмяКомпьютера()+"'; ";
	BaseInfo=BaseInfo+"Пользователь: '"+ИмяПользователя()+"'";
	
	Форма.ТекстBaseInfo.Заголовок(BaseInfo);
	
	СкрытьBaseInfo=ВосстановитьЗначение("СкрытьBaseInfo");
	Если СкрытьBaseInfo=0 Тогда
		Форма.ТекстBaseInfo.Видимость(1);
	Иначе
		Форма.ТекстBaseInfo.Видимость(0);
	КонецЕсли;
	
	// ВК для конструктора запроса	
	Попытка
		Рез=ЗагрузитьВнешнююКомпоненту("qryConsole.dll");
	Исключение
		Рез=-1;
	КонецПопытки;
	Если Рез<=0 Тогда
		//не получилось - попытаемся тоже самое из каталога обработки
		Если ПустоеЗначение(ОбработкаПуть)=0 Тогда
			Попытка
				Рез = ЗагрузитьВнешнююКомпоненту(ОбработкаПуть+"qryConsole.dll");
			Исключение
				Рез = -1;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Если Рез>0 Тогда
		qryConsoleЕсть=1;
	Иначе
		qryConsoleЕсть=0;
	КонецЕсли;	

	Если ЭтоБазаSQL=0 Тогда
		// для DBF все-равно не работает, может быть потом ...
		qryConsoleЕсть=0;
	КонецЕсли;
	
	// объект для конструктора запроса
	qryConsole=Неопределено;// вначале - пусть неопределен (возможны неприятные маты при инициализации объекта)
	Если qryConsoleЕсть=0 Тогда
		qryConsoleUse=0;
		qryConsoleXMLData=""
	КонецЕсли;
	Форма_qryConsole_Контроль();
	
	Если (ПустоеЗначение(ИмяКаталогаЗапросов)=1)ИЛИ(ФС.СуществуетФайл(ИмяКаталогаЗапросов)=0) Тогда
		Если ПустаяСтрока(ОбработкаПуть)=1 Тогда
			ИмяКаталогаЗапросов=КаталогПользователя();
		Иначе
			ИмяКаталогаЗапросов=ОбработкаПуть;
		КонецЕсли;
	КонецЕсли;
	Если (ФС.СуществуетФайл(ИмяКаталогаЗапросов)=0) Тогда
		ИмяКаталогаЗапросов=КаталогПользователя();
	КонецЕсли;
	
	ДопЗаголовок="";
	Если НомерОкна>0 Тогда
		ДопЗаголовок=" ("+НомерОкна+")";
	КонецЕсли;
	Форма.Заголовок(ДопЗаголовок,1);
	
	ОчиститьИнфор();
	
	РежимПодбора=0;
	Если (Форма.РежимВыбора()<>0)ИЛИ(СервисИмитацияПодбора<>0) Тогда
		РежимПодбора=1;
	КонецЕсли;
	Если (РежимПодбора=1) Тогда
		Форма.кнПодборОК.Видимость(1);
		Форма.кнНовоеОкно.Видимость(0);
		Если СервисИмитацияПодбора=0 Тогда
			Форма.Заголовок(" - Режим подбора",1);
		Иначе
			Форма.Заголовок(" - Режим имитации подбора",1);
		КонецЕсли;
	Иначе
		Форма.кнПодборОК.Видимость(0);
		Форма.кнНовоеОкно.Видимость(1);
	КонецЕсли;
		
	ЗапросСтатусОшибки=0;
	Форма_Результаты_Контроль();
	ВидПровайдера_Изменение();
	
КонецПроцедуры

Процедура ПриЗакрытии()
	ФормаСервис=Неопределено;
	гРасшФорма=Неопределено;
	гРФорма=Неопределено;
	Запрос1CPP_Destruct(ФормаБаза,ФормаЗапрос);
	qryConsole=Неопределено;
	
	СохранитьЗначение("ТекстЗапроса",ТекстЗапроса);
	СохранитьЗначение("Параметры",ТПараметров);
	СохранитьЗначение("ИмяКаталогаЗапросов",ИмяКаталогаЗапросов);
	СохранитьЗначение("ВыводитьТекстЗапроса",ВыводитьТекст);
	СохранитьЗначение("RPCMode",RPCMode);
	СохранитьЗначение("ФПараметры",гФПараметры);
	СохранитьЗначение("СкрытьBaseInfo",СкрытьBaseInfo);
	
	СохранитьЗначение("qryConsoleUse",qryConsoleUse);
	Если qryConsoleUse<>0 Тогда
		СохранитьЗначение("qryConsoleXMLData",qryConsoleXMLData);
	Иначе
		СохранитьЗначение("qryConsoleXMLData","");
	КонецЕсли;
	СохранитьЗначение("dbfCollateValue",dbfCollateValue);
КонецПроцедуры

Процедура Открыть()
	ИмяФайлаЗапроса="";
	Если ФС.ВыбратьФайл(0,ИмяФайлаЗапроса,ИмяКаталогаЗапросов,"Открыть запрос","Запросы (*.qry)|*.qry","qry")=0 Тогда
		Возврат;
	КонецЕсли;
	ПутьФайлЗапроса=ИмяКаталогаЗапросов+ИмяФайлаЗапроса;
	Если ФС.СуществуетФайл(ПутьФайлЗапроса)=0 Тогда
		Предупреждение(
		"Выбранный файл для открытия
		|запроса не существует !!!",60);
		Возврат;
	КонецЕсли;
	СП=ЗначениеИзФайла(ПутьФайлЗапроса,СП);
	Если ТипЗначенияСтр(СП)<>"СписокЗначений" Тогда
		Предупреждение(
		"В выбранном файле не сохранен запрос !!!",60);
		Возврат;
	КонецЕсли;
	ТекстЗапроса=СП.Получить("ТекстЗапроса");
	Параметры=СП.Получить("Параметры");
	ТПараметров_Загрузить(Параметры);
	qryConsoleXMLData=СокрЛП(СП.Получить("qryConsoleXMLData"));
	Если ПустаяСтрока(qryConsoleXMLData)=0 Тогда
		qryConsoleUse=1;
	КонецЕсли;
	Если qryConsoleЕсть=0 Тогда
		qryConsoleUse=0;
		qryConsoleXMLData=""
	КонецЕсли;
	Форма_qryConsole_Контроль();
	ТекстЗапроса0=СокрЛП(ТекстЗапроса);
КонецПроцедуры

Процедура Сохранить()
	ИмяФайлаЗапроса="";
	Если ФС.ВыбратьФайл(1,ИмяФайлаЗапроса,ИмяКаталогаЗапросов,"Сохранить запрос","Запросы (*.qry)|*.qry","qry")=0 Тогда
		Возврат;
	КонецЕсли;
	
	ПутьФайлЗапроса=ИмяКаталогаЗапросов+ИмяФайлаЗапроса;
	Если ФС.СуществуетФайл(ПутьФайлЗапроса)=1 Тогда
		ответ=Вопрос(
		"Вы действительно хотите
		|сохранить запрос в существующий файл:
		|-------------------------------------------------------
		|"+ПутьФайлЗапроса+"
		|-------------------------------------------------------
		|???",4,30);
		Если Ответ<>6 Тогда
			// не-да
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СП=СоздатьОбъект("СписокЗначений");
	СП.Установить("ТекстЗапроса",ТекстЗапроса);
	СП.Установить("Параметры",ТПараметров);
	Если qryConsoleUse<>0 Тогда
		СП.Установить("qryConsoleXMLData",qryConsoleXMLData);
	Иначе
		СП.Установить("qryConsoleXMLData","");
	КонецЕсли;
	
	ЗначениеВФайл(ПутьФайлЗапроса,СП);
КонецПроцедуры

Процедура гРасшФормаСкорректировать()
	Если гРФорма<>Неопределено Тогда
		Если гФПараметры=1 Тогда
			Элемент1=гРасшФорма.ПолучитьАтрибут("Результаты");
			Элемент2=гРасшФорма.ПолучитьАтрибут("ТПараметров");
			ЛЕ2=0;ВЕ2=0;ШИ2=0;ВЫ2=0;
			Элемент2.ПолучитьКоординаты(ЛЕ2,ВЕ2,ШИ2,ВЫ2);
			Элемент1.УстановитьКоординаты(ЛЕ2,,ШИ2,);
		Иначе
			Элемент1=гРасшФорма.ПолучитьАтрибут("Результаты");
			Элемент2=гРасшФорма.ПолучитьАтрибут("кнПодборОтмена");
			ЛЕ2=0;ВЕ2=0;ШИ2=0;ВЫ2=0;
			Элемент2.ПолучитьКоординаты(ЛЕ2,ВЕ2,ШИ2,ВЫ2);
			Элемент3=гРасшФорма.ПолучитьАтрибут("кнНовоеОкно");
			ЛЕ3=0;ВЕ3=0;ШИ3=0;ВЫ3=0;
			Элемент3.ПолучитьКоординаты(ЛЕ3,ВЕ3,ШИ3,ВЫ3);
			Элемент1.УстановитьКоординаты(ЛЕ2,,+ШИ2+ШИ3,); // ЛЕ3-ЛЕ2
		КонецЕсли;
		Элемент1=гРасшФорма.ПолучитьАтрибут("ТекстBaseInfo");
		ЛЕ1=0;ВЕ1=0;ШИ1=0;ВЫ1=0;
		Элемент1.ПолучитьКоординаты(ЛЕ1,ВЕ1,ШИ1,ВЫ1);
		Элемент2=гРасшФорма.ПолучитьАтрибут("Результаты");
		ЛЕ2=0;ВЕ2=0;ШИ2=0;ВЫ2=0;
		Элемент2.ПолучитьКоординаты(ЛЕ2,ВЕ2,ШИ2,ВЫ2);
		Элемент1.УстановитьКоординаты(ЛЕ1,,ЛЕ2-ЛЕ1,);
	КонецЕсли;
КонецПроцедуры

Процедура ПривязатьЭУ()
	Если гРФорма<>Неопределено Тогда
		Если гФПараметры=1 Тогда
			гРФорма.Привязка("Результаты","","Форма","BR","ТПараметров,Форма");
			гРФорма.Привязка("ТекстBaseInfo","","Форма","BR","qryConsoleUse,Результаты");
			гРФорма.Привязка("кнПодборОтмена,кнПодборОК,кнНовоеОкно","","Форма","L","Форма");
			гРФорма.Привязка("Результат","TH","Форма","W","Форма");
			гРФорма.Привязка("ТПараметров","H","Результат","LW","Форма");
			гРФорма.Привязка("ТекстЗапроса","H","Результат","W","ТПараметров");
			гРФорма.Привязка("тСостояние","T","Форма",,);
			гРФорма.Привязка("тВремя,тВремяЗапроса,тСтрок,тСтрокКол,тКолонок,тКолонокКол,тVer","T","Форма","L","Форма");
		Иначе
			гРФорма.Привязка("Результаты","","Форма","BR","кнПодборОтмена,Форма");
			гРФорма.Привязка("ТекстBaseInfo","","Форма","BR","qryConsoleUse,Результаты");
			гРФорма.Привязка("кнПодборОК,кнПодборОтмена,кнНовоеОкно","","Форма","L","Форма");
			гРФорма.Привязка("Результат","TH","Форма","W","Форма");
			гРФорма.Привязка("ТПараметров","H","Результат","LW","Форма");
			гРФорма.Привязка("ТекстЗапроса","H","Результат","W","Форма");
			гРФорма.Привязка("тСостояние","T","Форма",,);
			гРФорма.Привязка("тВремя,тВремяЗапроса,тСтрок,тСтрокКол,тКолонок,тКолонокКол,тVer","T","Форма","L","Форма");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриИзмененииРазмераОкна(ТипСобытия,Ширина,Высота)
	//Сообщить("ПриИзмененииРазмераОкна() >>> ТипСобытия="+ТипСобытия);
	Если гРФорма<>Неопределено Тогда
		гРФорма.ПриИзмененииРазмераОкна(ТипСобытия,Ширина,Высота);
		Если ФормаУжеОткрыта=0 Тогда
			ОкноТипСобытия0=ТипСобытия;
			Возврат;
		КонецЕсли;
		Корректировать=0;
		Если (ОкноТипСобытия0=2)И(ТипСобытия=0) Тогда
			Корректировать=1;
		ИначеЕсли (ОкноТипСобытия0=0)И(ТипСобытия=2) Тогда
			Корректировать=1;
		КонецЕсли;
		//Корректировать=1;
		//Корректировать=0;
		Если Корректировать<>0 Тогда
			гРасшФормаСкорректировать();
		КонецЕсли;
	КонецЕсли;
	ОкноТипСобытия0=ТипСобытия;
КонецПроцедуры

Процедура ОЖ_ВывестиОписаниеСпецКомментариев()
	ВывестиОписаниеСпецКомментариев();
	гРасшФорма.ОбработкаОжидания("ОЖ_ВывестиОписаниеСпецКомментариев",0);
КонецПроцедуры

Процедура ПослеОткрытия()
	ФормаУжеОткрыта=1;
	Если гРФорма<>Неопределено Тогда
		гРФорма.ПослеОткрытия();
	КонецЕсли;
	Форма.ТПараметров.Видимость(1);
	Если гФПараметры<>0 Тогда
		гФПараметры=1;
		Если ОкноТипСобытия0=2 Тогда
			// в полный экран
			гРасшФормаСкорректировать();
		КонецЕсли;
	Иначе
		// имитируем включение-выключение
		гФПараметры=1;
		ПоказатьПараметры(1);
		гФПараметры=0;
		ПоказатьПараметры(1);
	КонецЕсли;
	УжеПослеОткрытия=1;
	Установка=Цел(ВосстановитьЗначение("ПриОткрытии_НепоказыватьСпецКомментарии"));
	Если Установка<=0 Тогда
		гРасшФорма.ОбработкаОжидания("ОЖ_ВывестиОписаниеСпецКомментариев",100);
	КонецЕсли;
КонецПроцедуры

Процедура ПриДвиженииМыши(Сост,Лево,Верх)
	Если гРФорма<>Неопределено Тогда
		гРФорма.ПриДвиженииМыши(Сост,Лево,Верх);
	КонецЕсли;
КонецПроцедуры

Процедура ПриНажатииЛевойКнопки(Сост,Лево,Верх)
	Если гРФорма<>Неопределено Тогда
		гРФорма.ПриНажатииЛевойКнопки(Сост,Лево,Верх);
	КонецЕсли;
КонецПроцедуры

Процедура ПриОтжатииЛевойКнопки(Сост,Лево,Верх) Экспорт
	Если гРФорма<>Неопределено Тогда
		гРФорма.ПриОтжатииЛевойКнопки(Сост,Лево,Верх);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиОписание()
	Если ТипЗначенияСтр(ТабОписание)="Таблица" Тогда
		ТабОписание.Очистить();
	Иначе
		ТабОписание=СоздатьОбъект("Таблица");
	КонецЕсли;
	ТабОписание.ИсходнаяТаблица("ОбработкаОписание");
	ТабОписание.Вывести();
	ТабОписание.Опции(0,0,0,0);
	ТабОписание.ТолькоПросмотр(1);
	ТабОписание.Показать("Описание обработки:",,1);
КонецПроцедуры

Процедура ВывестиОписаниеСпецКомментариев()
	Если ТипЗначенияСтр(ТабОписаниеСпец)="Таблица" Тогда
		ТабОписаниеСпец.Очистить();
	Иначе
		ТабОписаниеСпец=СоздатьОбъект("Таблица");
	КонецЕсли;
	
	Установка=Цел(ВосстановитьЗначение("ПриОткрытии_НепоказыватьСпецКомментарии"));
	Если Установка<=0 Тогда
		ТекстПриОткрытии="При открытии: ''Показывать''";
	Иначе
		ТекстПриОткрытии="При открытии: ''Не показывать''";
	КонецЕсли;
	РасшифровкаПриОткрытии=СоздатьОбъект("СписокЗначений");
	РасшифровкаПриОткрытии.Установить("!ВидРасшифровки!","!ПриОткрытии_НепоказыватьСпецКомментарии");
	
	ТабОписаниеСпец.ИсходнаяТаблица("СпецКомметарииЗапроса");
	ТабОписаниеСпец.Вывести();
	ТабОписаниеСпец.Опции(0,0,0,0);
	ТабОписаниеСпец.ТолькоПросмотр(1);
	ТабОписаниеСпец.Показать("Описание спец-комментариев в тексте запроса:",,1);
КонецПроцедуры

Процедура ПриНажатииКнопкиКлавиатуры(Код,Альт,Шифт,Котрол,Симвл,ФСО)
	//Сообщить("Код="+Код+"; Альт="+Альт+"; Шифт="+Шифт+"; Котрол="+Котрол+"; Симвл="+Симвл);
	
	Если Форма.АктивныйЭлемент()="ТПараметров" Тогда
		Если гЗащитаОтАльфа=1 Тогда
			Возврат;
		КонецЕсли;
		гЗащитаОтАльфа=1;
		Если Код=45 Тогда
			// INSERT - новая строка
			ТПараметров.НоваяСтрока();
			НомерСтроки=ТПараметров.НомерСтроки;
			
			ТПараметров.Параметр="";
			ТПараметров.Тип="";
			ТПараметров.ТипПредс="???";
			
			ТПараметров.ТекущаяСтрока(НомерСтроки);
			
			Если ТПараметров_Имя_Выбрать()=1 Тогда
				Если ТПараметров_Тип_Выбрать()=1 Тогда
				КонецЕсли;
			Иначе
				ТПараметров.УдалитьСтроку(НомерСтроки);
			КонецЕсли;
		ИначеЕсли Код=120 Тогда
			// F9 - копировать строку
			Параметр=ТПараметров.Параметр;
			Тип=ТПараметров.Тип;
			ТипПредс=ТПараметров.ТипПредс;
			Значение=ТПараметров.Значение;
			ЗначениеПредс=ТПараметров.ЗначениеПредс;
			
			ТПараметров.НоваяСтрока();
			НомерСтроки=ТПараметров.НомерСтроки;
			
			ТПараметров.Цвет="";
			ТПараметров.Параметр=Параметр;
			ТПараметров.Тип=Тип;
			ТПараметров.ТипПредс=ТипПредс;
			ТПараметров.Значение=Значение;
			ТПараметров.ЗначениеПредс=ЗначениеПредс;
			
			ТПараметров.ТекущаяСтрока(НомерСтроки);
			
			Если ТПараметров_Имя_Выбрать()=1 Тогда
				ТПараметров.ТекущаяСтрока(НомерСтроки);
				Если Тип="" Тогда
					Если ТПараметров_Тип_Выбрать()=1 Тогда
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТПараметров.УдалитьСтроку(НомерСтроки);
			КонецЕсли;
		ИначеЕсли Код=46 Тогда
			// DELETE ...
			ТекСтр=ТПараметров.ТекущаяСтрока();
			Если ТекСтр>0 Тогда
				Если Котрол=0 Тогда
					// DELETE - удалить строку
					ТПараметров.УдалитьСтроку(ТекСтр);
					ТекСтр=Мин(ТекСтр,ТПараметров.КоличествоСтрок());
					Если ТекСтр>0 Тогда
						ТПараметров.ТекущаяСтрока(ТекСтр);
					КонецЕсли;
				Иначе
					// CTRL+DELETE - очистить значение
					ТПараметров.Значение=ПолучитьПустоеЗначение(ТПараметров.Тип);
					ТПараметров.ЗначениеПредс=Строка(ТПараметров.Значение);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Код=192 Тогда // CTRL+Ё
			// Код=192; Альт=0; Шифт=0; Котрол=1; Симвл=
			Если Котрол=1 Тогда
				ФСО=0;
				Если СкрытьBaseInfo=0 Тогда
					СкрытьBaseInfo=1;
				Иначе
					СкрытьBaseInfo=0;
				КонецЕсли;
				Если СкрытьBaseInfo=0 Тогда
					Форма.ТекстBaseInfo.Видимость(1);
				Иначе
					Форма.ТекстBaseInfo.Видимость(0);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		гЗащитаОтАльфа=0;
	ИначеЕсли Код=49 Тогда 
		// Код=49; Альт=0; Шифт=0; Котрол=1; Симвл=
		Если (Альт=0)И(Котрол=1) Тогда
			// CTRL+! 
			ФСО=0; 
			Если НеСпрашиватьПроОчистку=0 Тогда
				НеСпрашиватьПроОчистку=1;
			Иначе
				НеСпрашиватьПроОчистку=0;
			КонецЕсли; 
			СохранитьЗначение("НеСпрашиватьПроОчистку",НеСпрашиватьПроОчистку);
		ИначеЕсли (Альт=1)И(Котрол=0) Тогда
			// ALT+! 
			ФСО=0; 
			ВывестиОписаниеСпецКомментариев();
		КонецЕсли;
	ИначеЕсли Код=192 Тогда 
		// Код=192; Альт=0; Шифт=0; Котрол=1; Симвл=
		Если (Альт=0)И(Котрол=1) Тогда
			// CTRL+Ё 
			ФСО=0;
			Если СкрытьBaseInfo=0 Тогда
				СкрытьBaseInfo=1;
			Иначе
				СкрытьBaseInfo=0;
			КонецЕсли;
			Если СкрытьBaseInfo=0 Тогда
				Форма.ТекстBaseInfo.Видимость(1);
			Иначе
				Форма.ТекстBaseInfo.Видимость(0);
			КонецЕсли;
		ИначеЕсли (Альт=1)И(Котрол=0) Тогда
			// ALT+Ё 
			ФСО=0; 
			ВывестиОписание();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПроверкаСтрокиТипа(Знач Тип,Еррор=0,Знач Иерархия=0)
	Тип=СокрЛП(Тип);
	Иерархия=Цел(Иерархия);
	Еррор = 1;
	ИерархияДопустима = 0;
	ТипПредст="???";
	Если Тип="" Тогда
	ИначеЕсли Тип="Число" Тогда 
		ТипПредст="N";
		Еррор = 0;
	ИначеЕсли Тип="Строка" Тогда 
		ТипПредст="S";
		Еррор = 0;
	ИначеЕсли Тип="Дата" Тогда 
		ТипПредст="D";
		Еррор = 0;
	ИначеЕсли Лев(Тип,13)="Перечисление." Тогда 
		Вид=Сред(Тип,14);
		Если Метаданные.Перечисление(Вид).Выбран()=1 Тогда
			ТипПредст="Enu";
			Еррор = 0;
		КонецЕсли;
	ИначеЕсли Лев(Тип,11)="Справочник." Тогда 
		Вид=Сред(Тип,12);
		МетаОбъ=Метаданные.Справочник(Вид);
		Если МетаОбъ.Выбран()=1 Тогда
			ТипПредст="Ref";
			Еррор = 0;
			Если МетаОбъ.КоличествоУровней>1 Тогда
				ИерархияДопустима = 1;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Лев(Тип,9)="Документ." Тогда 
		Вид=Сред(Тип,10);
		Если Метаданные.Документ(Вид).Выбран()=1 Тогда
			ТипПредст="Doc";
			Еррор = 0;
		КонецЕсли;
	ИначеЕсли Лев(Тип,16)="ДокументПозиция." Тогда 
		Вид=Сред(Тип,17);
		Если Метаданные.Документ(Вид).Выбран()=1 Тогда
			ТипПредст="Pos";
			Еррор = 0;
		КонецЕсли;
	ИначеЕсли Тип="Календарь" Тогда 
		Вид="";
		ТипПредст="Cld";
		Если Метаданные.Календарь() > 0 Тогда
			Еррор = 0;
		Иначе
			Еррор = 1;
		КонецЕсли;
	ИначеЕсли Тип="ВидРасчета" Тогда 
		Вид="";
		ТипПредст="Clk";
		Если Метаданные.ВидРасчета() > 0 Тогда
			Еррор = 0;
		Иначе
			Еррор = 1;
		КонецЕсли;
	ИначеЕсли Лев(Тип,11)="ПланСчетов." Тогда 
		Вид=Сред(Тип,12);
		МетаОбъ=Метаданные.ПланСчетов(Вид);
		Если МетаОбъ.Выбран()=1 Тогда
			ТипПредст="Acc";
			Еррор = 0;
			МаскаСчета = СтрЗаменить(МетаОбъ.МаскаСчета,".",РазделительСтрок);
			Если СтрКоличествоСтрок(МаскаСчета)>1 Тогда
				ИерархияДопустима = 1;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Тип="ВидСубконто" Тогда 
		Вид="";
		ТипПредст="SbC";
		Если Метаданные.ВидСубконто()>0 Тогда
			Еррор = 0;
		Иначе
			Еррор = 1;
		КонецЕсли;
	ИначеЕсли Тип="ПланыСчетов" Тогда 
		Вид="";
		ТипПредст="AcP";
		Если Метаданные.ПланСчетов()>0 Тогда
			Еррор = 0;
		Иначе
			Еррор = 1;
		КонецЕсли;
	ИначеЕсли Лев(Тип,14)="СписокСсылок9." Тогда 
		ТипВид=Сред(Тип,15);
		Еррор=0;
		ПроверкаСтрокиТипа(ТипВид,Еррор);
		Если Еррор=0 Тогда
			ТипПредст="VL";
			Еррор = 0;
		КонецЕсли;
	ИначеЕсли Лев(Тип,15)="СписокСсылок13." Тогда 
		ТипВид=Сред(Тип,16);
		Еррор=0;
		ПроверкаСтрокиТипа(ТипВид,Еррор);
		Если Еррор=0 Тогда
			ТипПредст="VL~";
			Еррор = 0;
		КонецЕсли;
	ИначеЕсли Лев(Тип,16)="ИерархияСсылок9." Тогда 
		ТипВид=Сред(Тип,17);
		Еррор=0;
		ПроверкаСтрокиТипа(ТипВид,Еррор,1);
		Если Еррор=0 Тогда
			ТипПредст="VLI";
			Еррор = 0;
		КонецЕсли;
	Иначе
	КонецЕсли;
	Если Иерархия<>0 Тогда
		Если ИерархияДопустима=0 Тогда
			Еррор = 1;
		КонецЕсли;
	КонецЕсли;
	Возврат ТипПредст;
КонецФункции

Функция ПолучитьМенюТипов()
	
	МенюТ=СоздатьОбъект("СписокЗначений");
	МенюV9=СоздатьОбъект("СписокЗначений");
	МенюV13=СоздатьОбъект("СписокЗначений");
	МенюI9=СоздатьОбъект("СписокЗначений");
	
	// примитивные типы
	МенюТ.ДобавитьЗначение("Число","Число (N)");
	МенюТ.ДобавитьЗначение("Строка","Строка (S)");
	МенюТ.ДобавитьЗначение("Дата","Дата (D)");
	
	// перечисления
	МенюТВ=СоздатьОбъект("СписокЗначений");
	МенюТВ1=СоздатьОбъект("СписокЗначений");
	Для Тек=1 По Метаданные.Перечисление() Цикл
		МетаОбъ=Метаданные.Перечисление(Тек);
		Тип="Перечисление."+МетаОбъ.Идентификатор;
		МенюТВ.ДобавитьЗначение(Тип,МетаОбъ.Представление());
		МенюТВ1.ДобавитьЗначение("СписокСсылок9."+Тип,МетаОбъ.Представление());
	КонецЦикла;
	Если МенюТВ.РазмерСписка()>0 Тогда
		МенюТ.ДобавитьЗначение(МенюТВ,"Перечисления (Enu)");
		МенюV9.ДобавитьЗначение(МенюТВ1,"Перечисления (VL)");
	КонецЕсли;
	
	// справочники
	МенюТВ=СоздатьОбъект("СписокЗначений");
	МенюТВ1=СоздатьОбъект("СписокЗначений");
	МенюТВ2=СоздатьОбъект("СписокЗначений");
	МенюТВ3=СоздатьОбъект("СписокЗначений");
	Для Тек=1 По Метаданные.Справочник() Цикл
		МетаОбъ=Метаданные.Справочник(Тек);
		Тип="Справочник."+МетаОбъ.Идентификатор;
		МенюТВ.ДобавитьЗначение(Тип,МетаОбъ.Представление());
		МенюТВ1.ДобавитьЗначение("СписокСсылок9."+Тип,МетаОбъ.Представление());
		МенюТВ2.ДобавитьЗначение("СписокСсылок13."+Тип,МетаОбъ.Представление());
		Еррор=0;
		ПроверкаСтрокиТипа(Тип,Еррор,1);
		Если Еррор=0 Тогда
			МенюТВ3.ДобавитьЗначение("ИерархияСсылок9."+Тип,МетаОбъ.Представление());
		КонецЕсли;
	КонецЦикла;
	Если МенюТВ.РазмерСписка()>0 Тогда
		МенюТ.ДобавитьЗначение(МенюТВ,"Справочники (Ref)");
		МенюV9.ДобавитьЗначение(МенюТВ1,"Справочники (VL)");
		МенюV13.ДобавитьЗначение(МенюТВ2,"Справочники (VL~)");
		МенюI9.ДобавитьЗначение(МенюТВ3,"Справочники (VLI)");
	КонецЕсли;	
	
	// документы
	МенюТВ=СоздатьОбъект("СписокЗначений");
	МенюТВ1=СоздатьОбъект("СписокЗначений");
	МенюТВ2=СоздатьОбъект("СписокЗначений");
	Для Тек=1 По Метаданные.Документ() Цикл
		МетаОбъ=Метаданные.Документ(Тек);
		Тип="Документ."+МетаОбъ.Идентификатор;
		МенюТВ.ДобавитьЗначение(Тип,МетаОбъ.Представление());
		МенюТВ1.ДобавитьЗначение("СписокСсылок9."+Тип,МетаОбъ.Представление());
		МенюТВ2.ДобавитьЗначение("СписокСсылок13."+Тип,МетаОбъ.Представление());
	КонецЦикла;
	Если МенюТВ.РазмерСписка()>0 Тогда
		МенюТ.ДобавитьЗначение(МенюТВ,"Документы (Doc)");
		МенюV9.ДобавитьЗначение(МенюТВ1,"Документы (VL)");
		МенюV13.ДобавитьЗначение(МенюТВ2,"Документы (VL~)");
	КонецЕсли;	
	
	// документы позиция
	МенюТВ=СоздатьОбъект("СписокЗначений");
	Для Тек=1 По Метаданные.Документ() Цикл
		МетаОбъ=Метаданные.Документ(Тек);
		МенюТВ.ДобавитьЗначение("ДокументПозиция."+МетаОбъ.Идентификатор,МетаОбъ.Представление());
	КонецЦикла;
	Если МенюТВ.РазмерСписка()>0 Тогда
		МенюТ.ДобавитьЗначение(МенюТВ,"Позиция документа (Poz)");
	КонецЕсли;	
	
	// Календари - одно системное перечисление
	Если Метаданные.Календарь() > 0 Тогда
		МенюV9.ДобавитьЗначение("СписокСсылок9.Календарь","Календари (VL)");
	КонецЕсли;
	
	// Виды расчетов - одно системное перечисление
	Если Метаданные.ВидРасчета() > 0 Тогда
		МенюV9.ДобавитьЗначение("СписокСсылок9.ВидРасчета","Виды расчетов (VL)");
	КонецЕсли;
	
	// бухгалтерские счета
	МенюТВ=СоздатьОбъект("СписокЗначений");
	МенюТВ1=СоздатьОбъект("СписокЗначений");
	МенюТВ2=СоздатьОбъект("СписокЗначений");
	МенюТВ3=СоздатьОбъект("СписокЗначений");
	Для Тек=1 По Метаданные.ПланСчетов() Цикл
		МетаОбъ=Метаданные.ПланСчетов(Тек);
		Тип="ПланСчетов."+МетаОбъ.Идентификатор;
		МенюТВ.ДобавитьЗначение(Тип,МетаОбъ.Представление());
		МенюТВ1.ДобавитьЗначение("СписокСсылок9."+Тип,МетаОбъ.Представление());
		МенюТВ2.ДобавитьЗначение("СписокСсылок13."+Тип,МетаОбъ.Представление());
		ПроверкаСтрокиТипа(Тип,Еррор,1);
		Если Еррор=0 Тогда
			МенюТВ3.ДобавитьЗначение("ИерархияСсылок9."+Тип,МетаОбъ.Представление());
		КонецЕсли;
	КонецЦикла;
	Если МенюТВ.РазмерСписка()>0 Тогда
		МенюТ.ДобавитьЗначение(МенюТВ,"Бухгалтерские счета (Acc)");
		МенюV9.ДобавитьЗначение(МенюТВ1,"Бухгалтерские счета (VL)");
		МенюV13.ДобавитьЗначение(МенюТВ2,"Бухгалтерские счета (VL~)");
		МенюI9.ДобавитьЗначение(МенюТВ3,"Бухгалтерские счета (VLI)");
	КонецЕсли;
	
	// Виды субконто - одно системное перечисление
	Если Метаданные.ВидСубконто()>0 Тогда
		МенюV9.ДобавитьЗначение("СписокСсылок9.ВидСубконто","Виды субконто (VL)");
	КонецЕсли;
	
	// Планы счетов - одно системное перечисление
	Если Метаданные.ПланСчетов()>0 Тогда
		МенюV9.ДобавитьЗначение("СписокСсылок9.ПланыСчетов","Планы счетов (VL)");
	КонецЕсли;
	
	Если МенюV9.РазмерСписка()>0 Тогда
		МенюТ.ДобавитьЗначение(МенюV9,"Список ссылок Char(9) (VL)");
	КонецЕсли;
	Если МенюV13.РазмерСписка()>0 Тогда
		МенюТ.ДобавитьЗначение(МенюV13,"Список ссылок Char(13) (VL~)");
	КонецЕсли;
	Если МенюI9.РазмерСписка()>0 Тогда
		МенюТ.ДобавитьЗначение(МенюI9,"Иерархия ссылок Char(9) (VLI)");
	КонецЕсли;
		
	Возврат МенюТ;
КонецФункции

Процедура ВвестиСписокЗначенийПараметра(Знач ТипВид)
	ЕстьРедакторСписков=0;
	ИмяОбработкиПодбора="ПодборUChoice";
	ПутьОбработкиПодбора=ОбработкаПуть+ИмяОбработкиПодбора+".ert";
	Если Метаданные.Обработка(ИмяОбработкиПодбора).Выбран()=1 Тогда
		ЕстьРедакторСписков=1;
	Иначе
		Если ФС.СуществуетФайл(ПутьОбработкиПодбора)=1 Тогда
			ЕстьРедакторСписков=2;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРедакторСписков=0 Тогда
		Сообщить("ВвестиСписокЗначенийПараметра() >>> не найдена 'Обработка."+ИмяОбработкиПодбора+"' для редактирования списков значений !","!!!");
		Возврат;
	КонецЕсли;
	
	ТипВид=СтрЗаменить(ТипВид,".",РазделительСтрок);
	Тип="";
	Вид="";
	Если СтрКоличествоСтрок(ТипВид)>=1 Тогда
		Тип=СокрЛП(СтрПолучитьСтроку(ТипВид,1));
	КонецЕсли;
	Если СтрКоличествоСтрок(ТипВид)>=2 Тогда
		Вид=СокрЛП(СтрПолучитьСтроку(ТипВид,2));
	КонецЕсли;
	Если (ПустаяСтрока(Тип)=1) Тогда
		Сообщить("ВвестиСписокЗначенийПараметра() >>> не задан Тип объектов в списке !","!!!");
		Возврат;
	КонецЕсли;
	Если Тип="ПланСчетов"  Тогда
		Тип="Счет";
	КонецЕсли;
		
	Параметр=ТПараметров.Параметр;
	
	сзПараметр=ТПараметров.Значение;
	Если ТипЗначенияСтр(сзПараметр)<>"СписокЗначений" Тогда
		сзПараметр=СоздатьОбъект("СписокЗначений");
		ТПараметров.Значение=сзПараметр;
	КонецЕсли;
	
	Парам = СоздатьОбъект("СписокЗначений");
	Парам.Установить("ИмяВызвавшейФормы","");	
	Парам.Установить("Тип",Тип);	
	Парам.Установить("Вид",Вид);	
	Парам.Установить("БезГрупп",0);
	Парам.Установить("Объекты",сзПараметр);
	Парам.Установить("Заголовок","Редактирование списка параметра '#"+СокрЛП(Параметр)+"':");
		
	Если ЕстьРедакторСписков=1 Тогда
		ОткрытьФормуМодально("Обработка."+ИмяОбработкиПодбора,Парам);
	ИначеЕсли ЕстьРедакторСписков=2 Тогда
		ОткрытьФормуМодально("Обработка",Парам,ПутьОбработкиПодбора);
	КонецЕсли;
	
	ЗначениеПредс=СписокЗначений_в_Строку(сзПараметр,,20);
	ТПараметров.ЗначениеПредс=ЗначениеПредс;

КонецПроцедуры

Процедура ВвестиЗначениеПараметра(Тип)
	Зн=ТПараметров.Значение;
	Если Тип="" Тогда
		Возврат;
	ИначеЕсли Тип="Число" Тогда
		Если ВвестиСтроку(Зн,"Введите число",18)=1 Тогда
			ТПараметров.Значение=Число(Зн);
			ТПараметров.ЗначениеПредс=Строка(Зн);
		КонецЕсли;
	ИначеЕсли Тип="Строка" Тогда
		Если ВвестиСтроку(Зн,"Введите строку",100)=1 Тогда
			ТПараметров.Значение=СокрП(Зн);
			ТПараметров.ЗначениеПредс=СокрП(Зн);
		КонецЕсли;
	ИначеЕсли Тип="Дата" Тогда
		Если ВвестиДату(Зн,"Введите дату")=1 Тогда
			ТПараметров.Значение=Зн;
			ТПараметров.ЗначениеПредс=Формат(Зн,"Д(0)ДДММГГГГ");
		КонецЕсли;
	ИначеЕсли Лев(Тип,12)="Перечисление" Тогда
		Вид=Сред(Тип,14);
		Сп=СоздатьОбъект("СписокЗначений");
		П=Перечисление.ПолучитьАтрибут(Вид);
		Для Тек=1 По П.КоличествоЗначений() Цикл
			Сп.ДобавитьЗначение(П.ЗначениеПоНомеру(Тек));
		КонецЦикла;
		Меню=СоздатьОбъект("СписокЗначений");
		Меню.ДобавитьЗначение(Сп,Тип);
		рез=ФормаСервис.ВыбратьЗначение(Меню,Зн,"Выбор значения перечисления '"+Вид+"':",1,0);
		Если рез=1 Тогда
			ТПараметров.Значение=Зн;
			ТПараметров.ЗначениеПредс=Строка(Зн);
		КонецЕсли;
	ИначеЕсли 
			(Лев(Тип,11) = "Справочник.")ИЛИ
			(Лев(Тип,9) = "Документ.") Тогда
		ФормаКонт = Неопределено;
		ОткрытьПодбор(Тип,,ФормаКонт,0,Зн);
		Если ТипЗначения(ФормаКонт) = 100 Тогда
			Если Лев(Тип,10) = "Справочник" Тогда
				ФормаКонт.ВыборГруппы(1);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Лев(Тип,16)="ДокументПозиция." Тогда
		ТипД="Документ."+Сред(Тип,17);
		ВвестиЗначениеПараметра(Тип);
	ИначеЕсли (Лев(Тип,11) = "ПланСчетов.")  Тогда
		ТипД=СтрЗаменить(Тип,"ПланСчетов.",".Счет");
		ФормаКонт = Неопределено;
		ОткрытьПодбор(Тип,,ФормаКонт,0,Зн);
		Если ТипЗначения(ФормаКонт) = 100 Тогда
			ФормаКонт.ВыборГруппы(1);
		КонецЕсли;
	ИначеЕсли Лев(Тип,14)="СписокСсылок9." Тогда
		ТипВид=Сред(Тип,15);
		ВвестиСписокЗначенийПараметра(ТипВид);
	ИначеЕсли Лев(Тип,15)="СписокСсылок13." Тогда 
		ТипВид=Сред(Тип,16);
		ВвестиСписокЗначенийПараметра(ТипВид);
	ИначеЕсли Лев(Тип,16)="ИерархияСсылок9." Тогда 
		ТипВид=Сред(Тип,17);
		ВвестиСписокЗначенийПараметра(ТипВид);
	Иначе
		Еррор=0; // проверим тип ... на всякий
		ПроверкаСтрокиТипа(Тип,Еррор);
		Если Еррор=1 Тогда
			Сообщить("Не предусмотренный тип патаметра запроса: '"+Тип+"'","!!!");
			Возврат;
		КонецЕсли;
		Если ВвестиЗначение(Зн,"Введите параметр '"+Тип+"'",Тип)=1 Тогда
			ТПараметров.Значение=Зн;
			ТПараметров.ЗначениеПредс=Строка(Зн);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ТПараметров_Имя_Выбрать()
	Параметр=СокрЛП(ТПараметров.Параметр);
	НомерСтроки=ТПараметров.НомерСтроки;
~ВводИмени1:
	ТПараметров.ТекущаяСтрока(НомерСтроки);
	Если ВвестиСтроку(Параметр,"Введите имя параметра",50)=1 Тогда
		Если ПустаяСтрока(Параметр)=1 Тогда
			Перейти ~ВводИмени1;
		КонецЕсли;
		Стр=0;
		Если ТПараметров.НайтиЗначение(Параметр,Стр,"Параметр")=1 Тогда
			ТПараметров.ТекущаяСтрока(Стр);
			Если Стр<>ТПараметров.НомерСтроки Тогда
				ТПараметров.ТекущаяСтрока(Стр);
				Предупреждение("Параметр с таким именем уже существует!");
				Перейти ~ВводИмени1;
			КонецЕсли;
		КонецЕсли;
		ТПараметров.Параметр=Параметр;
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ТПараметров_Тип_Выбрать()
	Тип=СокрЛП(ТПараметров.Тип);
	Тип0=Тип;
	Если ФормаСервис.ВыбратьЗначение(гМеню,Тип,"Выберите тип значения параметра",1,0)=0 Тогда
		Возврат 0;
	КонецЕсли;
	ТПараметров.Тип=Тип;
	ТПараметров.ТипПредс=ПроверкаСтрокиТипа(Тип);
	Если Тип0<>Тип Тогда
		ТПараметров.Цвет="";
		ТПараметров.Значение=ПолучитьПустоеЗначение(ТПараметров.Тип);
		ТПараметров.ЗначениеПредс=Строка(ТПараметров.Значение);
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Процедура ПриТПараметров()
	Если ПустоеЗначение(гМеню)=1 Тогда
		гМеню=ПолучитьМенюТипов();
		Если ПустоеЗначение(гМеню)=1 Тогда
			Предупреждение("В конфигурации отсутствуют типы !!!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТПараметров.КоличествоСтрок()=0 Тогда
		
		Ответ=Вопрос(
		"ИНФОРМАЦИЯ К РАЗМЫШЛЕНИЮ:
		|---------------------------------------------
		|Описание обработки:
		|			- <ALT+Ё>
		|Описание Спец-Комментариев в тексте запроса:
		|			- <ALT+!>
		|---------------------------------------------
		|Скрыть/отобразить информацию о базе:
		|			- <CTRL+Ё>
		|Вкл./Выкл. подтверждение очистки текущих
		|результатов запроса перед выполнением:
		|			- <CTRL+!>
		|---------------------------------------------
		|Добавление параметра	- <INSERT>
		|Копирование параметра	- <F9>
		|Удаление параметра	- <DELETE>
		|Изменение параметра	- <DUBL+CLICK>
		|Очистка параметра	- <CTRL+DELETE>
		|---------------------------------------------
		|ДОБАВИТЬ ПАРАМЕТР ЗАПРОСА ???",4,180);
		Если Ответ<>6 Тогда
			// не-да
			Возврат;
		КонецЕсли;
		
		ТПараметров.НоваяСтрока();
		ТПараметров.Параметр="";
		ТПараметров.Цвет="";
		ТПараметров.Тип="";
		ТПараметров.ТипПредс="???";
		ТПараметров.ТекущаяСтрока(ТПараметров.НомерСтроки);
		
		Если ТПараметров_Имя_Выбрать()=1 Тогда
			Если ТПараметров_Тип_Выбрать()=1 Тогда
			КонецЕсли;
		Иначе
			ТПараметров.УдалитьСтроку(ТПараметров.НомерСтроки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Колонка=ТПараметров.ТекущаяКолонка();
	Если Колонка="Параметр" Тогда
		Если ТПараметров_Имя_Выбрать()=1 Тогда
			Тип=СокрЛП(ТПараметров.Тип);
			Если Тип="" Тогда
				Если ТПараметров_Тип_Выбрать()=1 Тогда
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Колонка="ТипПредс" Тогда
		Если ТПараметров_Тип_Выбрать()=1 Тогда
		КонецЕсли;
	ИначеЕсли Колонка="ЗначениеПредс" Тогда
		Тип=СокрЛП(ТПараметров.Тип);
		Ерр=0;
		ПроверкаСтрокиТипа(Тип,Ерр);
		Если Ерр<>0 Тогда
			Тип="";
		КонецЕсли;
		Если Тип="" Тогда
			Если ТПараметров_Тип_Выбрать()=1 Тогда
			КонецЕсли;
		КонецЕсли;
		ВвестиЗначениеПараметра(Тип);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПодбора(Зн,Конт)
	ТПараметров.Значение=Зн;
	ТПараметров.ЗначениеПредс=Строка(Зн);
КонецПроцедуры

Процедура ПриРезультат()
	Если (Результат.КоличествоСтрок()=0)ИЛИ(Результат.КоличествоКолонок()=0) Тогда
		Возврат;
	КонецЕсли;
	ТекСтр=Результат.ТекущаяСтрока();
	ТекКол=Результат.ТекущаяКолонка();
	ИмяКол="";
	Если (ТекКол="") Тогда 
		Сообщить("Для текущей колонки не задан идентификатор !","i");
		Возврат;
	КонецЕсли;
	Результат.ПолучитьПараметрыКолонки(ТекКол,,,,ИмяКол);
	Если ПустоеЗначение(ИмяКол)=1 Тогда
		ИмяКол=СокрЛП(ТекКол);
	КонецЕсли;
	Если (ТекСтр=0) Тогда
		Возврат;
	КонецЕсли;
	ТекЗна=Результат.ПолучитьЗначение(ТекСтр,ТекКол);
	ОбработкаЯчейкиТаблицы(ТекЗна,1,,"Колонка '"+ИмяКол+"'");
КонецПроцедуры

Процедура ТекстВМодуль()
	Строк=СтрКоличествоСтрок(ТекстЗапроса);
	Текст=СоздатьОбъект("Текст");
	Текст.ДобавитьСтроку("");
	Текст.ДобавитьСтроку("""");
	Для Тек=1 По Строк Цикл
		Текст.ДобавитьСтроку("|"+СтрПолучитьСтроку(ТекстЗапроса,Тек));
	КонецЦикла;
	Текст.ДобавитьСтроку("|");
	Текст.ДобавитьСтроку("""");
	Текст.Показать("Текст запроса  -->  Строковый литерал");
КонецПроцедуры
	
Процедура МодульВТекст()
	Строк=СтрКоличествоСтрок(ТекстЗапроса);
	ЗапросаТекст="";
	Для Тек=1 По Строк Цикл
		ТекСтр=СтрПолучитьСтроку(ТекстЗапроса,Тек);
		
		ТекСтр=СтрЗаменить(ТекСтр,СимволТабуляции," ");
		ТекСтр=СокрЛ(ТекСтр);
		
		ДлинаСтр=СтрДлина(ТекСтр);
		Если ДлинаСтр=0 Тогда
			ЗапросаТекст=ЗапросаТекст+РазделительСтрок;
			Продолжить;
		КонецЕсли;
		Если Лев(ТекСтр,1)="""" Тогда
			ТекСтр=Прав(ТекСтр,ДлинаСтр-1);
		ИначеЕсли Лев(ТекСтр,1)="|" Тогда
			ТекСтр=Прав(ТекСтр,ДлинаСтр-1);
		Иначе
			// оставляем без изменения
		КонецЕсли;
		Если ТекСтр="""" Тогда
			// концевая кавычка после вертикальной черты:
			//"
			//|"
			ТекСтр="";
		КонецЕсли;
		ЗапросаТекст=ЗапросаТекст+РазделительСтрок+ТекСтр;
	КонецЦикла;
	ТекстЗапроса=СокрЛП(ЗапросаТекст);
КонецПроцедуры

Процедура ПреобразоватьТекстВМодуль()
	
~Выбор:
	
	Меню=СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение(0,"Преобразовать содержимое текста запроса:");
	Меню.ДобавитьЗначение("-","-");
	Меню.ДобавитьЗначение(1,"Текст запроса в Сроковый литерал");
	Меню.ДобавитьЗначение("-","-");
	Меню.ДобавитьЗначение(2,"Сроковый литерал в Текст запроса");
	Меню.Пометка(2,1);
		
	Выб=1;
	рез=ФормаСервис.ВыбратьЗначение(Меню,Выб,"",0,3);
	Если рез<>1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Выб=1 Тогда
		//...действия 1: ТЕКСТ в ЛИТЕРАЛ
		ТекстВМодуль();
	ИначеЕсли Выб=2 Тогда
		//...действия 2: ЛИТЕРАЛ в ТЕКСТ
		МодульВТекст();
	ИначеЕсли Выб=0 Тогда
		Перейти ~Выбор;
	КонецЕсли;
	
КонецПроцедуры

Неопределено=ПолучитьПустоеЗначение();

Обработка="Консоль1CQA";

РасположениеФайла(ОбработкаПуть,ОбработкаФайл);
//Сообщить(ОбработкаПуть);
Если ПустоеЗначение(ОбработкаФайл)=1 Тогда
	ОбработкаПуть="";
Иначе
	ОбработкаПуть=ОбработкаПуть+?(Прав(ОбработкаПуть,1)="\","","\")
КонецЕсли;

БазаКаталог=КаталогИБ();
БазаКаталог=БазаКаталог+?(Прав(БазаКаталог,1)="\","","\");
	
ФормаУжеОткрыта=0;
УжеПослеОткрытия=0;

ЦветКрасныйТекст=ЦветРаскраскиТЗ(255,0,0,1);

тзРезультаты.Очистить();
тзРезультаты.НоваяКолонка("ИмяБатча","Строка");
тзРезультаты.НоваяКолонка("ЗапросРезультат");
тзРезультаты.НоваяКолонка("ВремяЗапроса","Число");
тзРезультаты.НоваяКолонка("ВремяПолучения","Число");
тзРезультаты.НоваяКолонка("РежимВыполнения","Число");
тзРезультаты.НоваяКолонка("ЭтоЧислоСтрок","Число");

dbfCollaties=СоздатьОбъект("СписокЗначений");
dbfCollaties.ДобавитьЗначение("MACHINE");
dbfCollaties.ДобавитьЗначение("RUSSIAN");



