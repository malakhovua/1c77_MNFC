Перем ИсторияПоиска;

Перем ВидСправочника;	// справочник, в котором будем искать
Перем МножественныйПоиск;	// НЕТ-закрывать форму после поиска, ДА-заполнить таблицу и продолжить
                            // искать дальше.
Перем ВнКонтекст;		// контекст вызвавшей формы
Перем ЕстьКод, ЕстьНаименование;

Перем ВычислятьОстатокТовара;


Процедура УстановкаФильтраВПрайсе(ПоРодителю,Иерархия)
	Перем ТоварыВПрайсе, ЦеныТоваров;
	Перем ЭлементЦены;
	Перем ВремВалюта, ВремЦена;

	Если (Иерархия=1) Тогда
		// только для иерархического списка
                   
		// очистим список фильтра
		СписокТоваров = СоздатьОбъект("СписокЗначений");
		ТоварыВПрайсе = СоздатьОбъект("Справочник.Прайс_лист");
		ТоварыВПрайсе.ИспользоватьРодителя(ПоРодителю);
		
		// елементы из подгрупп не выбираем
		ТоварыВПрайсе.ВключатьПодчиненные(0);
		ТоварыВПрайсе.ВыбратьЭлементы();
		Пока ТоварыВПрайсе.ПолучитьЭлемент()=1 Цикл
		    Если ТоварыВПрайсе.ЭтоГруппа()=1 Тогда
				СписокТоваров.ДобавитьЗначение(ТоварыВПрайсе.ТекущийЭлемент());
			Иначе
				ЭлементЦены = глВернутьЦену(ТоварыВПрайсе.Товар, ВнКонтекст.ИспКатегория);
				Если ПустоеЗначение(ЭлементЦены) = 0 Тогда
					СписокТоваров.ДобавитьЗначение(ТоварыВПрайсе.ТекущийЭлемент());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		ВнКонтекст.ИспользоватьСписокЭлементов(СписокТоваров);
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
// Название: ПоискЭлемента
// Параметры: 
//		СтрокаПоиска - подстрока, по которой ведется поиск 
//		ФлагПоиска - 0, то поиск по первым символам наименования,
//					иначе - по вхождению
//      ВидПоиска - строка, содержащая идентификатор колонки, по которой ищем.
//		Список - формируемая таблица значений со списком найденных элементов, 
//							содержащая колонки:
//								Идентификатор - идентификатор (ЗначениеВСтрокуВнутр) документа
//								КодЭлемента - код элемента (если в справочнике есть поле "код")
//								Наименование - наименование элемента (если в справочнике есть поле "наименование")
// Возвращаемое значение:
// Вызывается из формул элементов диалога:
// Описание:
//		находит элементы справочника по вхождению строки в наименование и помещает результат
//		в формируемую таблицу значений "Список"
Процедура ПоискЭлемента(СтрокаПоиска, ФлагПоиска, ВидПоиска)
	Перем Индикатор, ИскомыйЭлемент;
	                               
	Список = СоздатьОбъект("ТаблицаЗначений");
	// формируем выходную таблицу значений с результатами поиска
	Список.НоваяКолонка("Идентификатор",,,,"Идентификатор"); 
	Если ЕстьКод=Да Тогда
		Список.НоваяКолонка("КодЭлемента",,,,"Код",8); 
	КонецЕсли;
	Если ЕстьНаименование=Да Тогда
		Список.НоваяКолонка("Наименование",,,,"Наименование",30); 
	КонецЕсли;
	
	Если Найти("Код,Наименование",ВидПоиска)=0 Тогда
		ДопАтрибут = Да;
		Список.НоваяКолонка("ДопАтрибут",,,,ВидПоиска,23); 
	Иначе
		ДопАтрибут = Нет;
	КонецЕсли;
	
	Если ВычислятьОстатокТовара=Да Тогда
		Список.НоваяКолонка("Остаток",,,,"Остаток",15);
	КонецЕсли;
	// колонку с сылкой не показываем
	Список.ВидимостьКолонки("Идентификатор",0);
	
	Поисковая = СокрЛП(СтрокаПоиска);
	Спр = СоздатьОбъект("Справочник."+ВидСправочника);

	Колво=0; // количество обработанных элементов
	КолЭлементов=0; // количество отобранных элементов
	
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()>0 Цикл
		Если Спр.ПометкаУдаления()=1 Тогда
		    //Пропускаем помеченные на удаление
			Продолжить;
		КонецЕсли;

		Если Спр.ЭтоГруппа()=1 Тогда
		    //Пропускаем группы
			Продолжить;
		КонецЕсли;
		Колво = Колво + 1;
		УдовлетворяетУсловию = 0;
	    ЗначениеРеквизита = Спр.ПолучитьАтрибут(ВидПоиска);
		Если ФлагПоиска=1 Тогда
			// по первым символам
		    Если Найти(ВРег(ЗначениеРеквизита),ВРег(Поисковая))=1 Тогда 
				УдовлетворяетУсловию = 1;
			КонецЕсли;	                 
		Иначе	  
			// по подстроке
			Если Найти(ВРег(ЗначениеРеквизита),ВРег(Поисковая))>0 Тогда 
				УдовлетворяетУсловию = 1;
			КонецЕсли;	                 
		КонецЕсли;         
		
		Если УдовлетворяетУсловию = 1 Тогда    
			// добавляем новый элемент в список
			КолЭлементов = КолЭлементов+1;
			Список.НоваяСтрока();
			Список.Идентификатор = ЗначениеВСтрокуВнутр(Спр.ТекущийЭлемент());
			Если ЕстьКод=Да Тогда
				Список.КодЭлемента = Спр.Код;
			КонецЕсли;
			Если ЕстьНаименование=Да Тогда
				Список.Наименование = Спр.Наименование;
			КонецЕсли;
			Если ДопАтрибут = Да Тогда
				Список.ДопАтрибут=ЗначениеРеквизита;
			КонецЕсли;
			
			Если ВычислятьОстатокТовара=Да Тогда
				Если ВидСправочника="ТМЦ" Тогда
					Товар = Спр.ТекущийЭлемент();
				Иначе
					Товар = Спр.ТекущийЭлемент().Товар;
				КонецЕсли;
				
				Если Товар.ВидТМЦ <> перечисление.ВидыТМЦ.Услуга Тогда
					// считаем остатки только по наборам и товарам
					Если ПустоеЗначение(ВнКонтекст.Склад)=0 Тогда
					    Список.Остаток = Регистр.Остатки.СводныйОстаток(ВнКонтекст.Фирма,Товар,ВнКонтекст.Склад,"ОстатокТовара");
					Иначе
						Список.Остаток = Регистр.Остатки.СводныйОстаток(ВнКонтекст.Фирма,Товар,,"ОстатокТовара");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Колво%50=0 Тогда
			Состояние("Отработано - "+Строка(Колво)+ "позиций");
		КонецЕсли;
	КонецЦикла;	

	Поз = 0;
	Если Список.КоличествоСтрок() > 0 Тогда
		Если Список.ВыбратьСтроку(Поз,"Результат поиска") = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Поз > 0 Тогда
	    ИскомыйЭлемент = ЗначениеИзСтрокиВнутр(Список.ПолучитьЗначение(Поз,"Идентификатор"));
	Иначе
		Предупреждение("Элемент не найден!");
		Возврат;
	КонецЕсли;
	
	Если МножественныйПоиск = Да Тогда
		// множественный поиск нужен обычно для товаров.
		// поэтому данный код предпологает, что в таблице подбора
		// будет колонка Количество
		
		// добавим элемент в список вызвавшей формы
		Поз = 0;
		ВнКонтекст.ТаблицаПодбора.НайтиЗначение(ИскомыйЭлемент,Поз,"Элемент");
		
		Если Поз = 0 Тогда
			КолвоВтаблице=0;
		Иначе
			КолвоВтаблице=ВнКонтекст.ТаблицаПодбора.ПолучитьЗначение(Поз,"Количество");
		КонецЕсли;
		
		Колво=1;
		Если Константа.ЗапрашиватьКоличество=Да Тогда
			Если ВвестиЧисло(Колво,"Количество товара '"+ИскомыйЭлемент.Наименование+"'",14,3)=0 Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли;
		Если  Поз>0 Тогда
			ВнКонтекст.ТаблицаПодбора.УстановитьЗначение(Поз,"Количество",КолвоВтаблице+Колво);
		Иначе
		    // Не нашли значит нужно добавить
			ВнКонтекст.ТаблицаПодбора.НоваяСтрока();
			ВнКонтекст.ТаблицаПодбора.Элемент = ИскомыйЭлемент;
			ВнКонтекст.ТаблицаПодбора.Количество = Колво;
			ВнКонтекст.ТаблицаПодбора.Плюс=1;
			ВнКонтекст.ТаблицаПодбора.Минус=2;
		КонецЕсли;
		Если ВидСправочника="Прайс_лист" Тогда
			УстановкаФильтраВПрайсе(ИскомыйЭлемент.Родитель,ВнКонтекст.ИерархическийСписок());
			ВнКонтекст.АктивизироватьОбъект(ИскомыйЭлемент);
		КонецЕсли;
	Иначе
		// через параметр формы вернем значение и закроем форму
		Форма.Параметр = ИскомыйЭлемент;
		Форма.Закрыть();
	КонецЕсли;
		
КонецПроцедуры 	// ПоискЭлемента

//********************************************************************************
Процедура ВыполнитьПоиск()
	Если ПустоеЗначение(СтрПоиска)=1 Тогда
	    Возврат;
	КонецЕсли;
	ПоискЭлемента(СтрПоиска, ПоПервым, ВидПоиска.ПолучитьЗначение(ВидПоиска.ТекущаяСтрока()));
	// активизируем поле ввода с подсрокой поиска
	Активизировать("СтрПоиска");

КонецПроцедуры

//********************************************************************************
Процедура ОбновитьИсторию()
	Поз = ИсторияПоиска.НайтиЗначение(СтрПоиска);
	Если Поз=0 Тогда
	    //не нашли. нужно добавить
		ИсторияПоиска.ВставитьЗначение(1,СтрПоиска);
		// удалим последнне значение
		Если ИсторияПоиска.РазмерСписка()>15 Тогда
		    ИсторияПоиска.УдалитьЗначение(ИсторияПоиска.РазмерСписка());
		КонецЕсли;
	Иначе
		// переместим значение в начало
		ИсторияПоиска.УдалитьЗначение(Поз);
		ИсторияПоиска.ВставитьЗначение(1,СтрПоиска);
	КонецЕсли;
	
	//ВыполнитьПоиск(); 
	Форма.Обновить();
КонецПроцедуры

//********************************************************************************
Процедура ПриОткрытии()
	Перем Парам;
	Перем СписокРеквизитов,СтрокаСпискаРеквизитов;
	Перем Значение,Представление;
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)<>"СписокЗначений" Тогда
		Предупреждение("Через параметр формы должен быть передан список значений,"+РазделительСтрок+
		               "который содержит контекст выбранной формы и вид справочника!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	ВидСправочника		= Парам.Получить("Вид");
	МножественныйПоиск	= Парам.Получить("Флаг");
	ВнКонтекст			= Парам.Получить("Контекст");
	ПоказыватьОстаток   = Парам.Получить("ПоказыватьОстаток");
	
	// заполним список видов поиска
	
	// проверим длину поля Код, если 0, то исключаем
	Если Метаданные.Справочник(ВидСправочника).ДлинаКода>0 Тогда
		ВидПоиска.ДобавитьЗначение("Код","коду");
		ЕстьКод=Да;
	КонецЕсли;
		
	// проверим длину поля Наименование, то исключаем
	Если Метаданные.Справочник(ВидСправочника).ДлинаНаименования>0 Тогда
		ЕстьНаименование=Да;
		ВидПоиска.ДобавитьЗначение("Наименование","наименованию");
	КонецЕсли;
	
	СтрокаСпискаРеквизитов=Парам.Получить("ДобАтрибуты");
	Если ПустоеЗначение(СтрокаСпискаРеквизитов)=0 Тогда
		// Переданна строка, которую нужно преобразовать в список
		СписокРеквизитов=ЗначениеИзСтрокиВнутр(СтрокаСпискаРеквизитов);
		Для Инд=1 По СписокРеквизитов.РазмерСписка() Цикл
			Значение = СписокРеквизитов.ПолучитьЗначение(Инд,Представление);
			ВидПоиска.ДобавитьЗначение(Значение,Представление);
		КонецЦикла;
	КонецЕсли;
	
	Если (Найти("ТМЦ,Прайс_лист",ВидСправочника)>0) и (ПоказыватьОстаток <> "Нет") Тогда
		ВычислятьОстатокТовара=Да;
	Иначе
		ВычислятьОстатокТовара=Нет;
	КонецЕсли;
	
	// восстановим форму
	ВосстановитьЗначение(ВидСправочника+"ПодборТоваров",ИсторияПоиска);
	ПоПервым = ВосстановитьЗначение(ВидСправочника+"ПоискПоПервым");
	ТекСтр = ВосстановитьЗначение(ВидСправочника+"ВидПоиска");
	ТекСтр = ?(ПустоеЗначение(ТекСтр)=1, 1, ТекСтр);
	ВидПоиска.ТекущаяСтрока(ТекСтр);
	
	Если ПоПервым=0 Тогда
	    ПоПервым=1;
	КонецЕсли;
КонецПроцедуры

//********************************************************************************
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр)
	Перем Рез;
	Если ИдентЭлемДиалога = "СтрПоиска" Тогда
		ФлагСтандОбр = 0;
		Если ИсторияПоиска.ВыбратьЗначение(Рез,,,,2) = 1 Тогда
			СтрПоиска = Рез;
	    КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//********************************************************************************
Процедура ПриЗакрытии()
	СохранитьЗначение(ВидСправочника+"ПодборТоваров",ИсторияПоиска);
	СохранитьЗначение(ВидСправочника+"ПоискПоПервым",ПоПервым);
	СохранитьЗначение(ВидСправочника+"ВидПоиска",ВидПоиска.ТекущаяСтрока());
КонецПроцедуры

ИсторияПоиска = СоздатьОбъект("СписокЗначений");