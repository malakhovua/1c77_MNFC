//Класс Общие.Форма.Привязка
//Автор: Дмитрий Ощепков     mailto:dmitro-75@mail.ru
//Версия: 1.7

//класс Общие.Форма.Привязка=Classes\Общие.Форма.Привязка.ert : РасширениеФормы
//{
//	void Привязка(Строка ИДЭлемента, Строка ТипВ="", Строка ИДЭлементаВ="", Строка ТипГ="", Строка ИДЭлементаГ="");
//	void УстановитьФорму(РасширяемаяФорма);
//	void ПриИзмененииРазмераОкна(ТипСобытия, ШиринаФормы, ВысотаФормы);
//	void ПослеОткрытия();
//	void ПриДвиженииМыши(Сост,ЛевоМ,ВерхМ);
//	void ПриНажатииЛевойКнопки(Сост,ЛевоМ,ВерхМ);
//	void ПриОтжатииЛевойКнопки(Сост,ЛевоМ,ВерхМ);
//	void Сбросить();
//	void Выровнять(ИДЭлемента, Граница, ИДЭлементаЦель, ГраницаЦель, Отступ);
//	void Привязать();
//};

Перем ТПривязки;
Перем Флаг;

Перем ВысотаПривязки;
Перем ШиринаПривязки;

Перем НомерСтрокиИзм;
Перем Смещение;
Перем РазмерРазделителя Экспорт;
Перем РасширениеФормы;
Перем ФУстановкаКурсора;

Функция Сам(Конт) Возврат Конт; КонецФункции

Процедура Конструктор()
	РасширениеФормы=Сам(Контекст).ПолучитьБазовыйКласс("РасширениеФормы");
	
	ТПривязки=СоздатьОбъект("ТаблицаЗначений");
	ТПривязки.НоваяКолонка("Атрибут",,,);
	
	ТПривязки.НоваяКолонка("ТипВ","Строка",,);
	ТПривязки.НоваяКолонка("ЭлементВ",,,);
	ТПривязки.НоваяКолонка("ЭлементВ2",,,);
	ТПривязки.НоваяКолонка("ПривязкаВ","Число",,);
	ТПривязки.НоваяКолонка("КоэффициентВ","Число",,);
	
	ТПривязки.НоваяКолонка("ТипГ","Строка",,);
	ТПривязки.НоваяКолонка("ЭлементГ",,,);
	ТПривязки.НоваяКолонка("ЭлементГ2",,,);
	ТПривязки.НоваяКолонка("ПривязкаГ","Число",,);
	ТПривязки.НоваяКолонка("КоэффициентГ","Число",,);
	
	РазмерРазделителя=5;
	
	Флаг=-1;
	НомерСтрокиИзм=0;
	
	MetaInfoClasses=СоздатьОбъект("MetaInfoClasses");
	Если MetaInfoClasses.ПолучитьВерсию()>=1813 Тогда
		ФУстановкаКурсора=1;
	Иначе
		ФУстановкаКурсора=0;
	КонецЕсли;
КонецПроцедуры

Процедура Деструктор()
	РасширениеФормы=0;
КонецПроцедуры

Процедура УстановитьФорму(РасширяемаяФорма) Экспорт
	РасширениеФормы.УстановитьФорму(РасширяемаяФорма);
КонецПроцедуры

Процедура Сбросить() Экспорт
	ТПривязки.УдалитьСтроки();
	Флаг=-1;
КонецПроцедуры

Процедура ПривязкаАтрибута(ИДЭлемента,ТипВ,ИДЭлементаВ,ТипГ,ИДЭлементаГ)
	
	Если Врег(ИДЭлемента)=Врег("ДеревоГруппФормыСпискаСправочника") Тогда
		ЕстьДерево=РасширениеФормы.НайтиАтрибут(1,8);
		Если ЕстьДерево=0 Тогда
			//#error Не найдено ДеревоГруппФормыСпискаСправочника
		КонецЕсли;
		Атрибут=РасширениеФормы.ТекущийАтрибут();
	Иначе
		Атрибут=РасширениеФормы.ПолучитьАтрибут(ИДЭлемента);
	КонецЕсли;
	
	ТПривязки.НоваяСтрока();
	ТПривязки.Атрибут=Атрибут;
	
	Если ПустоеЗначение(ТипВ)=1 Тогда
	ИначеЕсли (ТипВ="T")ИЛИ(ТипВ="H")ИЛИ(ТипВ="TH")ИЛИ(ТипВ="BR") Тогда
		ТПривязки.ТипВ=ТипВ;
	Иначе
		//#error Неверный тип вертикальной привязки
	КонецЕсли;

	Если ТипВ="BR" Тогда
		Поз=Найти(ИДЭлементаВ,",");
		Если Поз=0 Тогда
			//#error Неверный тип горизонтальной привязки
		КонецЕсли;
		
		Верхний=Лев(ИДЭлементаВ,Поз-1);
		Нижний=Сред(ИДЭлементаВ,Поз+1);
		
		Если (Верхний="Форма")ИЛИ(ПустоеЗначение(Верхний)=1) Тогда
		Иначе
			ТПривязки.ЭлементВ=РасширениеФормы.ПолучитьАтрибут(Верхний);
		КонецЕсли;
		
		Если (Нижний="Форма")ИЛИ(ПустоеЗначение(Нижний)=1) Тогда
		Иначе
			ТПривязки.ЭлементВ2=РасширениеФормы.ПолучитьАтрибут(Нижний);
		КонецЕсли;
	Иначе
		Если (ИДЭлементаВ="Форма")ИЛИ(ПустоеЗначение(ИДЭлементаВ)=1) Тогда
		Иначе
			ТПривязки.ЭлементВ=РасширениеФормы.ПолучитьАтрибут(ИДЭлементаВ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(ТипГ)=1 Тогда
	ИначеЕсли (ТипГ="L")ИЛИ(ТипГ="W")ИЛИ(ТипГ="LW")ИЛИ(ТипГ="BR") Тогда
		ТПривязки.ТипГ=ТипГ;
	Иначе
		//#error Неверный тип горизонтальной привязки
	КонецЕсли;

	Если ТипГ="BR" Тогда
		Поз=Найти(ИДЭлементаГ,",");
		Если Поз=0 Тогда
			//#error Неверный тип горизонтальной привязки
		КонецЕсли;
		
		Левый=Лев(ИДЭлементаГ,Поз-1);
		Правый=Сред(ИДЭлементаГ,Поз+1);
		
		Если (Левый="Форма")ИЛИ(ПустоеЗначение(Левый)=1) Тогда
		Иначе
			ТПривязки.ЭлементГ=РасширениеФормы.ПолучитьАтрибут(Левый);
		КонецЕсли;
		
		Если (Правый="Форма")ИЛИ(ПустоеЗначение(Правый)=1) Тогда
		Иначе
			ТПривязки.ЭлементГ2=РасширениеФормы.ПолучитьАтрибут(Правый);
		КонецЕсли;
	Иначе
		Если (ИДЭлементаГ="Форма")ИЛИ(ПустоеЗначение(ИДЭлементаГ)=1) Тогда
		Иначе
			ТПривязки.ЭлементГ=РасширениеФормы.ПолучитьАтрибут(ИДЭлементаГ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура Привязка(ИДЭлемента,ТипВ,ИДЭлементаВ,ТипГ,ИДЭлементаГ) Экспорт
	Стр=ИДЭлемента;
	Пока ПустаяСтрока(Стр)=0 Цикл
		Поз=Найти(Стр,",");
		Если Поз=0 Тогда
			ПривязкаАтрибута(СокрЛП(Стр),ТипВ,ИДЭлементаВ,ТипГ,ИДЭлементаГ);
			Стр="";
		Иначе
			ПривязкаАтрибута(СокрЛП(Лев(Стр,Поз-1)),ТипВ,ИДЭлементаВ,ТипГ,ИДЭлементаГ);
			Стр=Сред(Стр,Поз+1);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПоказателиВШ(ШиринаФ,ВысотаФ)
	Если ПустоеЗначение(ТПривязки.ЭлементВ)=0 Тогда
		ТПривязки.ЭлементВ.ПолучитьКоординаты(,ВысотаФ);
	КонецЕсли;
	
	Если ПустоеЗначение(ТПривязки.ЭлементГ)=0 Тогда
		ТПривязки.ЭлементГ.ПолучитьКоординаты(ШиринаФ);
	КонецЕсли;
КонецПроцедуры

Процедура ПоказателиВШ2(ШиринаФ,ВысотаФ)
	Если ПустоеЗначение(ТПривязки.ЭлементВ2)=0 Тогда
		ТПривязки.ЭлементВ2.ПолучитьКоординаты(,ВысотаФ);
	КонецЕсли;
	
	Если ПустоеЗначение(ТПривязки.ЭлементГ2)=0 Тогда
		ТПривязки.ЭлементГ2.ПолучитьКоординаты(ШиринаФ);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПривязку()
	Перем Лево, Верх, Ширина, Высота;
	
	Если ПустоеЗначение(ШиринаПривязки)=1 Тогда
		ШиринаПривязки=РасширениеФормы.Ширина;
	КонецЕсли;
	Если ПустоеЗначение(ВысотаПривязки)=1 Тогда
		ВысотаПривязки=РасширениеФормы.Высота;
	КонецЕсли;
	
	ШиринаФормы=ШиринаПривязки;
	ВысотаФормы=ВысотаПривязки;
	
	ТПривязки.ВыбратьСтроки();
	Пока ТПривязки.ПолучитьСтроку()=1 Цикл
		
		ШиринаФ=ШиринаФормы;
		ВысотаФ=ВысотаФормы;
		
		ПоказателиВШ(ШиринаФ,ВысотаФ);
		
		Если (ТПривязки.ТипВ="BR")ИЛИ(ТПривязки.ТипГ="BR") Тогда
			ШиринаФ2=ШиринаФормы;
			ВысотаФ2=ВысотаФормы-1;
			ПоказателиВШ2(ШиринаФ2,ВысотаФ2);
		КонецЕсли;
		
		ТПривязки.Атрибут.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
		
		Если ТПривязки.ТипВ="T" Тогда
			ТПривязки.ПривязкаВ=ВысотаФ-Верх;
		ИначеЕсли ТПривязки.ТипВ="H" Тогда
			ТПривязки.ПривязкаВ=ВысотаФ-Верх-Высота;
		ИначеЕсли ТПривязки.ТипВ="TH" Тогда
			ТПривязки.ПривязкаВ=ВысотаФ-Верх-Высота;
			ТПривязки.КоэффициентВ=Высота/ВысотаФ;
		ИначеЕсли ТПривязки.ТипВ="BR" Тогда
			ТПривязки.ПривязкаВ=Верх-ВысотаФ;
			ТПривязки.КоэффициентВ=Верх+Высота-ВысотаФ2;
		КонецЕсли;
		
		Если ТПривязки.ТипГ="L" Тогда
			ТПривязки.ПривязкаГ=ШиринаФ-Лево;
		ИначеЕсли ТПривязки.ТипГ="W" Тогда
			ТПривязки.ПривязкаГ=ШиринаФ-Лево-Ширина;
		ИначеЕсли ТПривязки.ТипГ="LW" Тогда
			ТПривязки.ПривязкаГ=ШиринаФ-Лево-Ширина;
			ТПривязки.КоэффициентГ=Ширина/ШиринаФ;
		ИначеЕсли ТПривязки.ТипГ="BR" Тогда
			ТПривязки.ПривязкаГ=Лево-ШиринаФ;
			ТПривязки.КоэффициентГ=Лево+Ширина-ШиринаФ2;
		КонецЕсли;
		
	КонецЦикла;
	
	Флаг=0;
КонецПроцедуры

Процедура ПриИзмененииРазмераОкна(ТипСобытия,ШФормы,ВФормы) Экспорт
	Перем Лево, Верх, Ширина, Высота;
	
	Если Флаг=-1 Тогда
		//РасширениеФормы=Сам(Контекст).ПолучитьБазовыйКласс("РасширениеФормы");
		ШиринаПривязки=РасширениеФормы.Ширина;
		ВысотаПривязки=РасширениеФормы.Высота;
		Флаг=1;
		Возврат;
	КонецЕсли;
	
	Если Флаг<>0 Тогда
		Возврат;
	КонецЕсли;
	
	//РасширениеФормы=Сам(Контекст).ПолучитьБазовыйКласс("РасширениеФормы");
	ШиринаФормы=РасширениеФормы.Ширина;
	ВысотаФормы=РасширениеФормы.Высота;
	
	ТПривязки.ВыбратьСтроки();
	Пока ТПривязки.ПолучитьСтроку()=1 Цикл
		
		Если НомерСтрокиИзм=ТПривязки.НомерСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		ШиринаФ=ШиринаФормы;
		ВысотаФ=ВысотаФормы;
		ПоказателиВШ(ШиринаФ,ВысотаФ);
		
		Если (ТПривязки.ТипВ="BR")ИЛИ(ТПривязки.ТипГ="BR") Тогда
			ШиринаФ2=ШиринаФормы;
			ВысотаФ2=ВысотаФормы;
			ПоказателиВШ2(ШиринаФ2,ВысотаФ2);
		КонецЕсли;
		
		ТПривязки.Атрибут.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
		
		Если ТПривязки.ТипВ="T" Тогда
			Верх=ВысотаФ-ТПривязки.ПривязкаВ;
		ИначеЕсли ТПривязки.ТипВ="H" Тогда
			Высота=ВысотаФ-Верх-ТПривязки.ПривязкаВ;
		ИначеЕсли ТПривязки.ТипВ="TH" Тогда
			Высота=Окр(ВысотаФ*ТПривязки.КоэффициентВ);
			Верх=ВысотаФ-Высота-ТПривязки.ПривязкаВ;
		ИначеЕсли ТПривязки.ТипВ="BR" Тогда
			Верх=ВысотаФ+ТПривязки.ПривязкаВ;
			Высота=ВысотаФ2+ТПривязки.КоэффициентВ-Верх;
		КонецЕсли;
		
		Если ТПривязки.ТипГ="L" Тогда
			Лево=ШиринаФ-ТПривязки.ПривязкаГ;
		ИначеЕсли ТПривязки.ТипГ="W" Тогда
			Ширина=ШиринаФ-Лево-ТПривязки.ПривязкаГ;
		ИначеЕсли ТПривязки.ТипГ="LW" Тогда
			Ширина=Окр(ШиринаФ*ТПривязки.КоэффициентГ);
			Лево=ШиринаФ-Ширина-ТПривязки.ПривязкаГ;
		ИначеЕсли ТПривязки.ТипГ="BR" Тогда
			Лево=ШиринаФ+ТПривязки.ПривязкаГ;
			Ширина=ШиринаФ2+ТПривязки.КоэффициентГ-Лево;
		КонецЕсли;
		
		ТПривязки.Атрибут.УстановитьКоординаты(Лево, Верх, Ширина, Высота);
	КонецЦикла;
КонецПроцедуры

Процедура ПослеОткрытия() Экспорт
	Если Флаг=-1 Тогда
		ПриИзмененииРазмераОкна(0,0,0);
	КонецЕсли;
	ЗаполнитьПривязку();
	ПриИзмененииРазмераОкна(0,0,0);
КонецПроцедуры

Процедура ПриНажатииЛевойКнопки(Сост,ЛевоМ,ВерхМ) Экспорт
	Перем Лево, Верх, Ширина, Высота;
	
	ТПривязки.ВыбратьСтроки();
	Пока ТПривязки.ПолучитьСтроку()=1 Цикл
		//Если ТПривязки.Атрибут.Видимость=1 Тогда //Замечено что свойство не корректно работает с ТЗ
			Если ТПривязки.ТипГ="LW" Тогда
				ТПривязки.Атрибут.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
				Если (ЛевоМ>=Лево-РазмерРазделителя)И(ЛевоМ<Лево) Тогда
					Если (ВерхМ>=Верх)И(ВерхМ<Верх+Высота) Тогда
						НомерСтрокиИзм=ТПривязки.НомерСтроки;
						Смещение=Лево-ЛевоМ;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТПривязки.ТипВ="TH" Тогда
				ТПривязки.Атрибут.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
				Если (ВерхМ>=Верх-РазмерРазделителя)И(ВерхМ<Верх) Тогда
					Если (ЛевоМ>=Лево)И(ЛевоМ<Лево+Ширина) Тогда
						НомерСтрокиИзм=ТПривязки.НомерСтроки;
						Смещение=Верх-ВерхМ;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗавершитьТрэкинг()
	Перем Лево, Верх, Ширина, Высота;
	
	ТПривязки.ПолучитьСтрокуПоНомеру(НомерСтрокиИзм);
	Атрибут=ТПривязки.Атрибут;
	Атрибут.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
	//РасширениеФормы=Сам(Контекст).ПолучитьБазовыйКласс("РасширениеФормы");
	Если ТПривязки.ТипГ="LW" Тогда
		ТПривязки.КоэффициентГ=Ширина/РасширениеФормы.Ширина;
	ИначеЕсли ТПривязки.ТипВ="TH" Тогда
		ТПривязки.КоэффициентВ=Высота/РасширениеФормы.Высота;
	КонецЕсли;
	НомерСтрокиИзм=0;
КонецПроцедуры

Процедура Трэкинг(ЛевоМ,ВерхМ)
	Перем Лево, Верх, Ширина, Высота;
	
	ТПривязки.ПолучитьСтрокуПоНомеру(НомерСтрокиИзм);
	Атрибут=ТПривязки.Атрибут;
	Атрибут.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
	
	Если ТПривязки.ТипГ="LW" Тогда
		Л=ЛевоМ+Смещение;
		Ширина=Ширина+Лево-Л;
		Лево=Л;
	ИначеЕсли ТПривязки.ТипВ="TH" Тогда
		В=ВерхМ+Смещение;
		Высота=Высота+Верх-В;
		Верх=В;
	КонецЕсли;
	Атрибут.УстановитьКоординаты(Лево, Верх, Ширина, Высота);
	
	ПриИзмененииРазмераОкна(0,0,0);
КонецПроцедуры

Процедура ПриОтжатииЛевойКнопки(Сост,ЛевоМ,ВерхМ) Экспорт
	Если НомерСтрокиИзм<>0 Тогда
		ЗавершитьТрэкинг();
	КонецЕсли;
КонецПроцедуры

Процедура УстановкаКурсора(ЛевоМ,ВерхМ)
	Перем Лево, Верх, Ширина, Высота;
	
	Если ФУстановкаКурсора=0 Тогда
		Возврат;
	КонецЕсли;
	
	Курсор=0;
	ТПривязки.ВыбратьСтроки();
	Пока ТПривязки.ПолучитьСтроку()=1 Цикл
		Если ТПривязки.ТипГ="LW" Тогда
			ТПривязки.Атрибут.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
			Если (ЛевоМ>=Лево-РазмерРазделителя)И(ЛевоМ<Лево) Тогда
				Если (ВерхМ>=Верх)И(ВерхМ<Верх+Высота) Тогда
					Курсор=8;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТПривязки.ТипВ="TH" Тогда
			ТПривязки.Атрибут.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
			Если (ВерхМ>=Верх-РазмерРазделителя)И(ВерхМ<Верх) Тогда
				Если (ЛевоМ>=Лево)И(ЛевоМ<Лево+Ширина) Тогда
					Курсор=9;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//+добавил,Осипов, 15.02.2011
	Если Курсор<=0 Тогда
		Курсор=-1; // для совместимости с FormEx205x
	КонецЕсли;
	//+добавил,//Осипов, 15.02.2011
	
	РасширениеФормы.УстановитьКурсор(Курсор);
КонецПроцедуры

Процедура ПриДвиженииМыши(Сост,ЛевоМ,ВерхМ) Экспорт
	Если НомерСтрокиИзм<>0 Тогда
		Если Сост=0 Тогда
			ЗавершитьТрэкинг();
		Иначе
			Трэкинг(ЛевоМ,ВерхМ);
		КонецЕсли;
	КонецЕсли;
	УстановкаКурсора(ЛевоМ,ВерхМ);
КонецПроцедуры

Процедура Выровнять(ИДЭлемента, Граница, ИДЭлементаЦель, ГраницаЦель, Отступ) Экспорт
	Перем Лево, Верх, Ширина, Высота;
	Перем ЛевоЦ, ВерхЦ, ШиринаЦ, ВысотаЦ;
	
	//РасширениеФормы=Сам(Контекст).ПолучитьБазовыйКласс("РасширениеФормы");
	
	Атрибут=РасширениеФормы.ПолучитьАтрибут(ИДЭлемента);
	Атрибут.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
	
	АтрибутЦель=РасширениеФормы.ПолучитьАтрибут(ИДЭлементаЦель);
	АтрибутЦель.ПолучитьКоординаты(ЛевоЦ, ВерхЦ, ШиринаЦ, ВысотаЦ);
	
	Если Граница="R" Тогда
		Если ГраницаЦель="R" Тогда
			Ширина=ЛевоЦ+ШиринаЦ-Лево+Отступ;
		ИначеЕсли ГраницаЦель="L" Тогда
			Ширина=ЛевоЦ-Лево+Отступ;
		Иначе
			//#error Неверно указана граница цель
		КонецЕсли;
	ИначеЕсли Граница="L" Тогда
		Если ГраницаЦель="R" Тогда
			Л=ЛевоЦ+ШиринаЦ+Отступ;
			Ширина=Лево+Ширина-Л;
			Лево=Л;
		ИначеЕсли ГраницаЦель="L" Тогда
			Л=ЛевоЦ+Отступ;
			Ширина=Лево+Ширина-Л;
			Лево=Л;
		Иначе
			//#error Неверно указана граница цель
		КонецЕсли;
	ИначеЕсли Граница="B" Тогда
		Если ГраницаЦель="B" Тогда
			Высота=ВерхЦ+ВысотаЦ-Верх+Отступ;
		ИначеЕсли ГраницаЦель="T" Тогда
			Высота=ВерхЦ-Верх+Отступ;
		Иначе
			//#error Неверно указана граница цель
		КонецЕсли;
	ИначеЕсли Граница="T" Тогда
		Если ГраницаЦель="B" Тогда
			В=ВерхЦ+ВысотаЦ+Отступ;
			Высота=Верх+Высота-В;
			Верх=В;
		ИначеЕсли ГраницаЦель="T" Тогда
			В=ВерхЦ+Отступ;
			Высота=Верх+Высота-В;
			Верх=В;
		Иначе
			//#error Неверно указана граница цель
		КонецЕсли;
	Иначе
		//#error Неверно указана граница
	КонецЕсли;
	Атрибут.УстановитьКоординаты(Лево, Верх, Ширина, Высота);
	Сбросить();
КонецПроцедуры

Процедура Привязать() Экспорт
	//РасширениеФормы=Сам(Контекст).ПолучитьБазовыйКласс("РасширениеФормы");
	ШиринаПривязки=РасширениеФормы.Ширина;
	ВысотаПривязки=РасширениеФормы.Высота;
	ЗаполнитьПривязку();
КонецПроцедуры
