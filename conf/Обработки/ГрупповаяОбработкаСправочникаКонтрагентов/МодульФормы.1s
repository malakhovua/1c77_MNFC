// ===============================
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
// ===============================

Перем ИмяФормы;

Перем СписокПозиций;	// список обрабатываемых позиций
Перем Значение;			// значение, определяющее действие
                               
Перем НачальнаяДата;		// дата, на которую сбрасывается ГП
        
Перем ЗначениеПометки,ЗначениеНеПометки;
Перем Комментарий;

// ===============================
// "СЛУЖЕБНЫЕ" ПРОЦЕДУРЫ И ФУНКЦИИ
// ===============================

// ===============================
// Название: ДоступностьКнопкиВыбораЗначения
// Параметры: 
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// 
// Описание:
//    в зависимости от выбранного действия изменяет доступность кнопки выбора значения
//
Процедура ДоступностьКнопкиВыбораЗначения()
	// если Пометить на удаление, Снять пометку удаления, Удалить из всех категорий
	Если (Действие.ТекущаяСтрока()<=2)ИЛИ(Действие.ТекущаяСтрока()=16) Тогда
		Форма.КнопкаВыбораЗначения.Доступность(0);
	Иначе
		Форма.КнопкаВыбораЗначения.Доступность(1);
	КонецЕсли;
КонецПроцедуры   // ДоступностьКнопкиВыбораЗначения

// ===============================
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА
// ===============================

// ===============================
// Название: ПерерисовкаСписка
// Параметры:           
//   НомерКолонки - номер перерисовываемой колонки, если 0 - то перерисовываем все
//   НачальноеЗаполнение - если 1, то заполняем таблицу с нуля
//
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Флаг 
// Описание:
//    перерисовывает таблицу обрабатываемых позиций
//
Процедура ПерерисовкаСписка(НомерКолонки=0,НачальноеЗаполнение=0)
    Перем НомерСтроки;
	Перем Контр;
	Перем СписокКатегорий,Категории;       
	
	Таблица.ВыбратьСтроки();	
	
	Категории = СоздатьОбъект("Справочник.КатегорииКонтрагентов");
	
	КвоПозиций = СписокПозиций.РазмерСписка();
	
	Для НомерСтроки = 1 По КвоПозиций Цикл
	               
		Если (НомерСтроки%10=0) Тогда
			Состояние("Перерисовка таблицы: "+Строка(НомерСтроки)+" из "+Строка(КвоПозиций));
		КонецЕсли;
		
		
		Если НачальноеЗаполнение = 1 Тогда   
			
			Контр = СписокПозиций.ПолучитьЗначение(НомерСтроки);
        
			Таблица.НоваяСтрока(НомерСтроки);
			Таблица.ПолучитьСтрокуПоНомеру(НомерСтроки);
			
			Таблица.Контрагент = Контр;
			Таблица.Пометка = ЗначениеПометки;
		Иначе
			Таблица.ПолучитьСтроку();
			Если Таблица.Пометка=ЗначениеНеПометки Тогда
				Продолжить;
			КонецЕсли;	
			
			Контр = Таблица.Контрагент;
		КонецЕсли;	
	    
		Контр.ИспользоватьДату(ВыбДата,1);
		
		Если (НомерКолонки=0) Или (НомерКолонки=2) Тогда // наименование
			Таблица.Наименование = Контр.Наименование;
		КонецЕсли;
									
		Если (НомерКолонки=0) Или (НомерКолонки=3) Тогда // вид
			Таблица.Вид = Строка(Контр.ВидКонтрагента);
        КонецЕсли;   
			
		Если (НомерКолонки=0) Или (НомерКолонки=4) Тогда // группа
			Таблица.Группа = ?(Контр.Родитель.Выбран()=1,Контр.Родитель.Наименование,"");
        КонецЕсли;   
	
		Если (НомерКолонки=0) Или (НомерКолонки=5) Тогда // статус
			Таблица.Статус = ?(Контр.ПометкаУдаления()=1,"Помечен на уд.","");
        КонецЕсли;   
	    
		Если (НомерКолонки=0) Или (НомерКолонки=6) Тогда // Категории
			
			Категории.ИспользоватьВладельца(Контр.ТекущийЭлемент());
			Категории.ВыбратьЭлементы();                             
			СписокКатегорий = "";
			Пока Категории.ПолучитьЭлемент()>0 Цикл                      
		    	СписокКатегорий = СписокКатегорий + ", "+Категории.Категория.Наименование
												  + ?(Категории.ПометкаУдаления()=1,"(уд)","");
			КонецЦикла;
			Таблица.Категории = Сред(СписокКатегорий,3);
        КонецЕсли;   

		Если (НомерКолонки=0) Или (НомерКолонки=7) Тогда // Категория цен покупателю
			Таблица.КатегорияЦенПокупателю = Контр.КатегорияЦен.Наименование;
        КонецЕсли;   
		Если (НомерКолонки=0) Или (НомерКолонки=12) Тогда // Категория цен покупателю
			Таблица.СхемаРасчетаБонуса = Контр.СхемаРасчетаБонуса;
        КонецЕсли;                               
		Если (НомерКолонки=0) Или (НомерКолонки=13) Тогда // Торг. пред.
			Таблица.ТорПред = Контр.ТорПред;
        КонецЕсли;   

		Если (НомерКолонки=0) Или (НомерКолонки=8) Тогда // Категория цен поставщика
			Таблица.КатегорияЦенПоставщика = Контр.КатегорияЦенПоставщика.Наименование;
        КонецЕсли;   
		
		Если (НомерКолонки=0) Или (НомерКолонки=9) Тогда // кредит покупателю
			Таблица.КредитПокупателю = Строка(Контр.СуммаКредита)+" "
									+  СокрЛП(Контр.ВалютаКредита.Кратко)+" на "
									+  Строка(Контр.Глубина)+ " дн.";
        КонецЕсли;   
	    
		Если (НомерКолонки=0) Или (НомерКолонки=10) Тогда // кредит поставщика
			Таблица.КредитПоставщика = Строка(Контр.СуммаКредитаПоставщика)+" "
									+  СокрЛП(Контр.ВалютаКредитаПоставщика.Кратко)+" на "
									+  Строка(Контр.ГлубинаКредитаПоставщика)+ " дн.";
        КонецЕсли;   
	    
		Если (НомерКолонки=0) Или (НомерКолонки=11) Тогда // Комментарий
			Таблица.Комментарий = СокрЛП(Контр.Комментарий);
		КонецЕсли; 
		
		Если (НомерКолонки=0) Или (НомерКолонки=20) Тогда // Комментарий
			Таблица.СкидкаНаВес = СокрЛП(Контр.СкидкаНаВес);
		КонецЕсли; 
		
		Если (НомерКолонки=0) Или (НомерКолонки=21) Тогда // Комментарий
			Таблица.КаналПродаж = Контр.КаналПродаж;
        КонецЕсли;  
        
	КонецЦикла;

КонецПроцедуры

// ===============================
// Название: СортироватьТаблицу
// Параметры: 
//   Режим
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//   Кнопка "Сортировать" и список "СписокКолонокСортировки"
// Описание:
//    сортирует таблицу по колонке
//
Процедура СортироватьТаблицу()
	Перем СпособСортировки;        
	
	Если СписокКолонокСортировки.ТекущаяСтрока()>0 Тогда
		СпособСортировки = СписокКолонокСортировки.ПолучитьЗначение(СписокКолонокСортировки.ТекущаяСтрока());
		Если НаправлениеСортировки.ТекущаяСтрока()>0 Тогда
			СпособСортировки = СпособСортировки + НаправлениеСортировки.ПолучитьЗначение(НаправлениеСортировки.ТекущаяСтрока());
		КонецЕсли;	
		Таблица.Сортировать(СпособСортировки); 
	КонецЕсли;	           
	
КонецПроцедуры	// СортироватьТаблицу

// ===============================
// Название: ГрупповаяПометка
// Параметры: 
//   Режим
//		1 - пометить все
//		2 - снять пометку
//		3 - инавертировать пометку
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Кнопки "Пометить все","Снять пометку","Инвертировать пометку".
// Описание:
//    в зависимости от значения параметра выполняет пометку всех позиций, 
//    снимает пометку со всех позиций или инвертирует ее
//
Процедура ГрупповаяПометка(Режим)
	Таблица.ВыбратьСтроки();
	Пока Таблица.ПолучитьСтроку()>0 Цикл
		Если Режим=1 Тогда
			Таблица.Пометка = ЗначениеПометки;
		ИначеЕсли Режим=2 Тогда
			Таблица.Пометка = ЗначениеНеПометки;
		ИначеЕсли Режим=3 Тогда
			Таблица.Пометка = 3 - Таблица.Пометка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


// ===============================
// Название: ВыборЭлементаВСпискеДействий
// Параметры:
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Список "Действие"
// Описание:
//   обнуляем значение и изменяет доступность кнопки выбора значения
//
Процедура ИзмДействие()
	ЗначениеВВидеСтроки = "";
	Значение = 0;
	ДоступностьКнопкиВыбораЗначения();
КонецПроцедуры


// ===============================
// Название: ВыборЗначения
// Параметры:
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Кнопка "Значение",.
// Описание:
//   открывает окно выбора значения
//
Процедура ВыборЗначения()
	Перем ВыбЗначение, фВыбрали;

	Если Действие.ТекущаяСтрока()=3 Тогда // Перенести в группу
		ВыбЗначение = СоздатьОбъект("Справочник.Контрагенты");
		ВыбЗначение.ВыборГруппы(1);
		фВыбрали = ВыбЗначение.Выбрать("Выбор группы контрагентов",);
		Если фВыбрали = 1 Тогда
			Если ВыбЗначение.ЭтоГруппа()=0 Тогда
				ВыбЗначение = ВыбЗначение.Родитель;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Действие.ТекущаяСтрока()=4 Тогда // Установить категорию цен покупателю
		ВыбЗначение = СоздатьОбъект("Справочник.КатегорииЦен");
		фВыбрали = ВыбЗначение.Выбрать("Выбор типа цен покупателю",);

	ИначеЕсли Действие.ТекущаяСтрока()=5 Тогда // Установить категорию цен поставщика
		ВыбЗначение = СоздатьОбъект("Справочник.КатегорииЦен");
		фВыбрали = ВыбЗначение.Выбрать("Выбор типа цен поставщика",);

	ИначеЕсли (Действие.ТекущаяСтрока()=6) Или (Действие.ТекущаяСтрока()=7) Тогда // Установить валюту кредита поставщика
		ВыбЗначение = СоздатьОбъект("Справочник.Валюты");
		фВыбрали = ВыбЗначение.Выбрать("Выбор валюты кредита поставщика",);

	ИначеЕсли Действие.ТекущаяСтрока()=8 Тогда // Установить сумму кредита поставщика
		ВыбЗначение = 0;
		фВыбрали = ВвестиЧисло(ВыбЗначение,"Ввод суммы кредита поставщика",15,2);

	ИначеЕсли Действие.ТекущаяСтрока()=9 Тогда // Установить глубину кредита поставщика
		ВыбЗначение = 0;
		фВыбрали = ВвестиЧисло(ВыбЗначение,"Ввод глубины кредита поставщика",3,0);

	ИначеЕсли (Действие.ТекущаяСтрока()=10) Или (Действие.ТекущаяСтрока()=11) Тогда // Установить валюту кредита покупателя
		ВыбЗначение = СоздатьОбъект("Справочник.Валюты");
		фВыбрали = ВыбЗначение.Выбрать("Выбор валюты кредита покупателя",);

	ИначеЕсли Действие.ТекущаяСтрока()=12 Тогда // Установить сумму кредита покупателю
		ВыбЗначение = 0;
		фВыбрали = ВвестиЧисло(ВыбЗначение,"Ввод суммы кредита покупателю",15,2);

	ИначеЕсли Действие.ТекущаяСтрока()=13 Тогда // Установить глубину кредита покупателю
		ВыбЗначение = 0;
		фВыбрали = ВвестиЧисло(ВыбЗначение,"Ввод глубины кредита покупателю",3,0);

	ИначеЕсли (Действие.ТекущаяСтрока()=14) Или (Действие.ТекущаяСтрока()=15) Тогда // Установить или удалить из категории
		ВыбЗначение = СоздатьОбъект("Справочник.ВидыКатегорий");
		фВыбрали = ВыбЗначение.Выбрать("Выбор категории",);

	ИначеЕсли Действие.ТекущаяСтрока()=17 Тогда // Установить комментарий
		ВыбЗначение = "";
		фВыбрали = ВвестиСтроку(ВыбЗначение,"Ввод комментария",200);

	ИначеЕсли Действие.ТекущаяСтрока()=18 Тогда // Установить комментарий
		ВыбЗначение = "";
		ДокСхемы = СоздатьОбъект("Документ.СхемаРасчетаБонуса");
		фВыбрали = ДокСхемы.Выбрать("ФормаСписка", "Выберите схему");
		ВыбЗначение = ДокСхемы.ТекущийДокумент();
		//ВвестиСтроку(ВыбЗначение,"Ввод комментария",200);		
	ИначеЕсли Действие.ТекущаяСтрока()=19 Тогда // Установить комментарий
		ВыбЗначение = "";
		Сотр = СоздатьОбъект("Справочник.Сотрудники");
		фВыбрали = Сотр.Выбрать("ФормаСписка", "Выберите сотрудника");
		ВыбЗначение = Сотр.ТекущийЭлемент();
		//ВвестиСтроку(ВыбЗначение,"Ввод комментария",200);
	ИначеЕсли Действие.ТекущаяСтрока()=20 Тогда // Установить скидку на вес
		ВыбЗначение = 0;
		фВыбрали = ВвестиЧисло(ВыбЗначение,"Ввод ""Постоянная скидка на вес для контрагента""",4,2);
	ИначеЕсли Действие.ТекущаяСтрока()=21 Тогда // Установить канал продаж
		ВыбЗначение = "";
		Канал = СоздатьОбъект("Справочник.КаналыПродаж");
		фВыбрали = Канал.Выбрать("ФормаСписка", "Выберите канал продаж");
		ВыбЗначение = Канал.ТекущийЭлемент();
	КонецЕсли;
	
	Если фВыбрали = 0 Тогда
		Возврат;
	КонецЕсли;

	ТипВыбЗначение = ТипЗначенияСтр(ВыбЗначение);
	Если ТипВыбЗначение = "Справочник" Тогда
		ЗначениеВВидеСтроки = ВыбЗначение.Наименование;
		Значение 			= ВыбЗначение.ТекущийЭлемент();
	ИначеЕсли ТипВыбЗначение = "Документ" Тогда
		ЗначениеВВидеСтроки = Строка(ВыбЗначение);
		Значение 			= ВыбЗначение.ТекущийДокумент();

	ИначеЕсли ТипВыбЗначение = "Число" Тогда
		ЗначениеВВидеСтроки = Строка(ВыбЗначение);
		Значение			= ВыбЗначение;

	ИначеЕсли ТипВыбЗначение = "Строка" Тогда
		ЗначениеВВидеСтроки = ВыбЗначение;
		Значение			= ВыбЗначение;

	КонецЕсли;  

КонецПроцедуры


// ===============================
// Название: Выполнить
// Параметры:
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
// Кнопка "Выполнить",.
// Описание:
//   выполняет групповое действие
//
Процедура Выполнить()
	Перем НомерСтроки;
	Перем Док;
	Перем ТипДок;
	Перем Контр,КонтДляПоиска;
	Перем Категория,Единица;

	Перем ЧислоОбработанныхПозиций;
                    
	Категория = СоздатьОбъект("Справочник.КатегорииКонтрагентов");
	
	Если (ПустоеЗначение(Значение)=1) Тогда // пустое значение
		Если (Действие.ТекущаяСтрока()=6)  Или (Действие.ТекущаяСтрока()=7)  //Установить вал. кред. пост.  с пересчетом, Установить вал. кред. пост.  без пересчета
				Или (Действие.ТекущаяСтрока()=10) Или (Действие.ТекущаяСтрока()=11) //Установить вал. кред. покуп. с пересчетом, Установить вал. кред. покуп. без пересчета
				Или (Действие.ТекущаяСтрока()=14) Или (Действие.ТекущаяСтрока()=15) Тогда //Установить категорию, Удалить из категории
			Предупреждение("Не задано значение");
			Возврат;
		КонецЕсли;
	КонецЕсли;
    
	//Установить вал. кред. пост.  с пересчетом, Установить вал. кред. пост.  без пересчета
	Если (Действие.ТекущаяСтрока()=6) Или (Действие.ТекущаяСтрока()=7) Тогда
		Если Вопрос("После изменения валюты кредита поставщика потребуется перепровести все документы.
					|Вы действительно хотите изменить валюту кредита поставщика?","Да+Нет")="Нет" Тогда
			Возврат;
		КонецЕсли;	
	//Установить вал. кред. покуп. с пересчетом, Установить вал. кред. покуп. без пересчета
	ИначеЕсли (Действие.ТекущаяСтрока()=10) Или (Действие.ТекущаяСтрока()=11) Тогда
		Если Вопрос("После изменения валюты кредита покупателю потребуется перепровести все документы.
					|Вы действительно хотите изменить валюту кредита покупателю?","Да+Нет")="Нет" Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
		
	ЧислоОбработанныхПозиций = 0;
        
	Таблица.ВыбратьСтроки();
	
	КвоПозиций = СписокПозиций.РазмерСписка();
	Для НомерСтроки = 1 По КвоПозиций Цикл

		Таблица.ПолучитьСтроку();
		Если Таблица.Пометка=ЗначениеНеПометки Тогда
			Продолжить;
		КонецЕсли;	
		
		КонтДляПоиска = Таблица.Контрагент;

		Контр = СоздатьОбъект("Справочник.Контрагенты");
		Если Контр.НайтиЭлемент(КонтДляПоиска)=0 Тогда
			Продолжить;
		КонецЕсли;       
		
		Контр.ИспользоватьДату(ВыбДата,1);
		
		глКомментарий("Выполняется обработка контрагента "+Контр.Наименование,2);
                                              
		Если Действие.ТекущаяСтрока()=1 Тогда // Пометить на удаление
			Контр.Удалить(0);
			глЗаписьЖурналаРегистрации(Комментарий,1, 3, Контр.ТекущийЭлемент(), 2);
			
		ИначеЕсли Действие.ТекущаяСтрока()=2 Тогда // Снять пометку удаления
			Если Контр.ПометкаУдаления()=1 Тогда
				Контр.СнятьПометкуУдаления();
				глЗаписьЖурналаРегистрации(Комментарий,1, 5, Контр.ТекущийЭлемент(), 2);
			КонецЕсли;
			
		ИначеЕсли Действие.ТекущаяСтрока()=3 Тогда // Перенести в группу
			Контр.Родитель = ?(ПустоеЗначение(Значение)>0,ПолучитьПустоеЗначение("Справочник.Контрагенты"),Значение.ТекущийЭлемент());
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
			
		ИначеЕсли Действие.ТекущаяСтрока()=4 Тогда // Установить категорию цен покупателю
			Контр.КатегорияЦен = ?(ПустоеЗначение(Значение)=1,0,Значение);
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
		
		ИначеЕсли Действие.ТекущаяСтрока()=5 Тогда // Установить категорию цен поставщика
			Контр.КатегорияЦенПоставщика = ?(ПустоеЗначение(Значение)=1,0,Значение);
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
			
		ИначеЕсли Действие.ТекущаяСтрока()=6 Тогда // Установить валюту кредита поставщика с пересчетом суммы
			Контр.СуммаКредитаПоставщика = глПересчет(Контр.СуммаКредитаПоставщика,Контр.ВалютаКредитаПоставщика,
														Значение.ТекущийЭлемент(),РабочаяДата());
			Контр.ВалютаКредитаПоставщика = Значение.ТекущийЭлемент();
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
		
		ИначеЕсли Действие.ТекущаяСтрока()=7 Тогда // Установить валюту кредита поставщика без пересчета суммы
			Контр.ВалютаКредитаПоставщика = Значение.ТекущийЭлемент();
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
		
		ИначеЕсли Действие.ТекущаяСтрока()=8 Тогда // Установить сумму кредита поставщика
			Контр.СуммаКредитаПоставщика = Значение;
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
		
		ИначеЕсли Действие.ТекущаяСтрока()=9 Тогда // Установить глубину кредита поставщика
			Контр.ГлубинаКредитаПоставщика = Значение;
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
		
		ИначеЕсли Действие.ТекущаяСтрока()=10 Тогда // Установить валюту кредита покупателю с пересчетом суммы
			Контр.СуммаКредита = глПересчет(Контр.СуммаКредита,	Контр.ВалютаКредита, 
														Значение.ТекущийЭлемент(),РабочаяДата());
			Контр.ВалютаКредита = Значение.ТекущийЭлемент();
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
		
		ИначеЕсли Действие.ТекущаяСтрока()=11 Тогда // Установить валюту кредита покупателю без пересчета суммы
			Контр.ВалютаКредита = Значение.ТекущийЭлемент();
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
		
		ИначеЕсли Действие.ТекущаяСтрока()=12 Тогда // Установить сумму кредита покупателю
			Контр.СуммаКредита = Значение;
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
		
		ИначеЕсли Действие.ТекущаяСтрока()=13 Тогда // Установить глубину кредита покупателю
			Контр.Глубина = Значение;
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
			
		ИначеЕсли Действие.ТекущаяСтрока()=14 Тогда // Добавить категорию
			Категория.ИспользоватьВладельца(Контр.ТекущийЭлемент());
			Если Категория.НайтиПоРеквизиту("Категория",Значение.ТекущийЭлемент(),0)=0 Тогда
				Категория.Новый();
				Категория.Категория = Значение;
				Категория.Записать();
				глЗаписьЖурналаРегистрации(Комментарий,1, 1, Категория.ТекущийЭлемент(), 2);
			Иначе
				Если Категория.ПометкаУдаления()=1 Тогда
					Категория.СнятьПометкуУдаления();
					глЗаписьЖурналаРегистрации(Комментарий,1, 5, Категория.ТекущийЭлемент(), 2);
				КонецЕсли;
			КонецЕсли;	
			
		ИначеЕсли Действие.ТекущаяСтрока()=15 Тогда // Удалить категорию
			Категория.ИспользоватьВладельца(Контр.ТекущийЭлемент());
			Если Категория.НайтиПоРеквизиту("Категория",Значение.ТекущийЭлемент(),0)>0 Тогда
				Категория.Удалить(0);
				глЗаписьЖурналаРегистрации(Комментарий,1, 3, Категория.ТекущийЭлемент(), 2);
			КонецЕсли;		
				
		ИначеЕсли Действие.ТекущаяСтрока()=16 Тогда // Удалить все категории
			Категория.ИспользоватьВладельца(Контр.ТекущийЭлемент());
			Категория.ВыбратьЭлементы();  
			Пока Категория.ПолучитьЭлемент()>0 Цикл
			    Категория.Удалить(0);	
				глЗаписьЖурналаРегистрации(Комментарий,1, 3, Категория.ТекущийЭлемент(), 2);
			КонецЦикла;
			
		ИначеЕсли Действие.ТекущаяСтрока()=17 Тогда // Установить комментарий
			Контр.Комментарий = ?(ПустоеЗначение(Значение)=1,"",СокрЛП(Значение));
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
		
		ИначеЕсли Действие.ТекущаяСтрока()=18 Тогда // 
			Контр.СхемаРасчетаБонуса = ?(ПустоеЗначение(Значение)=1,"",Значение);
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
		ИначеЕсли Действие.ТекущаяСтрока()=19 Тогда // 
			Контр.ТорПред = ?(ПустоеЗначение(Значение)=1,"",Значение);
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
		ИначеЕсли Действие.ТекущаяСтрока()=20 Тогда // Установить скидку на вес
			Контр.СкидкаНаВес = ?(ПустоеЗначение(Значение)=1,0,Значение);
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
		ИначеЕсли Действие.ТекущаяСтрока()=21 Тогда // Установить канал продаж
			Контр.КаналПродаж = ?(ПустоеЗначение(Значение)=1,"",Значение);
			Контр.Записать();
			глЗаписьЖурналаРегистрации(Комментарий,1, 2, Контр.ТекущийЭлемент(), 2);
		КонецЕсли;                           
		
		ЧислоОбработанныхПозиций = ЧислоОбработанныхПозиций + 1;

	КонецЦикла;
        
	Если Действие.ТекущаяСтрока()=1 Тогда // Пометить на удаление
		ПерерисовкаСписка(5);
		
	ИначеЕсли Действие.ТекущаяСтрока()=2 Тогда // Снять пометку удаления
		ПерерисовкаСписка(5);		
	
	ИначеЕсли Действие.ТекущаяСтрока()=3 Тогда // Перенести в группу
		ПерерисовкаСписка(4);
		
	ИначеЕсли Действие.ТекущаяСтрока()=4 Тогда // Установить категорию цен покупателю
		ПерерисовкаСписка(7);                          
	  
	ИначеЕсли Действие.ТекущаяСтрока()=5 Тогда // Установить категорию цен поставщика
		ПерерисовкаСписка(8);                          
		
	ИначеЕсли (Действие.ТекущаяСтрока()=6) Или (Действие.ТекущаяСтрока()=7) Тогда // Установить валюту кредита поставщика
		ПерерисовкаСписка(10);
		
	ИначеЕсли (Действие.ТекущаяСтрока()=8) Или (Действие.ТекущаяСтрока()=9) Тогда // Установить сумму или глубину кредита поставщика
		ПерерисовкаСписка(10);		
		
	ИначеЕсли (Действие.ТекущаяСтрока()=10) Или (Действие.ТекущаяСтрока()=11) Тогда // Установить валюту кредита покупателю
		ПерерисовкаСписка(9);		
	
	ИначеЕсли (Действие.ТекущаяСтрока()=12) Или (Действие.ТекущаяСтрока()=13) Тогда // Установить сумму или глубину кредита покупателю
		ПерерисовкаСписка(9);		
			
	ИначеЕсли Действие.ТекущаяСтрока()=14 Тогда // Добавить категорию
		ПерерисовкаСписка(6);		
			
	ИначеЕсли Действие.ТекущаяСтрока()=15 Тогда // Удалить категорию
		ПерерисовкаСписка(6);		
				
	ИначеЕсли Действие.ТекущаяСтрока()=16 Тогда // Удалить все категории
		ПерерисовкаСписка(6);		
			
	ИначеЕсли Действие.ТекущаяСтрока()=17 Тогда // 
		ПерерисовкаСписка(11);
	ИначеЕсли Действие.ТекущаяСтрока()=18 Тогда // 
		ПерерисовкаСписка(18);
	ИначеЕсли Действие.ТекущаяСтрока()=20 Тогда // 
		ПерерисовкаСписка(20);
	ИначеЕсли Действие.ТекущаяСтрока()=21 Тогда // 
		ПерерисовкаСписка(21);
	КонецЕсли;                           
	
	Предупреждение("Групповая обработка завершена. Число обработанных позиций: "+Строка(ЧислоОбработанныхПозиций));

КонецПроцедуры

// ===============================
// Название: ПриДвойномЩелчкеНаТаблице
// Параметры:
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//  таблица значений "Таблица"
// Описание:
//	 при двойном щелчке инвертирует пометку соответствующей позиции
//
Процедура ПриДвойномЩелчкеНаТаблице()

	Таблица.Пометка = 3 - Таблица.Пометка;

КонецПроцедуры   // ПриДвойномЩелчкеНаТаблице



// ===============================
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// ===============================

// ===============================
Процедура ПриОткрытии()	// Предопределенная процедура

	Если ПустоеЗначение(Форма.Параметр)=1 Тогда
		Предупреждение("Не указан список обрабатываемых позиций. Данная обработка запускается автоматически из других процедур конфигурации.");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;	
	
	СписокПозиций = Форма.Параметр;
	ПерерисовкаСписка(0,1);	// с начальным заполнением	

	ТекСтрока = Действие.ТекущаяСтрока();
	ДоступностьКнопкиВыбораЗначения();
    
	// формируем список колонок сортировки
	СписокКолонокСортировки.УдалитьВсе();
	Для Индекс = 1 По Таблица.КоличествоКолонок() Цикл             
		Заголовок = "";
		ИдентКолонки = СокрЛП(Таблица.ПолучитьПараметрыКолонки(Индекс,,,,Заголовок));
		Если Найти(ВРег("=Контрагент=Пометка="),ВРег("="+ИдентКолонки+"="))=0 Тогда
			СписокКолонокСортировки.ДобавитьЗначение(ИдентКолонки,Заголовок);
		КонецЕсли;	
	КонецЦикла;
	
	// формируем список направлений сортировки
	НаправлениеСортировки.УдалитьВсе();
	НаправлениеСортировки.ДобавитьЗначение("+","возрастанию"); 
	НаправлениеСортировки.ДобавитьЗначение("-","убыванию");
	
	// будем отслеживать только реальные изменения этих реквизитов
	Форма.СписокКолонокСортировки.	ВыполнятьФормулуТолькоПриИзменении(1);  
	Форма.НаправлениеСортировки.	ВыполнятьФормулуТолькоПриИзменении(1); 
	
	НомерКолонкиСортировки 		= ВосстановитьЗначение("НомерКолонкиСортировкиВГрупповойОбработкеКонтрагентов");
	НомерНаправленияСортировки 	= ВосстановитьЗначение("НомерНаправленияСортировкиВГрупповойОбработкеКонтрагентов");

	Если ПустоеЗначение(НомерКолонкиСортировки) = 1 Тогда
		НомерКолонкиСортировки = 1;
	КонецЕсли;	

	Если ПустоеЗначение(НомерНаправленияСортировки) = 1 Тогда
		НомерНаправленияСортировки = 1;
	КонецЕсли;	

	СписокКолонокСортировки.ТекущаяСтрока(НомерКолонкиСортировки);
	НаправлениеСортировки.	ТекущаяСтрока(НомерНаправленияСортировки);
	СортироватьТаблицу();
    
КонецПроцедуры	// ПриОткрытии


// ===============================
Процедура ПриЗакрытии()	// Предопределенная процедура

	глСохранитьЗначение(ИмяФормы, "НомерКолонкиСортировкиВГрупповойОбработкеКонтрагентов",		СписокКолонокСортировки.ТекущаяСтрока()	); 
	глСохранитьЗначение(ИмяФормы, "НомерНаправленияСортировкиВГрупповойОбработкеКонтрагентов",	НаправлениеСортировки.ТекущаяСтрока()	);

КонецПроцедуры	// ПриЗакрытии



// ===============================
// ТЕЛО МОДУЛЯ
// ===============================

// инициализация списков
Действие.ДобавитьЗначение("Пометить на удаление");							//	1
Действие.ДобавитьЗначение("Снять пометку удаления");						//	2	
Действие.ДобавитьЗначение("Перенести в группу");        					//	3
Действие.ДобавитьЗначение("Установить тип цен покупателю");    				//	4 
Действие.ДобавитьЗначение("Установить тип цен поставщика");     			//	5 
Действие.ДобавитьЗначение("Установить вал. кред. пост. с пересчетом");      //	6
Действие.ДобавитьЗначение("Установить вал. кред. пост. без пересчета");    	//	7
Действие.ДобавитьЗначение("Установить сумму кред. пост.");    				//	8
Действие.ДобавитьЗначение("Установить глубину кред. пост.");    			//	9
Действие.ДобавитьЗначение("Установить вал. кред. покуп. с пересчетом");     //	10
Действие.ДобавитьЗначение("Установить вал. кред. покуп. без пересчета");    //	11
Действие.ДобавитьЗначение("Установить сумму кред. покуп.");    				//	12
Действие.ДобавитьЗначение("Установить глубину кред. покуп.");    			//	13
Действие.ДобавитьЗначение("Установить категорию");      					//	14
Действие.ДобавитьЗначение("Удалить из категории");      					//	15
Действие.ДобавитьЗначение("Удалить из всех категорий"); 					//	16
Действие.ДобавитьЗначение("Установить комментарий");    					//	17 
Действие.ДобавитьЗначение("Установить схему");    							//	18 
Действие.ДобавитьЗначение("Установить торгового представителя");    		//	19 
Действие.ДобавитьЗначение("Установить скидку на вес");    		            //	20 
Действие.ДобавитьЗначение("Установить канал продаж");    		            //	21

Действие.ТекущаяСтрока(3);

НачальнаяДата = Константа.ДатаНачалаРаботы;

ЗначениеПометки 	= 2; 
ЗначениеНеПометки 	= 1;

ИмяФормы = "Обработка.ГрупповаяОбработкаСправочникаКонтрагенов";
Комментарий = "Групповая обработка справочника ""Контрагенты""";
ВыбДата = РабочаяДата();

Таблица.НоваяКолонка("Пометка",					"Число",	4, 	0,	"Пометка"			); 
Таблица.НоваяКолонка("Наименование",			"Строка",	100,,	"Наименование"		); 
Таблица.НоваяКолонка("Вид",						"Строка",	15,	,	"Вид"				);
Таблица.НоваяКолонка("Группа",					"Строка",	40,	,	"Группа"			);
Таблица.НоваяКолонка("Статус",					"Строка",	15,	,	"Статус"			);
Таблица.НоваяКолонка("Категории",				"Строка",	80,	,	"Категории"			);
Таблица.НоваяКолонка("КатегорияЦенПокупателю",	"Строка",	20,	,	"Тип цен покупателю"); 
Таблица.НоваяКолонка("КатегорияЦенПоставщика",	"Строка",	20,	,	"Тип цен поставщика");
Таблица.НоваяКолонка("КредитПокупателю",		"Строка",	100,,	"Кредит покупателю"	);  
Таблица.НоваяКолонка("КредитПоставщика",		"Строка",	100,,	"Кредит поставщика"	); 
Таблица.НоваяКолонка("Комментарий",				"Строка",	100,,	"Комментарий"		); 
Таблица.НоваяКолонка("СхемаРасчетаБонуса",		"Документ.СхемаРасчетаБонуса",	,,"Схема расчета бонуса", 50); 
Таблица.НоваяКолонка("ТорПред",					"Справочник.Сотрудники",	,,"Торг. пред.", 30); 
Таблица.НоваяКолонка("Контрагент"); 
Таблица.НоваяКолонка("СкидкаНаВес",             "Число",	4, 	2,	"Скидка на вес"		); 
Таблица.НоваяКолонка("КаналПродаж",             "Справочник.КаналыПродаж",,,"Канал продаж",25		); 

Таблица.ВидимостьКолонки("Контрагент",0);
Таблица.ВыводитьПиктограммы("Пометка",1);
Таблица.Фиксировать(0,2);
