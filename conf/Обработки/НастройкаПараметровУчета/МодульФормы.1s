Перем Шаг, ПоследнийШаг, Совет;
Перем ЕстьДокументы;
Перем СписокДоступныхСлоев;

// ======================================
Процедура УстСовет()
	Если Шаг = 1 Тогда
		Совет = "Здесь будут показываться советы и комментарии по заполнению реквизитов, находящихся в окне."; 
	ИначеЕсли Шаг = 2 Тогда
		Совет = "Эти значения будут подставляться по умолчанию при введении новых документов, новых элементов справочников и пр.";
	ИначеЕсли Шаг = 3 Тогда
		Совет = "Эти параметры подставляются по умолчанию при вводе новых документов, элементов справочников и пр.";
	ИначеЕсли Шаг = 4 Тогда
		Совет = "Укажите значения по умолчанию, а также служебные элементы справочников, которые будут использоваться для подстановки в документы.";
	ИначеЕсли Шаг = 5 Тогда
		Совет = "Установите параметры ведения бухгалтерского учета.";
	ИначеЕсли Шаг = 6 Тогда
		Совет = "Эти параметры определяют интерфейс пользователя при работе системы.";
	ИначеЕсли Шаг = 7 Тогда
		Совет = "Эти параметры определяют виды валовых доходов/расходов и статей затрат используемых по умолчанию, при бартерных операциях и переоценке валюты.";
	ИначеЕсли Шаг = 8 Тогда
		Совет = "Задайте дополнительные параметры работы системы.";
	ИначеЕсли Шаг = 9 Тогда
		Совет = "Задайте параметры работы производственного участка работы системы, и параметры для конфигурации ""Зарплата + Кадры"".";
	ИначеЕсли Шаг = 10 Тогда
		Совет = "Задайте параметры отражения информации в регистре Обороты.";
	ИначеЕсли Шаг = 11 Тогда
		Совет = "Эти настройки определяют даты, на которые будут записываться значения периодических констант и элементов справочников.";
	ИначеЕсли Шаг = 12 Тогда
		Совет = "Настройка параметров учета завершена.";
	КонецЕсли;
КонецПроцедуры

// ======================================
Процедура ПрочитатьЗначения()
	АвансовыйПлатеж = Константа.АвансовыйПлатеж;
	БазВаловыйДоход = Константа.БазВаловыйДоход;
	БазВаловыйРасход = Константа.БазВаловыйРасход;
	БазВидДеятельности = Константа.БазВидДеятельности;
	БазВыписалНН = Константа.БазВыписалНН;
	БазЕдиница = Константа.БазЕдиница;
	БазНДС = Константа.БазНДС;
	БазоваяВалюта = Константа.БазоваяВалюта;
	БазОтпустил = Константа.БазОтпустил;
	БазФирма = Константа.БазФирма;
	БазЧастноеЛицо = Константа.БазЧастноеЛицо;
	БартерВалДох = Константа.БартерВалДох;
	БартерВалРасх = Константа.БартерВалРасх;
	ВаловыйДоходВалюта = Константа.ВаловыйДоходВалюта;
	ВаловыйДоходЗадолж = Константа.ВаловыйДоходЗадолж;
	ВаловыйРасходВалюта = Константа.ВаловыйРасходВалюта;
	ВаловыйРасходЗадолж = Константа.ВаловыйРасходЗадолж;
	ВидЗатратНеоперКР = Константа.ВидЗатратНеоперКР;
	ВидЗатратОперКР = Константа.ВидЗатратОперКР;
	ВидЗатратСебестРеалВалюты = Константа.ВидЗатратСебестРеалВалюты;
	ВидЗатратСебестРеалПроизвЗапасов = Константа.ВидЗатратСебестРеалПроизвЗапасов;

	Инд = спДетальностьКомментариев.НайтиЗначение(Константа.ВыдаватьСообщения);
	Если Инд<>0 Тогда
	    спДетальностьКомментариев.ТекущаяСтрока(Инд);
	Иначе
		спДетальностьКомментариев.ТекущаяСтрока(1);
	КонецЕсли;

	фВыделятьАвансы = ?(Константа.ВыделятьАвансы=Да, 1,0);
	ДатаЗапретаРедактирования = Константа.ДатаЗапретаРедактирования;
	ДатаНачалаРаботы = Константа.ДатаНачалаРаботы;
	ЕдиницаВеса = Константа.ЕдиницаВеса;
	фЗапрашиватьКоличество = ?(Константа.ЗапрашиватьКоличество=Да, 1,0);
	фИспользоватьСкидку = ?(Константа.ИспользоватьСкидку=Да, 1, 0);
	фИспользоватьСписокКорректныхПроводок = ?(Константа.ИспользоватьСписокКорректныхПроводок=Да,1,0);
	ИспользоватьСчетаРасходовВрем = ИспользоватьСчетаРасходов;

	КурсоваяРазница = Константа.КурсоваяРазница;
	фНДСПоВходящимНН = ?(Константа.НДСПоВходящимНН=Да, 1, 0);
	НиДоходНиРасход = Константа.НиДоходНиРасход;
	ОсновнаяДатаНачалаОтчета = Константа.ОсновнаяДатаНачалаОтчета;
	ОсновнаяКатегорияЦен = Константа.ОсновнаяКатегорияЦен;
	ОсновнаяЦена = Константа.ОсновнаяЦена;
	ОсновнойВидТорговли = Константа.ОсновнойВидТорговли;
	ОсновнойПокупатель = Константа.ОсновнойПокупатель;
	ОсновнойПоставщик = Константа.ОсновнойПоставщик;
	ОсновнойСклад = Константа.ОсновнойСклад;
	ОсновнойСрокРезервирования = Константа.ОсновнойСрокРезервирования;
	ПечКолЭкзСчетаПриБыстройПродаже = Макс(Константа.ПечКолЭкзСчетаПриБыстройПродаже,0);
	ПечКолЭкзНакладнойПриБыстройПродаже = Макс(Константа.ПечКолЭкзНакладнойПриБыстройПродаже,0);
	ПечКолЭкзННПриБыстройПродаже = Макс(Константа.ПечКолЭкзННПриБыстройПродаже,0);
	ПечКолЭкзПрихОрдераПриБыстройПродаже = Макс(Константа.ПечКолЭкзПрихОрдераПриБыстройПродаже,0);
	фПодставлятьОсновнойДоговор = ?(Константа.ПодставлятьОсновнойДоговор=Да, 1, 0);
	фПоказыватьОстаткиТМЦ = ?(Константа.ПоказыватьОстаткиТМЦ=Да, 1, 0);
	фПоказыватьПомощникПриСтарте = ?(Константа.ПоказыватьПомощникПриСтарте<2, 1, 0);
	фПроверятьДублиСтрок = ?(Константа.ПроверятьДублиСтрок=Да, 1, 0);
	фПроводкиПоКассеТолькоОрдерами = ?(Константа.ПроводкиПоКассеТолькоОрдерами=Да, 1, 0);
	фРезервироватьТолькоСвободныйТовар = ?(Константа.РезервироватьТолькоСвободныйТовар=Да, 1, 0);
	фРезервироватьТоварНаСегодня = ?(Константа.РезервироватьТоварНаСегодня=Да, 1, 0);
	фРазрешитьОтрицОстатки = ?(Константа.РазрешитьОтрицОстатки=Да, 1, 0);
	фРазрешитьПревышениеКредита = ?(Константа.РазрешитьПревышениеКредита=Да, 1, 0);
	фРазрешитьПродаватьРезерв = ?(Константа.РазрешитьПродаватьРезерв=Да, 1, 0);
	СлужебныйТМЦ = Константа.СлужебныйТМЦ;
	ТМЦБланкиСтрогойОтчетности = Константа.ТМЦБланкиСтрогойОтчетности;
	ТоварыВАссортименте = Константа.ТоварыВАссортименте;
	фФлагЗащитыТаблиц = Константа.ФлагЗащитыТаблиц;
	фФормыНаУкраинском = ?(Константа.ФормыНаУкраинском=Да, 1, 0);
	ЦеныВНакладных = Константа.ЦеныВНакладных;
	ЧастичнаяОтгрузка = Константа.ЧастичнаяОтгрузка;

	// быстрая продажа
	ВыпСчетПриБыстройПродаже = ?(Константа.ПечКолЭкзСчетаПриБыстройПродаже<0,0,1); 
	ВыпНакладнуюПриБыстройПродаже = 1;
	ВыпННПриБыстройПродаже = ?(Константа.ПечКолЭкзННПриБыстройПродаже<0,0,1); 
	ВыпПрихОрдерПриБыстройПродаже = ?(Константа.ПечКолЭкзПрихОрдераПриБыстройПродаже<0,0,1); 
	
	//Производство + новые
	БазПодразделениеПроизводство= Константа.БазПодразделениеПроизводство;
	МестоХраненияБрака= Константа.МестоХраненияБрака;
	МетодРасчетаСебестоимостиПродукции = Константа.МетодРасчетаСебестоимостиПродукции.Получить(ДатаПериодическихЗначений);
	МетодРасчетаСебестоимостиПроизводственныхЗапасов = Константа.МетодРасчетаСебестоимостиПроизводственныхЗапасов.Получить(ДатаПериодическихЗначений);
	МетодРасчетаСебестоимостиТоваров = Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаПериодическихЗначений);
	СпособПриходованияПродукции = Константа.СпособПриходованияПродукции;  
	БазГрафикФормированияПартий = Константа.БазГрафикФормированияПартий;
	
	БазВидЗатратТМЦ = Константа.БазВидЗатратТМЦ;
	БазПодразделениеПродажи = Константа.БазПодразделениеПродажи;
	БазГлубинаКредитаВКалендарныхДнях = Константа.БазГлубинаКредитаВКалендарныхДнях + 1; 
	ОтражатьТЗРвОборотах = ?(Константа.ОтражатьТЗРвОборотах < 1,1,Константа.ОтражатьТЗРвОборотах);
	ОтражатьФактСебестВОборотах = ?(Константа.ОтражатьФактСебестВОборотах < 1,1,Константа.ОтражатьФактСебестВОборотах);
	РассчитыватьЗарплатуВКонфигурации = Константа.РассчитыватьЗарплатуВКонфигурации + 1;
	ТипДопАналитикиЗиК = Константа.ТипДопАналитикиЗиК + 1;
	ОтражатьКурсовуюРазницуВОборотах = ?(Константа.ОтражатьКурсовуюРазницуВОборотах < 1,1,Константа.ОтражатьКурсовуюРазницуВОборотах);
	РозничнаяКатегорияЦен = Константа.РозничнаяКатегорияЦен; 
	БазРежимОплаты = Константа.БазРежимОплаты;
	
	фОчиститьИсторию = 1;
КонецПроцедуры

// ===============================
Процедура УстановитьПериодическуюКонстанту(КонстСтр, Зн, Чсл = 0)
Перем ЕстьИстория, ИсторияОчищена;
	Пер = СоздатьОбъект("Периодический");
	Пер.ИспользоватьОбъект(КонстСтр);
	// очищаем историю
	ЕстьИстория = 0;
	ИсторияОчищена = 0;
	Пер.ОбратныйПорядок(1);
	Пер.ВыбратьЗначения();
	Пока Пер.ПолучитьЗначение() = 1 Цикл
		Если Пер.ДатаЗнач > ДатаПериодическихЗначений Тогда
			ЕстьИстория = 1;
			Если фОчиститьИсторию = 1 Тогда
				Пер.Удалить();
				ИсторияОчищена = 1;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ИсторияОчищена = 1 Тогда
	    глКомментарий("Для периодической константы """+Метаданные.Константа(КонстСтр).Представление()+""" очищена история значений после даты "+ДатаПериодическихЗначений,1);
	ИначеЕсли ЕстьИстория = 1 Тогда
	    глКомментарий("Для периодической константы """+Метаданные.Константа(КонстСтр).Представление()+""" есть установленные значения после даты "+ДатаПериодическихЗначений+". Проверьте историю значений для этой константы",1,,"I");
	КонецЕсли;
	// устанавливаем значение константы только в том случае,
	// когда ее новое значение на ДатуПериодическихЗначений отличается от текущего
	Значение = Зн;
	Если Чсл = 1 Тогда
	    // передаем 0/1, а нужно Да/Нет
		Значение = ?(Зн=1,Да,Нет);
	КонецЕсли;
	Если Значение <> Пер.ЗначениеНаДату(ДатаПериодическихЗначений) Тогда
		Пер.ДатаЗнач = ДатаПериодическихЗначений;
		Пер.Значение = Значение;
		Пер.Записать();
		глКомментарий("Для периодической константы """+Метаданные.Константа(КонстСтр).Представление()+""" установлено значение """+Значение+""" на дату "+ДатаПериодическихЗначений, 2);
	КонецЕсли;
КонецПроцедуры

// ======================================
Процедура ЗаписатьЗначения()
	Константа.АвансовыйПлатеж = АвансовыйПлатеж;
	Константа.БазВаловыйДоход = БазВаловыйДоход;
	Константа.БазВаловыйРасход = БазВаловыйРасход;
	Константа.БазВидДеятельности = БазВидДеятельности;
	Константа.БазВыписалНН = БазВыписалНН;
	Константа.БазЕдиница = БазЕдиница;
	Константа.БазНДС = БазНДС;
	Константа.БазоваяВалюта = БазоваяВалюта;
	Константа.БазОтпустил = БазОтпустил;
	Константа.БазФирма = БазФирма;
	Константа.БазЧастноеЛицо = БазЧастноеЛицо;
	Константа.БартерВалДох = БартерВалДох;
	Константа.БартерВалРасх = БартерВалРасх;
	Константа.ВаловыйДоходВалюта = ВаловыйДоходВалюта;
	Константа.ВаловыйДоходЗадолж = ВаловыйДоходЗадолж;
	Константа.ВаловыйРасходВалюта = ВаловыйРасходВалюта;
	Константа.ВаловыйРасходЗадолж = ВаловыйРасходЗадолж;
	Константа.ВидЗатратНеоперКР = ВидЗатратНеоперКР;
	Константа.ВидЗатратОперКР = ВидЗатратОперКР;
	Константа.ВидЗатратСебестРеалВалюты = ВидЗатратСебестРеалВалюты;
	Константа.ВидЗатратСебестРеалПроизвЗапасов = ВидЗатратСебестРеалПроизвЗапасов;
	Константа.ВыдаватьСообщения = спДетальностьКомментариев.ПолучитьЗначение(спДетальностьКомментариев.ТекущаяСтрока()); 
	Константа.ВыделятьАвансы = ?(фВыделятьАвансы=1, Да, Нет);
	Константа.ДатаЗапретаРедактирования = ДатаЗапретаРедактирования;
	Константа.ДатаНачалаРаботы = ДатаНачалаРаботы;
	Константа.ЕдиницаВеса = ЕдиницаВеса;
	Константа.ЗапрашиватьКоличество = ?(фЗапрашиватьКоличество=1, Да, Нет);
	
	Константа.ИспользоватьСкидку = ?(фИспользоватьСкидку=1, Да, Нет);
	Константа.ИспользоватьСписокКорректныхПроводок = ?(фИспользоватьСписокКорректныхПроводок=1, Да, Нет);
	Константа.ИспользоватьСчетаРасходов = ИспользоватьСчетаРасходовВрем;
	// Заносим новое значение константы в переменную-синоним
	ИспользоватьСчетаРасходов = ИспользоватьСчетаРасходовВрем; 
	
	Константа.КурсоваяРазница = КурсоваяРазница;
	Константа.НДСПоВходящимНН = ?(фНДСПоВходящимНН=1, Да, Нет);
	Константа.НиДоходНиРасход = НиДоходНиРасход;
	Константа.ОсновнаяДатаНачалаОтчета = ОсновнаяДатаНачалаОтчета;
	Константа.ОсновнаяКатегорияЦен = ОсновнаяКатегорияЦен;
	Константа.ОсновнаяЦена = ОсновнаяЦена;
	Константа.ОсновнойВидТорговли = ОсновнойВидТорговли;
	Константа.ОсновнойПокупатель = ОсновнойПокупатель;
	Константа.ОсновнойПоставщик = ОсновнойПоставщик;
	Константа.ОсновнойСклад = ОсновнойСклад;
	Константа.ОсновнойСрокРезервирования = ОсновнойСрокРезервирования;
	Константа.ПечКолЭкзСчетаПриБыстройПродаже = ?(ВыпСчетПриБыстройПродаже<>0,ПечКолЭкзСчетаПриБыстройПродаже,-1);
	Константа.ПечКолЭкзНакладнойПриБыстройПродаже = ПечКолЭкзНакладнойПриБыстройПродаже;
	Константа.ПечКолЭкзННПриБыстройПродаже = ?(ВыпННПриБыстройПродаже<>0,ПечКолЭкзННПриБыстройПродаже,-1); 
	Константа.ПечКолЭкзПрихОрдераПриБыстройПродаже = ?(ВыпПрихОрдерПриБыстройПродаже<>0,ПечКолЭкзПрихОрдераПриБыстройПродаже,-1);
	Константа.ПодставлятьОсновнойДоговор = ?(фПодставлятьОсновнойДоговор=1, Да, Нет);
	Константа.ПоказыватьОстаткиТМЦ = ?(фПоказыватьОстаткиТМЦ=1, Да, Нет);
    Константа.ПоказыватьПомощникПриСтарте = 2 - фПоказыватьПомощникПриСтарте;
	Константа.ПроверятьДублиСтрок = ?(фПроверятьДублиСтрок=1, Да, Нет);
	Константа.ПроводкиПоКассеТолькоОрдерами = ?(фПроводкиПоКассеТолькоОрдерами=1, Да, Нет);
	Константа.РезервироватьТолькоСвободныйТовар = ?(фРезервироватьТолькоСвободныйТовар=1, Да, Нет);
	Константа.РезервироватьТоварНаСегодня = ?(фРезервироватьТоварНаСегодня=1, Да, Нет);
	Константа.РазрешитьОтрицОстатки = ?(фРазрешитьОтрицОстатки=1, Да, Нет);
	Константа.РазрешитьПревышениеКредита = ?(фРазрешитьПревышениеКредита=1, Да, Нет);
	Константа.РазрешитьПродаватьРезерв = ?(фРазрешитьПродаватьРезерв=1, Да, Нет);
	Константа.СлужебныйТМЦ = СлужебныйТМЦ;
	Константа.ТМЦБланкиСтрогойОтчетности = ТМЦБланкиСтрогойОтчетности;
	Константа.ТоварыВАссортименте = ТоварыВАссортименте;
	Константа.ФлагЗащитыТаблиц = фФлагЗащитыТаблиц;
	Константа.ФормыНаУкраинском = ?(фФормыНаУкраинском=1, Да, Нет);
	Константа.ЦеныВНакладных = ЦеныВНакладных;
	Константа.ЧастичнаяОтгрузка = ЧастичнаяОтгрузка;  
	
	//Производство + новые
	Константа.БазПодразделениеПроизводство = БазПодразделениеПроизводство;
	Константа.МестоХраненияБрака = МестоХраненияБрака;
	УстановитьПериодическуюКонстанту("МетодРасчетаСебестоимостиПродукции", МетодРасчетаСебестоимостиПродукции);
	УстановитьПериодическуюКонстанту("МетодРасчетаСебестоимостиПроизводственныхЗапасов", МетодРасчетаСебестоимостиПроизводственныхЗапасов);
	УстановитьПериодическуюКонстанту("МетодРасчетаСебестоимостиТоваров", МетодРасчетаСебестоимостиТоваров);
	Константа.СпособПриходованияПродукции = СпособПриходованияПродукции;  
	Константа.БазГрафикФормированияПартий = БазГрафикФормированияПартий;
	
	Константа.БазВидЗатратТМЦ = БазВидЗатратТМЦ;
	Константа.БазПодразделениеПродажи = БазПодразделениеПродажи;
	Константа.БазГлубинаКредитаВКалендарныхДнях = БазГлубинаКредитаВКалендарныхДнях - 1; //Так как переключатель принимает значения 1 и 2
	Константа.ОтражатьТЗРвОборотах = ОтражатьТЗРвОборотах;
	Константа.ОтражатьФактСебестВОборотах = ОтражатьФактСебестВОборотах;
	Константа.РассчитыватьЗарплатуВКонфигурации = РассчитыватьЗарплатуВКонфигурации - 1; //Так как переключатель принимает значения 1 и 2
	Константа.ТипДопАналитикиЗиК = ТипДопАналитикиЗиК - 1;
	Константа.ОтражатьКурсовуюРазницуВОборотах = ОтражатьКурсовуюРазницуВОборотах;
	Константа.РозничнаяКатегорияЦен = РозничнаяКатегорияЦен; 
	Константа.БазРежимОплаты = БазРежимОплаты;
    
	// переприсвоим глобальные переменные
	Гривня = Константа.БазоваяВалюта;
КонецПроцедуры

// ======================================
Процедура ИзмШаг(Дельта)
	Шаг = Шаг + Дельта;
	Форма.ИспользоватьСлой("Общий,Слой"+Шаг);
	УстСовет();
КонецПроцедуры 

// ======================================
Процедура ПриОткрытии()
	Форма.Заголовок("Настройка параметров учета");
	
	// проверим наличие документов в информационной базе
    Док = СоздатьОбъект("Документ");
	Док.ВыбратьДокументы();
	ЕстьДокументы = Док.ПолучитьДокумент();
    
	ДатаПериодическихЗначений = РабочаяДата();

	// заполним списки детальностей комментарикев по умолчанию	
	спДетальностьКомментариев.ДобавитьЗначение(0, "0: Без комментариев");
	спДетальностьКомментариев.ДобавитьЗначение(1, "1: Минимальная детальность комментариев");
	спДетальностьКомментариев.ДобавитьЗначение(2, "2: Средняя детальность комментариев");
	спДетальностьКомментариев.ДобавитьЗначение(3, "3: Максимальная детальность комментариев");

	ПрочитатьЗначения();
     
	Форма.АвансовыйПлатеж.ВыборГруппы(0);
	Форма.БазВаловыйДоход.ВыборГруппы(0);
	Форма.БазВаловыйРасход.ВыборГруппы(0);
	
	Форма.БазВидДеятельности.ВыборГруппы(0);
	Форма.БазВыписалНН.ВыборГруппы(0);
	Форма.БазЕдиница.ВыборГруппы(0);
	Форма.БазНДС.ВыборГруппы(0);
	Форма.БазоваяВалюта.ВыборГруппы(0);
	Форма.БазОтпустил.ВыборГруппы(0);
	Форма.БазФирма.ВыборГруппы(0);
	Форма.БазЧастноеЛицо.ВыборГруппы(0);
	Форма.БартерВалДох.ВыборГруппы(0);
	Форма.БартерВалРасх.ВыборГруппы(0);
	Форма.ВаловыйДоходВалюта.ВыборГруппы(0);
	Форма.ВаловыйДоходЗадолж.ВыборГруппы(0);
	Форма.ВаловыйРасходВалюта.ВыборГруппы(0);
	Форма.ВаловыйРасходЗадолж.ВыборГруппы(0);
	Форма.ВидЗатратНеоперКР.ВыборГруппы(0);
	Форма.ВидЗатратОперКР.ВыборГруппы(0);
	Форма.ВидЗатратСебестРеалВалюты.ВыборГруппы(0);
	Форма.ВидЗатратСебестРеалПроизвЗапасов.ВыборГруппы(0);
	Форма.ЕдиницаВеса.ВыборГруппы(0);
	Форма.КурсоваяРазница.ВыборГруппы(0);
	Форма.НиДоходНиРасход.ВыборГруппы(0);
	Форма.ОсновнойПокупатель.ВыборГруппы(0);
	Форма.ОсновнойПоставщик.ВыборГруппы(0);
	Форма.ОсновнойСклад.ВыборГруппы(0);
	Форма.СлужебныйТМЦ.ВыборГруппы(0);
	Форма.ТМЦБланкиСтрогойОтчетности.ВыборГруппы(0);
	Форма.ТоварыВАссортименте.ВыборГруппы(0);
	Форма.ЧастичнаяОтгрузка.ВыборГруппы(0);     
	
	//Производство + новые                      
	Форма.БазПодразделениеПроизводство .ВыборГруппы(0);     
	Форма.МестоХраненияБрака .ВыборГруппы(0);     
	Форма.БазВидЗатратТМЦ.ВыборГруппы(0);     
	Форма.БазПодразделениеПродажи.ВыборГруппы(0);     
	
	Шаг = 0;
	ИзмШаг(1);
	ПоследнийШаг = 12;
КонецПроцедуры 

// ===============================
Функция УстДоступность()
	Форма.кНазад.Доступность(?(Шаг=1, 0, 1));
	Форма.кДальше.Доступность(?(Шаг=ПоследнийШаг, 0, 1));
	
	Форма.БазоваяВалюта.Доступность(1-ЕстьДокументы);
	
	// быстрая продажа	
	Форма.ПечКолЭкзСчетаПриБыстройПродаже.Доступность(ВыпСчетПриБыстройПродаже);
	Форма.ПечКолЭкзНакладнойПриБыстройПродаже.Доступность(ВыпНакладнуюПриБыстройПродаже);
	Форма.ПечКолЭкзННПриБыстройПродаже.Доступность(ВыпННПриБыстройПродаже);
	Форма.ПечКолЭкзПрихОрдераПриБыстройПродаже.Доступность(ВыпПрихОрдерПриБыстройПродаже);
       
	//Регистр Обороты
	Если ОтражатьКурсовуюРазницуВОборотах > 1 Тогда
		Форма.КурсоваяРазница.Доступность(1);
		Форма.тКурсоваяРазница.Доступность(1);
	Иначе                                     
		Форма.КурсоваяРазница.Доступность(0);
		Форма.тКурсоваяРазница.Доступность(0);
	КонецЕсли;  
	
	Если РассчитыватьЗарплатуВКонфигурации = 2 Тогда //В текущей конфигурации
		Форма.тТипДопАналитикиЗиК.Доступность(0);
		Форма.ТипДопАналитикиЗиК.Доступность(0);
		Форма.ТипДопАналитикиЗиК1.Доступность(0);
		Форма.ТипДопАналитикиЗиК2.Доступность(0);
	Иначе                                     
		Форма.тТипДопАналитикиЗиК.Доступность(1);
		Форма.ТипДопАналитикиЗиК.Доступность(1); 
		Форма.ТипДопАналитикиЗиК1.Доступность(1);
		Форма.ТипДопАналитикиЗиК2.Доступность(1);
	КонецЕсли;  
	
	Возврат "";
КонецФункции

// ======================================
Процедура кОк()
	ЗаписатьЗначения();
	Форма.Закрыть();
КонецПроцедуры 

// ======================================
Процедура кОтмена()
	Если Вопрос("Прекратить работу помощника?"+РазделительСтрок+"(Сделанные изменения не будут сохранены)",4)=6 Тогда
		Форма.Закрыть();
	КонецЕсли;
КонецПроцедуры 

// ======================================
Процедура кФирмы()
	ОткрытьФорму("Справочник.Фирмы");
КонецПроцедуры 

// ======================================
Процедура кСотрудники()
	ОткрытьФорму("Справочник.Сотрудники");
КонецПроцедуры 

// ===============================
// Название: ПриИзмененииНастроекБыстройПродажи
// Параметры:
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//   элементы диалога, в которых задаются настройки быстрой продажи
// Наименование,.
// Описание:  устанавливает доступность элементов настройки быстрой продажи
Процедура ПриИзмененииНастроекБыстройПродажи()
	
	ПечКолЭкзСчетаПриБыстройПродаже = ?(ВыпСчетПриБыстройПродаже<>0,ПечКолЭкзСчетаПриБыстройПродаже,0); 
	Форма.ПечКолЭкзСчетаПриБыстройПродаже.Доступность(ВыпСчетПриБыстройПродаже);
	
	ПечКолЭкзНакладнойПриБыстройПродаже = ?(ВыпНакладнуюПриБыстройПродаже<>0,ПечКолЭкзНакладнойПриБыстройПродаже,0); 
	Форма.ПечКолЭкзНакладнойПриБыстройПродаже.Доступность(ВыпНакладнуюПриБыстройПродаже);
	
	ПечКолЭкзННПриБыстройПродаже = ?(ВыпННПриБыстройПродаже<>0,ПечКолЭкзННПриБыстройПродаже,0); 
	Форма.ПечКолЭкзННПриБыстройПродаже.Доступность(ВыпННПриБыстройПродаже);
	
	ПечКолЭкзПрихОрдераПриБыстройПродаже = ?(ВыпПрихОрдерПриБыстройПродаже<>0,ПечКолЭкзПрихОрдераПриБыстройПродаже,0); 
	Форма.ПечКолЭкзПрихОрдераПриБыстройПродаже.Доступность(ВыпПрихОрдерПриБыстройПродаже);
	
КонецПроцедуры	// ПриИзмененииНастроекБыстройПродажи
