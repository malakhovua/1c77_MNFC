// ===============================
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
// ===============================

// таблица с обновлениями
Перем Таб;
// переменные для управления работой помощника
Перем ТаблицаНепуста, ОшибкаВоВремяОбновления, Шаг;
Перем спСлоиРелизов, НачСлойРелиза, КонСлойРелиза;
// номера релизов информационной базы и конфигурации
Перем ТекущаяРедакция, РедакцияКонфигурации; 
Перем ТекущийРелиз, РелизКонфигурации;
Перем стрТекущийРелиз, стрРелизКонфигурации;
// переменные для вывода информации о работе помощника
Перем стрСовет, стрТекущийЭтап, стрВыполненныйЭтап;

Перем Расшифровка770004_1, Расшифровка770004_2;
             

// ===============================
// "СЛУЖЕБНЫЕ" ПРОЦЕДУРЫ И ФУНКЦИИ
// ===============================

// ======================================
// Рисует слои помощника в зависимости от текущего шага
Процедура НарисоватьСлои()
	Форма.ИспользоватьСлой("Общий, Слой"+Строка(Шаг),2);
	Если Шаг = 2 Тогда
		ВидЗатратСебестРеалВалюты.ВыборГруппы(0);
		ВидЗатратСебестРеалПроизвЗапасов.ВыборГруппы(0);
	КонецЕсли;
КонецПроцедуры 

// ===============================
// Выводит советы по заполнению реквизитов
Процедура ПоказатьСовет()
	стрСовет = "Текущий релиз: " + стрТекущийРелиз;
	Если Шаг = 1 Тогда
	    стрСовет = "Здесь будут показываться советы и комментарии по выполняемым действиям во время работы помощника.";
	КонецЕсли;
КонецПроцедуры

// ===============================
Функция Получить(Секция,нСтроки,нКолонки)
    Возврат Секция.Область(нСтроки,нКолонки,нСтроки,нКолонки).Текст;
КонецФункции
                   
// ======================================
Процедура РассчитатьТекущийРелизИКонфигурацию()
	стрТекущийРелиз = Константа.НомерРелиза;
	ТекущийРелиз 	= Число(СтрЗаменить(стрТекущийРелиз, ".",""));
	ТекущаяРедакция = Число(Сред(стрТекущийРелиз,6,1));
КонецПроцедуры 

// ===============================
Процедура ОчиститьИсторию(Идентификатор,Элемент=0,ОтДаты=0,ДоДаты=0)

	Пер = СоздатьОбъект("Периодический");
	Если ПустоеЗначение(Элемент) = 1 Тогда
		Пер.ИспользоватьОбъект(Идентификатор);
	Иначе
		Пер.ИспользоватьОбъект(Идентификатор,Элемент);
	КонецЕсли;

	Пер.ВыбратьЗначения();
	Пока Пер.ПолучитьЗначение() = 1 Цикл
		Если ПустоеЗначение(ОтДаты) = 0 Тогда
			Если Пер.ДатаЗнач < ОтДаты Тогда
				// не раньше заданной даты
			    Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ПустоеЗначение(ДоДаты) = 0 Тогда
			Если Пер.ДатаЗнач > ДоДаты Тогда
				// не позднее заданной даты
			    Продолжить;
			КонецЕсли;
		КонецЕсли;
		Пер.Удалить();
	КонецЦикла;

	Пер = 0;
КонецПроцедуры

// ===============================
// Выполняет проверку корректности заполнения реквизитов после каждого шага
Функция ПроверитьШаг()
    Если Шаг = 2 Тогда
		Если ТекущаяРедакция <> РедакцияКонфигурации Тогда
			ПоказатьСовет();
			стрСовет = стрСовет + РазделительСтрок + "Не выполнено обновление редакции!";
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

// ======================================
Процедура ДобавитьКорректнуюПроводку(СчетДт, СчетКт)
	КоррПров = СоздатьОбъект("КорректныеПроводки");
	
	ТакаяПроводкаЕсть = 0;
	КоррПров.ВыбратьКорректныеПроводкиПоСчету(СчетДт,0);
	Пока (КоррПров.ПолучитьКорректнуюПроводку() = 1) и (ТакаяПроводкаЕсть = 0) Цикл
		Если КоррПров.СчетКт.Код = СчетКт Тогда
			ТакаяПроводкаЕсть = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ТакаяПроводкаЕсть = 0 Тогда
		КоррПров.Новая();
		КоррПров.СчетДт = СчетПоКоду(СчетДт);
		КоррПров.СчетКт = СчетПоКоду(СчетКт);
		КоррПров.Записать();
	КонецЕсли;
КонецПроцедуры

// ======================================
Процедура УдалитьКорректнуюПроводку(СчетДт, СчетКт) // СчетДт, СчетКт - строки, коды счетов
	КоррПров = СоздатьОбъект("КорректныеПроводки");
	КоррПров.ВыбратьКорректныеПроводкиПоСчету(СчетДт,0);
	Пока КоррПров.ПолучитьКорректнуюПроводку() = 1 Цикл
		Если КоррПров.СчетКт.Код = СчетКт Тогда
			КоррПров.Удалить();
			Прервать; // предполагаем, что повторений нет
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// ======================================
Процедура УстановитьДополнительно(Знач НиО, Параметр, НаДату, Значение)
	Перем	Спис, СпрНиО, Стр, Н, Пар, Зн;
	
	// код?
	Если ТипЗначенияСтр(НиО)="Строка" Тогда
		СпрНиО = СоздатьОбъект("Справочник.ШкалаСтавок");
		Если СпрНиО.НайтиПоКоду(НиО)=1 Тогда
			НиО = СпрНиО.ТекущийЭлемент();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// парсим
	Спис = СоздатьОбъект("СписокЗначений");
	глПарсить(НиО.Дополнительно.Получить(НаДату), Спис);
	
	// изменяем нужный параметр
	Спис.Установить(Параметр, СокрЛП(Строка(Значение)));
	
	// список в строку...
	Стр = "";
	Для Н = 1 По Спис.РазмерСписка() Цикл
		Зн = Спис.ПолучитьЗначение(Н, Пар);
		Стр = Стр + Пар + "=" + Зн + ";";
	КонецЦикла;
	
	// записываем
	СпрНиО = СоздатьОбъект("Справочник.ШкалаСтавок");
	СпрНиО.НайтиЭлемент(НиО);
	СпрНиО.Дополнительно.Установить(НаДату, Стр);
	СпрНиО.Записать();
КонецПроцедуры

// ======================================
Процедура ОбновлениеГудвила()
	Перем	Опер, Док, Сч1, Сч2, Таб;
	
	// заменим проводки со счетом 19 на 192
	Состояние("Выполнение изменений в учете гудвила");
	
	Сч1 = СчетПоКоду("19");
	Сч2 = СчетПоКоду("192");
	
	Если (ПустоеЗначение(Сч1)=1) Или (ПустоеЗначение(Сч1)=2) Тогда
		Возврат; // странно...
	КонецЕсли;
	
	Таб = СоздатьОбъект("ТаблицаЗначений");
	Таб.НоваяКолонка("Док");
	
	Док = СоздатьОбъект("Документ");
	
	Опер = СоздатьОбъект("Операция");
	Опер.ВыбратьОперацииСПроводками(,,Сч1);
	Пока Опер.ПолучитьПроводку()=1 Цикл
		Док.НайтиДокумент(Опер.Документ); // без такой "развязки" Таб будет содержать кучу ссылок на последний документ
				
		Таб.НоваяСтрока();
		Таб.Док = Док.ТекущийДокумент();
	КонецЦикла;
	
	Таб.Свернуть("Док",""); // список документов, в которых есть движения по сч.19
	
	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку()=1 Цикл
		Опер.НайтиОперацию(Таб.Док);
		Опер.ВыбратьПроводки();
		Пока Опер.ПолучитьПроводку()=1 Цикл
			Если Опер.Дебет.Счет=Сч1 Тогда
				Опер.Дебет.Счет = Сч2;
			КонецЕсли;
			Если Опер.Кредит.Счет=Сч1 Тогда
				Опер.Кредит.Счет = Сч2
			КонецЕсли;
		КонецЦикла;
		Опер.Записать();
	КонецЦикла;
КонецПроцедуры

// ======================================
Процедура ОбновлениеРелиза(Номер)
 	Перем НомерСтр;
 	
 	ОшибкаВоВремяОбновления = 0;
 	НачатьТранзакцию();
	
	Если Номер = 770002 Тогда // 
		// сюда впишем код, отрабатывающий при переходе на релиз
		// комментарии о выполняемых действиях дублируем с помощью глКомментарий()
		// если во время работы происходит ошибка, установим ОшибкаВоВремяОбновления в 1

		глКомментарий("Заполнение словаря.",3,,"I");
		Словарь = СоздатьОбъект("Справочник.Словарь");
		Если Словарь.НайтиПоНаименованию("Командировочное удостоверение",0) = 1 Тогда
			Словарь.Перевод = "Посвід. про відрядження";
			Словарь.Записать();
		КонецЕсли;
		Если Словарь.НайтиПоНаименованию("Покупка валюты",0) = 1 Тогда
			Словарь.Перевод = "Придб. валюти";
			Словарь.Записать();
		КонецЕсли;
		Если Словарь.НайтиПоНаименованию("ГТД",0) = 1 Тогда
			Словарь.Перевод = "ВМД";
			Словарь.Записать();
		КонецЕсли;
		Словарь = 0;     
		
		глКомментарий("Заполнение справочника ""Валовые доходы и расходы"".",3,,"I");
		СпрВДР = СоздатьОбъект("Справочник.ВалДоходыРасходы");
		Если СпрВДР.НайтиПоКоду("2/2/1") = 1 Тогда
			СпрВДР.Наименование = "(З 29.01) Винагорода за здійснення довірчих операций з коштами";
			СпрВДР.Записать();
		Иначе
			ОшибкаВоВремяОбновления = 1;	
		КонецЕсли;   
		Если СпрВДР.НайтиПоКоду("2/2/2") = 1 Тогда
			СпрВДР.Наименование = "(З 29.02) Винагорода за здійснення довірчих операций з майном";
			СпрВДР.Записать();
		Иначе
			ОшибкаВоВремяОбновления = 1;	
		КонецЕсли; 
				Если СпрВДР.НайтиПоКоду("1/2/6") = 1 Тогда
			СпрВДР.Наименование = "(Б 2.06) Доход від надання коштів довіреній особі";
			СпрВДР.Записать();
		Иначе
			ОшибкаВоВремяОбновления = 1;	
		КонецЕсли;   
		Если СпрВДР.НайтиПоКоду("1/2/7") = 1 Тогда
			СпрВДР.Наименование = "(Б 2.07) Доход від надання майна довіреній особі";
			СпрВДР.Записать();
		Иначе
			ОшибкаВоВремяОбновления = 1;	
		КонецЕсли;   
		СпрВДР = 0;

		// нужно перепровести все документы по производству в связи с изменением
		// способа отражения незавершенки в регистрах
		// сдвинем границу последовательности
		глКомментарий("Сдвиг границы последовательности ""Себестоимость продукции"".",3,,"I");
		докНезавершенка = СоздатьОбъект("Документ.НезавершенноеПроизводство");
		докНезавершенка.ВыбратьДокументы(,);
		Пока докНезавершенка.ПолучитьДокумент() = 1 Цикл
			Если Последовательность.СебестоимостьПродукции.Сравнить(докНезавершенка.ТекущийДокумент()) >= 0 Тогда
			    // последовательность находится позже, откатим ее назад (перед документом)
				Последовательность.СебестоимостьПродукции.Установить(
					СформироватьПозициюДокумента(докНезавершенка.ТекущийДокумент(),-1));
			КонецЕсли;
			Прервать;
		КонецЦикла;
		докНезавершенка = 0;
		
		// Пропишем для элементов справочника необоротных активов реквизит фирма
		глКомментарий("Установка фирм для необоротных активов",3,,"I");
		
		спрФирмы 		= СоздатьОбъект("Справочник.Фирмы");
		спрНА 			= СоздатьОбъект("Справочник.НеоборотныеАктивы");
		спДвойнойУчет 	= СоздатьОбъект("СписокЗначений");
		
		спрФирмы.ВыбратьЭлементы();
		Пока спрФирмы.ПолучитьЭлемент() = 1 Цикл 
			ТекФирма = спрФирмы.ТекущийЭлемент();
		    ТекПрефикс = СокрЛП(ТекФирма.Префикс) + "-";
			
			Ит = СоздатьОбъект("БухгалтерскиеИтоги");
			Ит.ИспользоватьРазделительУчета(ТекФирма);
			Ит.ИспользоватьСубконто(ВидыСубконто.НеоборотныеАктивы);
			Ит.ВыполнитьЗапрос("01.01.1980", ПолучитьТА(),"10;11;12",,,1,,1);
		
			Ит.ВыбратьСубконто(1);
			Пока Ит.ПолучитьСубконто(1) = 1 Цикл
				НА = Ит.Субконто(1);
				Если спрНА.НайтиЭлемент(НА)=0 Тогда
					Продолжить;                  
				КонецЕсли;
		
				Если (ПустоеЗначение(спрНА.Фирма)=0) И (спрНА.Фирма <> ТекФирма) Тогда
					Текст = "Необоротный актив "+НА;
					Если спДвойнойУчет.НайтиЗначение(НА)=1 Тогда
						Текст = Текст + " числится еще и на фирме: "+ТекФирма;
					Иначе
						спДвойнойУчет.ДобавитьЗначение(НА);
						Текст = Текст + " числится на двух фирмах: "+спрНА.Фирма+" и "+ТекФирма;
					КонецЕсли;
					глКомментарий(Текст,0,,"!");
				Иначе
					спрНА.Фирма = ТекФирма;
					спрНА.Код	= ТекПрефикс + Формат(Число(спрНА.Код),"Ч(0)"+(11-СтрДлина(ТекПрефикс)));
					спрНА.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;                              
		
		// очистим элементы, по которым ведется двойной учет
		Для Инд=1 По спДвойнойУчет.РазмерСписка() Цикл
			НА = спДвойнойУчет.ПолучитьЗначение(Инд);
			Если спрНА.НайтиЭлемент(НА)=0 Тогда
				Продолжить;                  
			КонецЕсли;
			спрНА.Фирма = 0;
			спрНА.Код	= Формат(Число(глНомерБезПрефикса(спрНА.Код)),"Ч(0)11");
			Попытка
				спрНА.Записать();
			Исключение
				спрНА.УстановитьНовыйКод("0");
				спрНА.Записать();
			КонецПопытки;
		КонецЦикла;

		спрФирмы 		= 0;
		спрНА 			= 0;
		спДвойнойУчет 	= 0;

		// добавляем в таблицу описание для релиза
		ТаблицаНепуста=1;
		Таб.ВывестиСекцию(Номер);
	
	ИначеЕсли Номер = 770003 Тогда
		// сюда впишем код, отрабатывающий переход на релиз 7.70.003
		Константа.ОтражатьФактСебестВОборотах = 2;
		
		План = СоздатьОбъект("Счет.Основной");
		Если План.НайтиПоКоду("68.5.6") = 1 Тогда
			План.ПолнНаименование = "Розрахунки з позабюджетними фондами";
			План.НаименованиеУкр = "Розрахунки з позабюджетними фондами";
			План.Записать();
		КонецЕсли;
		План = 0;    
                      
		СпрНиО = СоздатьОбъект("Справочник.ШкалаСтавок");
		Если СпрНиО.НайтиПоКоду("ФЗПБезраб") = 1 Тогда
			СпрНиО.Ставка.Установить('09.02.2002', 0.021);
			СпрНиО.Дополнительно.Установить('01.05.2002', "Макс. база=2200;");
		Иначе
			глКомментарий("В справочнике ""Шкала ставок наалогов и отчислений"" не найден элемент с кодом ""ФЗПБезраб"".",0,,"!");
			ОшибкаВоВремяОбновления = 1;	
		КонецЕсли;
		Если СпрНиО.НайтиПоКоду("ФЗПСоцСтрах") = 1 Тогда
			СпрНиО.Ставка.Установить('09.02.2002', 0.029);
			СпрНиО.Дополнительно.Установить('01.05.2002', "Макс. база=2200;");
		Иначе
			глКомментарий("В справочнике ""Шкала ставок налогов и отчислений"" не найден элемент с кодом ""ФЗПСоцСтрах"".",0,,"!");
			ОшибкаВоВремяОбновления = 1;	
		КонецЕсли;   
		Если СпрНиО.НайтиПоКоду("НДС") = 0 Тогда
			глКомментарий("В справочнике ""Шкала ставок налогов и отчислений"" не найдена группа с кодом ""НДС"". Новый элемент с кодом ""НДСвБюджет"" создан в корневом каталоге.",0,,"!!");
		КонецЕсли; 
		Гр1 = СпрНиО.ТекущийЭлемент();
		Если СпрНиО.НайтиПоКоду("НДСвБюджет") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "НДСвБюджет";
			СпрНиО.Наименование="Уплата НДС в бюджет";
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		СпрНиО = 0;
		
		СпрВЗ = СоздатьОбъект("Справочник.ВидыЗатрат");
		СоздаватьЭлемент = 1;
		Если СпрВЗ.НайтиПоНаименованию("Прочие операционные затраты") = 1 Тогда
			Если СпрВЗ.ЭтоГруппа() = 1 Тогда
				СоздаватьЭлемент = 0;
			КонецЕсли;               
		КонецЕсли;
		Если СоздаватьЭлемент = 1 Тогда
			СпрВЗ.НоваяГруппа();
			СпрВЗ.Наименование = "Прочие операционные затраты";
			СпрВЗ.Записать(); 
		КонецЕсли;
		Гр1 = СпрВЗ.ТекущийЭлемент();
		Если СпрВЗ.НайтиПоНаименованию("Себест. реализов. валюты") = 0 Тогда
			СпрВЗ.Новый();
			СпрВЗ.Наименование = "Себест. реализов. валюты";
			СпрВЗ.ПолнНаименование = "Себестоимость реализованной валюты";
			СпрВЗ.Счет = СчетПоКоду("84");
			СпрВЗ.Постоянный = 0;
			СпрВЗ.Родитель = Гр1;
			СпрВЗ.Записать();      
		КонецЕсли;
		Если ПустоеЗначение(ВидЗатратСебестРеалВалюты) = 1 Тогда
			Константа.ВидЗатратСебестРеалВалюты = СпрВЗ.ТекущийЭлемент();
		Иначе
			Константа.ВидЗатратСебестРеалВалюты = ВидЗатратСебестРеалВалюты;
		КонецЕсли;
		Если СпрВЗ.НайтиПоНаименованию("Себест. реализов. произв. запасов") = 0 Тогда
			СпрВЗ.Новый();
			СпрВЗ.Наименование = "Себест. реализов. произв. запасов";
			СпрВЗ.ПолнНаименование = "Себестоимость реализованных производственных запасов";
			СпрВЗ.Счет = СчетПоКоду("84");
			СпрВЗ.Постоянный = 0;
			СпрВЗ.Родитель = Гр1;
			СпрВЗ.Записать();
		КонецЕсли;
		Если ПустоеЗначение(ВидЗатратСебестРеалПроизвЗапасов) = 1 Тогда
			Константа.ВидЗатратСебестРеалПроизвЗапасов = СпрВЗ.ТекущийЭлемент();
		Иначе
			Константа.ВидЗатратСебестРеалПроизвЗапасов = ВидЗатратСебестРеалПроизвЗапасов;
		КонецЕсли;
		СпрВЗ = 0;
		
		глКомментарий("Заполнение словаря.",3,,"I");
		Словарь = СоздатьОбъект("Справочник.Словарь");
		Если Словарь.НайтиПоНаименованию("Прочее",0) = 0 Тогда
			глКомментарий("В справочнике ""Русско-украинский словарь"" не найдена группа с кодом ""Прочее"". Новые элементы созданы в корневом каталоге.",0,,"!!");
		КонецЕсли;    
		Гр1 = Словарь.ТекущийЭлемент();
		Если Словарь.НайтиПоНаименованию("Прямолин. списание",0) = 0 Тогда
			Словарь.Новый();
			Словарь.Наименование = "Прямолин. списание";
			Словарь.Перевод = "Прямолін. списання";
			Словарь.Родитель = Гр1;      
			Словарь.УстановитьНовыйКод();
			Словарь.Записать();
		КонецЕсли;    
		Если Словарь.НайтиПоНаименованию("Уменьшение остатка",0) = 0 Тогда
			Словарь.Новый();
			Словарь.Наименование = "Уменьшение остатка";
			Словарь.Перевод = "Зменшення залишку";
			Словарь.Родитель = Гр1;
			Словарь.УстановитьНовыйКод();
			Словарь.Записать();
		КонецЕсли;
		Если Словарь.НайтиПоНаименованию("Ускор. уменьшение остатка",0) = 0 Тогда
			Словарь.Новый();
			Словарь.Наименование = "Ускор. уменьшение остатка";
			Словарь.Перевод = "Прискор. зменшення залишку";
			Словарь.Родитель = Гр1;
			Словарь.УстановитьНовыйКод();
			Словарь.Записать();
		КонецЕсли;
		Если Словарь.НайтиПоНаименованию("Производственный (сумма единиц)",0) = 0 Тогда
			Словарь.Новый();
			Словарь.Наименование = "Производственный (сумма единиц)";
			Словарь.Перевод = "Виробничий (сума одиниць)";
			Словарь.Родитель = Гр1;
			Словарь.УстановитьНовыйКод();
			Словарь.Записать();
		КонецЕсли;
		Если Словарь.НайтиПоНаименованию("Кумулятивный",0) = 0 Тогда
			Словарь.Новый();
			Словарь.Наименование = "Кумулятивный";
			Словарь.Перевод = "Кумулятивний";
			Словарь.Родитель = Гр1;
			Словарь.УстановитьНовыйКод();
			Словарь.Записать();
		КонецЕсли;
		Если Словарь.НайтиПоНаименованию("Налоговый",0) = 0 Тогда
			Словарь.Новый();
			Словарь.Наименование = "Налоговый";
			Словарь.Перевод = "Податковий";
			Словарь.Родитель = Гр1;
			Словарь.УстановитьНовыйКод();
			Словарь.Записать();
		КонецЕсли;
		Словарь = 0;     

		// Заполним новые реквизиты РСчет и РСчетКонтрагента в существующих документах ЗаявлениеНаАккредитив
		глКомментарий("Обработка существующих документов ""Заявление на аккредитив"".",3,,"I");
		СпрДС 	= СоздатьОбъект("Справочник.ДенежныеСчета");
		Док 	= СоздатьОбъект("Документ.ЗаявлениеНаАккредитив");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Док.РСчет = Док.Фирма.РС;
			// счет бенефициара определяем из справочника
			Если ПустоеЗначение(Док.Контрагент) = 0 Тогда
				СпрДС.ИспользоватьВладельца(Док.Контрагент);
				СпрДС.ВыбратьЭлементы();
				Если СпрДС.ПолучитьЭлемент() = 1 Тогда
					Док.РСчетКонтрагента = СпрДС.ТекущийЭлемент();
				КонецЕсли;
			КонецЕсли;
			Док.Записать();
		КонецЦикла;
		Док 	= 0;
		СпрДС 	= 0;
		
		// Заполним новые реквизиты БазаНДС и СуммаНДС в существующих документах НалоговаяНакладная
		глКомментарий("Обработка существующих документов ""Налоговая накладная"".",3,,"I");
		Док = СоздатьОбъект("Документ.НалоговаяНакладная");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл                
		    НачВалюта = ?(ПустоеЗначение(Док.Валюта)=1,Гривня,Док.Валюта);
			Док.СуммаНДС = глПересчет(Док.Итог("НДС"),НачВалюта,Гривня,Док.Курс,Док.ДатаДок);
			Док.БазаНДС  = глПересчет(Док.Итог("СуммаБезНДС"),НачВалюта,Гривня,Док.Курс,Док.ДатаДок);
			Док.Записать();
		КонецЦикла;
		глКомментарий("Обработка существующих документов ""Приложение 2 к налоговой накладной"".",3,,"I");
		Док = СоздатьОбъект("Документ.Приложение2");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл                
		    НачВалюта = ?(ПустоеЗначение(Док.Валюта)=1,Гривня,Док.Валюта);
			Док.ИзмСуммыНДС = глПересчет(Док.Итог("ИзмНДС"),НачВалюта,Гривня,Док.Курс,Док.ДатаДок);
			Док.ИзмБазыНДС  = глПересчет(Док.Итог("ИзмСуммыБезНДС"),НачВалюта,Гривня,Док.Курс,Док.ДатаДок);
			Док.Записать();
		КонецЦикла;
		Док = 0;   
		
		// Устанавливаем для пустых реквизитов Договор тип значения "Документ"
		глКомментарий("Обработка существующих документов ""Счет-фактура"".",3,,"I");
		Док = СоздатьОбъект("Документ.Счет");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл                
			Если ПустоеЗначение(Док.Договор) = 1 Тогда
			    Док.Провести(0);
			КонецЕсли;
		КонецЦикла;
		Док = 0;
		
		// заполним новые константы
		Константа.РезервироватьТоварНаСегодня = Нет;
		Константа.РезервироватьТолькоСвободныйТовар = Нет;

		// добавляем в таблицу описание для релиза
		ТаблицаНепуста=1;
		Таб.ВывестиСекцию(Номер);	 
		
	ИначеЕсли Номер = 770004 Тогда
		
		// план счетов
		План = СоздатьОбъект("Счет.Основной");
		Если План.НайтиПоКоду("13") = 1 Тогда
			План.ПолнНаименование = "Знос (амортизацiя) необоротних активів";
			План.НаименованиеУкр = "Знос (амортизацiя) необоротних активів";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("13.3") = 1 Тогда
			План.ПолнНаименование = "Накопичена амортизацiя нематеріальних активів";
			План.НаименованиеУкр = "Накопичена амортизацiя нематеріальних активів";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("19") = 1 Тогда
			План.ПолнНаименование = "Гудвіл при придбаннi";
			План.НаименованиеУкр = "Гудвіл при придбаннi";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("19.1") = 1 Тогда
			План.ПолнНаименование = "Гудвіл";
			План.НаименованиеУкр = "Гудвіл";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("19.2") = 1 Тогда
			План.ПолнНаименование = "Негативний гудвіл";
			План.НаименованиеУкр = "Негативний гудвіл";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("36.3") = 1 Тогда
			План.ПолнНаименование = "Розрахунки з учасниками ПФГ";
			План.НаименованиеУкр = "Розрахунки з учасниками ПФГ";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("49.1") = 1 Тогда
			План.ПолнНаименование = "Технiчнi резерви";
			План.НаименованиеУкр = "Технiчнi резерви";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("49.2") = 1 Тогда
			План.ПолнНаименование = "Резерви iз страхування життя";
			План.НаименованиеУкр = "Резерви iз страхування життя";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("49.3") = 1 Тогда
			План.ПолнНаименование = "Частка перестраховиків у технiчних резервах";
			План.НаименованиеУкр = "Частка перестраховиків у технiчних резервах";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("49.4") = 1 Тогда
			План.ПолнНаименование = "Частка перестраховиків у резервах iз страхування життя";
			План.НаименованиеУкр = "Частка перестраховиків у резервах iз страхування життя";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("49.5") = 1 Тогда
			План.ПолнНаименование = "Результат змiни технiчних резервiв";
			План.НаименованиеУкр = "Результат змiни технiчних резервiв";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("49.6") = 1 Тогда
			План.ПолнНаименование = "Результат змiни резервiв iз страхування життя";
			План.НаименованиеУкр = "Результат змiни резервiв iз страхування життя";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("63.3") = 1 Тогда
			План.ПолнНаименование = "Розрахунки з учасниками ПФГ";
			План.НаименованиеУкр = "Розрахунки з учасниками ПФГ";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("70.5") = 1 Тогда
			План.ПолнНаименование = "Перестрахування";
			План.НаименованиеУкр = "Перестрахування";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("71.8") = 1 Тогда
			План.ПолнНаименование = "Дохiд вiд безоплатно одержаних оборотних активiв";
			План.НаименованиеУкр = "Дохiд вiд безоплатно одержаних оборотних активiв";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("79.1") = 1 Тогда
			План.ПолнНаименование = "Результат операцiйної діяльності";
			План.НаименованиеУкр = "Результат операцiйної діяльності";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("90.4") = 1 Тогда
			План.ПолнНаименование = "Страховi виплати";
			План.НаименованиеУкр = "Страховi виплати";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("98") = 1 Тогда
			План.ПолнНаименование = "Податок на прибуток";
			План.НаименованиеУкр = "Податок на прибуток";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("98.1") = 1 Тогда
			План.ПолнНаименование = "Податок на прибуток від звичайної діяльності";
			План.НаименованиеУкр = "Податок на прибуток від звичайної діяльності";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("98.2") = 1 Тогда
			План.ПолнНаименование = "Податок на прибуток від надзвичайних подій";
			План.НаименованиеУкр = "Податок на прибуток від надзвичайних подій";
			План.Записать();
		КонецЕсли;
		Если План.НайтиПоКоду("ОС.4") = 1 Тогда
			План.ПолнНаименование = "Основні засоби, група 4 (податковий облік)";
			План.НаименованиеУкр = "Основні засоби, група 4 (податковий облік)";
			План.Записать();
		КонецЕсли;
		
		УстановитьДополнительно("СотрПодоходн", "Учит. детей до", '01.01.2003', 1850);
		УстановитьДополнительно("СотрПодоходн", "Учит. детей до", '01.07.2003', 2370);
		
		УстановитьДополнительно("АмортГр2", "Пообъектно", '01.01.2003', 0);
		УстановитьДополнительно("АмортГр3", "Пообъектно", '01.01.2003', 0);
		
		// шкала ставок
		СпрНО = СоздатьОбъект("Справочник.ШкалаСтавок");
		
		СпрНО.НайтиПоКоду("ОС_НМА_МБП");
		Гр1 = СпрНО.ТекущийЭлемент();
		
		Если СпрНО.НайтиПоКоду("АмортГр4") = 0 Тогда
			СпрНО.Новый();  
			СпрНО.Код = "АмортГр4";
			СпрНО.Наименование="Амортизация группы 4";
			СпрНО.Родитель = Гр1;
			СпрНО.Записать();
			СпрНО.Ставка.Установить('01.01.2003', 0.15);
			СпрНО.Дополнительно.Установить('01.01.2003', "Пообъектно=0;");
		КонецЕсли;
		
		Если СпрНО.НайтиПоКоду("АмортГр1")=1 Тогда
			СпрНО.Ставка.Установить('01.01.2004', 0.02);
		КонецЕсли;
		Если СпрНО.НайтиПоКоду("АмортГр2")=1 Тогда
			СпрНО.Ставка.Установить('01.01.2004', 0.1);
		КонецЕсли;
		Если СпрНО.НайтиПоКоду("АмортГр3")=1 Тогда
			СпрНО.Ставка.Установить('01.01.2004', 0.06);
		КонецЕсли;
		
		Если СпрНО.НайтиПоКоду("ОСНаЗатраты")=1 Тогда
			СпрНО.Ставка.Установить('01.01.2003', 0.1);
		КонецЕсли;
		
		Если СпрНО.НайтиПоКоду("МинЗарплата")=1 Тогда
			СпрНО.Предел.Установить('01.01.2002', 140);
			СпрНО.Предел.Установить('01.07.2002', 165);
			СпрНО.Предел.Установить('01.01.2003', 185);
			СпрНО.Предел.Установить('01.07.2003', 237);
		КонецЕсли;
		
		// гудвил
		ОбновлениеГудвила();
		
		// контрагенты (плательщики налога на прибыль)
		Спр = СоздатьОбъект("Справочник.Контрагенты");
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если Спр.ЭтоГруппа()=0 Тогда
				Спр.ПлательщикНалогаНаПрибыль.Установить('01.01.1980', 1);
				Если Спр.ВидКонтрагента <> Перечисление.ВидыКонтрагентов.Организация Тогда
					Спр.ПлательщикНалогаНаПрибыль.Установить('01.01.2003', 0);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// договора (плательщики налога на прибыль)
		Док = СоздатьОбъект("Документ.Договор");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент()=1 Цикл
			Док.ПлательщикНалогаНаПрибыль = 1;
			Док.Записать();
		КонецЦикла;
		
		// обновим список корректных проводок
		ДобавитьКорректнуюПроводку("36","71"); // не включенная старая корреспонденция
		
		ДобавитьКорректнуюПроводку("10","13"); // новые корреспонденции
		ДобавитьКорректнуюПроводку("11","13");
		ДобавитьКорректнуюПроводку("12","13");
		ДобавитьКорректнуюПроводку("16","73");
		ДобавитьКорректнуюПроводку("17","98");
		ДобавитьКорректнуюПроводку("54","98");
		ДобавитьКорректнуюПроводку("19","14");
		ДобавитьКорректнуюПроводку("19","37");
		ДобавитьКорректнуюПроводку("19","68");
		ДобавитьКорректнуюПроводку("21","64");
		ДобавитьКорректнуюПроводку("31","66");
		ДобавитьКорректнуюПроводку("37","48");
		ДобавитьКорректнуюПроводку("42","54");
		ДобавитьКорректнуюПроводку("48","50");
		ДобавитьКорректнуюПроводку("49","71");
		ДобавитьКорректнуюПроводку("63","64");
		ДобавитьКорректнуюПроводку("70","63");
		ДобавитьКорректнуюПроводку("70","70");
		ДобавитьКорректнуюПроводку("90","30");
		ДобавитьКорректнуюПроводку("90","31");
		ДобавитьКорректнуюПроводку("90","36");
		ДобавитьКорректнуюПроводку("91","23");
		ДобавитьКорректнуюПроводку("92","23");
		ДобавитьКорректнуюПроводку("93","23");
		ДобавитьКорректнуюПроводку("94","23");
		ДобавитьКорректнуюПроводку("94","49");
		ДобавитьКорректнуюПроводку("97","19");
		ДобавитьКорректнуюПроводку("97","23");
		ДобавитьКорректнуюПроводку("97","65");
		ДобавитьКорректнуюПроводку("97","66");
		ДобавитьКорректнуюПроводку("98","79");
		ДобавитьКорректнуюПроводку("99","19");
		
		УдалитьКорректнуюПроводку("10","71");
		УдалитьКорректнуюПроводку("11","71");
		УдалитьКорректнуюПроводку("12","71");
		УдалитьКорректнуюПроводку("14","71");
		УдалитьКорректнуюПроводку("15","71");
		УдалитьКорректнуюПроводку("16","71");
		УдалитьКорректнуюПроводку("10","73");
		УдалитьКорректнуюПроводку("11","73");
		УдалитьКорректнуюПроводку("12","73");
		УдалитьКорректнуюПроводку("15","73");
		УдалитьКорректнуюПроводку("20","73");
		УдалитьКорректнуюПроводку("21","73");
		УдалитьКорректнуюПроводку("22","73");
		УдалитьКорректнуюПроводку("24","31");
		УдалитьКорректнуюПроводку("28","73");
		УдалитьКорректнуюПроводку("12","68");
		УдалитьКорректнуюПроводку("14","70");
		УдалитьКорректнуюПроводку("15","94");
		УдалитьКорректнуюПроводку("15","95");
		УдалитьКорректнуюПроводку("21","10");
		УдалитьКорректнуюПроводку("30","97");
		УдалитьКорректнуюПроводку("31","97");
		УдалитьКорректнуюПроводку("70","97");
		УдалитьКорректнуюПроводку("37","10");
		УдалитьКорректнуюПроводку("37","11");
		УдалитьКорректнуюПроводку("37","15");
		УдалитьКорректнуюПроводку("44","52");
		УдалитьКорректнуюПроводку("49","79");
		УдалитьКорректнуюПроводку("50","14");
		УдалитьКорректнуюПроводку("79","49");
		УдалитьКорректнуюПроводку("84","10");
		УдалитьКорректнуюПроводку("84","11");
		УдалитьКорректнуюПроводку("84","12");
		УдалитьКорректнуюПроводку("84","15");
		УдалитьКорректнуюПроводку("84","16");
		УдалитьКорректнуюПроводку("97","70");
		УдалитьКорректнуюПроводку("97","76");
		
		// добавляем в таблицу описание для релиза
		ТаблицаНепуста=1;
		Таб.ВывестиСекцию(Номер);
		
	ИначеЕсли Номер = 770005 Тогда
		
		// налоги и отчисления
		СпрНиО = СоздатьОбъект("Справочник.ШкалаСтавок");
		
		СпрНиО.НайтиПоКоду("ЗПФонды");
		Гр1 = СпрНиО.ТекущийЭлемент();
		
		Если СпрНиО.НайтиПоКоду("ФЗПБезрабИнв") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "ФЗПБезрабИнв";
			СпрНиО.Наименование="Безработица из фонда з/п (инвалиды)";
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		
		Гр1 = ПолучитьПустоеЗначение("Справочник.ШкалаСтавок");
		
		Если СпрНиО.НайтиПоКоду("ПрожМинТруд") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "ПрожМинТруд";
			СпрНиО.Наименование="Прожиточный минимум для трудоспособных лиц";
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		СпрНиО.Предел.Установить('01.01.2003', 365.00);
		
		СпрНиО.НайтиПоКоду("ГосНалог");
		Гр1 = СпрНиО.ТекущийЭлемент();
		
		Если СпрНиО.НайтиПоКоду("ГосПошлина") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "ГосПошлина";
			СпрНиО.Наименование="Гос. пошлина (Ж-1 19.3)";
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		
		СпрНиО.НайтиПоКоду("Соцстр");
		Гр1 = СпрНиО.ТекущийЭлемент();
		
		Если СпрНиО.НайтиПоКоду("ССФинСанат") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "ССФинСанат";
			СпрНиО.Наименование="Частичное финансирование санаториев-профилакториев";
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		
		Если СпрНиО.НайтиПоКоду("ССФинОздор") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "ССФинОздор";
			СпрНиО.Наименование="Частичное финансирование оздоровления детей";
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		
		Если СпрНиО.НайтиПоКоду("ССВнешкОбсл") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "ССВнешкОбсл";
			СпрНиО.Наименование="Внешкольное обслуживание детей";
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		
		Если СпрНиО.НайтиПоКоду("ССПрочие") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "ССПрочие";
			СпрНиО.Наименование="Прочие затраты за счет фонда Соцстрахования";
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		
		Если СпрНиО.НайтиПоКоду("ССЧПутев") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "ССЧПутев";
			СпрНиО.Наименование="Частичная стоимость путевок";
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		
		// cоцстрах от несч. случая (прочее)
		Если СпрНиО.НайтиПоКоду("Несч") = 0 Тогда
			СпрНиО.НоваяГруппа();
			СпрНиО.Код = "Несч";
			СпрНиО.Наименование="Соцстрах от несч. случая (прочее)";
			СпрНиО.Записать();            
		КонецЕсли;
		Гр1 = СпрНиО.ТекущийЭлемент();
		Если СпрНиО.НайтиПоКоду("НесчБольничн") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "НесчБольничн";
			СпрНиО.Наименование="Больничные за счет соцстраха от несч. случая";
			СпрНиО.Счет = СчетПоКоду("65.6");
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;                                   
		Если СпрНиО.НайтиПоКоду("НесчПогребен") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "НесчПогребен";
			СпрНиО.Наименование="Погребение за счет соцстраха от несч. случая";
			СпрНиО.Счет = СчетПоКоду("65.6");
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		Если СпрНиО.НайтиПоКоду("НесчОднПособ") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "НесчОднПособ";
			СпрНиО.Наименование="Однораз. пособие при потере трудоспособности";
			СпрНиО.Счет = СчетПоКоду("65.6");
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		Если СпрНиО.НайтиПоКоду("НесчЕжемПособ") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "НесчЕжемПособ";
			СпрНиО.Наименование="Ежемесячная сумма при потере трудоспособности";
			СпрНиО.Счет = СчетПоКоду("65.6");
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;                                   
		Если СпрНиО.НайтиПоКоду("НесчМорУщерб") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "НесчМорУщерб";
			СпрНиО.Наименование="Сумма за моральный ущерб";
			СпрНиО.Счет = СчетПоКоду("65.6");
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		Если СпрНиО.НайтиПоКоду("НесчПеревЛегк") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "НесчПеревЛегк";
			СпрНиО.Наименование="Выплата при переводе на более легкую работу";
			СпрНиО.Счет = СчетПоКоду("65.6");
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		Если СпрНиО.НайтиПоКоду("НесчРеабилит") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "НесчРеабилит";
			СпрНиО.Наименование="Выплата на время проф. реабилитации";
			СпрНиО.Счет = СчетПоКоду("65.6");
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		Если СпрНиО.НайтиПоКоду("НесчМедСоц") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "НесчМедСоц";
			СпрНиО.Наименование="Расходы на мед. и соц. помощь";
			СпрНиО.Счет = СчетПоКоду("65.6");
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		Если СпрНиО.НайтиПоКоду("НесчОднСмерть") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "НесчОднСмерть";
			СпрНиО.Наименование="Одноразовая выплата в случае смерти";
			СпрНиО.Счет = СчетПоКоду("65.6");
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		Если СпрНиО.НайтиПоКоду("НесчЕжемСмерть") = 0 Тогда
			СпрНиО.Новый();  
			СпрНиО.Код = "НесчЕжемСмерть";
			СпрНиО.Наименование="Ежемесячная выплата в случае смерти";
			СпрНиО.Счет = СчетПоКоду("65.6");
			СпрНиО.Родитель = Гр1;
			СпрНиО.Записать();
		КонецЕсли;
		
		
		// шаблоны для платежей по налогам
		СпрНП = СоздатьОбъект("Справочник.НазначенияПлатежей");
		
		Имя = "Уплата налогов";
		Если СпрНП.НайтиПоНаименованию(Имя,0,1) = 0 Тогда
			СпрНП.Новый();
			СпрНП.Наименование = Имя;
			СпрНП.ПолнНаименование = "+;[Фирма.ТерриториальныйКодНалоговойИнспекции];101; ; ; ;[Формат(КонМесяца(ДобавитьМесяц(ДатаДок,-1)),""ДДДММГГГГ"")]; ;[ВидНалога.Содержание]";
			СпрНП.Шаблон = 1;
			СпрНП.Записать();
		КонецЕсли;
		
		Имя = "Уплата налогов (старый формат)";
		Если СпрНП.НайтиПоНаименованию(Имя,0,1) = 0 Тогда
			СпрНП.Новый();
			СпрНП.Наименование = Имя;
			СпрНП.ПолнНаименование = "*;[Фирма.ЕДРПОУ];[СокрЛП(ВидНалога.КодПлатежа)];01;[ВидНалога.Содержание]";
			СпрНП.Шаблон = 1;
			СпрНП.Записать();
		КонецЕсли;
		
		// пропишем в существующих документах правильно подразделение-производитель калькулируемых услуг
		Док = СоздатьОбъект("Документ.ОказаниеУслуг");   
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент()=1 Цикл
			Док.ПодразделениеПроизв = Док.Подразделение;
			Док.Записать();
		КонецЦикла;

		Док = СоздатьОбъект("Документ.ОтчетКА");   
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент()=1 Цикл
			Док.ПодразделениеПроизв = Док.Подразделение;
			Док.Записать();
		КонецЦикла;

		Док = СоздатьОбъект("Документ.РасходнаяНакладная");   
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент()=1 Цикл
			Док.ПодразделениеПроизв = Док.Подразделение;
			Док.Записать();
		КонецЦикла;

		Док = СоздатьОбъект("Документ.РасходнаяРозничная");   
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент()=1 Цикл
			Док.ПодразделениеПроизв = Док.Подразделение;
			Док.Записать();
		КонецЦикла;

		Док = СоздатьОбъект("Документ.ВозвратнаяНакладная");   
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент()=1 Цикл
			Док.ПодразделениеПроизв = Док.Подразделение;
			Док.Записать();
		КонецЦикла;

		Док = СоздатьОбъект("Документ.ВозвратРозница");   
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент()=1 Цикл
			Док.ПодразделениеПроизв = Док.Подразделение;
			Док.Записать();
		КонецЦикла;

		// заполняем новый реквизит ДетализироватьДоМатериалов для сохранения предыдущей функциональности
		СпрСК = СоздатьОбъект("Справочник.СтатьиКалькуляции");
		СпрСК.ВыбратьЭлементы();
		Пока СпрСК.ПолучитьЭлемент() = 1 Цикл
			СпрСК.ДетализироватьДоМатериалов = 1;
			СпрСК.Записать();
		КонецЦикла;

		// добавляем в таблицу описание для релиза
		ТаблицаНепуста=1;
		Таб.ВывестиСекцию(Номер);
		
	КонецЕсли;
	    
	Если ОшибкаВоВремяОбновления>0 Тогда
		// при обновлении произошла ошибка, отменим все сделанные изменения
		ОтменитьТранзакцию();     
		Возврат;
	КонецЕсли;	
	
	НомерСтр = Строка(Номер);
	Константа.НомерРелиза = Лев(НомерСтр, 1)+"."+Сред(НомерСтр, 2, 2)+"."+Прав(НомерСтр, 3);
	
	ЗафиксироватьТранзакцию();
	
	РассчитатьТекущийРелизИКонфигурацию();
КонецПроцедуры //ОбновлениеРелиза

// ======================================
Процедура ОбновлениеРедакции()
	// Старая редакция конфигурации, вызовем обновление редакции до текущей.
КонецПроцедуры 


// ===============================
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА
// ===============================

// ===============================
Функция УстДоступность()

	Форма.кНазад.Доступность(1);
	Форма.кДальше.Доступность(1);
	Форма.кДальше.Заголовок("&Дальше >");

	Если (Шаг = 1) Тогда
		Форма.кНазад.Доступность(0);
	ИначеЕсли (Шаг = 999) Или (Шаг = 998) Или (Шаг = 997) Тогда
		Форма.кНазад.Доступность(0);
		Форма.кОтмена.Доступность(0);
		Форма.кДальше.Заголовок("&Готово");
	КонецЕсли;

	Если Шаг = НачСлойРелиза Тогда
		// только что обновили очередной релиз, 
		// транзакция зафиксирована, назад не разрешаем двигаться
		Форма.кНазад.Доступность(0);
	КонецЕсли;

КонецФункции

// ===============================
Процедура кОтмена()
	Если Вопрос("Прекратить работу помощника?",4)=6 Тогда
		Форма.Закрыть();
	КонецЕсли;
КонецПроцедуры

// ===============================
// Обрабатывает нажатие на кнопки Назад, Дальше
// Дельта - направление движения
Процедура ИзмШаг(Дельта)
	Перем НачальныйРелизИБ;
	// выполняем все действия только при движении "вперед"
	Если Дельта > 0 Тогда
		// выполняем проверку заполненности реквизитов и проч
		Если ПроверитьШаг() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// 997, 998 и 999 - служебные слои
		Если (Шаг = 997) или (Шаг = 998) Тогда
			// 997 шаг - "обновление не нужно"; 998 шаг - ошибка во время обновления
			Форма.Закрыть();
			Возврат;

		ИначеЕсли Шаг = 999 Тогда
			// работа помощника окончена успешно
			Если ТаблицаНепуста=1 Тогда
		        Таб.ТолькоПросмотр(1);
				Таб.Опции(0, 0, 0, 0);
				Таб.Показать("Обновления");
			КонецЕсли;
			Форма.Закрыть();
			Возврат;

		Иначе
		// обычные слои с заполнением необходимых реквизитов
			Если Шаг = 1 Тогда
				// нужно определить слой, с которого начинать
				стрСлои = спСлоиРелизов.Получить(Строка(ТекущийРелиз+1));
				Если ПустоеЗначение(стрСлои) = 1 Тогда
					// для этого релиза в диалоге помощника не нужно выбирать ничего
					НачСлойРелиза = 0;
					КонСлойРелиза = 0;
				Иначе
					// для этого релиза в диалоге предусмотрены специальные слои
					индТире = Найти(стрСлои,"-");
					НачСлойРелиза = Число(Лев(стрСлои,индТире-1));
					КонСлойРелиза = Число(Сред(стрСлои,индТире+1));
					Шаг = КонСлойРелиза - 1;
				КонецЕсли;
			КонецЕсли;
			
			Пока (Шаг = КонСлойРелиза) // закончились слои для текущего релиза
					Или ((Шаг = 1) и (НачСлойРелиза = 0)) // для первого обновляемого релиза слои не предусмотрены
					Цикл
				// все слои для данного релиза показаны - выполняем обновление
				ОбновлениеРелиза(ТекущийРелиз + 1);
				Если ОшибкаВоВремяОбновления > 0 Тогда
					// 998 шаг - сообщение об ошибке и выход
					Шаг = 998;
					НарисоватьСлои();
					ПоказатьСовет();
					Возврат;
				КонецЕсли;
				// обновление успешное
				Если ТекущийРелиз = РелизКонфигурации Тогда
					// отлично, обновили до самого последнего релиза
					// 999 шаг - нормальное завершение
					Шаг = 999;
					НарисоватьСлои();
					ПоказатьСовет();
					Возврат;

				Иначе

					стрСлои = спСлоиРелизов.Получить(Строка(ТекущийРелиз+1));
					Если ПустоеЗначение(стрСлои) = 1 Тогда
						// для этого релиза в диалоге помощника не нужно выбирать ничего
						Продолжить;
					Иначе
						// для этого релиза в диалоге предусмотрены специальные слои
						индТире = Найти(стрСлои,"-");
						НачСлойРелиза = Число(Лев(стрСлои,индТире-1));
						КонСлойРелиза = Число(Сред(стрСлои,индТире+1));
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; // обновления релизов
		КонецЕсли;
	КонецЕсли;
	Шаг = Шаг + Дельта;
	НарисоватьСлои();
	ПоказатьСовет();
КонецПроцедуры

// ===============================
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// ===============================

// ======================================
Процедура ПриОткрытии()

	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Обновления");
	
	Если ВРег(Форма.Параметр) = ВРег("ПоказатьВсеОбновления") Тогда
		// обработка запущена с параметром "ПоказатьВсеОбновления"
		// покажем таблицу с обновлениями и завершим работу
		Таб.Вывести();		
		Таб.ТолькоПросмотр(1);
		Таб.Опции(0, 0, 0, 0);
		Таб.Показать("Обновления");
		СтатусВозврата(0);
		Возврат;

	ИначеЕсли Сред(ВРег(Форма.Параметр),1,СтрДлина("ПоказатьОбновление")) = ВРег("ПоказатьОбновление") Тогда
		// Параметр задан в формате ПоказатьОбновлениеХХХХХХ
		// где ХХХХХХ - номер релиза, для которого нужно показать обновления
		// покажем нужную секцию и завершим работу

		//Таб.ВывестиСекцию(Сред(Форма.Параметр,СтрДлина("ПоказатьОбновление")+1));		
		Таб.ВывестиСекцию("НомерРелиза");		

		Таб.ТолькоПросмотр(1);
		Таб.Опции(0, 0, 0, 0);
		Таб.Показать("Обновления");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Шаг = 1;
	
	стрРелизКонфигурации 	= Лев(Метаданные.Константа("НомерРелиза").Комментарий,8);
	РелизКонфигурации 		= Число(СтрЗаменить(стрРелизКонфигурации, ".",""));
	РедакцияКонфигурации 	= Число(Сред(стрРелизКонфигурации,6,1));
	
	РассчитатьТекущийРелизИКонфигурацию();
	
	Если ТекущаяРедакция < РедакцияКонфигурации Тогда
		ОбновлениеРедакции();
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если ТекущийРелиз >= РелизКонфигурации Тогда
		// 997 шаг - "обновление не нужно"
		Шаг = 997;
	КонецЕсли;
	
	НарисоватьСлои();
	ПоказатьСовет();
КонецПроцедуры


// ===============================
// ТЕЛО МОДУЛЯ
// ===============================

спСлоиРелизов = СоздатьОбъект("СписокЗначений");
// значение - номера начального и конечного слоев через "-", 
// предстваление - номер релиза

спСлоиРелизов.ДобавитьЗначение("2-2","770003");

// создаем расшифровку для релиза 7.70.004
Расшифровка770004_1 = СоздатьОбъект("СписокЗначений");
Расшифровка770004_1.Установить("Отчет", "ОпределениеБалСтоимостиОС_20030101");
Расшифровка770004_2 = СоздатьОбъект("СписокЗначений");
Расшифровка770004_2.Установить("Отчет", "ИзмененияГудвила_20030101");