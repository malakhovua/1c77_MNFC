Перем Таб;
Перем Обновить;
Перем Расшифровка;
Перем тОбщие, ВакЦелый, тВакПорц, тВакСерв, тГаз;
Перем СписРеквизитовЭтикетки;

// ===============================
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ

Перем СписокПодбора,СправочникПодбора;
// СписокПодбора - список, в который отбираются элементы
//							(используется для множественных фильтров)
// СправочникПодбора - строка - идентификатор справочника, из которого осуществляется отбор
//							(используется для множественных фильтров)             

Перем СписокТоваров;	// список товаров для фильтрации

Перем ВидСправочника;   // Вид печатаемого справочника (Номенклатура или прайс-лист)
                        // Определяется параметром. По умолчанию - прайс  
Перем ЗаголовокТаблицы; // Заголовок печатной формы
Перем СписКат;


// ===============================
// "СЛУЖЕБНЫЕ" ПРОЦЕДУРЫ И ФУНКЦИИ

// ===============================
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА

// ===============================
// Название: Сдвиг
// Параметры:
//  Режим - строка: "Вверх" или "Вниз",- определяющая направление сдвига
// 	Список - список, в котором происходит сдвиг 	
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//   кнопки со стрелками вверх и вниз
// Наименование,.
// Описание:
//    сдвигает текущую позицию в списке на 1 элемент вниз или вверх
//
Процедура Сдвиг(Режим,Список)
	Перем ТекущПредставление;
	Перем СледующПредставление;
	
	ТекущаяСтрока=Список.ТекущаяСтрока();
	Если ТекущаяСтрока=0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если Режим="Вверх" Тогда
		Если ТекущаяСтрока=1 Тогда
			СледующСтрока=Список.РазмерСписка();
		Иначе
			СледующСтрока=ТекущаяСтрока-1;
		КонецЕсли;

	ИначеЕсли Режим="Вниз" Тогда
		Если ТекущаяСтрока=Список.РазмерСписка() Тогда
			СледующСтрока=1;
		Иначе
			СледующСтрока=ТекущаяСтрока+1;
		КонецЕсли;
	Иначе

		Возврат;
	КонецЕсли;
	
	ТекущЗначение	= Список.ПолучитьЗначение(ТекущаяСтрока,ТекущПредставление);
	СледующЗначение	= Список.ПолучитьЗначение(СледующСтрока,СледующПредставление);
	
	Список.УстановитьЗначение(СледующСтрока,ТекущЗначение,ТекущПредставление,1);
	Список.УстановитьЗначение(ТекущаяСтрока,СледующЗначение,СледующПредставление,1);
	
	Список.ТекущаяСтрока(СледующСтрока);

КонецПроцедуры   // Сдвиг


// ===============================
// Название: РаботаСоСписком
// Параметры:
// 	Режим - строка, принимающая 4 значения:
//		"Добавить"
//		"ДобавитьНесколько"
// 		"Удалить"
// 		"УдалитьВсе"
//	Список - список значений, в котором задается множественный фильтр
//	ТипСправочника - строка, содержащая идентификатор справочнника, по
//						которому осуществляется мноджественный фильтр
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//   кнопок работы с множественными фильтрами ("...",".....","X","XX")
// Наименование,.
// Описание:
// процедура предназначена для добавления и удаления элементов
// из множественных фильтров
Процедура РаботаСоСписком(Режим,Список,ТипСправочника)
	Перем ТекПоз;
	Перем ТекЭлемент;
	Перем Фрм;
                                     
	Если ТипСправочника = "Категории" Тогда
		ТипСправочника = "ВидыКатегорий";
	КонецЕсли;	
	
	ТекПоз = Список.ТекущаяСтрока();
	Если ТекПоз>0 Тогда
		ТекЭлемент=Список.ПолучитьЗначение(ТекПоз);
	КонецЕсли;

	Если Режим="Добавить" Тогда		// добавляем в список один элемент
		СписокПодбора = Список;
		СправочникПодбора = ВРег(ТипСправочника);
		// открываем окно подбора
		ОткрытьПодбор("Справочник."+ТипСправочника,,Фрм,0,ТекЭлемент);
		Фрм.ВыборГруппы(1);

	ИначеЕсли Режим="ДобавитьНесколько" Тогда  // добавляем в список несколько элементов
		СписокПодбора = Список;
		СправочникПодбора = ВРег(ТипСправочника);
		// открываем окно подбора
		ОткрытьПодбор("Справочник."+ТипСправочника,,Фрм,1,ТекЭлемент);
		Фрм.ВыборГруппы(1);

 	ИначеЕсли Режим="УдалитьВсе" Тогда	// удаляем все элементы из списка
		Список.УдалитьВсе();

	ИначеЕсли Режим="Удалить" Тогда	// удаляем из списка один элемент
		Если ТекПоз>0 Тогда
			Список.УдалитьЗначение(ТекПоз);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры		// работа со списком

Процедура СоздатьРасшифровку()
	// все настройки помещаем в список
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Объект", "Обработка.ПечатьПрайсЛиста");
    
	Расшифровка.Установить("МФНоменклатура", МФНоменклатура);
	Расшифровка.Установить("МФКатЦены", МФКатЦены);	
	Расшифровка.Установить("ТолькоПрисутствующие", ТолькоПрисутствующие);	
	Расшифровка.Установить("фПроверятьФайлы", фПроверятьФайлы);	
	Расшифровка.Установить("фКатФайлов", фКатФайлов);
	Расшифровка.Установить("ргКат", ргКат);
	Расшифровка.Установить("фПутьВМКат", фПутьВМКат);
	Расшифровка.Установить("фКатПрим", фКатПрим);
	Расшифровка.Установить("фКатТов", фКатТов);
	Расшифровка.Установить("фПост", фПост);
	Расшифровка.Установить("НачДата", НачДата);
	Расшифровка.Установить("КонДата", КонДата);
	Расшифровка.Установить("ВалютаПечати", ВалютаПечати);
	Расшифровка.Установить("ВыбФирма", ВыбФирма);
	Расшифровка.Установить("ВидСправочника", ВидСправочника);
	
	Расшифровка.Установить("фСхема",фСхема); 			//--- УМК Сандомирский В.Ю, (запоминать значение флажка Схемы вмесчто цен)	05.04.14
	Расшифровка.Установить("ДатаОтчета",ДатаОтчета); 	//--- УМК Сандомирский В.Ю, 28.05.14
	
	СписС = СоздатьОбъект("СписокЗначений");
	Для Инд = 1 По списДоп.РазмерСписка() Цикл
		Если списДоп.Пометка(Инд) = 1 Тогда
			СписС.ДобавитьЗначение(списДоп.ПолучитьЗначение(Инд));
		КонецЕсли;		
	КонецЦикла;
	Расшифровка.Установить("списДоп", СписС);
	
КонецПроцедуры
// ===============================
// Название: Выполнить
// Параметры:                                            
// НЕТ
// Возвращаемое значение:
// НЕТ
// Вызывается из формул элементов диалога:
//  Кнопки "Печать"
// Описание:
//    выполняет печать прайс-листа 
//
Процедура Печать()
    Перем СписокПозиций, СписокТоваров;
	
	Если ПустоеЗначение(ДатаОтчета) = 1 Тогда
		Сообщить("Заполните дату вывода периодических реквизитов", "!");
		Возврат;
	КонецЕсли;
	
	СписокТоваров = СоздатьОбъект("СписокЗначений"); 
	СписокПозиций = СоздатьОбъект("СписокЗначений");
	    
	НаложенФильтрПоТоварам=0;
	СоздатьРасшифровку();
	
		// накладываем множественный фильтр по товарам
	Если МФНоменклатура.РазмерСписка()<>0 Тогда
		    
		Для Индекс=1 По МФНоменклатура.РазмерСписка() Цикл
			Позиция = МФНоменклатура.ПолучитьЗначение(Индекс);
			
			НоменкВложенаВДругую=0;
			Для Индекс2=1 По МФНоменклатура.РазмерСписка() Цикл
			    Если Индекс2<>Индекс Тогда       
					Позиция2 = МФНоменклатура.ПолучитьЗначение(Индекс2);
					Если Позиция2.ЭтоГруппа()>0 Тогда
						Если Позиция.ПринадлежитГруппе(Позиция2)>0 Тогда
							НоменкВложенаВДругую=1;
							Прервать;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
			
			Если НоменкВложенаВДругую=1 Тогда
				Продолжить;
			КонецЕсли;	    
			
			Если Позиция.ЭтоГруппа()>0 Тогда
				СпрПозиций = СоздатьОбъект("Справочник."+ВидСправочника);
				СпрПозиций.ИспользоватьРодителя(Позиция.ТекущийЭлемент());
				СпрПозиций.ВыбратьЭлементы(1);
				Пока СпрПозиций.ПолучитьЭлемент()>0 Цикл
					Если СпрПозиций.ЭтоГруппа()=0 Тогда     
						СписокПозиций.ДобавитьЗначение(СпрПозиций.ТекущийЭлемент());
						Если Нрег(ВидСправочника) = "прайс_лист" Тогда
							СписокТоваров.ДобавитьЗначение(СпрПозиций.Товар.ТекущийЭлемент());
						Иначе
							СписокТоваров.ДобавитьЗначение(СпрПозиций.ТекущийЭлемент());
						КонецЕсли;	                                                
					КонецЕсли;
				КонецЦикла;	
			Иначе
				СписокПозиций.ДобавитьЗначение(Позиция.ТекущийЭлемент());
				Если Нрег(ВидСправочника) = "прайс_лист" Тогда
					СписокТоваров.ДобавитьЗначение(Позиция.Товар.ТекущийЭлемент());
				Иначе
					СписокТоваров.ДобавитьЗначение(Позиция.ТекущийЭлемент());
				КонецЕсли;	
			КонецЕсли;	                                                      
			
		КонецЦикла;	
		
		Если СписокПозиций.РазмерСписка()=0 Тогда
			Предупреждение("Список позиций пуст");
			Возврат;
		КонецЕсли;	
	    
		НаложенФильтрПоТоварам=1;
	КонецЕсли;	
	    
    
	// не включать отсутствующие
	Если ТолькоПрисутствующие<>0 Тогда
	    
		ВремРегистры=СоздатьОбъект("Регистры");
		Рег=ВремРегистры.Остатки;
		Если ДатаОтчета<ПолучитьДатуТА() Тогда
			Рег.ВременныйРасчет();                             
			Если НаложенФильтрПоТоварам=1 Тогда
				Рег.УстановитьЗначениеФильтра("ТМЦ",СписокТоваров,2);
			КонецЕсли;	
			Рег.УстановитьЗначениеФильтра("Фирма",ВыбФирма);
			ВремРегистры.РассчитатьРегистрыПО(ДатаОтчета);
		КонецЕсли;
		
		Если НаложенФильтрПоТоварам=1 Тогда
			
			ЧислоТов = СписокПозиций.РазмерСписка();
			Для Индекс = 1 По ЧислоТов Цикл
				
				НеУдовлетвФильтру=0;
				Номенк = СписокТоваров.ПолучитьЗначение(ЧислоТов+1-Индекс);
				
				// накладываем фильтр по присутствию/отсутствию 
				Если Номенк.ВидТМЦ<>Перечисление.ВидыТМЦ.Товар Тогда
					НеУдовлетвФильтру=1;
				Иначе
					Кол = ВремРегистры.Остатки.СводныйОстаток(ВыбФирма,Номенк,,"ОстатокТовара");
					Если Кол<=0 Тогда
						НеУдовлетвФильтру=1;
					КонецЕсли;
				КонецЕсли;	           
	            
				Если НеУдовлетвФильтру=1 Тогда                     
					СписокПозиций.УдалитьЗначение(ЧислоТов+1-Индекс);
				КонецЕсли;
			КонецЦикла;
			
		Иначе   
			
			СпрПозиций = СоздатьОбъект("Справочник."+ВидСправочника);
			СпрПозиций.ВыбратьЭлементы();
			Пока СпрПозиций.ПолучитьЭлемент()>0 Цикл
				Если СпрПозиций.ЭтоГруппа()=1 Тогда     
					Продолжить;
				КонецЕсли;

				Если Нрег(ВидСправочника) = "прайс_лист" Тогда
					Номенк = СпрПозиций.Товар.ТекущийЭлемент();
				Иначе
					Номенк = СпрПозиций.ТекущийЭлемент();
				КонецЕсли;	 
			
				Если Номенк.ВидТМЦ=Перечисление.ВидыТМЦ.Товар Тогда
					Кол = ВремРегистры.Остатки.СводныйОстаток(ВыбФирма,Номенк.ТекущийЭлемент(),,"ОстатокТовара");
					Если Кол>0 Тогда
				        СписокПозиций.ДобавитьЗначение(СпрПозиций.ТекущийЭлемент());
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЕсли;
		
		Если СписокПозиций.РазмерСписка()=0 Тогда
			Предупреждение("Список позиций пуст");
			Возврат;
		КонецЕсли;	
	    
		НаложенФильтрПоТоварам=1;

	КонецЕсли;	
	
	
	// теперь отбираем позиции справочника
	Если Нрег(ВидСправочника) = "прайс_лист" Тогда
		ТекстЗапроса = "                    
			|Период С '"+Строка(Мин(ДатаОтчета,ПолучитьДатуТА()))+"' По '"+Строка(Мин(ДатаОтчета,ПолучитьДатуТА()))+"';
			|Позиция 	= Справочник.Прайс_лист.ТекущийЭлемент; 
			|Товар 		= Справочник.Прайс_лист.Товар;
			|Группировка Позиция Упорядочить По Позиция.Товар.Наименование; 
			|Условие (Позиция В СписокПозиций);
			|";

	ИначеЕсли Нрег(ВидСправочника) = "тмц" Тогда
		ТекстЗапроса = "                    
			|Период С '"+Строка(Мин(ДатаОтчета,ПолучитьДатуТА()))+"' По '"+Строка(Мин(ДатаОтчета,ПолучитьДатуТА()))+"';
			|Позиция 	= Справочник.ТМЦ.ТекущийЭлемент; 
			|Товар 		= Справочник.ТМЦ.ТекущийЭлемент;
			|Группировка Позиция Упорядочить По Позиция.Наименование; 
			|Условие (Позиция В СписокПозиций);
			|";
	КонецЕсли;
		
	// выполняем запрос
	Запрос = СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
		Возврат;
	КонецЕсли;
               
	//--- УМК Сандомирский В.Ю. (01.07.14) --- было обновление существующей таблицы - изменил что бы создавало ряб\дом еще одну печ форму
	//  Создание Таблицы для выходного отчета
	//Если ТипЗначенияСтр(Таб) = "Таблица" Тогда
	//	Таб.Очистить();
	//Иначе
		Таб=СоздатьОбъект("Таблица");	
	//КонецЕсли;
	//... УМК Сандомирский В.Ю. (01.07.14)
	
	Таб.ИсходнаяТаблица("Таблица");	
	
	Ном=0;
	
	Если ЕдиницаПечати.ТекущаяСтрока() > 2 Тогда
		ПечатьВФиксЕдиницах = 0;
	Иначе
		ПечатьВФиксЕдиницах = 1;
	КонецЕсли;	          
	
	Если ВалютаПечати.Выбран()=0 Тогда
		ПечатьВФиксВалюте = 0;
		Заг="";
	Иначе	                   
		ПечатьВФиксВалюте = 1;
		Валюта = ВалютаПечати;
		Заг="Цены указаны в "+СокрЛП(Валюта.Кратко);
	КонецЕсли;	
	
	СписД = СоздатьОбъект("СписокЗначений");
	Для Инд = 1 По списДоп.РазмерСписка() Цикл
		Если списДоп.Пометка(Инд) = 1 Тогда
			Стр = "";
			Зн = списДоп.ПолучитьЗначение(Инд, Стр);
		    СписД.ДобавитьЗначение(Зн, Стр);			
		КонецЕсли;
	КонецЦикла;
	
	Таб.ВывестиСекцию("Отчет|НазваниеПозиции");
	Таб.ВывестиСекцию("Шапка|НазваниеПозиции");
	Для Инд = 1 По списД.РазмерСписка() Цикл
		Стр = "";
		ИмяРекв = СписД.ПолучитьЗначение(Инд, Стр);
		Таб.ПрисоединитьСекцию("Шапка|Доп"  + ?(ИмяРекв = "КодЭ", "Э", ""));
	КонецЦикла;
	
	Для Индекс = 1 По МФКатЦены.РазмерСписка() Цикл
		ТипЦены = МФКатЦены.ПолучитьЗначение(Индекс);
		Таб.ПрисоединитьСекцию("Шапка|Цена");
	КонецЦикла;	
	
	Если фКатФайлов = 1 Тогда
		Для Инд = 1 По СписКат.РазмерСписка() Цикл
			Таб.ПрисоединитьСекцию("Шапка|" + ?(ргКат = 1, "Кат", "КатегорияОписание"));
		КонецЦикла;
	КонецЕсли;
	
	Если фКатТов = 1 Тогда
	    Таб.ПрисоединитьСекцию("Шапка|КатТов");
	КонецЕсли;
	
	СписокГрупп = СоздатьОбъект("СписокЗначений");
	
	Цена = СоздатьОбъект("Справочник.Цены");
	Цена.ИспользоватьДату(ДатаОтчета);
	ФЛ = СоздатьОбъект("Справочник.Файлы");
	СписКатФл = СоздатьОбъект("СписокЗначений");
	СпрКатТов = СоздатьОбъект("Справочник.КатегорииТоваров");
	
	Если фКатВКолСПутями = 1 Тогда
	    // получим запрос по категориям
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|Обрабатывать НеПомеченныеНаУдаление;
		|Категория = Справочник.КатегорииТоваров.Категория;
		|Владелец = Справочник.КатегорииТоваров.Владелец;
		|Функция Счётчик = Счётчик();
		|Группировка Владелец;
		|Группировка Категория Упорядочить по Категория.Наименование;
		|Условие(Владелец в МФНоменклатура);
		|"//}}ЗАПРОС
		;
		
		ЗапросКат = СоздатьОбъект("Запрос");
		Если ЗапросКат.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;		    
		КонецЕсли;
		
		СписКатФП = СоздатьОбъект("ТаблицаЗначений");
		СписКатФП.НоваяКолонка("ВРодитель", "Строка");
		СписКатФП.НоваяКолонка("Кво", "Число");
		
		МаксКат = 0;
		Пока ЗапросКат.Группировка(1) = 1 Цикл
			ТЗВР = СоздатьОбъект("ТаблицаЗначений");
			ТЗВР.НоваяКолонка("ВРодитель", "Строка");
			ТЗВР.НоваяКолонка("Кво", "Число");
			
			Пока ЗапросКат.Группировка(2) = 1 Цикл
				Путь = ЗапросКат.Категория.ПолноеНаименование();
				ВРодитель = Лев(Путь, Найти(Путь, "/") - 1);
				ТЗВР.НоваяСтрока();
				ТЗВР.ВРодитель = ВРодитель;
				ТЗВР.Кво = 1;
			КонецЦикла;
			
			ТЗВР.Свернуть("ВРодитель", "Кво");
			ТЗВР.ВыбратьСтроки();
			Пока ТЗВР.ПолучитьСтроку() = 1 Цикл
				Стр = 0;
				Если СписКатФП.НайтиЗначение(ТЗВР.ВРодитель, Стр, "ВРодитель") = 0 Тогда
				    СписКатФП.НоваяСтрока();
					СписКатФП.ВРодитель = ТЗВР.ВРодитель;
					СписКатФП.Кво = ТЗВР.Кво;
				Иначе
					СписКатФП.УстановитьЗначение(Стр, "Кво", Макс(СписКатФП.ПолучитьЗначение(Стр, "Кво"), ТЗВР.Кво));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		СписКатФП.Сортировать("ВРодитель");
		
		СписКатФП.ВыбратьСтроки();
		Пока СписКатФП.ПолучитьСтроку() = 1 Цикл
			Для Инд = 1 По СписКатФП.Кво Цикл
				Таб.ПрисоединитьСекцию("Шапка|КатегорияПуть" + ?(фКатПрим = 1,"Прим",""));
			КонецЦикла;			
		КонецЦикла;
	КонецЕсли;

	Если фПост = 1 Тогда
	    Таб.ПрисоединитьСекцию("Шапка|Поставщики");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Поставщики)
		|Период с НачДата по КонДата;
		|ТМЦ = Документ.ПриходнаяНакладнаяЗапасы.ТМЦ;
		|Контрагент = Документ.ПриходнаяНакладнаяЗапасы.Контрагент;
		|Функция Счётчик = Счётчик();
		|Группировка ТМЦ;
		|Группировка Контрагент;
		|Условие (ТМЦ В МФНоменклатура);
		|"//}}ЗАПРОС
		;

		ЗапрПост = СоздатьОбъект("Запрос");	
		
		Если ЗапрПост.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СпрЭ = СоздатьОбъект("Справочник.Этикетки");

	Пока Запрос.Группировка("Позиция")>0 Цикл
		Если Запрос.Позиция.Выбран()=0 Тогда
			Продолжить;
		КонецЕсли;	   
		    
		глОживить(1);
		
		Если Запрос.Позиция.ЭтоГруппа()=1 тогда
			СписокГрупп.ДобавитьЗначение(Запрос.Позиция.ТекущийЭлемент());			
			Продолжить;
		КонецЕсли;	
    	
		Цена.ИспользоватьВладельца(Запрос.Товар.ТекущийЭлемент());
		
		Если Нрег(ВидСправочника) = "прайс_лист" Тогда
			НашлиНенулевуюЦену=0;
			
			Для Индекс = 1 По МФКатЦены.РазмерСписка() Цикл  
				ТипЦены = МФКатЦены.ПолучитьЗначение(Индекс).ТекущийЭлемент();
				Если Цена.НайтиПоРеквизиту("КатегорияЦены",ТипЦены,0)=0 Тогда
					Продолжить;
				КонецЕсли;	

				Если Цена.Цена=0 Тогда
					Продолжить;
				КонецЕсли;       

				НашлиНенулевуюЦену=1;
				Прервать;
			КонецЦикла;		
			
			Если НашлиНенулевуюЦену=0 Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
			
		Пока СписокГрупп.РазмерСписка()>0 Цикл
			Гр = СписокГрупп.ПолучитьЗначение(1);
			Если Запрос.Позиция.ПринадлежитГруппе(Гр)>0 Тогда
				Если Гр.Уровень()=1 Тогда
					Таб.ВывестиСекцию("Группа1|НазваниеПозиции");
				ИначеЕсли Гр.Уровень()=2 Тогда
					Таб.ВывестиСекцию("Группа2|НазваниеПозиции");
				Иначе
					Таб.ВывестиСекцию("Группа3|НазваниеПозиции");
				КонецЕсли;   
			КонецЕсли;	
			СписокГрупп.УдалитьЗначение(1);
		КонецЦикла;
		                   
		Если ПечатьВФиксЕдиницах=1 Тогда
			Если ЕдиницаПечати.ТекущаяСтрока()=1 Тогда	
				Единица = Запрос.Товар.ЕдиницаПоУмолчанию;
			ИначеЕсли ЕдиницаПечати.ТекущаяСтрока()=2 Тогда	
				Единица = глВернутьБазовуюЕдиницуТовара(Запрос.Товар.ТекущийЭлемент());
			КонецЕсли; 
		КонецЕсли;

		ЕстьЭтикетка = 0;
		Если ПустоеЗначение(ВидВесов) = 0 Тогда
			СпрЭ.ИспользоватьВладельца(Запрос.Товар);			
			ЕстьЭтикетка = СпрЭ.НайтиПоРеквизиту("ВидВесов", ВидВесов, 0);
		КонецЕсли;
		
		Ном=Ном+1;
		Таб.ВывестиСекцию("Товар|НазваниеПозиции");
		Для Инд = 1 По списД.РазмерСписка() Цикл
			Атр = СписД.ПолучитьЗначение(Инд);
			Если Атр = "КодЭ" Тогда
				КодЭ = СокрЛП(Запрос.Товар.КодЭ);
				Если КодЭ = "" Тогда
					КодЭВЦ = ""; КодЭВС = ""; КодЭВП = ""; КодЭГ = ""; КодЭО = "";
				Иначе
					КодЭО = тОбщие + Формат(Число(КодЭ), "Ч(0)3");
					КодЭВЦ = ВакЦелый + Формат(Число(КодЭ), "Ч(0)3");
					КодЭВС = тВакСерв + Формат(Число(КодЭ), "Ч(0)3");
					КодЭВП = тВакПорц + Формат(Число(КодЭ), "Ч(0)3");
					КодЭГ = тГаз + Формат(Число(КодЭ), "Ч(0)3");
				КонецЕсли;
				Таб.ПрисоединитьСекцию("Товар|ДопЭ");
			Иначе
				Если Найти(СписРеквизитовЭтикетки, Атр + ",") <> 0 Тогда
					Если ЕстьЭтикетка = 1 Тогда
						ПечАтр = СпрЭ.ПолучитьАтрибут(Атр);
					Иначе
						ПечАтр = "";
					КонецЕсли;
				Иначе
					Если Метаданные.Справочник("ТМЦ").Реквизит(Атр).Периодический = 1 Тогда
						ПечАтр = Запрос.Товар.ПолучитьАтрибут(Атр).Получить(ДатаОтчета);
					Иначе				
					    ПечАтр = Запрос.Товар.ПолучитьАтрибут(Атр);
					КонецЕсли;					
				КонецЕсли;
				
				//--- УМК Сандомирский В.Ю, (устранение замечаний) 26.05.14
				Если Атр = "ШаблонСхемЦенообразования" Тогда
					Если ПустоеЗначение(ПечАтр.Примечание) <> 1 Тогда
						ПечАтр = ПечАтр.Примечание;
					КонецЕсли;
				КонецЕсли;
						
				Таб.ПрисоединитьСекцию("Товар|Доп");
			КонецЕсли;			
		КонецЦикла;		
		
		Для Индекс = 1 По МФКатЦены.РазмерСписка() Цикл  
			
			Красим = 0;	//--- УМК Сандомирский В.Ю, (печать схемы вместо цены) 28.05.14
			
			ТипЦены = МФКатЦены.ПолучитьЗначение(Индекс).ТекущийЭлемент();
			Если Цена.НайтиПоРеквизиту("КатегорияЦены",ТипЦены,0)=0 Тогда
				ПечЦена = "";
			Иначе
				
				Если ПечатьВФиксВалюте=0 Тогда
					Валюта = Цена.Валюта;
				КонецЕсли;
				
				Если ПечатьВФиксЕдиницах=0 Тогда
					Единица = Цена.Единица;
				КонецЕсли;	
				
				ЧЦена = Цена.Цена;
				Если Единица<>Цена.Единица Тогда
					ЧЦена = ?(Цена.Единица.Коэффициент = 0,ЧЦена * Единица.Коэффициент / 1,ЧЦена * Единица.Коэффициент / Цена.Единица.Коэффициент); 
				КонецЕсли;	
				ЧЦена = глПересчет(ЧЦена,Цена.Валюта,ДатаОтчета,Валюта,ДатаОтчета,);
				ПечЦена = СокрЛП(глФРМ(ЧЦена,Валюта,?(ПечатьВФиксВалюте=0,1,0)))+?(ПечатьВФиксЕдиницах=0," / "+СокрЛП(Строка(Единица)),"");
			
				Если фСхема = 1 Тогда //--- УМК Сандомирский В.Ю, (печать схемы вместо цены) 01.01.14
					ПечЦена = Цена.СхемаЦенообразования;
					Если глСхемаВШаблоне(Цена,Запрос.Товар.ШаблонСхемЦенообразования) = 1 Тогда //--- УМК Сандомирский В.Ю, (печать схемы вместо цены) 28.05.14
						Красим = 1;
					КонецЕсли;
				КонецЕсли;	//... УМК Сандомирский В.Ю, 
			
			КонецЕсли;
			
			Если Красим = 1 Тогда		
				Таб.ПрисоединитьСекцию("Товар_Ц|Цена");
			Иначе
				Таб.ПрисоединитьСекцию("Товар|Цена");
			КонецЕсли;
					
		КонецЦикла;	
		
		Если фКатФайлов = 1 Тогда
			СписКатФл.УдалитьВсе();
			ФЛ.ИспользоватьВладельца(?(Нрег(ВидСправочника) = "прайс_лист", Запрос.Товар, Запрос.Позиция));
			ФЛ.ВыбратьЭлементы();
			Пока ФЛ.ПолучитьЭлемент() = 1 Цикл
				Если ФЛ.ПометкаУдаления() = 0 Тогда
				    СписКатФл.ДобавитьЗначение(ФЛ.Категория, СокрЛП(?((ргКат = 2) и (фПутьВМКат = 0) , ФЛ.Наименование, ФЛ.Путь)));
				КонецЕсли;
			КонецЦикла;
			СписКатФл.Сортировать();
			Для Инд = 1 По СписКат.РазмерСписка() Цикл
				Плюс = "";
				Категория = СписКат.ПолучитьЗначение(Инд);
				Поз = СписКатФл.НайтиЗначение(Категория);
				СписФЛ = СоздатьОбъект("СписокЗначений");
				
				Если Поз <> 0 Тогда
					Плюс = "";
					Если (фПутьВМКат = 0) Тогда
						//Плюс = "+";
					Иначе
						СписКатФл.ПолучитьЗначение(Поз, Плюс);
					КонецЕсли;
					
					ИмяФл = "";
					Файл = СписКатФл.ПолучитьЗначение(Поз, ИмяФл);
					Пока Файл = Категория Цикл
						Если (фПроверятьФайлы = 1) и (фПутьВМКат = 0) и (ргКат = 1) Тогда
							Если ФС.СуществуетФайл(СокрЛП(ИмяФл)) = 0 Тогда
							    Плюс = Плюс + "+!";
							Иначе
								СписФЛ.ДобавитьЗначение("ФайлДляОткрытия", ИмяФл);
							КонецЕсли;
						Иначе							
						    СписФЛ.ДобавитьЗначение("ФайлДляОткрытия", ИмяФл);
						КонецЕсли;
						Если фПутьВМКат = 0 Тогда
							Плюс = Плюс + ?(ргКат = 2, ?(Плюс = "","","; ") + ИмяФл, "+");
						КонецЕсли;
						
						Поз = Поз + 1;
						Если Поз <= СписКатФл.РазмерСписка() Тогда
						    Файл = СписКатФл.ПолучитьЗначение(Поз, ИмяФл);
						Иначе
							Прервать;
						КонецЕсли;						
					КонецЦикла;
					
					Если фПутьВМКат = 0 Тогда
						Если СписФЛ.РазмерСписка() = 0 Тогда
						    Плюс = "!";
						КонецЕсли;
					КонецЕсли;					
				КонецЕсли;
				Таб.ПрисоединитьСекцию("Товар|" + ?(ргКат = 1, "Кат", "КатегорияОписание"));
			КонецЦикла;
		КонецЕсли;
		
		Если фКатТов = 1 Тогда
		    ПечКТ = ""; ПечГКТ = "";
			СпрКатТов.ИспользоватьВладельца(?(Нрег(ВидСправочника) = "прайс_лист", Запрос.Товар, Запрос.Позиция));
			СпрКатТов.ВыбратьЭлементы();
			Пока СпрКатТов.ПолучитьЭлемент() = 1 Цикл
				Если СпрКатТов.ПометкаУдаления() = 0 Тогда
				    ПечКТ = ПечКТ + ?(СокрЛП(ПечКТ) = "", "", ", ") + СпрКатТов.Категория.Наименование;
					ПечГКТ = ПечГКТ + ?(СокрЛП(ПечГКТ) = "", "", ", ") + Строка(СпрКатТов.Категория.Родитель);
				КонецЕсли;
			КонецЦикла;
			Таб.ПрисоединитьСекцию("Товар|КатТов");
		КонецЕсли;
		
		Если фКатВКолСПутями = 1 Тогда
			ТЗВР = СоздатьОбъект("ТаблицаЗначений");
			ТЗВР.НоваяКолонка("ВРодитель", "Строка");
			ТЗВР.НоваяКолонка("ПечКт", "Строка");
			ТЗВР.НоваяКолонка("ПечКтПрим", "Строка");
			
			ЗапросКат.вНачалоВыборки();
			Если ЗапросКат.Получить(Запрос.Товар, ) = 1 Тогда
				Пока ЗапросКат.Группировка(2) = 1 Цикл
					ПечКТ = ЗапросКат.Категория.ПолноеНаименование();
					ВРодитель = Лев(ПечКТ, Найти(ПечКТ, "/") - 1);
					ТЗВР.НоваяСтрока();
					ТЗВР.ВРодитель = ВРодитель;
					ТЗВР.ПечКт = ПечКТ;					
					ТЗВР.ПечКтПрим = ЗапросКат.Категория.Комментарий;
				КонецЦикла;
			КонецЕсли;
			
			СписКатФП.ВыбратьСтроки();
			Пока СписКатФП.ПолучитьСтроку() = 1 Цикл
				Для Инд = 1 По СписКатФП.Кво Цикл
					Стр = 0;
					Если ТЗВР.НайтиЗначение(СписКатФП.ВРодитель, Стр, "ВРодитель") <> 0 Тогда
					    ПечКТ = ТЗВР.ПолучитьЗначение(Стр, "ПечКт");
						ПечКТПрим = ТЗВР.ПолучитьЗначение(Стр, "ПечКтПрим");
						ТЗВР.УдалитьСтроку(Стр);
					Иначе
						ПечКТ = "";
						ПечКТПрим = "";
					КонецЕсли;
					Таб.ПрисоединитьСекцию("Товар|КатегорияПуть" + ?(фКатПрим = 1,"Прим",""));
				КонецЦикла;			
			КонецЦикла;			
		КонецЕсли;

		Если фПост = 1 Тогда
			Поставщики = "";
			ЗапрПост.ВНачалоВыборки();
			Если ЗапрПост.Получить(Запрос.Товар, ) = 1 Тогда
				Пока ЗапрПост.Группировка(2) = 1 Цикл
					Поставщики = Поставщики + ?(Поставщики = "","","; ") + Строка(ЗапрПост.Контрагент);
				КонецЦикла;
			КонецЕсли;
		    Таб.ПрисоединитьСекцию("Товар|Поставщики");
		КонецЕсли;		
	КонецЦикла;	
	
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.ПовторятьПриПечатиСтроки(1,6);
	Таб.Опции(0,0,6,2,ПарСтрСпр);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать(ВидСправочника,"");
	Расшифровка.Установить("Обновить",0);	
	Если (Обновить = 2) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;		
КонецПроцедуры


// ===============================
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// ===============================

// ===============================
Процедура ПриОткрытии() // Предопределенная процедура
	
	ДатаОтчета = РабочаяДата(); //--- УМК Сандомирский В.Ю, 28.05.14
	
	
	// Определяем какой спрвочник печатается
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
	    
		фПродукция = глРасшифровка.Получить("фПродукция");		
		глРасшифровка.Получить("МФНоменклатура").Выгрузить(МФНоменклатура);
		глРасшифровка.Получить("МФКатЦены").Выгрузить(МФКатЦены);	
		ТолькоПрисутствующие = глРасшифровка.Получить("ТолькоПрисутствующие");	
		фПроверятьФайлы = глРасшифровка.Получить("фПроверятьФайлы");	
		фКатФайлов = глРасшифровка.Получить("фКатФайлов");
		фКатПрим = глРасшифровка.Получить("фКатПрим");
		фПутьВМКат = глРасшифровка.Получить("фПутьВМКат");
		фКатТов = глРасшифровка.Получить("фКатТов");
		ВалютаПечати = глРасшифровка.Получить("ВалютаПечати");
		ргКат = глРасшифровка.Получить("ргКат");
		ВыбФирма = глРасшифровка.Получить("ВыбФирма");
		ВидСправочника = глРасшифровка.Получить("ВидСправочника");
		НачДата = глРасшифровка.Получить("НачДата");
		КонДата = глРасшифровка.Получить("КонДата");
		
		фСхема   	=  глРасшифровка.Получить("фСхема"); //--- УМК Сандомирский В.Ю,. (запоминать значение флажка Схемы вмесчто цен)	05.04.14
		ДатаОтчета 	=  глРасшифровка.Получить("ДатаОтчета"); //--- УМК Сандомирский В.Ю, 28.05.14
			
		СписС = СоздатьОбъект("СписокЗначений");
		Для Инд = 1 По списДоп.РазмерСписка() Цикл
			Если списДоп.Пометка(Инд) = 1 Тогда
				СписС.ДобавитьЗначение(списДоп.ПолучитьЗначение(Инд));
			КонецЕсли;		
		КонецЦикла;		
		СписС = глРасшифровка.Получить("списДоп");
		Для Инд = 1 По СписС.РазмерСписка() Цикл
			Поз = списДоп.НайтиЗначение(СписС.ПолучитьЗначение(Инд));
			Если Поз <> 0 Тогда
			    списДоп.Пометка(Поз, 1);
			КонецЕсли;
		КонецЦикла;

		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Печать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		// проверим ещё раз реквизиты справочника. Могла быть сохранённая настройка
		Инд = 1;
		Пока Метаданные.Справочник("ТМЦ").Реквизит(Инд).Выбран() = 1 Цикл
			ИмяРекв = Метаданные.Справочник("ТМЦ").Реквизит(Инд).Идентификатор;
			Синоним = Метаданные.Справочник("ТМЦ").Реквизит(Инд).Синоним;
			
			Если списДоп.НайтиЗначение(ИмяРекв) = 0 Тогда
				списДоп.ДобавитьЗначение(ИмяРекв, Синоним);
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		списДоп.СортироватьПоПредставлению();
		
		Обновить = 0;
		Если ПустоеЗначение(Форма.Параметр) = 1 Тогда		
			ВидСправочника = "Прайс_лист";
		Иначе
			Если ТипЗначенияСтр(Форма.Параметр) = "СписокЗначений" Тогда
				МФНоменклатура.УдалитьВсе();
			    ВидСправочника = СокрЛП(Форма.Параметр.Получить("Вид"));
				Если ПустоеЗначение(Форма.Параметр.Получить("Родитель")) = 0 Тогда
				    МФНоменклатура.ДобавитьЗначение(Форма.Параметр.Получить("Родитель"));
				КонецЕсли;
			Иначе
				ВидСправочника = СокрЛП(Форма.Параметр);
			КонецЕсли;
			
		КонецЕсли;                           
	
		ВыбФирма = глВосстановитьЗначение(,"БазФирма");
		
		Если Нрег(ВидСправочника) = "прайс_лист" Тогда
			Форма.ПозицииТекст.Заголовок("Позиции и группы прайс-листа:");
			ЗаголовокТаблицы = "Прайс-лист";
			Форма.Заголовок("Печать прайс-листа");
	
		ИначеЕсли Нрег(ВидСправочника) = "тмц" Тогда
			Форма.ПозицииТекст.Заголовок("Позиции и группы номенклатуры:");
			ЗаголовокТаблицы = "Каталог товаров";
			Форма.Заголовок("Печать каталога товаров");
	
		Иначе
			Предупреждение("Обработка вызвана с неверным параметром.");
			СтатусВозврата(0);
			Возврат;
	
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры
	
// ===============================
Процедура ОбработкаПодбора(Значение)  // Предопределенная процедура
	Перем ПредставлениеЗначения;
	
	Если (ВРег(Значение.Вид())=СправочникПодбора) И (СписокПодбора.НайтиЗначение(Значение)=0) Тогда
		ПредставлениеЗначения = Строка(Значение);
		Если СправочникПодбора="ПРАЙС_ЛИСТ" Тогда
			Если (Значение.ЭтоГруппа()=0) И (Значение.Товар.Выбран()=1) Тогда
				ПредставлениеЗначения = Строка(Значение.Товар);
			КонецЕсли;	
		КонецЕсли;	
		СписокПодбора.ДобавитьЗначение(Значение,ПредставлениеЗначения);
		СписокПодбора.ТекущаяСтрока(СписокПодбора.РазмерСписка());
	КонецЕсли;
КонецПроцедуры  // ОбработкаПодбора
              
//====================================================================== //--- УМК Сандомирский В.Ю, (02.04.14)
Процедура ОчиститьПомеченныеКатегорииЦен()
	НомерСтроки =  МФКатЦены.РазмерСписка(); 

	Пока НомерСтроки <> 0 Цикл
		стр = "";
		ТекЗначение = МФКатЦены.ПолучитьЗначение(НомерСтроки, стр);
		Если ТекЗначение.ПометкаУдаления() = 1 Тогда
			МФКатЦены.УдалитьЗначение(НомерСтроки);
		КонецЕсли;	
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла; 
	
КонецПроцедуры // ОчиститьПомеченныеКатегорииЦен


// ===============================
// ТЕЛО МОДУЛЯ
// ===============================

ЕдиницаПечати.УдалитьВсе();
ЕдиницаПечати.ДобавитьЗначение("по умолчанию");		//	1
ЕдиницаПечати.ДобавитьЗначение("базовая");			//	2	
ЕдиницаПечати.ДобавитьЗначение("задания цен");      //	3
ЕдиницаПечати.ТекущаяСтрока(1); 
                           
МФКатЦены.УдалитьВсе(); 
ВсеЦены = СоздатьОбъект("Справочник.КатегорииЦен");
ВсеЦены.ВыбратьЭлементы();
Пока ВсеЦены.ПолучитьЭлемент()>0 Цикл
	МФКатЦены.ДобавитьЗначение(ВсеЦены.ТекущийЭлемент());      
КонецЦикла;	

СпрКат = СоздатьОбъект("Справочник.ВидыКатегорий");
СпрКат.НайтиПоНаименованию("Категории файлов");
СпрКат.ИспользоватьРодителя(СпрКат.ТекущийЭлемент());

СписКат = СоздатьОбъект("СписокЗначений");
СпрКат.ВыбратьЭлементы();
Пока СпрКат.ПолучитьЭлемент() = 1 Цикл
	Если СпрКат.ПометкаУдаления() = 0 Тогда
		СписКат.ДобавитьЗначение(СпрКат.ТекущийЭлемент());
	КонецЕсли;
КонецЦикла;
ргКат = 1;

Инд = 1;
Пока Метаданные.Справочник("ТМЦ").Реквизит(Инд).Выбран() = 1 Цикл
	ИмяРекв = Метаданные.Справочник("ТМЦ").Реквизит(Инд).Идентификатор;
	Синоним = Метаданные.Справочник("ТМЦ").Реквизит(Инд).Синоним;
	
	списДоп.ДобавитьЗначение(ИмяРекв, Синоним);
	Инд = Инд + 1;		
КонецЦикла;
списДоп.СортироватьПоПредставлению();
СписРеквизитовЭтикетки = "УсловияХранения,УсловияХраненияВП,УсловияХраненияВС,УсловияХраненияВЦ,УсловияХраненияГ,ОписаниеЭ,НаименованиеЭ,ВидЭ,";

Коды = Константа.КодыУсловийХранения;
	
Поз = Найти(Коды, ";");
тОбщие = Лев(Коды, Поз - 1);
Коды = Сред(Коды, Поз + 1);
Поз = Найти(Коды, ";");
ВакЦелый = Лев(Коды, Поз - 1);
Коды = Сред(Коды, Поз + 1);
Поз = Найти(Коды, ";");
тВакПорц = Лев(Коды, Поз - 1);
Коды = Сред(Коды, Поз + 1);
Поз = Найти(Коды, ";");
тВакСерв = Лев(Коды, Поз - 1);
тГаз = СокрЛП(Сред(Коды, Поз + 1));
