Перем СписСоответствий;
Перем ТЗВариантов;
Перем Эксель;
Перем СписТовар;
Перем ТолькоИзДокОсталось;

Процедура ЗакрытьЭксель()
	Попытка
		Эксель.ActiveWorkbook.Close(0);
		Эксель.Close();
	Исключение		
	КонецПопытки;
КонецПроцедуры //

//======================================================================
Функция ОткрытьЭксель()
	Если СокрЛП(Файл) = "" Тогда
		Предупреждение("Не выбран файл");
		Возврат "";
	КонецЕсли;

	Если Эксель = "" Тогда
		Попытка 
	        Эксель = СоздатьОбъект("Excel.Application");
	    Исключение       
	        Предупреждение("MS Excel не загружен !");
			Возврат "";
		КонецПопытки;
	Иначе
		ЗакрытьЭксель();
	КонецЕсли;	
	
	Книга = Эксель.Workbooks; 
	Книга.Open(СокрЛП(Файл));
	Если СокрЛП(Лист) = "" Тогда
		Лст = Эксель.Worksheets(1);
	Иначе
		Лст = Эксель.Worksheets(СокрЛП(Лист));
	КонецЕсли;   
	
	Лст.Activate();
	Эксель.Visible = 1;
	
	Возврат Лст;	
КонецФункции// 


//*******************************************
Процедура Сформировать()
	Если (КолТМЦ = 0) ИЛИ (КолЦена = 0) ИЛИ ((КолКво = 0) И (ДляИмпортаЦен = 0)) Тогда
		Предупреждение("Не указана одна из колонок");
		Возврат;
	КонецЕсли;

	Лст = ОткрытьЭксель();
	Если Лст = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТЗ.КоличествоСтрок() > 0 Тогда
		Если Вопрос("Удалить строки?", "Да+Нет") = "Да" Тогда
			ТЗ.УдалитьСтроки();	
			ТЗВариантов.УдалитьСтроки();
		КонецЕсли;
	КонецЕсли;
	
	Инд = НачальнаяСтрока;
	СпрЕд = СоздатьОбъект("Справочник.КлассификаторЕдИзм");
	
	СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
	ЕстьНенайденные = 0;
	ПустыхСтрок = ?(ПустыхСтрок = 0, 1, ПустыхСтрок);
	КвоПустых = 0;
	Если ПустоеЗначение(ШаблонТМЦ) = 0 Тогда
		СпрТМЦ.ИспользоватьРодителя(ШаблонТМЦ.Родитель);
	КонецЕсли;
	
	Пока КвоПустых < ПустыхСтрок Цикл
		Если СокрЛП(Строка(Лст.Cells(Инд, КолТМЦ).Value)) = "" Тогда
			КвоПустых = КвоПустых + 1;
		Иначе
			КвоПустых = 0;
			ТМЦ =  СокрЛП(Лст.Cells(Инд, КолТМЦ).Value);
			Если ДляИмпортаЦен = 0 Тогда
				Кво = Число(СтрЗаменить(Лст.Cells(Инд, КолКво).Text, ",", "."));		
			КонецЕсли;
			Цена = Число(СтрЗаменить(Лст.Cells(Инд, КолЦена).Text, ",", "."));
			Если (ДляИмпортаЦен = 1) И (Цена = 0) Тогда
				Инд = Инд + Шаг;
				Продолжить;
			КонецЕсли;
			Если ТМЦ = "" Тогда
				Прервать;
			КонецЕсли;
			
			ТЗ.НоваяСтрока();
			Если ИскатьПо = 1 Тогда
				СпрТМЦ.НайтиПоНаименованию(ТМЦ, 1, 1);
			ИначеЕсли ИскатьПо = 2 Тогда
				СпрТМЦ.НайтиПоКоду(ТМЦ, 1);
			Иначе
				СпрТМЦ.НайтиПоРеквизиту("Артикул", ТМЦ, 0);
			КонецЕсли;
			
			Если ПустоеЗначение(СпрТМЦ.ТекущийЭлемент()) = 1 Тогда
				ЕстьНенайденные = 1;
			КонецЕсли;
			
			ТЗВариантов.НоваяСтрока();
			ТЗВариантов.СписокВариантов = СоздатьОбъект("ТаблицаЗначений");
			ТЗВариантов.СписокВариантов.НоваяКолонка("ТМЦ", "Справочник.ТМЦ");
			ТЗВариантов.СписокВариантов.НоваяКолонка("Приоритет", "Число", 7, 2);
			
			ТЗ.НомСтр = ТЗ.КоличествоСтрок();
			ТЗ.ТМЦ = СпрТМЦ.ТекущийЭлемент();
			ТЗ.Наименование = ТМЦ;
			ТЗ.Ед = ?(ПустоеЗначение(ТЗ.ТМЦ) = 0, ТЗ.ТМЦ.БазоваяЕдиница, ШаблонТМЦ.БазоваяЕдиница);
			ТЗ.ЕдПост = ?(КолЕд = 0, "", Лст.Cells(Инд, КолЕд).Text);
			Если (ПустоеЗначение(ТЗ.ТМЦ) = 1) И (ПустоеЗначение(ТЗ.ЕдПост) = 0) Тогда
				Если СпрЕд.НайтиПоНаименованию(СокрЛП(ТЗ.ЕдПост), 0, 0) = 1 Тогда
					ТЗ.Ед = СпрЕд.ТекущийЭлемент();
				КонецЕсли;
			КонецЕсли;
			ТЗ.Кво = Кво;
			ТЗ.Цена = Цена;
			ТЗ.ЦенаБезНДС = ЦенаБезНДС;
			ТЗ.Сумма = Кво * Цена;
			ТЗ.Путь = Файл;			
		КонецЕсли;
		
		Инд = Инд + Шаг;
	КонецЦикла;	
	
	// пройдёмся поищем не найденные ТМЦ, попробуем подобрать для них варианты	
	Если ЕстьНенайденные = 1 Тогда
		Если ДляИмпортаЦен = 1 Тогда
			Если Вопрос("Искать соответствия?", "Да+Нет") = "Нет" Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если СписСоответствий.РазмерСписка() = 0 Тогда
			СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
			Если ПустоеЗначение(ШаблонТМЦ) = 0 Тогда
				СпрТМЦ.ИспользоватьРодителя(ШаблонТМЦ.Родитель);
			КонецЕсли;
			СпрТМЦ.ВыбратьЭлементы(1);
			Пока СпрТМЦ.ПолучитьЭлемент() = 1 Цикл
				Если СпрТМЦ.ЭтоГруппа() = 0 Тогда
					СписСоответствий.ДобавитьЗначение(СпрТМЦ.ТекущийЭлемент(), СокрЛП(СпрТМЦ.Наименование));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КвоСтрок = ТЗ.КоличествоСтрок();
		ТЗ.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСтроку() = 1 Цикл
			ТЗВариантов.ПолучитьСтрокуПоНомеру(ТЗ.НомерСтроки);
			Если ПустоеЗначение(ТЗ.ТМЦ) = 1 Тогда
				Состояние("Строка: " + ТЗ.НомерСтроки + " из " + КвоСтрок);				
				Для ИдСоотв = 1 По СписСоответствий.РазмерСписка() Цикл
					НайденоНесоответствий = 0;
					Наим = СокрЛП(СписСоответствий.ПолучитьЗначение(ИдСоотв).Наименование);
					ДлинаА = СтрДлина(ТЗ.Наименование);
					ДлинаБ = СтрДлина(Наим);
					
					Для Инд = 1 По Макс(ДлинаА, ДлинаБ) Цикл
						СимволА = ?(Инд <= ДлинаА, Сред(ТЗ.Наименование, Инд, 1), " ");
						СимволБ = ?(Инд <= ДлинаБ, Сред(Наим, Инд, 1), " ");
						Если СимволА <> СимволБ Тогда
							НайденоНесоответствий = НайденоНесоответствий + 1;
							Если (НайденоНесоответствий / Макс(ДлинаА, ДлинаБ)) * 100 > ПроцентСовпадения Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;						
					КонецЦикла;
					
					Если (НайденоНесоответствий / Макс(ДлинаА, ДлинаБ)) * 100 <= ПроцентСовпадения Тогда
						ТЗВариантов.СписокВариантов.НоваяСтрока();
						ТЗВариантов.СписокВариантов.ТМЦ = СписСоответствий.ПолучитьЗначение(ИДСоотв);
						ТЗВариантов.СписокВариантов.Приоритет = (НайденоНесоответствий / Макс(ДлинаА, ДлинаБ)) * 100;						
					КонецЕсли;
				КонецЦикла;
				
				ТЗВариантов.СписокВариантов.Сортировать("Приоритет");
				Если ТЗВариантов.СписокВариантов.КоличествоСтрок() > 0 Тогда
					ТЗ.ТМЦ = ТЗВариантов.СписокВариантов.ПолучитьЗначение(1, "ТМЦ");
					ТЗ.Ед = ?(ПустоеЗначение(ТЗ.ТМЦ) = 0, ТЗ.ТМЦ.БазоваяЕдиница, ШаблонТМЦ.БазоваяЕдиница);
					ТЗ.Процент = ТЗВариантов.СписокВариантов.ПолучитьЗначение(1, "Приоритет");
				КонецЕсли;
				ТЗ.Вариантов = ?(ТЗВариантов.СписокВариантов.КоличествоСтрок() > 1, ТЗВариантов.СписокВариантов.КоличествоСтрок(), 0);
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
	//ТЗ.ВыбратьСтроку();	
КонецПроцедуры

//======================================================================
Процедура ПередатьВДок()
	Если (СписТовар.РазмерСписка() > 0) И (ТолькоИзДокОсталось = 0) Тогда
		Если Вопрос("Вы открыли обработку в режиме ""Только товары из документа"", но не провели очистку после импорта. Действительно передать в документ?", "Да+Нет") = "Нет" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СписТовар.РазмерСписка() > 0 Тогда
		ТЗ.НоваяКолонка("ТолькоИзДок");
	КонецЕсли;
	Форма.ВыполнитьВыбор(ТЗ);
	Форма.Закрыть();	
КонецПроцедуры // 

//======================================================================
Процедура ИзмТекШаблон()
	НачальнаяСтрока = ТекШаблон.НачальнаяСтрока;
	Шаг = ТекШаблон.Шаг;
	КолТМЦ = ТекШаблон.КолТМЦ;
	КолЦена = ТекШаблон.КолЦена;
	КолКво = ТекШаблон.КолКво;
	ИскатьПо = ТекШаблон.ИскатьПо;
	ЦенаБезНДС = ТекШаблон.ЦенаБезНДС;
	ПроцентСовпадения = ТекШаблон.ПроцентСовпадения;
	ШаблонТМЦ = ТекШаблон.ШаблонТМЦ;
	ДляИмпортаЦен = ТекШаблон.ДляИмпортаЦен;
	Файл = ТекШаблон.Файл; 
	Лист = ТекШаблон.Лист;
	ПустыхСтрок = ТекШаблон.ПустыхСтрок;	
	ЗаполнятьСразу = ТекШаблон.ЗаполнятьСразу;
	КолЕд = ТекШаблон.КолЕд;
КонецПроцедуры // 

//======================================================================
Процедура ПриОткрытии()
	СписТовар = СоздатьОбъект("СписокЗначений");
	Если ТипЗначенияСтр(Форма.Параметр) = "Справочник" Тогда
		ТекШаблон = Форма.Параметр;
		ИзмТекШаблон();		
		Форма.кнЗаписать.Доступность(1);
	ИначеЕсли ТипЗначенияСтр(Форма.Параметр) = "СписокЗначений" Тогда
		ТекШаблон = Форма.Параметр.Получить("Шаблон");
		СписТовар = Форма.Параметр.Получить("Товары"); 
		Форма.кТолькоИзДок.Видимость(1);
	КонецЕсли;
КонецПроцедуры // ПриОткрытии

//======================================================================
Процедура ИзмСтрока()
	ТекСтр = ТЗ.ТекущаяСтрока();
	ТекКол = ТЗ.ТекущаяКолонка();
	
	Если ТекСтр <> 0 Тогда
		Зн = ТЗ.ПолучитьЗначение(ТекСтр, ТекКол);
		
		Если (ТекКол = "Кво") ИЛИ (ТекКол = "Цена") Тогда			
			Если ВвестиЧисло(Зн, "Введите " + ТекКол, 15, ?(ТекКол = "Кво", 3, 5)) = 1 Тогда
				ТЗ.УстановитьЗначение(ТекСтр, ТекКол, Зн);
				ТЗ.УстановитьЗначение(ТекСтр, "Сумма", ТЗ.ПолучитьЗначение("Кво") + ТЗ.ПолучитьЗначение("Цена"));
			КонецЕсли;
		ИначеЕсли ТекКол = "ТМЦ" Тогда
			СписокПредложений = СоздатьОбъект("СписокЗначений");
			СписокПредложений.ДобавитьЗначение("Выбрать из справочника");
			ТЗВариантов.ПолучитьСтрокуПоНомеру(ТекСтр);
			ТЗВариантов.СписокВариантов.ВыбратьСтроки();
			Пока ТЗВариантов.СписокВариантов.ПолучитьСтроку() = 1 Цикл
				СписокПредложений.ДобавитьЗначение(ТЗВариантов.СписокВариантов.ТМЦ, Строка(ТЗВариантов.СписокВариантов.ТМЦ) + " - " + 
					Строка(ТЗВариантов.СписокВариантов.Приоритет) + "%");
			КонецЦикла;
				
			Если СписокПредложений.РазмерСписка() > 1 Тогда
				ЗнВыбора = ""; Поз = 1;
				Если СписокПредложений.ВыбратьЗначение(ЗнВыбора,,Поз,,2) = 1 Тогда
					Если ЗнВыбора <> "Выбрать из справочника" Тогда
						ТЗ.УстановитьЗначение(ТекСтр, ТекКол, ЗнВыбора);
						ТЗ.УстановитьЗначение(ТекСтр, "Процент", ТЗВариантов.СписокВариантов.ПолучитьЗначение(Поз-1, "Приоритет"));
						ТЗ.УстановитьЗначение(ТекСтр, "Ед", ЗнВыбора.БазоваяЕдиница);
						Возврат;
					КонецЕсли;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
			глВыборИзЗаказа = ШаблонТМЦ.Родитель;
			Если СпрТМЦ.Выбрать("Выберите новое ТМЦ", "ДляВыбора") = 1 Тогда
				ТЗ.УстановитьЗначение(ТекСтр, ТекКол, СпрТМЦ.ТекущийЭлемент());
				ТЗ.УстановитьЗначение(ТекСтр, "Ед", СпрТМЦ.БазоваяЕдиница);
			КонецЕсли;
		ИначеЕсли ТекКол = "Ед" Тогда
			СпрЕд = СоздатьОбъект("Справочник.КлассификаторЕдИзм");			
			Если СпрЕд.Выбрать("Выберите новую единицу", "ФормаСписка") = 1 Тогда
				ТЗ.УстановитьЗначение(ТекСтр, ТекКол, СпрЕд.ТекущийЭлемент());
			КонецЕсли;			
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры // 

Процедура ОчититьТМЦ()
	
	ТекСтр = ТЗ.ТекущаяСтрока();
	ТекКол = ТЗ.ТекущаяКолонка();
	
	Если ТекСтр <> 0 Тогда
		Если ТекКол = "ТМЦ" Тогда
			ТЗ.УстановитьЗначение(ТекСтр, ТекКол, "");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//======================================================================
Процедура ПриНачалеВыбораЗначения(Идент, Флаг)
	Если Идент = "Файл" Тогда
		Путь = СокрЛП(Файл);
		Если ФС.ВыбратьФайл(0, Файл, Путь, "Выберите файл для импорта",,"*.xls",) = 1 Тогда
			Файл = Путь + Файл;
			ОткрытьЭксель();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //  =

//====================КОПИРОВАНИЕ ПОДЧИНЕННЫХ СПРАВОЧНИКОВ==============

Процедура КопироватьСкладыСписания(ТекСпр, ОбъектКопирования, Проверять = 0)
	СпрМат = СоздатьОбъект("Справочник.СкладыСписанияДляПродукцииИМатериалов");
	СпрМат2 = СоздатьОбъект("Справочник.СкладыСписанияДляПродукцииИМатериалов");
	СпрМат.ИспользоватьВладельца(ОбъектКопирования);
	СпрМат2.ИспользоватьВладельца(ТекСпр);
	СпрМат.ВыбратьЭлементы();
	Пока СпрМат.ПолучитьЭлемент() = 1 Цикл
		Если СпрМат.ПометкаУдаления() = 0 Тогда
			Если Проверять = 1 Тогда
				Если СпрМат2.НайтиПоРеквизиту("Материал", СпрМат.Материал, 0) = 1 Тогда
					Если СпрМат2.ПометкаУдаления() = 1 Тогда
						СпрМат2.СнятьПометкуУдаления();
					КонецЕсли;
				Иначе
					СпрМат2.Новый();
				КонецЕсли;
			Иначе
				СпрМат2.Новый();
			КонецЕсли;			
			СпрМат2.Материал = СпрМат.Материал;
			СпрМат2.СкладСписания = СпрМат.СкладСписания;
			СпрМат2.Записать();
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры //

Процедура КопироватьПодчиненные(ТекСпр, Знач ОбъектКопирования)
	// Добавлена возможность копирования подчиненных справочников при вводе копированием
	Если Вопрос("Копировать для " + Строка(ТекСпр) + " подчиненные справочники из шаблона?","Да+Нет",0)="Нет"  Тогда
		Возврат;
	КонецЕсли;
	НачатьТранзакцию();
	СпрКомпл=СоздатьОбъект("Справочник.Комплектация");
	СпрКомпл2=СоздатьОбъект("Справочник.Комплектация");
	СпрЕд=СоздатьОбъект("Справочник.Единицы");
	СпрЕд2=СоздатьОбъект("Справочник.Единицы");
	СпрКат=СоздатьОбъект("Справочник.КатегорииТоваров");
	СпрКат2=СоздатьОбъект("Справочник.КатегорииТоваров");
	СпрКонтр=СоздатьОбъект("Справочник.КонтрагентыПродукции");
	СпрКонтр2=СоздатьОбъект("Справочник.КонтрагентыПродукции");
	СпрЦ = СоздатьОбъект("Справочник.Цены");
	СпрЦ2 = СоздатьОбъект("Справочник.Цены");
	
	
	//Копируем раскладки, аналоги, пропорции разделки
	СпрКомпл.ИспользоватьВладельца(ОбъектКопирования);
	СпрКомпл2.ИспользоватьВладельца(ТекСпр);
	СпрКомпл.ВыбратьЭлементы();
	Пока СпрКомпл.ПолучитьЭлемент() = 1 Цикл
		Если СпрКомпл.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если СпрКомпл.ЭтоГруппа()=0 Тогда
			СпрКомпл2.Новый();
			СпрКомпл2.Товар=СпрКомпл.Товар;
			СпрКомпл2.Наименование=СпрКомпл.Наименование;
			СпрКомпл2.Кво=СпрКомпл.Кво;
			СпрКомпл2.УстановитьНовыйКод();
			СпрКомпл2.Записать();
		КонецЕсли;	
	КонецЦикла;
	
	//Копируем единицы измерения
	СпрЕд.ИспользоватьВладельца(ОбъектКопирования);
	СпрЕд2.ИспользоватьВладельца(ТекСпр);
	СпрЕд.ВыбратьЭлементы();
	Пока СпрЕд.ПолучитьЭлемент()=1 Цикл
		Если СпрЕд.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если СпрЕд.Единица = ТекСпр.БазоваяЕдиница Тогда
			Продолжить;
		КонецЕсли;
		СпрЕд2.Новый();
		СпрЕд2.Вес=СпрЕд.Вес;
		СпрЕд2.Коэффициент=СпрЕд.Коэффициент;
		СпрЕд2.Наименование=СпрЕд.Наименование;
		СпрЕд2.Единица=СпрЕд.Единица;
		СпрЕд2.Записать();
		//переопределим единицу по-умолчанию
		Если ОбъектКопирования.ЕдиницаПоУмолчанию = СпрЕд.ТекущийЭлемент() Тогда
			СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
			СпрТМЦ.НайтиЭлемент(ТекСпр);
			СпрТМЦ.ЕдиницаПоУмолчанию = СпрЕд2.ТекущийЭлемент();
			СпрТМЦ.Записать();
		КонецЕсли;
	КонецЦикла;	
	
	//Копируем категории
	СпрКат.ИспользоватьВладельца(ОбъектКопирования);
	СпрКат2.ИспользоватьВладельца(ТекСпр);
	СпрКат.ВыбратьЭлементы();
	Пока СпрКат.ПолучитьЭлемент()=1 Цикл
		Если СпрКат.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		СпрКат2.Новый();
		СпрКат2.Наименование=СпрКат.Наименование;
		СпрКат2.Категория=СпрКат.Категория;
		СпрКат2.Записать();
	КонецЦикла;
	
	//Копируем категории
	СпрКонтр.ИспользоватьВладельца(ОбъектКопирования);
	СпрКонтр2.ИспользоватьВладельца(ТекСпр);
	СпрКонтр.ВыбратьЭлементы();
	Пока СпрКонтр.ПолучитьЭлемент()=1 Цикл
		Если СпрКонтр.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		СпрКонтр2.Новый();
		СпрКонтр2.Контрагент=СпрКонтр.Контрагент;
		СпрКонтр2.Группа = СпрКонтр.Контрагент.ЭтоГруппа();
		СпрКонтр2.Записать();
	КонецЦикла;
	
	СпрЦ.ИспользоватьДату(РабочаяДата(), 1);
	СпрЦ2.ИспользоватьДату(РабочаяДата(), 1);
	
	СпрЦ.ИспользоватьВладельца(ОбъектКопирования);			
	СпрЦ.ВыбратьЭлементы();						
	Пока СпрЦ.ПолучитьЭлемент() = 1 Цикл
		Если (СпрЦ.ПометкаУдаления() = 0) И (ПустоеЗначение(СпрЦ.КатегорияЦены) = 0) Тогда
			СпрЦ2.ИспользоватьВладельца(ТекСпр);
			СпрЦ2.Новый();
			СпрЦ2.Наименование = Строка(СпрЦ.КатегорияЦены);
			СпрЦ2.Валюта = СпрЦ.Валюта;
			СпрЦ2.Единица = СпрЦ.Единица;
			СпрЦ2.КатегорияЦены = СпрЦ.КатегорияЦены;
			СпрЦ2.Наценка = СпрЦ.Наценка;
			//СпрЦ2.Цена = СпрЦ.Цена;
			СпрЦ2.СхемаЦенообразования = СпрЦ.СхемаЦенообразования;
			СпрЦ2.Владелец = ТекСпр;
			СпрЦ2.Записать();
		КонецЕсли;
	КонецЦикла;
	
	КопироватьСкладыСписания(ТекСпр, ОбъектКопирования);
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры
//==============КОНЕЦ КОПИРОВАНИЕ ПОДЧИНЕННЫХ СПРАВОЧНИКОВ==============

//======================================================================
Функция СоздатьНовоеТМЦ(Наим, Ед)
	СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
	СпрТМЦ.ИспользоватьДату(ТекущаяДата());
	ШаблонТМЦ.ИспользоватьДату(ТекущаяДата());
	
	НачатьТранзакцию();	
	СпрТМЦ.Новый();
	СпрТМЦ.Родитель = ШаблонТМЦ.Родитель;
	СпрТМЦ.Наименование = Наим;
	Для Инд = 1 По Метаданные.Справочник("ТМЦ").Реквизит() Цикл
		Рекв = Метаданные.Справочник("ТМЦ").Реквизит(Инд).Идентификатор;
		СпрТМЦ.УстановитьАтрибут(Рекв, ШаблонТМЦ.ПолучитьАтрибут(Рекв));
	КонецЦикла;
	
	СпрТМЦ.БазоваяЕдиница = Ед;
	СпрТМЦ.ПолнНаименование = Наим;
	СпрТМЦ.КодС = "";
	СпрТМЦ.ЕстьКодС = "";
	СпрТМЦ.ЕдиницаПоУмолчанию = "";
	СпрТМЦ.НаименованиеЭ = Наим;
	СпрТМЦ.Артикул = "";
	СпрТМЦ.Записать();
	
	СпрЕд = СоздатьОбъект("Справочник.Единицы");
	СпрЕд.ИспользоватьВладельца(СпрТМЦ.ТекущийЭлемент());
	СпрЕд.Новый();
	СпрЕд.Наименование = Строка(СпрТМЦ.БазоваяЕдиница);
	СпрЕд.Коэффициент = 1;
	СпрЕд.Единица = СпрТМЦ.БазоваяЕдиница;
	СпрЕд.Записать();
	
	СпрТМЦ.ЕдиницаПоУмолчанию = СпрЕд.ТекущийЭлемент();
	СпрТМЦ.Записать();	
	ЗафиксироватьТранзакцию();
	
	КопироватьПодчиненные(СпрТМЦ.ТекущийЭлемент(),ШаблонТМЦ);
	
	Возврат СпрТМЦ.ТекущийЭлемент();
КонецФункции

//======================================================================
Процедура СоздатьТМЦ()
	Если ШаблонТМЦ.Выбран() = 0 Тогда
		Предупреждение("Необходимо выбрать ТМЦ-шаблон для создания");
		Возврат;
	КонецЕсли;
	
	СпМеню = СоздатьОбъект("СписокЗначений");
	СпМеню.ДобавитьЗначение(1, "Для всех строк");
	СпМеню.ДобавитьЗначение(2, "Для текущей строки");
	Зн = 2;
	
	Если СпМеню.ВыбратьЗначение(Зн,,,,1) = 1 Тогда
		Если Зн = 1 Тогда
			ТЗ.ВыбратьСтроки();
			Пока ТЗ.ПолучитьСтроку() = 1 Цикл
				Если ПустоеЗначение(ТЗ.ТМЦ) = 1 Тогда
					ТЗ.ТМЦ = СоздатьНовоеТМЦ(ТЗ.Наименование, ТЗ.Ед);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТЗ.ТекущаяСтрока() <> 0 Тогда
			ТЗ.УстановитьЗначение(ТЗ.ТекущаяСтрока(), "ТМЦ", 
				СоздатьНовоеТМЦ(ТЗ.ПолучитьЗначение(ТЗ.ТекущаяСтрока(), "Наименование"), 
				ТЗ.ПолучитьЗначение(ТЗ.ТекущаяСтрока(), "Ед")));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // 

//======================================================================
Процедура РедактироватьТМЦ()
	Если ТЗ.ТекущаяСтрока() <> 0 Тогда
		ТекТМЦ = ТЗ.ПолучитьЗначение(ТЗ.ТекущаяСтрока(), "ТМЦ");
		Если ПустоеЗначение(ТекТМЦ) = 0 Тогда
			ОткрытьФормуМодально(ТекТМЦ);
			СпрТМЦ = СоздатьОбъект("Справочник.ТМЦ");
			СпрТМЦ.НайтиЭлемент(ТекТМЦ);
			ТЗ.УстановитьЗначение(ТЗ.ТекущаяСтрока(), "ТМЦ", СпрТМЦ.ТекущийЭлемент());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // 

//======================================================================
Процедура ПриЗакрытии()
	ЗакрытьЭксель();
КонецПроцедуры // ПриЗакрытии

//======================================================================
Процедура УдалитьСтроку()
	Если ТЗ.ТекущаяСтрока() <> 0 Тогда
		ТЗ.УдалитьСтроку(ТЗ.ТекущаяСтрока());
	КонецЕсли;
КонецПроцедуры // 

//======================================================================
Процедура ЗаписатьВШаблон(СоздаватьНовый = 0)
	СпрШ = СоздатьОбъект("Справочник.ШаблоныИмпортаДокументовПоставщика");
	Если (ПустоеЗначение(ТекШаблон) = 0) И (СоздаватьНовый = 0) Тогда
		Отв = Вопрос("Записать текущие параметры в шаблон импорта: " + Строка(ТекШаблон), "Да+Нет");
		СпрШ.НайтиЭлемент(ТекШаблон);
	Иначе
		Отв = Вопрос("Создать новый шаблон импорта с текущими параметрами?", "Да+Нет");
		СпрШ.Новый();
	КонецЕсли;
	
	Если Отв = "Да" Тогда
		Если (СоздаватьНовый = 1) ИЛИ (ПустоеЗначение(ТекШаблон) = 1) Тогда
			Наим = "";
			Если ВвестиСтроку(Наим, "Введите название шаблона импорта", 
				Метаданные.Справочник("ШаблоныИмпортаДокументовПоставщика").ДлинаНаименования) = 1 Тогда
				СпрШ.Наименование = Наим;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СпрШ.НачальнаяСтрока = НачальнаяСтрока;
		СпрШ.Шаг = Шаг;
		СпрШ.КолТМЦ = КолТМЦ;
		СпрШ.КолКво = КолКво;
		СпрШ.КолЦена = КолЦена;
		СпрШ.ЦенаБезНДС = ЦенаБезНДС;
		СпрШ.ИскатьПо = ИскатьПо;
		СпрШ.ДляИмпортаЦен = ДляИмпортаЦен;
		СпрШ.Лист = Лист;
		СпрШ.ПроцентСовпадения = ПроцентСовпадения;
		СпрШ.ШаблонТМЦ = ШаблонТМЦ;		
		СпрШ.КолЕд = КолЕд;
		СпрШ.Записать();
		
		ТекШаблон = СпрШ.ТекущийЭлемент();
		Форма.кнЗаписать.Доступность(1);
	КонецЕсли;
	
	
	//Если ПустоеЗначение(ТекШаблон) = 0 Тогда
	//	Если ПустоеЗначение(ШаблонТМЦ) = 1 Тогда
	//		Отв = Вопрос("Вы уверены, что хотите записать в справочник пустой шаблон ТМЦ?", "Да+Нет");
	//	Иначе
	//		Отв = Вопрос("Записать новый шаблон для добавления ТМЦ в шаблон для импорта?", "Да+Нет");
	//	КонецЕсли;
	//	
	//	Если Отв = "Нет" Тогда
	//		Возврат;
	//	КонецЕсли;
	//	СпрШ = СоздатьОбъект("Справочник.ШаблоныИмпортаДокументовПоставщика");
	//	СпрШ.НайтиЭлемент(ТекШаблон);
	//	СпрШ.ШаблонТМЦ = ШаблонТМЦ;
	//	СпрШ.Записать();
	//Иначе
	//	Предупреждение("Не выбран шаблон заполнения");
	//КонецЕсли;
КонецПроцедуры // ЗаписатьВШаблон

//======================================================================
Процедура УдалитьПустой()
	Если Вопрос("Удалить пустые строки?", "Да+Нет") = "Да" Тогда
		Инд = 1;
		Пока Инд <= ТЗ.КоличествоСтрок() Цикл
			Если ПустоеЗначение(ТЗ.ПолучитьЗначение(Инд, "ТМЦ")) = 1 Тогда
				ТЗ.УдалитьСтроку(Инд);
			Иначе
				Инд = Инд + 1;
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // УдалитьПустой()

//======================================================================
Процедура ТолькоИзДок()
	Если Вопрос("Оставить только те позиции, которые есть в документе?", "Да+Нет") = "Да" Тогда
		Инд = 1; 
		Пока Инд <= ТЗ.КоличествоСтрок() Цикл
			Если СписТовар.НайтиЗначение(ТЗ.ПолучитьЗначение(Инд, "ТМЦ")) = 0 Тогда
				ТЗ.УдалитьСтроку(Инд);
			Иначе
				Инд = Инд + 1;
			КонецЕсли;
		КонецЦикла;
		
		ТолькоИзДокОсталось = 1;		
	КонецЕсли;
КонецПроцедуры // ТолькоИзДок

ИскатьПо = 1;
Шаг = 1;
ТЗ.НоваяКолонка("НомСтр", "Число",,,"№",3);
ТЗ.НоваяКолонка("Наименование", "Строка",,,, 20);
ТЗ.НоваяКолонка("ТМЦ", "Справочник.ТМЦ",,,,20);
ТЗ.НоваяКолонка("Процент", "Число", 7, 2,,5);
ТЗ.НоваяКолонка("Вариантов", "Число", 5, 0,"Вар.",3);
ТЗ.НоваяКолонка("ЕдПост", "Строка", 10, , "Ед. пост.", 5);
ТЗ.НоваяКолонка("Ед", "Справочник.КлассификаторЕдИзм",,,,5);
ТЗ.НоваяКолонка("Кво", "Число", 15, 3, "К-во", 7);
ТЗ.НоваяКолонка("Цена", "Число", 15, 5,,7);
ТЗ.НоваяКолонка("ЦенаБезНДС", "Число",,,"без НДС",3);
ТЗ.НоваяКолонка("Сумма", "Число", 15, 2,"Сумма", 7);
ТЗ.НоваяКолонка("Путь", "Строка");
ТЗ.ВыводитьПиктограммы("ЦенаБезНДС", 0);
ТЗ.ВидимостьКолонки("СписокВариантов", 0);
ТЗ.ВидимостьКолонки("Путь", 0);

ТЗВариантов = СоздатьОбъект("ТаблицаЗначений");
ТЗВариантов.НоваяКолонка("СписокВариантов", "ТаблицаЗначений",,,, 20);

СписСоответствий = СоздатьОбъект("СписокЗначений");
Эксель = "";
ТолькоИзДокОсталось = 0;