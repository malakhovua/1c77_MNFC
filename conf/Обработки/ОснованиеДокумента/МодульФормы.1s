// ===============================
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
// ===============================

Перем КонтекстДокумента; // Переменная, в которой запоминаем контекст редактируемого документа
Перем ЕстьДокументОснование, ЕстьОснование, ЕстьДоговор;  // Флаги наличия реквизитов 
Перем ЕстьКонтрагент, ЕстьРежимОплаты;
Перем РеквизитКонтрагент, РеквизитДоговор, РеквизитДокументОснование, РежимОплаты; // Название реквизита документа
Перем СтарыйДокОснование, СтароеОснование, СтарыйДоговор;
Перем КонтрагентКонтекста;


// ===============================
// "СЛУЖЕБНЫЕ" ПРОЦЕДУРЫ И ФУНКЦИИ
// ===============================

// ===============================
Функция КонтрагентДокумента()
	Если ДокументОснование.Выбран()=1 Тогда
		Если глЕстьРеквизитШапки("Контрагент",ДокументОснование.Вид()) = Да Тогда
			Возврат ДокументОснование.Контрагент;
		КонецЕсли;
	КонецЕсли;
	Если Договор.Выбран()=1 Тогда
		Если глЕстьРеквизитШапки("Контрагент",Договор.Вид()) = Да Тогда
			Возврат Договор.Контрагент;
		КонецЕсли;
	КонецЕсли;
	Возврат КонтрагентКонтекста;
КонецФункции

// ===============================
Функция ПроверкаОснования(Конт, ДокОсн)

	ВидДок = Конт.Вид();
	СинонимДокумента = Конт.ПредставлениеВида();
	
	ВидОсн = ДокОсн.Вид();
	СинонимОснования = ДокОсн.ПредставлениеВида();

	// т.к. проверяем только исключительные ситуации, то 
	// изначально предполагаем, что выбрали правильный
	// документ основание
	Результат = Да;

	Если ВидДок="ОприходованиеИзлишков" Тогда
		Если ДокОсн.ТипИнвентаризации <> 2 Тогда
			Результат = Нет;	
			Сообщение =	"Документ """+СинонимОснования+""" только с типом инвентаризации <по складу> можно выбирать в качестве основания для документа """+СинонимДокумента+""".";
		КонецЕсли;

	ИначеЕсли ВидДок="ПриходныйКассовый" Тогда
		Если Конт.ВидОплаты=Перечисление.ВидыОплаты.Возврат Тогда
			Если ВидОсн = "РасходныйКассовый"  Тогда
				Если ДокОсн.ВидОплаты = Перечисление.ВидыОплаты.Возврат Тогда
					Результат = Нет;	
					Сообщение =	"Документ """+СинонимОснования+""" с признаком (возврат) нельзя выбирать в качестве основания для документа """+СинонимДокумента+""".";
				КонецЕсли;
			КонецЕсли;
		Иначе
			// оплата
			Если ВидОсн = "РасходныйКассовый"  Тогда
				Результат = Нет;	
				Сообщение =	"Документ """+СинонимОснования+""" нельзя выбирать в качестве основания для документа """+СинонимДокумента+""" без признака (возврат).";
			КонецЕсли;
		Конецесли;

	ИначеЕсли ВидДок="РасходныйКассовый" Тогда
		Если Конт.ВидОплаты=Перечисление.ВидыОплаты.Оплата Тогда
			Если ВидОсн = "ПриходныйКассовый" Тогда
				Результат = Нет;
				Сообщение =	"Документ """+СинонимОснования+""" нельзя выбирать в качестве основания для документа """+СинонимДокумента+""".";
			КонецЕсли;
		Иначе
			// вид оплаты - возврат
			Если ВидОсн = "ПриходныйКассовый" Тогда
				Если ДокОсн.ВидОплаты = перечисление.ВидыОплаты.Возврат Тогда
					Результат = Нет;
					Сообщение =	"Документ """+СинонимОснования+""" с признаком (возврат) нельзя выбирать в качестве основания для документа """+СинонимДокумента+""".";
				КонецЕсли;
			ИначеЕсли ВидОсн = "СчетВходящий" Тогда
				Результат = Нет;
				Сообщение =	"Документ """+СинонимОснования+""" нельзя выбирать в качестве основания для документа """+СинонимДокумента+""" с признаком (возврат).";
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидДок="СписаниеТМЦ" Тогда
		Если ДокОсн.ТипИнвентаризации <> 2 Тогда
			Результат = Нет;	
			Сообщение =	"Документ """+СинонимОснования+""" только с типом инвентаризации <по складу> можно выбирать в качестве основания для документа """+СинонимДокумента+""".";
		КонецЕсли;

	КонецЕсли;

	Если ПустоеЗначение(Сообщение) = 0 Тогда
		Предупреждение(Сообщение);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
                   
// ===============================
// сравнивает два значения
Функция НеРавны(Значение1,Значение2)
	Если ( (ПустоеЗначение(Значение1)=0) Или (ПустоеЗначение(Значение2)=0) ) И (Значение1 <> Значение2) Тогда
		Возврат 1;
	КонецЕсли;	 	
	Возврат 0;
КонецФункции
	
// ===============================
// Функция проверки изменения параметров формы в документе.
// Если изменились, спрашиваем установить ли новые значения, 
// если да, то возвращаем "Да", иначе - "Нет".
Функция Изменили()

	НеРавны = 0;
	
	Если ЕстьКонтрагент = Да Тогда
		НеРавны = ?(КонтрагентДокумента() <> КонтрагентКонтекста,1,НеРавны) ;
	КонецЕсли;
	
	Если ЕстьДоговор = Да Тогда 
		НеРавны = Макс(НеРавны,НеРавны(Договор,КонтекстДокумента.ПолучитьАтрибут(РеквизитДоговор)));
	КонецЕсли;

	Если ЕстьДокументОснование = Да Тогда 
		НеРавны = Макс(НеРавны,НеРавны(ДокументОснование,КонтекстДокумента.ПолучитьАтрибут(РеквизитДокументОснование)));
	КонецЕсли;
	
	Если ЕстьОснование = Да Тогда 
		НеРавны = Макс(НеРавны,НеРавны(Основание,КонтекстДокумента.Основание));
	КонецЕсли;
	
	Если ЕстьРежимОплаты = Да Тогда
		РежимОплаты = СписокРежимовОплаты.ПолучитьЗначение(СписокРежимовОплаты.ТекущаяСтрока());
		НеРавны = ?(РежимОплаты <> КонтекстДокумента.РежимОплаты,1,НеРавны) ;
	КонецЕсли;
	
	Возврат НеРавны;

КонецФункции

// ===============================
Функция ПолучитьДоговорОснования()
	Если ПустоеЗначение(ДокументОснование) = 1 Тогда
		Возврат 0;
	КонецЕсли;
	Если глЕстьРеквизитШапки("Договор",ДокументОснование.Вид()) = Да Тогда
		Возврат ДокументОснование.Договор;
	КонецЕсли;
	Если глЕстьРеквизитШапки("Заказ",ДокументОснование.Вид()) = Да Тогда
		Возврат ДокументОснование.Заказ;
	КонецЕсли;
	Возврат 0;
КонецФункции

// ===============================
Функция НеРавенДоговоруОснования(Договор)
	Если ПустоеЗначение(Договор) = 1 Тогда
	    Возврат 0;
	КонецЕсли;
	Если ЕстьРежимОплаты = Да Тогда
		РежимОплаты = СписокРежимовОплаты.ПолучитьЗначение(СписокРежимовОплаты.ТекущаяСтрока());
		Если (РежимОплаты = Перечисление.РежимыОплаты.ПоДоговору) 
			 	 Или (РежимОплаты = Перечисление.РежимыОплаты.АвтораспределениеПриоритетныйДоговор) 
		 		 Или (РежимОплаты = Перечисление.РежимыОплаты.Автораспределение) Тогда
			// нет документа-основания
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
    ДоговорОснования = ПолучитьДоговорОснования();
	Если ПустоеЗначение(ДоговорОснования) = 1 Тогда
	    Возврат 0;
	КонецЕсли;
	Возврат НеРавны(Договор,ДоговорОснования);
КонецФункции              

// ===============================
Функция НеРавныКонтрагенты()
	Если ПустоеЗначение(Договор) = 1 Тогда
	    Возврат 0;
	КонецЕсли;
	Если ЕстьРежимОплаты = Да Тогда
		РежимОплаты = СписокРежимовОплаты.ПолучитьЗначение(СписокРежимовОплаты.ТекущаяСтрока());
		Если (РежимОплаты = Перечисление.РежимыОплаты.ПоДоговору) 
			 	 Или (РежимОплаты = Перечисление.РежимыОплаты.АвтораспределениеПриоритетныйДоговор) 
		 		 Или (РежимОплаты = Перечисление.РежимыОплаты.Автораспределение) Тогда
			// нет документа-основания
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Если глЕстьРеквизитШапки("Контрагент",Договор.Вид()) = Нет Тогда
		Возврат 0;
	КонецЕсли;
	Если ПустоеЗначение(ДокументОснование) = 1 Тогда
	    Возврат 0;
	КонецЕсли;
	Если глЕстьРеквизитШапки("Контрагент",ДокументОснование.Вид()) = Нет Тогда
		Возврат 0;
	КонецЕсли;
	Возврат НеРавны(Договор.Контрагент,ДокументОснование.Контрагент);
КонецФункции              


// ===============================
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА
// ===============================              

// ===============================
Функция УстДоступность()
	Если ЕстьДокументОснование = Да Тогда
		Форма.кХДокументОснование.	Доступность(ДокументОснование.	Выбран());
	КонецЕсли;
	Если ЕстьДоговор = Да Тогда
		Форма.кХДоговор.			Доступность(Договор.			Выбран());
	КонецЕсли;
	Возврат "";
КонецФункции

// ===============================
Процедура ПриВыбореДоговора()

	Если ПустоеЗначение(Договор) = 1 Тогда
		СтарыйДоговор = 0;
		Возврат;
	КонецЕсли;

	Если НеРавны(Договор.Фирма,КонтекстДокумента.Фирма) = 1 Тогда	
		глКомментарий("Нельзя выбирать договор, выписаный на другую фирму!",1);
		Договор = СтарыйДоговор;
		Возврат;
	КонецЕсли;
	
	Если НеРавныКонтрагенты() = 1 Тогда	
		глКомментарий("Контрагенты договора и документа-основания не равны!",1);
		Договор = СтарыйДоговор;
		Возврат;
	КонецЕсли;
	
	Если НеРавенДоговоруОснования(Договор) = 1 Тогда
		глКомментарий("Выбран договор, отличный от договора документа-основания!",1);
	КонецЕсли;
	СтарыйДоговор = Договор;

КонецПроцедуры

// ===============================
Процедура ПриУдаленииДокОснования()

	Если (ЕстьОснование = Да) И (ПустоеЗначение(Основание) = 0) Тогда
		// преред нажатием на кнопку "Х" в реквизите Основание что-то было
		Если Вопрос("Очистить текстовое поле ""Основание""?","Да+Нет")="Да" Тогда
		    Основание = "";
		КонецЕсли;
	КонецЕсли;

	ДокументОснование  	= 0;
	СтарыйДокОснование 	= 0;
	СтароеОснование		= Основание;

КонецПроцедуры

//====================================================================== УМК Сандоммирский В.Ю. (10.09.14)
Процедура ПриУдаленииГТД()
	Если (ЕстьОснование = Да) И (ПустоеЗначение(Основание) = 0) Тогда
		// преред нажатием на кнопку "Х" в реквизите Основание что-то было
		Если Вопрос("Очистить текстовое поле ""Основание""?","Да+Нет")="Да" Тогда
		    Основание = "";
		КонецЕсли;
	КонецЕсли;
	ПриходнаяОснование  = 0;
	ДокументОснование  	= 0;
	СтарыйДокОснование 	= 0;
	СтароеОснование		= Основание;
	
КонецПроцедуры // ПриУдаленииГТД()

// ===============================
Процедура ПриВыбореДокумента()

	Если ПустоеЗначение(ДокументОснование) = 1 Тогда // не выбран док. основание
		ПриУдаленииДокОснования();
		Возврат;
	КонецЕсли;
	
	Если КонтекстДокумента.ТекущийДокумент()=ДокументОснование Тогда
		глКомментарий("Нельзя выбирать в качестве документа-основания текущий документ",1);
		ДокументОснование = СтарыйДокОснование;
		Возврат;
	КонецЕсли;
	
	Если НеРавны(ДокументОснование.Фирма,КонтекстДокумента.Фирма)=1 Тогда	
		глКомментарий("Нельзя выбирать документ-основание, выписаный на другую фирму",1);
		ДокументОснование = СтарыйДокОснование;
		Возврат;
	КонецЕсли;	

	Если ПроверкаОснования(КонтекстДокумента, ДокументОснование) = Нет Тогда
		ДокументОснование 	= СтарыйДокОснование;
		Возврат;
	КонецЕсли;	
	
	Если НеРавныКонтрагенты() = 1 Тогда	
		глКомментарий("Контрагенты договора и документа-основания не равны!",1);
		ДокументОснование 	= СтарыйДокОснование;
		Возврат;
	КонецЕсли;
	
	ВидДокОсн = ДокументОснование.Вид();

	Если ЕстьДоговор = Да Тогда
		ЗаполнитьДоговор = 1;
		Если ПустоеЗначение(Договор) = 0 Тогда              
			Если НеРавенДоговоруОснования(Договор) = 1 Тогда
				Если Вопрос("Договор выбранного документа-основания отличается от выбранного договора. 
							|Изменить выбранный договор?","Да+Нет") = "Нет" Тогда
					ЗаполнитьДоговор = 0;
				КонецЕсли;
			Иначе
				ЗаполнитьДоговор = 0;
			КонецЕсли;
		КонецЕсли;                                      
		Если ЗаполнитьДоговор = 1 Тогда
			Договор = ПолучитьДоговорОснования();
			ПриВыбореДоговора();
		КонецЕсли;
	КонецЕсли;                               
            
	Если ЕстьОснование = Да Тогда
		ЗаполнитьОснование = 1;
		Если ПустоеЗначение(Основание) = 0 Тогда
			Если Вопрос("Перезаполнить текстовое поле ""Основание""?","Да+Нет")="Нет" Тогда
				ЗаполнитьОснование = 0;
			КонецЕсли;
		КонецЕсли;
		Если ЗаполнитьОснование = 1 Тогда
			Основание = глДокументВОтчете(ДокументОснование,"с номером","с датой");
		КонецЕсли;
	КонецЕсли;
    	
	СтарыйДокОснование	= ДокументОснование;
	СтарыйДоговор 		= Договор;
	СтароеОснование		= Основание;
	
КонецПроцедуры //ПриВыбореДокумента()

// ===============================
Процедура ПриВыбореРежимаОплаты()
	
	РежимОплаты = СписокРежимовОплаты.ПолучитьЗначение(СписокРежимовОплаты.ТекущаяСтрока());
	Если (РежимОплаты = Перечисление.РежимыОплаты.ПоДоговору) 
			Или (РежимОплаты = Перечисление.РежимыОплаты.АвтораспределениеПриоритетныйДоговор) Тогда
		ДокументОснование = 0;
		ПриВыбореДокумента();
		ДоступностьДоговор 				= 1;
		ДоступностьДокументОснование 	= 0;
	ИначеЕсли РежимОплаты = Перечисление.РежимыОплаты.Автораспределение Тогда
		Договор 			= 0;
		ДокументОснование 	= 0;
		ПриВыбореДоговора();
		ПриВыбореДокумента();
		ДоступностьДоговор 				= 0;
		ДоступностьДокументОснование 	= 0;
	Иначе
		ДоступностьДоговор 				= 1;
		ДоступностьДокументОснование 	= 1;
	КонецЕсли;

	Если ЕстьДоговор = Да Тогда
		Форма.тДоговор.	Доступность(ДоступностьДоговор);
		Форма.Договор.	Доступность(ДоступностьДоговор);
	КонецЕсли;

	Если ЕстьДокументОснование = Да Тогда
		Форма.тДокументОснование.	Доступность(ДоступностьДокументОснование);
		Форма.ДокументОснование.	Доступность(ДоступностьДокументОснование);
	КонецЕсли;

КонецПроцедуры

// ===============================
// Процедура установки выбранных значений в документе
Процедура ЗаписатьИзменения()
	
	Если ЕстьКонтрагент = Да Тогда
		КонтрагентКонтекста = КонтрагентДокумента();
		КонтекстДокумента.УстановитьАтрибут(РеквизитКонтрагент,КонтрагентКонтекста);
	КонецЕсли;
	
	Если ЕстьДоговор = Да Тогда
		КонтекстДокумента.УстановитьАтрибут(РеквизитДоговор,Договор);
	КонецЕсли;
	
	Если ЕстьДокументОснование = Да Тогда
		КонтекстДокумента.УстановитьАтрибут(РеквизитДокументОснование,ДокументОснование);
	КонецЕсли;
	
	Если ЕстьОснование = Да Тогда
		КонтекстДокумента.Основание = Основание;
	КонецЕсли;
	
	Если ЕстьРежимОплаты = Да Тогда
		РежимОплаты = СписокРежимовОплаты.ПолучитьЗначение(СписокРежимовОплаты.ТекущаяСтрока());
		КонтекстДокумента.РежимОплаты = РежимОплаты;
	КонецЕсли;

КонецПроцедуры


// ===============================
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// ===============================

// ===============================
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр) // Предопределенная процедура
	Если ИдентЭлемДиалога = "Договор" Тогда
	    ФлагСтандОбр = 0;
		
		Фрм = СоздатьОбъект("СписокЗначений");
		Фрм.ДобавитьЗначение(КонтрагентКонтекста,"Контрагент");
		Фрм.ДобавитьЗначение("ДоговораКонтрагентов","ГрафаОтбора"); // значения "Договора"
		
		ОткрытьФормуМодально("Журнал.ПолныйЖурнал.ДляВыбораДоговоровИСчетов",Фрм,);

		ВыбДокумент = Фрм.Получить("Документ");
		Если ПустоеЗначение(ВыбДокумент)=1 Тогда
			Возврат;
		КонецЕсли;                     
		
		Договор = ВыбДокумент;
		ПриВыбореДоговора();

	ИначеЕсли ИдентЭлемДиалога = "ДокументОснование" Тогда
	    ФлагСтандОбр = 0;

		Фрм = СоздатьОбъект("СписокЗначений");
		Фрм.ДобавитьЗначение(КонтрагентКонтекста,"Контрагент");
		
		Если КонтекстДокумента.Вид() = "ВозвратнаяНакладная" Тогда //--- УМК Сандомирский В.Ю. (08.01.15)
			Фрм.ДобавитьЗначение("РНКонтрагентов","ГрафаОтбора"); // значения "ГТД"
		Иначе
			Фрм.ДобавитьЗначение("СчетаКонтрагентов","ГрафаОтбора"); // значения "Счета"
		КонецЕсли; //... УМК Сандомирский В.Ю. (08.01.15)
		
		ОткрытьФормуМодально("Журнал.ПолныйЖурнал.ДляВыбораДоговоровИСчетов",Фрм,);
	
		ВыбДокумент = Фрм.Получить("Документ");
		Если ПустоеЗначение(ВыбДокумент)=1 Тогда
			Возврат;
		КонецЕсли;           
		
		ДокументОснование = ВыбДокумент;
		ПриВыбореДокумента();

	ИначеЕсли ИдентЭлемДиалога = "ПриходнаяОснование" Тогда // --- УМК Сандомирский В.Ю. (10.09.14) приходную в основание
		ФлагСтандОбр = 0;

		Фрм = СоздатьОбъект("СписокЗначений");
		Фрм.ДобавитьЗначение(КонтрагентКонтекста,"Контрагент");
		
		
		Если КонтекстДокумента.Вид() = "РасходнаяНакладная" Тогда //--- УМК Сандомирский В.Ю. (28.11.14)
			Фрм.ДобавитьЗначение("ЗаказКлиентов","ГрафаОтбора"); // значения "ГТД"
		Иначе
			Если КонтекстДокумента.Валюта = Гривня Тогда  //--- УМК Сандомирский В.Ю. (27.10.14)
				Фрм.ДобавитьЗначение("ПриходныеКонтрагентов","ГрафаОтбора"); // значения "ГТД"
			Иначе
				Фрм.ДобавитьЗначение("ГТДКонтрагентов","ГрафаОтбора"); // значения "ГТД"
			КонецЕсли;	
		КонецЕсли;	
	
		ОткрытьФормуМодально("Журнал.ПолныйЖурнал.ДляВыбораДоговоровИСчетов",Фрм,);
	
		ВыбДокумент = Фрм.Получить("Документ");
		Если ПустоеЗначение(ВыбДокумент)=1 Тогда
			Возврат;
		КонецЕсли;           
		
		ПриходнаяОснование 	= ВыбДокумент;
		ДокументОснование 	= ВыбДокумент;  	// --- УМК Сандомирский В.Ю. (10.09.14) приходную в основание
		ПриВыбореДокумента();
		
		
	КонецЕсли;

КонецПроцедуры

// ===============================
Процедура ПриОткрытии()  // Предопределенная процедура
	// Запоминаем параметр (Обработка всегда должна вызываться с параметром)
	КонтекстДокумента = Форма.Параметр;

	Если ТипЗначенияСтр(КонтекстДокумента) <> "ГрупповойКонтекст" Тогда
		Предупреждение("Обработка вызывается только из формы документов!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если ТипЗначенияСтр(глРасшифровка) = "СписокЗначений" Тогда
		РеквизитКонтрагент 			= глРасшифровка.Получить("Контрагент");
		РеквизитДоговор 			= глРасшифровка.Получить("Договор");
		РеквизитДокументОснование 	= глРасшифровка.Получить("ДокументОснование");
	КонецЕсли;
	
	Если ПустоеЗначение(РеквизитКонтрагент)=1 Тогда
	    РеквизитКонтрагент = "Контрагент";
	КонецЕсли;
	Если ПустоеЗначение(РеквизитДоговор)=1 Тогда
	    РеквизитДоговор = "Договор";
	КонецЕсли;
	Если ПустоеЗначение(РеквизитДокументОснование)=1 Тогда
	    РеквизитДокументОснование = "ДокументОснование";
	КонецЕсли;
	
	ВидКонтекста = КонтекстДокумента.Вид();
	ЕстьКонтрагент 			= глЕстьРеквизитШапки(РеквизитКонтрагент, 		 ВидКонтекста);
	ЕстьДокументОснование 	= глЕстьРеквизитШапки(РеквизитДокументОснование, ВидКонтекста);
	ЕстьДоговор 			= глЕстьРеквизитШапки(РеквизитДоговор, 			 ВидКонтекста);
	ЕстьОснование 			= глЕстьРеквизитШапки("Основание", 				 ВидКонтекста);
	ЕстьРежимОплаты 		= глЕстьРеквизитШапки("РежимОплаты", 			 ВидКонтекста);

	// Инициализируем текущие значения           
	Если ЕстьКонтрагент = Да Тогда
		КонтрагентКонтекста = КонтекстДокумента.ПолучитьАтрибут(РеквизитКонтрагент);
	Иначе
		КонтрагентКонтекста = 0;
	КонецЕсли;
	
	Если ЕстьОснование = Да Тогда
		Основание = КонтекстДокумента.Основание;
		Видимость = 1;
	Иначе
		Видимость = 0;
	КонецЕсли;	
	Форма.Основание. Видимость(Видимость);
	Форма.тОснование.Видимость(Видимость);

	Если ЕстьДокументОснование = Да Тогда
		ДокументОснование = КонтекстДокумента.ПолучитьАтрибут(РеквизитДокументОснование);
		
		Если (ДокументОснование.Вид() = "ПриходнаяНакладнаяГТД") 
			ИЛИ (ДокументОснование.Вид() = "ПриходнаяНакладнаяЗапасы") Тогда //--- УМК Сандомирский В.Ю. (27.10.14)
			ПриходнаяОснование = ДокументОснование;
		КонецЕсли;
		
		Видимость = 1;
	Иначе
		Видимость = 0;
	КонецЕсли;
	Форма.ДокументОснование.	Видимость(Видимость);
	Форма.тДокументОснование.	Видимость(Видимость);
	Форма.кХдокументОснование.	Видимость(Видимость);

	Если ЕстьДоговор = Да Тогда
		Договор = КонтекстДокумента.ПолучитьАтрибут(РеквизитДоговор);
		Видимость = 1;
	Иначе
		Видимость = 0;
	КонецЕсли;
	Форма.Договор.  Видимость(Видимость);
	Форма.тДоговор. Видимость(Видимость);
	Форма.кХдоговор.Видимость(Видимость);

	Если ЕстьРежимОплаты = Да Тогда

		// заполняем список режимов оплаты
		Для Инд = 1 По Перечисление.РежимыОплаты.КоличествоЗначений() Цикл
			Режим = Перечисление.РежимыОплаты.ЗначениеПоНомеру(Инд);
			СписокРежимовОплаты.ДобавитьЗначение(Режим, глСтрокаРежимОплаты(КонтекстДокумента, Режим));
		КонецЦикла;
		
		// установим список в нужную позицию
		Если ПустоеЗначение(КонтекстДокумента.РежимОплаты) = 1 Тогда
			// если в документе режим оплаты не задан, то считается,
			// что он равен Перечисление.РежимыОплаты.ПоДоговору
			РежимОплаты = Перечисление.РежимыОплаты.ПоДоговору;
		Иначе
			РежимОплаты = КонтекстДокумента.РежимОплаты;
		КонецЕсли;
		
		Позиция = СписокРежимовОплаты.НайтиЗначение(РежимОплаты);
		СписокРежимовОплаты.ТекущаяСтрока(Позиция);
		ПриВыбореРежимаОплаты();
		
		Видимость = 1; 
	Иначе
		Видимость = 0;
	КонецЕсли;
	Форма.СписокРежимовОплаты.Видимость(Видимость);
	Форма.тРежимОплаты.		  Видимость(Видимость);
	
	// Меняем заголовок формы
	Форма.Заголовок("Задание основания документа "+ глДокументВОтчете(КонтекстДокумента,"с номером","с датой"));
	//Инструменталиная линейка не нужна
	Форма.ПанельИнструментов(0);
	
	// будем отслеживать только реальные изменения этих реквизитов
	Форма.ДокументОснование.  ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Договор.			  ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СписокРежимовОплаты.ВыполнятьФормулуТолькоПриИзменении(1);
	
	СтарыйДокОснование 	= ДокументОснование;
	СтарыйДоговор	 	= Договор;
	СтароеОснование 	= Основание;
	
	Если ВидКонтекста = "РасходнаяНакладная" Тогда //--- УМК Сандомирский В.Ю. (28.11.14)
		
		Форма.тДокументПриходная.Видимость(0);
		Форма.тДокументГТД.Видимость(0);
		Форма.тДокументЗаказ.Видимость(1); 
	ИначеЕсли ВидКонтекста = "УМК_ЗаказКлиента" Тогда //--- УМК Сандомирский В.Ю. (28.11.14)		
		Форма.тДокументПриходная.Видимость(0);
		Форма.тДокументГТД.Видимость(0);
		Форма.тДокументЗаказ.Видимость(0); 		
		Форма.ПриходнаяОснование.Видимость(0);
	Иначе
		Попытка
			Если КонтекстДокумента.Валюта = Гривня Тогда  //--- УМК Сандомирский В.Ю. (27.10.14)
				Форма.тДокументПриходная.Видимость(1);
				Форма.тДокументГТД.Видимость(0);
				Форма.тДокументЗаказ.Видимость(0); //--- УМК Сандомирский В.Ю. (28.11.14)
			Иначе
				Форма.тДокументПриходная.Видимость(0);
				Форма.тДокументГТД.Видимость(1);	
				Форма.тДокументЗаказ.Видимость(0); //--- УМК Сандомирский В.Ю. (28.11.14)
			КонецЕсли; //... УМК Сандомирский В.Ю. (27.10.14)
		Исключение			
		КонецПопытки;		
	КонецЕсли;
		
		
КонецПроцедуры

// ===============================
Процедура ПриЗакрытии() // Предопределенная процедура
	// Если нужно записать изменения: спрашиваем и записываем
	Если Изменили() = 1 Тогда
		Если Вопрос("Сохранить изменения?", "Да+Нет") = "Да" Тогда
			ЗаписатьИзменения();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


